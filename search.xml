<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux htop 详解</title>
    <url>/2021/01/25/Linux_htop/</url>
    <content><![CDATA[<p>之前在学校实验室工作的时候，接触的第一个命令就是htop。之前就是觉得这个花花绿绿的界面很有趣（牛逼），如下图，常常在女朋友面前故作牛逼的打开（<em>实际就看看我的程序在不在跑，虚伪的不行🤪</em>）</p>
<p><img src="https://pic1.zhimg.com/v2-317c74bdfc0734f88813c5fe532d3220_b.png" alt="img"></p>
<p>为了以后装逼更有资本，我觉得得仔细弄清楚这些值到底是干什么的</p>
<p>本篇文章参考</p>
<p>Understanding Output of htop Command - Linux Togetherlinuxtogether.org</p>
<h3 id="htop是top的升级版-允许用户监视系统上运行的进程及其完整的命令行"><a href="#htop是top的升级版-允许用户监视系统上运行的进程及其完整的命令行" class="headerlink" title="htop是top的升级版,允许用户监视系统上运行的进程及其完整的命令行"></a>htop是top的升级版,允许用户监视系统上运行的进程及其完整的命令行</h3><ol>
<li>系统不会自带，若是Ubuntu，sudo apt, 若是Centos， yum 可以安装。根据不过系统来进行安装</li>
<li>支持用户交互，可以通过鼠标来kill进程而不用通过输入其PID，支持用鼠标上下拖动，且不同的颜色代表不同的意思。</li>
<li>允许用户根据CPU，内存和时间间隔对进程进行排序</li>
</ol>
<h3 id="htop-的安装"><a href="#htop-的安装" class="headerlink" title="htop 的安装"></a>htop 的安装</h3><p>Ubuntu 安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install htop</span><br></pre></td></tr></table></figure>
<p>CentOS 安装</p>
<p><a class="link"   href="http://www.vue5.com/centos/23046.htmlwww.vue5.com" >http://www.vue5.com/centos/23046.htmlwww.vue5.com<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>基本的概念</strong></p>
<p>tasks/process 进程， thread 线程相关的知识可以从下面的链接学习</p>
<p><a class="link"   href="https://www.zhihu.com/question/307100151/answer/894486042" >如何理解：程序、进程、线程、并发、并行、高并发？<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/125716637" >宇宙之一粟：为什么校招面试中“线程与进程的区别”老是被问到?我该如何回答？<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.geeksforgeeks.org/difference-between-process-and-thread/" >Difference between Process and Thread - GeeksforGeeks<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/82746153" >什么是虚拟内存(Virtual Memory)?<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://pic2.zhimg.com/v2-f876d2e42e8d5e1110f22f7198fcc591_b.png" alt="img"></p>
<h3 id="红色边框"><a href="#红色边框" class="headerlink" title="红色边框"></a>红色边框</h3><p><em>数字1，2，3，4分别代表CPU处理器/核，上图是一个四核的处理器</em></p>
<h3 id="灰色边框（progress-bar）"><a href="#灰色边框（progress-bar）" class="headerlink" title="灰色边框（progress bar）"></a>灰色边框（progress bar）</h3><p><em>每一个CPU的总用量情况，注意这条上面会有不同的颜色：</em></p>
<ol>
<li>蓝色：显示低优先级(low priority)进程使用的CPU百分比。 </li>
<li>绿色：显示用于普通用户(user)拥有的进程的CPU百分比。 </li>
<li>红色：显示系统进程(kernel threads)使用的CPU百分比。</li>
<li>橙色：显示IRQ时间使用的CPU百分比。</li>
<li>洋红色(Magenta)：显示Soft IRQ时间消耗的CPU百分比。</li>
<li>灰色：显示IO等待时间消耗的CPU百分比。</li>
<li>青色：显示窃取时间(Steal time)消耗的CPU百分比。</li>
</ol>
<h3 id="黄色边框"><a href="#黄色边框" class="headerlink" title="黄色边框"></a>黄色边框</h3><p><em>提供了内存（Memory）和交换（Swap）使用情况。 类似于CPU中的进度条，内存监视也包含具有多种颜色的进度条：</em></p>
<ol>
<li>绿色：显示内存页面占用的RAM百分比</li>
<li>蓝色：显示缓冲区页面占用的RAM百分比</li>
<li>橙色：显示缓存页面占用的RAM百分比</li>
</ol>
<p><img src="https://pic1.zhimg.com/v2-e9a5539a25c37421fc429424aab510b8_b.png" alt="img"></p>
<h3 id="蓝色边框"><a href="#蓝色边框" class="headerlink" title="蓝色边框"></a>蓝色边框</h3><ul>
<li><p><strong>第一行 (Tasks, thr, running)</strong></p>
</li>
<li><p>参考上面的屏幕截图，我们在计算机上运行的106个任务(tasks)被分解为113个线程(thread)，其中只有1个进程处于运行(running)状态。</p>
</li>
<li><p>任务(tasks)是打开的进程总数的代表，但并不是每个打开的进程都在不断消耗CPU。 每个进程都处于几种状态</p>
</li>
<li><p>R: Running：表示进程(process)正在使用CPU</p>
</li>
<li><p>S: Sleeping: 通常进程在大多数时间都处于睡眠状态，并以固定的时间间隔执行小检查，或者等待用户输入后再返回运行状态。</p>
</li>
<li><p>T/S: Traced/Stoped: 表示进程正在处于暂停的状态</p>
</li>
<li><p>Z:Zombie or defunct:已完成执行但在进程表中仍具有条目的进程。</p>
</li>
<li><p><strong>第二行  Load Average</strong></p>
</li>
<li><p>三个值是指系统在最后1分钟，最近5分钟和最后15分钟的平均负载 (0.21,0.19,0.15)</p>
</li>
<li><p><strong>第三行 Uptime</strong></p>
</li>
<li><p>表示这个系统一共运行了多长的时间，这里一共运行了78天</p>
</li>
</ul>
<h3 id="下半部分"><a href="#下半部分" class="headerlink" title="下半部分"></a>下半部分</h3><p><img src="https://pic2.zhimg.com/v2-dd7ca8f231cfa317243987fd4bf02189_b.png" alt="img"></p>
<ul>
<li>PID – 描述进程的ID号</li>
<li>USER – 描述进程的所有者（谁跑的）</li>
<li>PRI – 描述Linux内核查看的进程优先级</li>
<li>NI – 描述由用户或root重置的进程优先级</li>
<li>VIR – 它描述进程正在使用的虚拟内存 （virtual memory）</li>
<li>RES – 描述进程正在消耗的物理内存（physical memory）</li>
<li>SHR – 描述进程正在使用的共享内存（shared memory）</li>
<li>S – 描述流程的当前状态 (state)</li>
<li>CPU％ – 描述每个进程消耗的CPU百分比</li>
<li>MEM％ – 描述每个进程消耗的内存百分比</li>
<li>TIME+ – 显示自流程开始执行以来的时间</li>
<li>Command –它与每个进程并行显示完整的命令执行 (比如/usr/lib/R)</li>
</ul>
<hr>
<h3 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h3><p>u – 用于显示特定用户拥有的所有进程。</p>
<p>P –用于基于高CPU消耗对进程进行排序。</p>
<p>M –用于基于高内存消耗对进程进行排序。</p>
<p>T –用于根据时间段对过程进行排序。</p>
<p>h –用于打开帮助窗口并查看此处未提及的更多快捷方式。</p>
<p><strong>帮助： htop -h</strong></p>
<p><strong>更细致的解释：man htop</strong></p>
<p><img src="https://pic1.zhimg.com/v2-3aece676cc1a36e4ea439e75ce81b238_b.png" alt="img"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MATLAB的图片提取和分析</title>
    <url>/2021/01/25/MATLAB%E5%9B%BE%E7%89%87%E6%8F%90%E5%8F%96%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>完成学校Matlab作业后的一些总结，数据可以从我的GitHub账户下载。作为一名Matlab的初学者，请多多海涵</p>
<p><a class="link" href="https://github.com/yuxuanwu17/INT301/blob/main/ass2data.zip">数据在此<i class="fas fa-external-link-alt"></i></a></p>
<p>数据是来自车牌号图片（冷知识：I,O天生是在车牌里不出现的）。一共24个文件夹，每个文件夹里有100张图片，所以一共有2400张图片。这次的项目是构建预测模型来进行图像识别。</p>
<p><img src="https://pic1.zhimg.com/v2-442cbdaf16d424739603ef3c267914dc_b.png" alt="img"></p>
<p>我们打开这些文件，查看图片的详细信息</p>
<p><img src="https://pic1.zhimg.com/v2-37aefc51ea4c68ec2b8dddee4939a708_b.png" alt="img"></p>
<p>我们发现这里面的图片格式不一致，且命名没有统一规律。</p>
<p>下文开始处理图片数据，并将每一张照片提取出来，用Matlab分析</p>
<h3 id="方法一：暴力修改文档法"><a href="#方法一：暴力修改文档法" class="headerlink" title="方法一：暴力修改文档法"></a>方法一：暴力修改文档法</h3><p>核心思路：将图片全部提取出来，然后统一格式，统一名称，保存在一个新的文件夹里</p>
<p>参考 <a class="link" href="https://blog.csdn.net/FX677588/article/details/53126961">matlab遍历文件夹下所有图片和遍历所有子文件夹下图片_无鞋童鞋的博客-CSDN博客_matlab遍历文件夹下子文件夹所有文件<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">imgDataPath = <span class="string">'../INT301_Assessment2/ass2data/'</span>;</span><br><span class="line">imgDataDir  = dir(imgDataPath);             <span class="comment">% 遍历该路径下的所有文件</span></span><br><span class="line">savepath =  <span class="string">'../INT301_Assessment2/ass2_processed_data/'</span>; <span class="comment">% 要改写的文件路径</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(imgDataDir)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isequal</span>(imgDataDir(<span class="built_in">i</span>).name,<span class="string">'.'</span>)||... <span class="comment">% 去除系统自带的两个隐文件夹</span></span><br><span class="line">       <span class="built_in">isequal</span>(imgDataDir(<span class="built_in">i</span>).name,<span class="string">'..'</span>)||...</span><br><span class="line">       <span class="built_in">isequal</span>(imgDataDir(<span class="built_in">i</span>).name,<span class="string">'.DS_Store'</span>)||...</span><br><span class="line">       ~imgDataDir(<span class="built_in">i</span>).isdir)                <span class="comment">% 去除遍历中不是文件夹的</span></span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    imgDir_jpeg = dir([imgDataPath imgDataDir(<span class="built_in">i</span>).name <span class="string">'/*.jpeg'</span>]); <span class="comment">%读取jpeg格式的图片</span></span><br><span class="line">    imgDir_jpg = dir([imgDataPath imgDataDir(<span class="built_in">i</span>).name <span class="string">'/*.jpg'</span>]); <span class="comment">%读取jpg格式的图片</span></span><br><span class="line">    imgDir = [imgDir_jpeg',imgDir_jpg']'; <span class="comment">% 合并成子文件夹下的所有图片地址</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> =<span class="number">1</span>:<span class="built_in">length</span>(imgDir)                 <span class="comment">% 遍历所有文件的地址</span></span><br><span class="line">        img = imread([imgDataPath imgDataDir(<span class="built_in">i</span>).name <span class="string">'/'</span> imgDir(<span class="built_in">j</span>).name]); <span class="comment">%读取单个文件</span></span><br><span class="line">        imwrite(img, [savepath,imgDataDir(<span class="built_in">i</span>).name,num2str(<span class="built_in">j</span>),<span class="string">'.jpeg'</span>]) <span class="comment">%以字符+编号为命名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>新建立的文件夹，检查一下有没有漏，可以直接看每个字母的最后一个是不是”字母100.jpeg”</p>
<p><img src="https://pic4.zhimg.com/v2-98d05aac73ddf39e77aa168050c19a97_b.png" alt="img"></p>
<h3 id="处理单个图片，以矩阵形式保存倒入的图片"><a href="#处理单个图片，以矩阵形式保存倒入的图片" class="headerlink" title="处理单个图片，以矩阵形式保存倒入的图片"></a>处理单个图片，以矩阵形式保存倒入的图片</h3><p>下图getimdata2这个函数输入的是重写后的新文件夹地址，输出的是训练集X和标签y （这里用数字代指标签）</p>
<p>不好意思有点懒得动脑子了，就直接写了24个if，大家可以随意优化</p>
<p>如果继续处理例如转换为onehot之类的可以直接用ind2vec来转换</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ data,target ]</span> = <span class="title">getimdata2</span><span class="params">(path)</span></span></span><br><span class="line"><span class="comment">%GETIMDATA Summary of this function goes here</span></span><br><span class="line"><span class="comment">%   Detailed explanation goes here</span></span><br><span class="line">    files = dir([path <span class="string">'*.jpeg'</span>]);</span><br><span class="line">    data=[];</span><br><span class="line">    target=[];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> file = files'</span><br><span class="line">        im = imread([path file.name]);</span><br><span class="line">        <span class="comment">% Normalize the data </span></span><br><span class="line">        im = double(im);</span><br><span class="line">        im = im/<span class="number">255</span>;</span><br><span class="line">        </span><br><span class="line">        data = [data im(:)];</span><br><span class="line">        <span class="keyword">if</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'A'</span>) <span class="comment">% 如果文件第一个字符等于‘A‘，那就用1代替a</span></span><br><span class="line">            target=[target [<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'B'</span>)</span><br><span class="line">            target=[target [<span class="number">2</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'C'</span>)</span><br><span class="line">            target=[target [<span class="number">3</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'D'</span>)</span><br><span class="line">            target=[target [<span class="number">4</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'E'</span>)</span><br><span class="line">            target=[target [<span class="number">5</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'F'</span>)</span><br><span class="line">            target=[target [<span class="number">6</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'G'</span>)</span><br><span class="line">            target=[target [<span class="number">7</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'H'</span>)</span><br><span class="line">            target=[target [<span class="number">8</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'J'</span>)</span><br><span class="line">            target=[target [<span class="number">9</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'K'</span>)</span><br><span class="line">            target=[target [<span class="number">10</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'L'</span>)</span><br><span class="line">            target=[target [<span class="number">11</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'M'</span>)</span><br><span class="line">            target=[target [<span class="number">12</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'N'</span>)</span><br><span class="line">            target=[target [<span class="number">13</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'P'</span>)</span><br><span class="line">            target=[target [<span class="number">14</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Q'</span>)</span><br><span class="line">            target=[target [<span class="number">15</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'R'</span>)</span><br><span class="line">            target=[target [<span class="number">16</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'S'</span>)</span><br><span class="line">            target=[target [<span class="number">17</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'T'</span>)</span><br><span class="line">            target=[target [<span class="number">18</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'U'</span>)</span><br><span class="line">            target=[target [<span class="number">19</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'V'</span>)</span><br><span class="line">            target=[target [<span class="number">20</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'W'</span>)</span><br><span class="line">            target=[target [<span class="number">21</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'X'</span>)</span><br><span class="line">            target=[target [<span class="number">22</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Y'</span>)</span><br><span class="line">            target=[target [<span class="number">23</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Z'</span>)</span><br><span class="line">            target=[target [<span class="number">24</span>]];</span><br><span class="line">        <span class="keyword">end</span>    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>另外一个getimdata 函数和上面大体差不多，但是输出的是已经onehot encoding后的结果（e.g. A-&gt; (1,0,0,…0)）标签用一个1*24的向量来表示</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ data,target ]</span> = <span class="title">getimdata</span><span class="params">(path)</span></span></span><br><span class="line"><span class="comment">%GETIMDATA Summary of this function goes here</span></span><br><span class="line"><span class="comment">%   Detailed explanation goes here</span></span><br><span class="line">    files = dir([path <span class="string">'*.jpeg'</span>]);</span><br><span class="line">    data=[];</span><br><span class="line">    target=[];</span><br><span class="line">    </span><br><span class="line"><span class="comment">%   Generated the cell and zero matrix to store</span></span><br><span class="line">    store = cell(<span class="number">1</span>,<span class="number">24</span>);</span><br><span class="line">    tst_zero = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">24</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">%   Fill the zeros matrix </span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">24</span></span><br><span class="line">        copy = tst_zero;</span><br><span class="line">        copy(<span class="number">1</span>,<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">        store{<span class="built_in">i</span>} = copy;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> file = files'</span><br><span class="line">        im = imread([path file.name]);</span><br><span class="line">        <span class="comment">% Normalize the data </span></span><br><span class="line">        im = double(im);</span><br><span class="line">        im = im/<span class="number">255</span>;</span><br><span class="line">        data = [data im(:)];</span><br><span class="line">        test_zero = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">if</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'A'</span>)</span><br><span class="line">            target=[target [store{<span class="number">1</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'B'</span>)</span><br><span class="line">            target=[target [store{<span class="number">2</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'C'</span>)</span><br><span class="line">            target=[target [store{<span class="number">3</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'D'</span>)</span><br><span class="line">            target=[target [store{<span class="number">4</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'E'</span>)</span><br><span class="line">            target=[target [store{<span class="number">5</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'F'</span>)</span><br><span class="line">            target=[target [store{<span class="number">6</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'G'</span>)</span><br><span class="line">            target=[target [store{<span class="number">7</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'H'</span>)</span><br><span class="line">            target=[target [store{<span class="number">8</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'J'</span>)</span><br><span class="line">            target=[target [store{<span class="number">9</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'K'</span>)</span><br><span class="line">            target=[target [store{<span class="number">10</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'L'</span>)</span><br><span class="line">            target=[target [store{<span class="number">11</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'M'</span>)</span><br><span class="line">            target=[target [store{<span class="number">12</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'N'</span>)</span><br><span class="line">            target=[target [store{<span class="number">13</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'P'</span>)</span><br><span class="line">            target=[target [store{<span class="number">14</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Q'</span>)</span><br><span class="line">            target=[target [store{<span class="number">15</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'R'</span>)</span><br><span class="line">            target=[target [store{<span class="number">16</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'S'</span>)</span><br><span class="line">            target=[target [store{<span class="number">17</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'T'</span>)</span><br><span class="line">            target=[target [store{<span class="number">18</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'U'</span>)</span><br><span class="line">            target=[target [store{<span class="number">19</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'V'</span>)</span><br><span class="line">            target=[target [store{<span class="number">20</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'W'</span>)</span><br><span class="line">            target=[target [store{<span class="number">21</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'X'</span>)</span><br><span class="line">            target=[target [store{<span class="number">22</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Y'</span>)</span><br><span class="line">            target=[target [store{<span class="number">23</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Z'</span>)</span><br><span class="line">            target=[target [store{<span class="number">24</span>}]'];</span><br><span class="line">        <span class="keyword">end</span>    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二：利用imageDatastore"><a href="#方法二：利用imageDatastore" class="headerlink" title="方法二：利用imageDatastore"></a>方法二：利用imageDatastore</h3><p>简便的方法永远是在你写完做完后发现的🙄</p>
<p>imageDatastore 可以直接读取你这个文件夹下的所有子文件及其图片</p>
<p>下面的代码是直接将数据集和标签都已经分好处理好了，可以直接喂到模型里面去的</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% </span></span><br><span class="line">F = <span class="string">'../INT301_Assessment2/ass2data'</span>;</span><br><span class="line">imds = imageDatastore(F,<span class="string">'IncludeSubfolders'</span>,<span class="built_in">true</span>,<span class="string">'LabelSource'</span>,<span class="string">'foldernames'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">labelCount = countEachLabel(imds);   <span class="comment">%统计imds中各标签值的图片数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 2，8分割，8为training，2为testing</span></span><br><span class="line">numTrainFiles = <span class="number">80</span>;</span><br><span class="line">[imdsTrain, imdsTest] = splitEachLabel(imds, numTrainFiles,<span class="string">'randomize'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">data = [];</span><br><span class="line">files = imdsTrain.Files;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> file = files'</span><br><span class="line">    im = imread(file{<span class="number">1</span>});</span><br><span class="line">    im = double(im);</span><br><span class="line">    im = im/<span class="number">255</span>;</span><br><span class="line">    data = [data im(:)];</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">X_train = data';</span><br><span class="line">y_train = imdsTrain.Labels;</span><br><span class="line">y_train = label_preprocess(y_train);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">data = []</span><br><span class="line">files = imdsTest.Files;</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> file = files'</span><br><span class="line">    im = imread(file{<span class="number">1</span>});</span><br><span class="line">    im = double(im);</span><br><span class="line">    im = im/<span class="number">255</span>;</span><br><span class="line">    data = [data im(:)];</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">X_test = data';</span><br><span class="line">y_test = imdsTest.Labels;</span><br><span class="line">y_test = label_preprocess(y_test);</span><br></pre></td></tr></table></figure>
<p>这里我将那24个 if 打包写成了一个新的函数叫label_preprocess，输入的是标签，输出的是onehot encoding后的结果</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[target]</span> = <span class="title">label_preprocess</span><span class="params">(y_train)</span></span></span><br><span class="line">target = [];</span><br><span class="line"><span class="keyword">for</span> y = y_train'</span><br><span class="line">    <span class="keyword">if</span> y == <span class="string">'A'</span></span><br><span class="line">        target=[target [<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'B'</span></span><br><span class="line">        target=[target [<span class="number">2</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'C'</span></span><br><span class="line">        target=[target [<span class="number">3</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'D'</span></span><br><span class="line">        target=[target [<span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'E'</span></span><br><span class="line">        target=[target [<span class="number">5</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'F'</span></span><br><span class="line">        target=[target [<span class="number">6</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'G'</span></span><br><span class="line">        target=[target [<span class="number">7</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'H'</span></span><br><span class="line">        target=[target [<span class="number">8</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'J'</span></span><br><span class="line">        target=[target [<span class="number">9</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'K'</span></span><br><span class="line">        target=[target [<span class="number">10</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'L'</span></span><br><span class="line">        target=[target [<span class="number">11</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'M'</span></span><br><span class="line">        target=[target [<span class="number">12</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'N'</span></span><br><span class="line">        target=[target [<span class="number">13</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'P'</span></span><br><span class="line">        target=[target [<span class="number">14</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'Q'</span></span><br><span class="line">        target=[target [<span class="number">15</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'R'</span></span><br><span class="line">        target=[target [<span class="number">16</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'S'</span></span><br><span class="line">        target=[target [<span class="number">17</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'T'</span></span><br><span class="line">        target=[target [<span class="number">18</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'U'</span></span><br><span class="line">        target=[target [<span class="number">19</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'V'</span></span><br><span class="line">        target=[target [<span class="number">20</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'W'</span></span><br><span class="line">        target=[target [<span class="number">21</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'X'</span></span><br><span class="line">        target=[target [<span class="number">22</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'Y'</span></span><br><span class="line">        target=[target [<span class="number">23</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'Z'</span></span><br><span class="line">        target=[target [<span class="number">24</span>]];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line">target =ind2vec(target);</span><br><span class="line">target = target';</span><br></pre></td></tr></table></figure>
<h3 id="方法三：直接读取-g格式（仅限本题使用）"><a href="#方法三：直接读取-g格式（仅限本题使用）" class="headerlink" title="方法三：直接读取.g格式（仅限本题使用）"></a>方法三：直接读取.g格式（仅限本题使用）</h3><p>因为jpeg和jpg都是以g结尾，所以可以本题可以直读取g。代码就略了</p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>sklearn里LinearSVC与SVC区别</title>
    <url>/2021/01/26/sklearn%E9%87%8CLinearSVC%E4%B8%8ESVC%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>这里综合了stackoverflow上的一位发言和另一位知乎用户的文章，链接在下方：</p>
<p><a class="link"   href="https://stackoverflow.com/questions/45384185/what-is-the-difference-between-linearsvc-and-svckernel-linear" >What is the difference between LinearSVC and SVC(kernel=”linear”)?<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/57162092" >baiziyu：sklearn.svm.LinearSVC与sklearn.svm.SVC区别<i class="fas fa-external-link-alt"></i></a></p>
<p>LinearSVC 和 SVC(kernel=’linear’) 会产生不同的结果，例如 不同的分数以及不同的decision boundary， 原因是他们采用了不同的计算方式。下面的代码可以自己运行一下，感受一下不同的地方</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.datasets import load_iris</span><br><span class="line">from sklearn.svm import LinearSVC, SVC</span><br><span class="line"></span><br><span class="line">X, y &#x3D; load_iris(return_X_y&#x3D;True)</span><br><span class="line"></span><br><span class="line">clf_1 &#x3D; LinearSVC(loss&#x3D;&#39;hinge&#39;).fit(X, y)  # possible to state loss&#x3D;&#39;hinge&#39;</span><br><span class="line">clf_2 &#x3D; LinearSVC().fit(X, y)  # possible to state loss&#x3D;&#39;hinge&#39;</span><br><span class="line">clf_3 &#x3D; SVC(kernel&#x3D;&#39;linear&#39;).fit(X, y)</span><br><span class="line"></span><br><span class="line">score_1 &#x3D; clf_1.score(X, y)</span><br><span class="line">score_2 &#x3D; clf_2.score(X, y)</span><br><span class="line">score_3 &#x3D; clf_2.score(X, y)</span><br><span class="line"></span><br><span class="line">print(&#39;LinearSVC score %s&#39; % score_1)</span><br><span class="line">print(&#39;LinearSVC score with hinge loss %s&#39; % score_2)</span><br><span class="line">print(&#39;SVC score %s&#39; % score_3)</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">LinearSVC score 0.94</span><br><span class="line">LinearSVC score with hinge loss 0.9666666666666667</span><br><span class="line">SVC score 0.9666666666666667</span><br></pre></td></tr></table></figure>
<h3 id="最主要的不同点："><a href="#最主要的不同点：" class="headerlink" title="最主要的不同点："></a>最主要的不同点：</h3><ul>
<li>默认情况下，LinearSVC最小化squared hinge loss，而SVC最小化hinge loss。（上图代码块）</li>
<li>LinearSVC是基于liblinear实现的，事实上会惩罚截距(penalize the intercept), 然而，SVC是基于libsvm实现的，并不会惩罚截距</li>
<li>liblinear库针对线性的模型进行了优化，因此在大量的数据上收敛速度会高于libsvm。所以LinearSVC在大数据上也能很好的归一化，但是SVC在大量数据上很难收敛</li>
<li>LinearSVC使用 （One-vs-All）方式来实现多分类问题，但SVC使用的是One-vs-One的方式来处理多分类的问题</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS:使用IntelliJ IDEA连接本地Hadoop</title>
    <url>/2021/01/26/macOS%E4%BD%BF%E7%94%A8IntelliJ-IDEA%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0Hadoop/</url>
    <content><![CDATA[<p>本文的所有操作是建立在本地已经配置好Hadoop和java环境的基础上，若未完成，请去这个链接先学习好</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/277611350" >loner：Hadoop 在mac本地的配置<i class="fas fa-external-link-alt"></i></a></p>
<p>本文参考博客</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_45774600/article/details/105289999" >macOS：使用IntelliJ IDEA远程连接Hadoop<i class="fas fa-external-link-alt"></i></a></p>
<p>首先使用intelliJ IDEA 配置指定的jdk</p>
<p>这里操作其实只需要在java class 里面运行就可以了，命名进入</p>
<p><img src="https://pic2.zhimg.com/v2-bbb99e7ef2a3a2ab4a2057d38c54e3cd_b.png" alt="img"></p>
<p>老样子进入project structure （File-Project Structure: 快捷键command+;）</p>
<p><img src="https://pic1.zhimg.com/v2-5087d33ec42e95648bb8e19367110d50_b.png" alt="img"></p>
<p>先检查SDK的情况，如果默认显示就是这样的，则就这样，如果不是添加（那个+号），路径基本上在mac上都差不多是这样的/Library/Java/JavaVirtualMachine/前应该都是一样的。</p>
<p><img src="https://pic3.zhimg.com/v2-0db76d6a8e59222eb80f24dc52269f0a_b.png" alt="img"></p>
<p>然后进入到Project的情况</p>
<p><img src="https://pic1.zhimg.com/v2-9142a0b3ff0d0ffd5ccf34512c6f0280_b.png" alt="img"></p>
<p>然后进入到module，导入依赖（dependencies）</p>
<p><img src="https://pic3.zhimg.com/v2-b90f33443a8e6bfd9fae39f1812e8e2a_b.png" alt="img"></p>
<p><img src="https://pic3.zhimg.com/v2-18890b2899813acc7496601932de2c0e_b.png" alt="img"></p>
<p>选择JARs or directories,按照下面操作多批次的导入解压后Hadoop的位置</p>
<p>注意这儿Hadoop的位置是解压后的安装包在share-&gt;hadoop</p>
<p><img src="https://pic2.zhimg.com/v2-b5434323d331ae6c36db581641366819_b.png" alt="img"></p>
<p>依次导入8个依赖，一个一个手动加，然后Apply，OK</p>
<p><img src="https://pic4.zhimg.com/v2-ad8a2f1ec4a6669a4b833145bda45c2f_b.png" alt="img"></p>
<p>编译和运行</p>
<p>运行如下WordCount.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">public class WordCount &#123;</span><br><span class="line"></span><br><span class="line">    public static class TokenizerMapper</span><br><span class="line">            extends Mapper&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">        private final static IntWritable one &#x3D; new IntWritable(1);</span><br><span class="line">        private Text word &#x3D; new Text();</span><br><span class="line"></span><br><span class="line">        public void map(Object key, Text value, Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            StringTokenizer itr &#x3D; new StringTokenizer(value.toString());</span><br><span class="line">            while (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class IntSumReducer</span><br><span class="line">            extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line">        private IntWritable result &#x3D; new IntWritable();</span><br><span class="line"></span><br><span class="line">        public void reduce(Text key, Iterable&lt;IntWritable&gt; values,</span><br><span class="line">                           Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            int sum &#x3D; 0;</span><br><span class="line">            for (IntWritable val : values) &#123;</span><br><span class="line">                sum +&#x3D; val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Configuration conf &#x3D; new Configuration();</span><br><span class="line">        Job job &#x3D; Job.getInstance(conf, &quot;word count&quot;);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, new Path(args[0]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class="line">        System.exit(job.waitForCompletion(true) ? 0 : 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-b972bff0438429263be2842c94e319b2_b.png" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-c83dbde658707eb3ef7955ba02e34a61_b.png" alt="img"></p>
<p>选择application后需要配置如下，name随意，最重要的是Main class: 保证名字和你new的java文件名字一致，input和output是等会要放入的文件，输入和输出</p>
<p><img src="https://pic3.zhimg.com/v2-87d680b6ed9ae34a669c898ba636be22_b.png" alt="img"></p>
<p>配置输入文件</p>
<p>这里我刚刚在configuration里面写了我的输入文件叫input，需要配置输入路径，这里在（src同级目录下）新建一个文件夹input，并且把你需要输入的文件放进去，这儿还是之前的pg100.txt</p>
<p><img src="https://pic4.zhimg.com/v2-c43f3e376a689e401c3585bd9625cf8f_b.png" alt="img"></p>
<p>运行</p>
<p><img src="https://pic4.zhimg.com/v2-f43cf63ac94ae2df051221c0b49a001f_b.png" alt="img"></p>
<p>出现如下情况</p>
<p><img src="https://pic1.zhimg.com/v2-1171ebce5dad8f3a92d14cd4d10a6274_b.png" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-9079be8c4a11d97d40154dc51cc080f1_b.png" alt="img"></p>
<p>和之前在terminal里运行成功的一模一样，成功后会出现一个 output的文件夹，由于output的先天特性，它无法覆盖，所以下次运行的时候请删除之前的那个，或者你改个名字（我后来好像看见这个可以用其他方法覆盖的，这里就不做涉及）</p>
<p><img src="https://pic3.zhimg.com/v2-df5dda07bd75d6324ba25680e367e6c6_b.png" alt="img"></p>
<p>到现在位置，Hadoop的教程都已经结束，无论是阿里云Hadoop的配置，运行WordCount.java还是mac本地的Hadoop运行调试，还是借助IDEA直接单机模式运行，都已经完成了。如果有不明白的，请关注我的专栏，里面有详细的步骤。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云轻量服务器配置jupyter notebook及远程网页打开</title>
    <url>/2021/01/26/%E9%98%BF%E9%87%8C%E4%BA%91%E8%BD%BB%E9%87%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEjupyter-notebook%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<p>具体阿里云服务器的参数和购买可以参考我上一篇专栏</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p>首先保证你的服务器上安装成功 Anaconda，具体教程可以参考如下链接</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/64930395" >寐语：Linux-Centos7下安装Anaconda（2019年新版）<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="安装jupyter-notebook"><a href="#安装jupyter-notebook" class="headerlink" title="安装jupyter notebook"></a>安装jupyter notebook</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install jupyter notebook </span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-fded09bc06bc572a1b1fa4b37908bba0_b.png" alt="img"></p>
<p>安装完成后导出jupyter的config文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-03a1115c5cc9e61e1c5f792c40411c8f_b.png" alt="img"></p>
<p>可以看见一般默认地址是在 /root/.jupyter/jupyter_notebook_config.py</p>
<p>命令行输入python3，进入python3环境</p>
<p><img src="https://pic2.zhimg.com/v2-5d85b851016dd6c381f8e703d7031b1d_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from IPython.lib import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure>
<p>这里的password是可以随便写的，只要保证两次输入的相同就行，重点是返回的哈希值（e.g. ‘sha1:d208466595c9:91e23f1a*<strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong>‘）</p>
<h3 id="开始编译jupyter-的config文件"><a href="#开始编译jupyter-的config文件" class="headerlink" title="开始编译jupyter 的config文件"></a>开始编译jupyter 的config文件</h3><p>vim 打开配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi ~&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<p>搜索password关键字(命令模式下输入/password)，找到其中代码块：</p>
<p><img src="https://pic2.zhimg.com/v2-02ea1c6c29a091ccae81ba8f67b6a129_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># c.NotebookApp.password&#x3D;&#39;&#39;</span><br><span class="line"></span><br><span class="line">#将其替换成：</span><br><span class="line"></span><br><span class="line">c.NotebookApp.password &#x3D; u&#39;sha1:d208466595c9:91e23f1a***********************************’</span><br></pre></td></tr></table></figure>
<p>其中引号中的内容即为之前复制下来的哈希密码，主义引号之前还有一个u</p>
<p>然后拖到最下面输入一下配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip &#x3D; &#39;*&#39; #所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可</span><br><span class="line">c.NotebookApp.port &#x3D; 8889 #端口设置，注意该端口可以设置的范围可以在服务器控制台的防火墙选项中找到</span><br><span class="line">c.NotebookApp.open_browser &#x3D; False #我们并不想在服务器上直接打开Jupyter Notebook，所以设置成False</span><br><span class="line">c.NotebookApp.notebook_dir &#x3D; &#39;&#x2F;root&#39; #这里是设置Jupyter的根目录，若不设置将默认root的根目录，不安全</span><br><span class="line">c.NotebookApp.allow_root &#x3D; True # 为了安全，Jupyter默认不允许以root权限启动jupyter</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-de707fe4b5de8205b72cdc1123628c3b_b.png" alt="img"></p>
<p>注意：这里的端口一定要在阿里云的防火墙上打开，否则会无法链接，具体可以看本文最顶上之前我配置Hadoop的文章</p>
<h3 id="启动jupyter-notebook"><a href="#启动jupyter-notebook" class="headerlink" title="启动jupyter notebook"></a>启动jupyter notebook</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook ## 第一次打开用，这种打开会随着网页的关闭而停止运行</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-011eeae6a7935e1d46ea3dbf4fb2c03b_b.png" alt="img"></p>
<p>注意红框里面的token，接下来会用到，这里的端口是8888，是我第一次配置的端口，忘记改了（你在config文件里怎么设置的端口，这里显示的就会是什么样）</p>
<h3 id="连接浏览器"><a href="#连接浏览器" class="headerlink" title="连接浏览器"></a>连接浏览器</h3><p>打开你的浏览器输入你的公网ip和在配置文件里确定的端口号。例如 12*.*<em>.2</em>:8889来链接 （ip+开放的端口）</p>
<p><img src="https://pic1.zhimg.com/v2-4452ed380dc7f4c2410b8729fd055028_b.png" alt="img"></p>
<p>在红框里输入你的token，直接复制，然后就可以进入你的jupyter notebook了</p>
<p><img src="https://pic3.zhimg.com/v2-9dd595bfb3f58dfbfee01649d4c44162_b.png" alt="img"></p>
<p>通常来说是用如下来打开jupyter，这样就可以保证在后台运行,程序不会随着你关闭网页而暂停</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup jupyter-notebook &amp;</span><br></pre></td></tr></table></figure>
<h3 id="方法二：映射ip到本地"><a href="#方法二：映射ip到本地" class="headerlink" title="方法二：映射ip到本地"></a>方法二：映射ip到本地</h3><p>在保证之前的config文件配置完成后，进入服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup jupyter-notebook --no-browser --port&#x3D;8889</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-2f8493bad3e754d3f882c06a14030581_b.png" alt="img"></p>
<p>然后新建一个窗口，<strong>不要进入服务器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -N -f -L localhost:8889:localhost:8889 root@123.56.56.215</span><br></pre></td></tr></table></figure>
<p>保证两个localhost相同，因为我也搞不清哪个代表本地，哪个代表云服务器</p>
<p><img src="https://pic1.zhimg.com/v2-2c7e46d6860948d2c83ac9eddee17668_b.png" alt="img"></p>
<p>然后打开浏览器 输入<a class="link"   href="http://localhost:8889/tree" >localhost:8889<i class="fas fa-external-link-alt"></i></a> 也可以轻松打开</p>
<p><img src="https://pic1.zhimg.com/v2-0c1cf7886039bd2eef0dac4ac2563e58_b.png" alt="img"></p>
<p>因为也用到了nohup，所以并不会随着你关闭网页而停止运行</p>
<p>如果在本地映射端口的时候提醒端口占用如下，需要清理端口，运行下面代码，端口改成对应的就行，然后再输入一下上面的映射，就可以重新进入</p>
<p><img src="https://pic4.zhimg.com/v2-baef76a58e509e5c8650a22ac5e539ef_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -ti:8889 | xargs kill -9</span><br></pre></td></tr></table></figure>
<h3 id="一些基本操作，如创建虚拟环境，和jupyter-没有太大关系"><a href="#一些基本操作，如创建虚拟环境，和jupyter-没有太大关系" class="headerlink" title="一些基本操作，如创建虚拟环境，和jupyter 没有太大关系"></a>一些基本操作，如创建虚拟环境，和jupyter 没有太大关系</h3><p>虚拟环境可以随便你折腾，不会影响到服务器其他的配置，搞坏了大不了删掉重新来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda info --env</span><br></pre></td></tr></table></figure>
<p>查看当前anaconda的环境</p>
<p><img src="https://pic2.zhimg.com/v2-02d41999d1770a66703f7e0e37fb9171_b.png" alt="img"></p>
<p>创建conda 虚拟环境，这里是指定python3.7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create --name python3.7 python&#x3D;3.7 </span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-b09202c2d15eb5c8c6dc7eff27624f09_b.png" alt="img"></p>
<p>安装成功后可以用如下命令打开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate python3.7</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-663c168e06a9f8558f7cb4185ddf91c7_b.png" alt="img"></p>
<p>当base变成你的虚拟环境的名称，则表示你的环境已经创建成功了</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Jupyter_notebook</tag>
        <tag>cloud server</tag>
      </tags>
  </entry>
  <entry>
    <title>2015-2020 美国市场牛油果价格分析和预测</title>
    <url>/2021/01/25/2015-2020-%E7%BE%8E%E5%9B%BD%E5%B8%82%E5%9C%BA%E7%89%9B%E6%B2%B9%E6%9E%9C%E4%BB%B7%E6%A0%BC%E5%88%86%E6%9E%90%E5%92%8C%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<p>作为一位牛油果资深爱好者，苦于牛油果价格实在太贵，Sam 店一个品相俱佳的大果要8块钱，鲜果一号之类等其他精品水果店居然有的要卖到10+一个，还是中果，硬邦邦，不怎么好吃的那种，简直黑心。</p>
<p>同时呢，作为一位申请美帝研究生的大四狗，我严肃认真地要把牛油果价格因素纳入到我选择的范围内。同时，我真的很好奇，美帝牛油果的价格是咋样的。当然最重要的是要完成当前303大数据作业🧐，因为report有点写不出来，就先发个专栏整理整理思路。</p>
<p><img src="https://pic2.zhimg.com/v2-b214bc800969669ea7e7fb985933cbf9_b.png" alt="img"></p>
<p>以下分析以及可视化，借鉴了之前大神们的分析：（他们做的图真的好好看啊！）</p>
<p><a class="link"   href="https://www.kaggle.com/janiobachmann/price-of-avocados-pattern-recognition-analysis" >https://www.kaggle.com/janiobachmann/price-of-avocados-pattern-recognition-analysis<i class="fas fa-external-link-alt"></i></a></p>
<p>但是他们的数据集是从2015-2018，已经有一些年份了，不能如实反应当今市场，尤其是新冠后的影响。碰巧有大神更新了数据集，在原有的基础上新增到2020.5月的牛油果数据。利用前人经验，做未来预测分析</p>
<p><a class="link"   href="https://www.kaggle.com/timmate/avocado-prices-2020" >https://www.kaggle.com/timmate/avocado-prices-2020<i class="fas fa-external-link-alt"></i></a></p>
<p>注：本篇所有分析预测都在r上完成，95%借助ggplot2，yysy，r做图真的好看。预测部分，偷了点懒，直接用的是Facebook开发的prophet包，因为之前没有接触过时间相关的预测，LSTM目前还没有学到家，但ddl在前，等有空再用python补上。</p>
<h3 id="下载并读取"><a href="#下载并读取" class="headerlink" title="下载并读取"></a>下载并读取</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df &lt;- read.csv(<span class="string">&quot;/Users/yuxuan/Desktop/INT301-Avocado-prediction/avocado-updated-2020.csv&quot;</span>)</span><br><span class="line">head(df)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-1a37e1a6cb5b98fb02d285c6124c39b8_b.png" alt="img"></p>
<p>其中以下是我们这次的实验对象 - date - 观察的时间 - average_price - 每一个牛油果的平均价格 - total_volume - 当日售出了多少牛油果 - year - 年份（Date格式） - type - 种类，是有机的还是普通的 - geography - 数据来源的地区</p>
<p>至于X4046,X4225,X4770代表的是牛油果的种类(PLU code)都是Hass 牛油果，只是大小有区别</p>
<p><img src="https://pic3.zhimg.com/v2-b0e4c1ed052387be6ecd17082cf70452_b.png" alt="img"></p>
<h3 id="检查是否存在缺失（missing-value）"><a href="#检查是否存在缺失（missing-value）" class="headerlink" title="检查是否存在缺失（missing value）"></a>检查是否存在缺失（missing value）</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="built_in">is.na</span>(df))</span><br></pre></td></tr></table></figure>
<p>发现数据集无缺失值</p>
<h3 id="根据种类做density-plot"><a href="#根据种类做density-plot" class="headerlink" title="根据种类做density plot"></a>根据种类做density plot</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">options(repr.plot.width = <span class="number">8</span>, repr.plot.height = <span class="number">4</span>)</span><br><span class="line">density_plot &lt;- ggplot(df, aes(x=average_price, fill=type))+</span><br><span class="line">  geom_density()+</span><br><span class="line">  facet_wrap(~type)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),legend.position = <span class="string">&quot;bottom&quot;</span>)+</span><br><span class="line">  labs(title = <span class="string">&quot;Avocado Price by type&quot;</span>)+</span><br><span class="line">  scale_fill_brewer(palette = <span class="string">&quot;Set2&quot;</span>)</span><br><span class="line">density_plot</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-ad250b1df684105fa0ec54b4e433d72a_b.png" alt="img"></p>
<p>图中可以发现</p>
<ul>
<li>普通的牛油果（绿色）大部分集中在1$ 附近，形状也比较高瘦，值域区间相比之下也比较小</li>
<li>但有机的牛油果（红色）则显得更加敦实，值域也宽，最贵的居然要卖到3$</li>
</ul>
<h3 id="量化具体的一些比率"><a href="#量化具体的一些比率" class="headerlink" title="量化具体的一些比率"></a>量化具体的一些比率</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(dplyr)</span><br><span class="line">vol_type &lt;- df %&gt;% group_by(type) %&gt;% summarise(average_volume = <span class="built_in">round</span>(mean(total_volume),<span class="number">3</span>),average_price = <span class="built_in">round</span>(mean(average_price),<span class="number">3</span>)) %&gt;% mutate(volume_percent= <span class="built_in">round</span>(prop.table(average_volume)*<span class="number">100</span>,<span class="number">3</span>))</span><br><span class="line">vol_type</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Type</th>
<th>Average Volume</th>
<th>Average Price</th>
<th>Volume percent</th>
</tr>
</thead>
<tbody><tr>
<td>Conventional</td>
<td>1,818,206 (1.8 M)</td>
<td>1.16 $</td>
<td>96.8%</td>
</tr>
<tr>
<td>Organic</td>
<td>60,127 (0.06 M)</td>
<td>1.62 $</td>
<td>3.2%</td>
</tr>
</tbody></table>
<p>从表格中我们可以发现</p>
<ul>
<li>销售的普通牛油果在市场以均价1.16$（7.58¥）占比居然高达97%</li>
<li>相比之下有机牛油果1.62$ (10.58¥) 市场占比大概只有3%</li>
</ul>
<h3 id="2015-2020间普通和有机牛油果的价格波动曲线"><a href="#2015-2020间普通和有机牛油果的价格波动曲线" class="headerlink" title="2015-2020间普通和有机牛油果的价格波动曲线"></a>2015-2020间普通和有机牛油果的价格波动曲线</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df$date &lt;- as.Date(df$date, <span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Sort the dates and order the datesets in date</span></span><br><span class="line">df &lt;- df[order(df$date),]</span><br><span class="line"></span><br><span class="line"><span class="comment">## Make the plot</span></span><br><span class="line">comparision_plot &lt;- df %&gt;% select(date, average_price, type) %&gt;%</span><br><span class="line">  ggplot(aes(x=date,y=average_price))+</span><br><span class="line">  geom_area(aes(color=type,fill=type),alpha=<span class="number">0.3</span>,position=position_dodge(<span class="number">0.8</span>))+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  scale_color_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#ED7921&quot;</span>,<span class="string">&quot;#62BE51&quot;</span>))+</span><br><span class="line">  scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#FD833E&quot;</span>,<span class="string">&quot;#B8FC5F&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">comparision_plot</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-5e99acd1ce9d879967cc4eb0060ab982_b.png" alt="img"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot(data=df, aes(x=date, y=average_price,col=type))+</span><br><span class="line">  geom_line()+</span><br><span class="line">  facet_wrap(~ type)+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;position&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-8566ef8639d6a840e2050238971d3958_b.png" alt="img"></p>
<ul>
<li>有机的价格永远要高于普通的</li>
<li>价格呈现某种季节性的波动，符合水果季节性波动的常识</li>
<li>是否和销售的量呈现关联，下文探索</li>
</ul>
<h3 id="2015-2020年间的牛油果总的价格分布"><a href="#2015-2020年间的牛油果总的价格分布" class="headerlink" title="2015-2020年间的牛油果总的价格分布"></a>2015-2020年间的牛油果总的价格分布</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot(seasonal_df,aes(x=average_price,fill=as.factor(year)))+</span><br><span class="line">geom_density(alpha=<span class="number">0.5</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">facet_wrap(~year)+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">guides(fill=<span class="literal">FALSE</span>)+</span><br><span class="line">labs(title = <span class="string">&quot;Distribution of Prices by year&quot;</span>,x=<span class="string">&#x27;Average Price&#x27;</span>,y=<span class="string">&#x27;Density&#x27;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#DA4511&quot;</span>, <span class="string">&quot;#FFBD00&quot;</span>, <span class="string">&quot;#6A953F&quot;</span>, <span class="string">&quot;#9A6233&quot;</span>, <span class="string">&quot;#D3AE7C&quot;</span>, <span class="string">&quot;#307CA1&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-8173974e3831c052bfb0ee0bbb1bd384_b.png" alt="img"></p>
<ul>
<li>6年间的价格分布，其中2017年最成正态分布的形状，高端和低端牛油果都在市场分一杯羹</li>
</ul>
<h3 id="价格波动曲线和牛油果售卖的量关系"><a href="#价格波动曲线和牛油果售卖的量关系" class="headerlink" title="价格波动曲线和牛油果售卖的量关系"></a>价格波动曲线和牛油果售卖的量关系</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">library(ggthemes)</span><br><span class="line">library(cowplot)</span><br><span class="line"></span><br><span class="line">options(repr.plot.width=<span class="number">8</span>, repr.plot.height=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## average-price with time series</span></span><br><span class="line">conventional_monthly &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=average_price))+</span><br><span class="line">    geom_line(color=<span class="string">&quot;#5C374C&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    labs(title = <span class="string">&quot;Conventional Avocados&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">max</span>(conventional$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;red&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">min</span>(conventional$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;blue&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_monthly &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=average_price))+</span><br><span class="line">    geom_line(color=<span class="string">&quot;#58D68D&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    labs(title = <span class="string">&quot;Organic Avocados&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">max</span>(organic$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;red&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">min</span>(organic$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;blue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## create a volume chart</span></span><br><span class="line">conventional_volume &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=total_volume))+</span><br><span class="line">    geom_bar(stat = <span class="string">&#x27;identity&#x27;</span>,fill=<span class="string">&quot;#7FB3D5&quot;</span>,color=<span class="string">&quot;black&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    geom_smooth(method = <span class="string">&quot;loess&quot;</span>,color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_volume &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=total_volume))+</span><br><span class="line">    geom_bar(stat = <span class="string">&#x27;identity&#x27;</span>,fill=<span class="string">&#x27;#58D68D&#x27;</span>,color=<span class="string">&quot;black&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    geom_smooth(method = <span class="string">&quot;loess&quot;</span>,color =<span class="string">&quot;red&quot;</span>)</span><br><span class="line"></span><br><span class="line">plot_grid(conventional_monthly,organic_monthly,conventional_volume,organic_volume,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-98f4720367c6e80038c4819fa35cd94c_b.png" alt="img"></p>
<ul>
<li>为了找到季节性规律（seasonal patterns）我将平均售价和销售量以月为单位进行统计分析</li>
<li>A,B图代表的都是以月为单位的平均销售价格（monthly），蓝线代表最小值（min）红线代表最大值（max）</li>
<li>普通牛油果最贵的一个月也就1.8$，最便宜的一个月0.82$；有机的最贵要2.1$，最便宜的也要1.21$</li>
<li>C,D代表的是以月为单位的销量，红线代表的是趋势</li>
<li>美帝人民对牛油果的爱是一贯的，销量呈逐年上升的趋势，这里指的是普通牛油果</li>
<li>19-20年，可能由于经济形势下滑以及20年后的新冠疫情，对有机牛油果的需求减少，未能像普通牛油果一样持续增长</li>
<li>月销量也呈现某种季节性规律，需要接下来的仔细分析</li>
</ul>
<h3 id="2015-2020年间以月为单位比较销量和价格"><a href="#2015-2020年间以月为单位比较销量和价格" class="headerlink" title="2015-2020年间以月为单位比较销量和价格"></a>2015-2020年间以月为单位比较销量和价格</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Process the data into year and month format</span></span><br><span class="line">library(forecast)</span><br><span class="line">seasonal_df &lt;- read.csv(<span class="string">&quot;/Users/yuxuan/Desktop/INT303-Avocado-prediction/avocado-updated-2020.csv&quot;</span>)</span><br><span class="line">seasonal_df$month_year &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%Y-%m&quot;</span>)</span><br><span class="line">seasonal_df$month &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Change the month from a Date format into a numerical foramt, then convert to the three letter format</span></span><br><span class="line">seasonal_df$monthabb &lt;- sapply(seasonal_df$month, <span class="keyword">function</span> (x) <span class="built_in">month.abb</span>[<span class="built_in">as.numeric</span>(x)])</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb,levels=<span class="built_in">month.abb</span>)</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Set the figure size</span></span><br><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the price by month</span></span><br><span class="line"></span><br><span class="line">conv_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">org_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">conv_price &lt;- ts(conv_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_price &lt;- ts(org_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the volume by month</span></span><br><span class="line">conv_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">org_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">conv_volume &lt;- ts(conv_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_volume &lt;- ts(org_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">byyearplot_price_conv &lt;- ggseasonplot(conv_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_price_org &lt;- ggseasonplot(org_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_conv &lt;- ggseasonplot(conv_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados volume \n by year for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_org &lt;- ggseasonplot(org_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados volume by year \n for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">plot_grid(byyearplot_price_conv,byyearplot_price_org,byyearplot_volume_conv,byyearplot_volume_org,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-fed30f65509677d2328dbd5b0a81a78c_b.png" alt="img"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line">conv_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb, y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">whole_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;All Avocados&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns,organic_patterns,whole_patterns,nrow = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-f41fce3780e70ee85fb08df929b3b3c9_b.png" alt="img"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">conv_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb, y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados volume&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(total_volume)) %&gt;%</span><br><span class="line">ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados volume&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">whole_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;All Avocados volume&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns_vol,organic_patterns_vol,whole_patterns_vol,nrow = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-d48e337b98047f36cd14b43be68879a3_b.png" alt="img"></p>
<ul>
<li>综合来说，每年的9，10 月份牛油果的平均价格会达到一年中的最高值，2月达到一年的最低值</li>
<li>对于销量来说，美国人喜欢在2月和5月购买牛油果，11月份买牛油果的意愿最低</li>
<li>查资料可得，牛油果一般在8，9月份成熟收获，加上采摘，包装和运输时间所以会有一定的延迟，可以看见图中的八月都是呈现上升趋势。</li>
<li>可以发现销售量和价格呈现一定的负相关，这符合我们的常识，人们喜欢在价格低的时候购买，而一样水果或者蔬菜则会在刚上市时价格逐步上升，达到最高，然后再下降</li>
<li>为什么随着采摘供应和价格会成一定的正相关？我的猜测是，就像苏州人说的“时鲜货”，刚刚摘下的牛油果肯定是又大又好有新鲜，而且前一年的量已经消耗的差不多了，所以价格会有一阵子的上涨，然后下探，符合图中的趋势走向</li>
<li>也可以清晰的看见，销量的确是逐年增加的，大概率是网红不遗余力的宣传，将牛油果作为健康活力，fashion的代名词。这路子的确是正确的，因为美国人民消耗的牛油果总的来说逐年递增</li>
</ul>
<h3 id="2015-2020-以季节为单位分析牛油果价格和销量"><a href="#2015-2020-以季节为单位分析牛油果价格和销量" class="headerlink" title="2015-2020 以季节为单位分析牛油果价格和销量"></a>2015-2020 以季节为单位分析牛油果价格和销量</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## seperate the month into four seasons</span></span><br><span class="line">seasonal_df$season &lt;- ifelse(seasonal_df$month %in% <span class="built_in">c</span>(<span class="string">&quot;03&quot;</span>,<span class="string">&quot;04&quot;</span>,<span class="string">&quot;05&quot;</span>),<span class="string">&quot;Spring&quot;</span>,</span><br><span class="line">ifelse(seasonal_df$month %in% <span class="built_in">c</span>(<span class="string">&quot;06&quot;</span>,<span class="string">&quot;07&quot;</span>,<span class="string">&quot;08&quot;</span>),<span class="string">&quot;Summer&quot;</span>,</span><br><span class="line">ifelse(seasonal_df$month %in% <span class="built_in">c</span>(<span class="string">&quot;09&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;11&quot;</span>),<span class="string">&quot;Autumn&quot;</span>,<span class="string">&quot;Winter&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">## Prepare to analyze the results</span></span><br><span class="line">seasonality_plot_conventional_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type ==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados average price by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average price&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(<span class="string">&quot;$ &quot;</span>,<span class="built_in">round</span>(avg,<span class="number">2</span>))),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">seasonality_plot_conventional_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=<span class="built_in">round</span>(mean(total_volume/<span class="number">1000000</span>),<span class="number">2</span>)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados total volume by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(avg,<span class="string">&quot; m&quot;</span>)),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot_grid(seasonality_plot_conventional_price,seasonality_plot_conventional_volume,nrow = 2)</span></span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type ==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados average price by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average price&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(<span class="string">&quot;$ &quot;</span>,<span class="built_in">round</span>(avg,<span class="number">2</span>))),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=<span class="built_in">round</span>(mean(total_volume/<span class="number">1000000</span>),<span class="number">2</span>)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados total volume by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(avg,<span class="string">&quot; m&quot;</span>)),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">plot_grid(seasonality_plot_conventional_price,seasonality_plot_organic_price,seasonality_plot_conventional_volume,seasonality_plot_organic_volume,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-f6a063580538fb3100cdad2577de62b7_b.png" alt="img"></p>
<ul>
<li>春（3-5），夏（6-8），秋（9-11），冬（12-2）</li>
<li>A,B 代表的是牛油果的平均价格，以有机和非有机划分；C,D 代表的则是销量，同样以有机和非有机划分，m代表million百万</li>
<li>总的来说，春冬季买牛油果比较划算，均价最低，同样也反应在了销量上，春夏销量最高，因为牛油果自从8，9月份成熟以后已经大量充斥了市场，所以价格会比较低，吸引较多的买家，直到下一批牛油果的成熟</li>
</ul>
<h3 id="牛油果价格和城市的关系"><a href="#牛油果价格和城市的关系" class="headerlink" title="牛油果价格和城市的关系"></a>牛油果价格和城市的关系</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(forcats)</span><br><span class="line">geo_conv_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(geography)%&gt;%  summarise(avg=<span class="built_in">round</span>(mean(average_price),<span class="number">2</span>)) %&gt;% arrange(avg) %&gt;% slice(<span class="number">1</span>:<span class="number">6</span>)  %&gt;% mutate(geography=fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x=geography,y=avg))+</span><br><span class="line">  geom_bar(stat = <span class="string">&quot;identity&quot;</span>,position = <span class="string">&quot;dodge&quot;</span>,alpha=<span class="number">.6</span>,width =<span class="number">.4</span>,show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label=avg),vjust=<span class="number">1.5</span>,color=<span class="string">&#x27;black&#x27;</span>,size=<span class="number">5</span>)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title = element_text(hjust = <span class="number">0.6</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados average price by geography&quot;</span>,x=<span class="string">&quot;Geography place&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">geo_org_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(geography)%&gt;%  summarise(avg=<span class="built_in">round</span>(mean(average_price),<span class="number">2</span>)) %&gt;% arrange(avg) %&gt;% slice(<span class="number">1</span>:<span class="number">6</span>) %&gt;% mutate(geography=fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x=geography,y=avg))+</span><br><span class="line">  geom_bar(stat = <span class="string">&quot;identity&quot;</span>,position = <span class="string">&quot;dodge&quot;</span>,alpha=<span class="number">.6</span>,width =<span class="number">.4</span>,show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label=avg),vjust=<span class="number">1.5</span>,color=<span class="string">&#x27;black&#x27;</span>,size=<span class="number">5</span>)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title = element_text(hjust = <span class="number">0.6</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados average price by geography&quot;</span>,x=<span class="string">&quot;Geography place&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">plot_grid(geo_conv_price,geo_org_price,nrow = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-e321eb850172731dfd4954af3186fb90_b.png" alt="img"></p>
<ul>
<li>通过计算返回前六低的地区和城市</li>
<li>以非有机为例：菲尼克斯（凤凰城），休斯顿，达拉斯，中南部城市群，新墨西哥洲，Nashville（靠近印第安纳洲）</li>
<li>通过地图查询，前五个都在美国的中西部，靠近墨西哥</li>
<li>通过查询，牛油果原产地墨西哥，美国价格最低的前5个城市很有可能是种植牛油果的基地，所以牛油果价格便宜</li>
<li>维基百科上说之前加州和佛罗里达是牛油果的主产地，但随着水资源的价格上涨，牛油果产地发生了写偏移，我合理怀疑是向着上述地点前一，前五个城市，大致都分布在同一个纬度上</li>
<li>下面的链接说的是美国现阶段牛油果种植地方，提到了圣安东尼奥，也是中西部的城市，毗邻休斯顿，达拉斯，因为气候很像墨西哥，适合牛油果种植，并且淡水相对便宜</li>
</ul>
<p><a class="link"   href="https://www.hunker.com/12003820/in-what-areas-of-the-united-states-can-you-grow-an-avocado-treewww.hunker.com" >https://www.hunker.com/12003820/in-what-areas-of-the-united-states-can-you-grow-an-avocado-treewww.hunker.com<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>这里我用Google map将上述六个城市给标注出来了，的确是近似处于同一纬度，牛油果前五便宜的城市的确靠近墨西哥</li>
</ul>
<p><img src="https://pic3.zhimg.com/v2-47ade01c452baebea532f2cbe6ba6eb6_b.png" alt="img"></p>
<h3 id="牛油果价格预测和走势图"><a href="#牛油果价格预测和走势图" class="headerlink" title="牛油果价格预测和走势图"></a>牛油果价格预测和走势图</h3><p><a class="link"   href="https://facebook.github.io/prophet/docs/quick_start.html" >Quick Start<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(prophet)</span><br><span class="line">library(cowplot)</span><br><span class="line">library(gridExtra)</span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggpubr)</span><br><span class="line">library(devtools)</span><br><span class="line"><span class="comment">## Select and filter the data and fit the model</span></span><br><span class="line">price_predict &lt;- df %&gt;% select(date,average_price) %&gt;% group_by(date) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line">colnames(price_predict) &lt;- <span class="built_in">c</span>(<span class="string">&#x27;ds&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">model &lt;- prophet(price_predict,daily.seasonality = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## make prediction or forecast the results</span></span><br><span class="line">future &lt;- make_future_dataframe(model,periods = <span class="number">365</span>)</span><br><span class="line">forecast &lt;- predict(model,future)</span><br><span class="line">plot(model,forecast)+</span><br><span class="line">theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Avocados price prediction in next year&quot;</span>,x=<span class="string">&quot;year&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">trend &lt;- prophet_plot_components(model,forecast)</span><br><span class="line"></span><br><span class="line">year_trend &lt;- trend[<span class="number">1</span>]</span><br><span class="line">month_trend &lt;- trend[<span class="number">3</span>]</span><br><span class="line">week_trend &lt;- trend[<span class="number">2</span>]</span><br><span class="line">time_trend &lt;- trend[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">overall_trend &lt;- <span class="built_in">c</span>(year_trend,month_trend,week_trend,time_trend)</span><br><span class="line">ggarrange(plotlist = overall_trend, labels = <span class="built_in">c</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-cf7950b7694282962ed49a75959649ca_b.png" alt="img"></p>
<ul>
<li>利用Facebook开发的prophet包进行时间序列上的价格预测</li>
<li>可以看见价格还是会呈现一个季节性波动，但是价格可能会走低</li>
<li>联系到当前新冠疫情在美国的疯狂爆发，牛油果销量下滑是必然的，走势向下也符合预期</li>
</ul>
<p><img src="https://pic4.zhimg.com/v2-507cf3a3836444e22b9f081ef35f7b3b_b.png" alt="img"></p>
<ul>
<li>prophet包自带的功能，可以根据时间，细化到每一天以小时为单位的时间预测</li>
<li>A图是以年为单位的分析预测：从15年开始，牛油果的价格一直保持正增长，17年是疯狂的一年，以高于1.30的幅度快速增长，这也应和了我的个人感受，因为我就是17年才知道这种水果，也就是说网红公司在这一年大幅度的疯狂宣传这款水果，然后在价格上炒的越来愈高。18年后价格增速趋于稳定，稳定在每年1.28左右增长；至于未来的一年，prophet也给出了自己的预测，区间大概在[1.20-1.34]。考虑到北美新冠疫情的影响，我觉得很有可能会以1.20左右，但仍然是正增长，据我在推特上观察，北美千禧年一代对牛油果仍然是非常非常喜欢，各种可爱有趣的漫画是层出不穷。我相信2020年牛油果的价格仍然上涨，只是增速放缓</li>
<li>B图是以月为单位的分析，可以看见在5月份，价格转为正增长，持续到10月份，价格达到峰值，随后价格开始下跌，到来年的2月份达到低点，符合之前的分析</li>
<li>C图是以每周为单位分析，牛油果在周末价格最高，符合美国家庭周末在周末进行大采购的习惯，所以那两天，价格也最高</li>
<li>D图是以每天来分析，没有参考意义，因为我的数据集就没有这个带小时为单位的时间</li>
</ul>
<p>完整版的代码请在GitHub下载</p>
<p><a class="link"   href="https://github.com/yuxuanwu17/INT303-Avocado-prediction" >https://github.com/yuxuanwu17/INT303-Avocado-prediction<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>EDA</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 调试配置Hadoop</title>
    <url>/2021/01/26/IntelliJ-IDEA-%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AEHadoop/</url>
    <content><![CDATA[<p>本文是目前为止最简单，也不需要配Hadoop环境之类的教程，但是如果是xjtlu的小伙伴，可能就不太合适，因为老师好像是要求写出hdfs的操作的代码的，这儿可以参考阿里云第二弹。</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p>我们今天这篇文章是等价于以下这篇文章，来运行wordcount.java这个文件的</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/271772216" >loner：阿里云Hadoop第二弹（运行WordCount）<i class="fas fa-external-link-alt"></i></a></p>
<p>在第二弹里面，核心的思路就是，在HDFS上创建文件，本地上传文件，连同你的script，然后在服务器里用javac compile出你的classes，然后打包成一个jar包，然后在Hadoop上运行jar包，然后同样也是用Hadoop命令查看你的结果。步骤显得非常繁琐</p>
<p>但是，在我注册完（白嫖完）IntelliJ IDEA的专业版后，他会提醒你需不需要装big data tools这个第三方插件，然后我巨盯着下面这行菜单栏陷入沉思，肯定可以有那种一键run，然后生成output的方式。</p>
<p><img src="https://pic2.zhimg.com/v2-ad79047cd3d9615c024eef12ef8131ad_b.png" alt="img"></p>
<p>至于为什么不用eclipse，因为它实在太丑了（谁还不是个颜狗呢🤪）</p>
<p>我首先总结下Hadoop的三种运行模式</p>
<p>1。 单机模式</p>
<p>2。 伪分布模式</p>
<p>3。 完全分布模式</p>
<p>之前的三篇文章其实搭建的都是伪分布模式Hadoop的安装。但实际上基于Hadoop的MapReduce程序在本地程序上就完全可以运行，并不一定需要伪分布模式，甚至连Hadoop都不一定需要安装。在单机模式下，可以将MapReduce的程序当成一个普普通通的java程序。在这里我们需要借助项目管理工具Maven。这里就不用导入各种依赖，只需要一键导入pom文件（其中制定了Hadoop依赖包的名字和版本号），就不需要在花额外的时间纠缠在各种依赖上，只需要专门focus在你的代码编写上了</p>
<p>这里插一句：有很多小伙伴问我阿里云教程一步步做了，为啥还是装不上，各种找不到啊，或者报错。</p>
<p>1。代码一行行运行，不要全部复制，因为terminal里面毕竟是一行行运行的，若复制几行，很有可能会出错，比如某一行忘记运行了</p>
<p>2。如果是阿里云，记住，重置系统花的时间远比debug要的花的时间少，如果你只是完成作业，请大胆重置，如果你有很多时间，且很有兴趣，可以大胆的去搜去研究，对Linux环境的理解会很有帮助</p>
<p>进入正题，我们首先需要创建一个project，并且选择maven。</p>
<p><img src="https://pic3.zhimg.com/v2-0dd014d30b19d6f721aaa250fb0db85e_b.png" alt="img"></p>
<p>什么是maven，可以在下面链接查看，以及我当时参考的教程。这里非常感谢给予帮助的郭同学，因为之前完全没接触过这些只是，啥都不懂，非常感谢他手把手教我，然后重新看下面的操作，就很好理解（PS:xml的格式一定要完全复制，我之前配置Hadoop环境的时候碰到一个问题就是它xml格式上下不是完全相同的，/做区分）</p>
<p><img src="https://pic3.zhimg.com/v2-845fd7e89d7577c7401ac9516214ab5e_b.png" alt="img"></p>
<p><a class="link"   href="https://www.polarxiong.com/archives/Hadoop-Intellij%E7%BB%93%E5%90%88Maven%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95MapReduce%E7%A8%8B%E5%BA%8F-%E6%97%A0%E9%9C%80%E6%90%AD%E8%BD%BDHadoop%E5%92%8CHDFS%E7%8E%AF%E5%A2%83.html" >Hadoop: Intellij结合Maven本地运行和调试MapReduce程序 (无需搭载Hadoop和HDFS环境)<i class="fas fa-external-link-alt"></i></a></p>
<p>输入名称后继续，什么都不要改，然后进入新创建的project，初始状态如下</p>
<p><img src="https://pic3.zhimg.com/v2-cad571284695667153a3ef735b0eea6a_b.png" alt="img"></p>
<p>然后下面导入我们的pom文件，路径依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;Hadoop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;6&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;6&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;6&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;6&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;7&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;7&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;7&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;7&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;apache&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-common&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.2.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
<p>会在右上角红框内出现这个，点击loade pom change，然后Hadoop会自动帮你配置完成，第一次可能需要点时间，等它compile完，你就完成一大半了。</p>
<p><img src="https://pic3.zhimg.com/v2-db0ce18da28171db469974f9a0ab68d2_b.png" alt="img"></p>
<p>下来书写你的WordCount.java </p>
<p>首先创造一个java，路径是在src/main/java底下new 一个java，class name 叫WordCount,然后这里导入我之前写的WordCount.java</p>
<p><img src="https://pic4.zhimg.com/v2-78d15bbd7925f9bddae8c6ec8015c6c7_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">public class WordCount &#123;</span><br><span class="line"></span><br><span class="line">    public static class TokenizerMapper</span><br><span class="line">            extends Mapper&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">        private final static IntWritable one &#x3D; new IntWritable(1);</span><br><span class="line">        private Text word &#x3D; new Text();</span><br><span class="line"></span><br><span class="line">        public void map(Object key, Text value, Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            StringTokenizer itr &#x3D; new StringTokenizer(value.toString());</span><br><span class="line">            while (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class IntSumReducer</span><br><span class="line">            extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line">        private IntWritable result &#x3D; new IntWritable();</span><br><span class="line"></span><br><span class="line">        public void reduce(Text key, Iterable&lt;IntWritable&gt; values,</span><br><span class="line">                           Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            int sum &#x3D; 0;</span><br><span class="line">            for (IntWritable val : values) &#123;</span><br><span class="line">                sum +&#x3D; val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Configuration conf &#x3D; new Configuration();</span><br><span class="line">        Job job &#x3D; Job.getInstance(conf, &quot;word count&quot;);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, new Path(args[0]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class="line">        System.exit(job.waitForCompletion(true) ? 0 : 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下来需要配置运行，选择application</p>
<p><img src="https://pic1.zhimg.com/v2-94a80fe5f6a100e331e2cd30918f5808_b.png" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-c83dbde658707eb3ef7955ba02e34a61_b.png" alt="img"></p>
<p>选择application后需要配置如下，name随意，最重要的是Main class: 保证名字和你new的java文件名字一致，input和output是等会要放入的文件，输入和输出</p>
<p><img src="https://pic2.zhimg.com/v2-620013b2b632c38fee81735517ab9d69_b.png" alt="img"></p>
<p>配置输入文件</p>
<p>这里我刚刚在configuration里面写了我的输入文件叫input，需要配置输入路径，这里在（src同级目录下）新建一个文件夹input，并且把你需要输入的文件放进去，这儿还是之前的pg100.txt</p>
<p><img src="https://pic1.zhimg.com/v2-ad377d58ed8fd1a421ef3c9af0f9b280_b.png" alt="img"></p>
<p>额外，我们需要在File-&gt;Project Structure（或者mac快捷键command+;)将language level调整为7，然后点右下角ok</p>
<p><img src="https://pic2.zhimg.com/v2-bb93bed4ab015cdd6031b639195f1e79_b.png" alt="img"></p>
<p>运行和调试</p>
<p>直接点右上角的run</p>
<p><img src="https://pic1.zhimg.com/v2-b47e1c1b0a5ab1c032016956abd83188_b.png" alt="img"></p>
<p>会出现如下情况</p>
<p><img src="https://pic2.zhimg.com/v2-294c4ed3ae9673755c5f6b46cbe59c19_b.png" alt="img"></p>
<p>注意：这里的红字不是报错，不要慌！</p>
<p><img src="https://pic4.zhimg.com/v2-363633fe92ac4dda9f9f572ede3cc123_b.png" alt="img"></p>
<p>运行成功后，你的文件会出现一个output的文件，由于output的先天特性，它无法覆盖，所以下次运行的时候请删除之前的那个，或者你改个名字（我后来好像看见这个可以用其他方法覆盖的，这里就不做涉及）</p>
<p><img src="https://pic3.zhimg.com/v2-f7308af1cc604837f179edbf26a8b492_b.png" alt="img"></p>
<p>打开part-r-00000，会出现你Hadoop运行的结果</p>
<p><img src="https://pic4.zhimg.com/v2-87c20a09d5c68150c7374947e2f54bcf_b.png" alt="img"></p>
<p>到现在为，用IDEA配置Hadoop已经全部完成了。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>从阿里云轻量服务器安装Hadoop及环境配置</title>
    <url>/2021/01/26/%E4%BB%8E%E9%98%BF%E9%87%8C%E4%BA%91%E8%BD%BB%E9%87%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Hadoop%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>知乎首次写文章，恳请大家多多担待</p>
<p>本人是一名大四生物信息的学生，在大数据课上，老师需要我们配置Hadoop去处理一些东西。网上的一些教程互相冲突，记录一下这个从头可以完全运行成功的教程</p>
<ol>
<li>购买服务器</li>
</ol>
<p>因为本人使用的仍然是14年的MBP，怕随随便便装个新系统把电脑给折腾坏了，这里购买的是云服务器，这里首推阿里云。</p>
<p>若您是常年使用谷歌搜索，请注意关闭梯子，因为阿里云是有国内国外两个系统，各自独立，虽然墙外的服务器可以免费试用2个月，但各种实名认证是绕不开的。</p>
<p>若您是学生，阿里云有一个开发者成长计划，专门针对在校大学生，也就是教育优惠。非常便宜，只需要9.5一个月</p>
<p><a class="link"   href="https://developer.aliyun.com/plan/grow-up" >阿里云开发者成长计划<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://pic1.zhimg.com/v2-b9cf2d24d57aa3e715020e3f6e38cd1c_b.png" alt="img"></p>
<p>\2. 服务器选择和配置</p>
<p>这里选择的是轻量服务器，系统镜像和应用镜像不需要改变，保持默认值就行（WordPress, CentOS 7.3）</p>
<p><img src="https://pic2.zhimg.com/v2-12c765376ed1ffb827435c4047b8a671_b.png" alt="img"></p>
<p>这里需要设置root权限和密码</p>
<p>设置成功后通过本地terminal（MAC）或者cmd（Windows）来构建ssh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@****</span><br></pre></td></tr></table></figure>
<p>然后输入之前设置的root的权限的密码（注意：这里的密码是不会有任何显示的）</p>
<p><img src="https://pic1.zhimg.com/v2-af9e75a4cb07870aa8373b4671862198_b.png" alt="img"></p>
<p>若出现上图的情况，需要清理一下之前的key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -R XX.XX.XX.XX</span><br></pre></td></tr></table></figure>
<p>然后再次用ssh连接，然后yes</p>
<p><img src="https://pic2.zhimg.com/v2-e12d923ff1d5a1f5f75c86ee11fd447d_b.png" alt="img"></p>
<p>好，到此我们进入到了阿里云的服务器</p>
<p>\3. 我们开始配置java环境</p>
<p>首先下载java的jdk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download.java.net&#x2F;openjdk&#x2F;jdk8u41&#x2F;ri&#x2F;openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br></pre></td></tr></table></figure>
<p>然后解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br></pre></td></tr></table></figure>
<p>移动位置并且配置java路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv java-se-8u41-ri&#x2F; &#x2F;usr&#x2F;java8</span><br><span class="line">echo &#39;export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java8&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-85701c9548e5c31b2faaf569c31eed48_b.png" alt="img"></p>
<p>这是理想情况，若安装成功会出现如下结果</p>
<p>\4. 我们进行Hadoop的安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;hadoop&#x2F;common&#x2F;hadoop-2.9.2&#x2F;hadoop-2.9.2.tar.gz</span><br></pre></td></tr></table></figure>
<p>这儿是清华的镜像源，国内的小伙伴下载比较快</p>
<p>按照惯例解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.9.2.tar.gz -C &#x2F;opt&#x2F;</span><br><span class="line">mv &#x2F;opt&#x2F;hadoop-2.9.2 &#x2F;opt&#x2F;hadoop</span><br></pre></td></tr></table></figure>
<p>配置地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;export HADOOP_HOME&#x3D;&#x2F;opt&#x2F;hadoop&#x2F;&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;sbin&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>配置yarn和hadoop</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java8&quot; &gt;&gt; &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;yarn-env.sh</span><br><span class="line">echo &quot;export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java8&quot; &gt;&gt; &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh</span><br></pre></td></tr></table></figure>
<p>查看Hadoop 安装情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-c7b11851e5c3f5083809748875ef90aa_b.png" alt="img"></p>
<p>若出现上图情况，则说明安装成功</p>
<p>\5. 接下来需要利用vim来操作core-site 和 hdfs-site</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml</span><br></pre></td></tr></table></figure>
<p>进入vim环境</p>
<p><img src="https://pic2.zhimg.com/v2-c913566815ccb9dc077e6b1905c9f261_b.png" alt="img"></p>
<p>按下i（insert）修改</p>
<p>光标移动至configuration之间，复制如下的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;file:&#x2F;opt&#x2F;hadoop&#x2F;tmp&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;description&gt;location to store temporary files&lt;&#x2F;description&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<p>然后按下esc，停止修改，然后打”:wq”（实际无“”）退出vim修改</p>
<p>同理操作hdfs-site</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;file:&#x2F;opt&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;file:&#x2F;opt&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<p>配置master和slave连接，运行如下指令，并且一直回车，直至出现如下图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa </span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-2a2c7f685bee80d7e51469a49c64c282_b.png" alt="img"></p>
<p>运行如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>
<p>启动Hadoop</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>查看是否配置成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p>成功图</p>
<p><img src="https://pic3.zhimg.com/v2-1d41b7f780ab263558dcdd06b11623be_b.png" alt="img"></p>
<p>\7. 注意注意：接下来需要开启你在阿里云的防火墙端口，才可以在浏览器上访问，否则你怎么弄都是访问不到 (这里我卡了快一个礼拜，最后非常感谢阿里云的小哥哥帮我解决了这个问题)</p>
<p><img src="https://pic1.zhimg.com/v2-ca4e2239f097d66886dae184064870fc_b.png" alt="img"></p>
<p>最后你就可以在浏览器输入XX.XX.XX.XX**:50070 或者**XX.XX.XX.XX:8088来在浏览器上访问你的Hadoop</p>
<p>效果图如下</p>
<p><img src="https://pic1.zhimg.com/v2-a562c44a3df91441ca1fd4945fdcbc10_b.png" alt="img"></p>
<p>以及</p>
<p><img src="https://pic3.zhimg.com/v2-335aaf433e9d3fdec8ef045419837fba_b.png" alt="img"></p>
<p><strong>结语</strong> </p>
<p>因为我是一名大四生物信息的学生，对于计算机的至少掌握不是全，一些tcp-ip协议之类的指令没有掌握，所以很多都是一知半解，只是照着教程一步步装，若有错误，请大家指导。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>tutorial</tag>
        <tag>cloud server</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云Hadoop第二弹（运行WordCount）</title>
    <url>/2021/01/26/%E9%98%BF%E9%87%8C%E4%BA%91Hadoop%E7%AC%AC%E4%BA%8C%E5%BC%B9%EF%BC%88%E8%BF%90%E8%A1%8CWordCount%EF%BC%89/</url>
    <content><![CDATA[<p>书接上文</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p>首先检查java 环境和Hadoop 环境是否配置妥当, 并且检查Hadoop是否已经启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-bc60a5be51a0785a8340726cdb26419b_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-ea0b84eac9c4d56857a7f185622ef725_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-106a2381128b4ff82a48be073263819d_b.png" alt="img"></p>
<p>本文章用到的WordCount使用自web，java文件如有需要请在下方连接下载（如有机会，大家给我GitHub账户点个关注，谢谢）（如果是xjtlu的小伙伴，暂时不要用老师给的wordcount.java，因为反正不知道什么原因我这个方法就是运行不出来，如果只是需要check一下他配置的好不好，可以直接拿我这个确定的可以成功的script来试一下）</p>
<p><a class="link"   href="https://github.com/yuxuanwu17/Hadoop/blob/main/WordCount_success.java" >https://github.com/yuxuanwu17/Hadoop/blob/main/WordCount_success.java<i class="fas fa-external-link-alt"></i></a></p>
<p>这里推荐一个传文件的图形化界面，可以直接拖拽，这样就不用繁琐的scp语句</p>
<p>Windows： wincsp </p>
<p><a class="link"   href="https://winscp.net/eng/download.php" >https://winscp.net/eng/download.php<i class="fas fa-external-link-alt"></i></a></p>
<p>MAC: FileZilla  </p>
<p><a class="link"   href="https://filezilla-project.org/download.php?type=client" >Download FileZilla Client for Mac OS X<i class="fas fa-external-link-alt"></i></a></p>
<p>对上述两app的具体操作可以看官方文档，这里不再赘述</p>
<p>以下以MAC：FileZilla 为例子</p>
<p><img src="https://pic3.zhimg.com/v2-96269965d3602b37766b8ec2bff6f26a_b.png" alt="img"></p>
<p>再这儿输入你的主机用户名和密码，这里通常以root权限来操作，然后端口22（ssh连接）</p>
<p>连接成功后，进入如下的界面</p>
<p><img src="https://pic3.zhimg.com/v2-84b3168e88338d3dc213a128f7c1a026_b.png" alt="img"></p>
<p>然后你可以在你的远端服务器上右键，“Create Directory”，我这里面叫cw里面包含两个子文件 “inputdata”和“tutorial_classes”，并且把之前提到的java文件“WordCount”拖入到cw这个子文件下，效果图如下。</p>
<p><img src="https://pic1.zhimg.com/v2-4d3cfa1b16960f8588e33f3b040c3548_b.png" alt="img"></p>
<p>这儿的input_data 需要存放你等会需要处理的文件，pg100是我们test的对象</p>
<p><img src="https://pic1.zhimg.com/v2-108e735d3349cbda806a7fb50be210c8_b.png" alt="img"></p>
<p>接下来配置Hadoop的路径之类的，同理，terminal打开，进入你的阿里云服务器</p>
<p>配置HADOOP_CLASSPATH （注意，如果是关闭后打开，记得重新运行一下这行代码，原因暂时不知道，若有知道的请评论区告诉呀）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HADOOP_CLASSPATH&#x3D;$(hadoop classpath)</span><br></pre></td></tr></table></figure>
<p>同时输出以下HADOOP_CLASSPATH 来看一下是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $HADOOP_CLASSPATH</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-63dbc77d229db739c7c1ecf61b6bed76_b.png" alt="img"></p>
<p>若出现如下结果则说明一切运行成功</p>
<p>接下来在HDFS上创建一个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir &#x2F;pg100</span><br></pre></td></tr></table></figure>
<p>打开你的50070 端口，在右上角的Utilities里面的Browse the file system可以查看</p>
<p><img src="https://pic4.zhimg.com/v2-55f6f53ec031fe6e3d44410195c04693_b.png" alt="img"></p>
<p>再在这个文件里创建一个子文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir &#x2F;pg100&#x2F;input</span><br></pre></td></tr></table></figure>
<p>然后你点入那个pg100，就会发现有个input，此时里面暂时还没有文件</p>
<p><img src="https://pic1.zhimg.com/v2-f1e7f777fa5efcbb6651e230df6c4780_b.png" alt="img"></p>
<p>下来你需要upload你的文件到input地址下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -put &#39;&#x2F;root&#x2F;cw&#x2F;input_data&#x2F;pg100.txt&#39; &#x2F;pg100&#x2F;input</span><br></pre></td></tr></table></figure>
<p>然后你就会发现如下情况，说明已经上传成功了</p>
<p><img src="https://pic1.zhimg.com/v2-0a68b432563ddc0ad7f766e7d2caaff4_b.png" alt="img"></p>
<p>下来需要在terminal进入你的cw文件, 来运行你的java code 以下操作都cw路径底下操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd cw</span><br></pre></td></tr></table></figure>
<p>进入成功后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -classpath $&#123;HADOOP_CLASSPATH&#125; -d &#39;&#x2F;root&#x2F;cw&#x2F;tutorial_classes&#39; &#39;&#x2F;root&#x2F;cw&#x2F;WordCount.java&#39;</span><br></pre></td></tr></table></figure>
<p>上述的意思是将java 文件里的class compile到tutorial_classes</p>
<p>结果是在路径底下会出现三个class文件</p>
<p><img src="https://pic1.zhimg.com/v2-e9b12f0aa357d9b29482e2e4474fd9e8_b.png" alt="img"></p>
<p>下来需要将output出来的三个文件放在一个jar文件里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar -cvf firstTrial.jar -C tutorial_classes&#x2F; .</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-d9827900535428bb7c739d2f97cb00f7_b.png" alt="img"></p>
<p><img src="https://pic3.zhimg.com/v2-7dfb7f7667dd3c26cdb4d30013d42082_b.png" alt="img"></p>
<p>下来是在Hadoop上运行jar文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar &#39;&#x2F;root&#x2F;cw&#x2F;firstTrial.jar&#39; WordCount &#x2F;pg100&#x2F;input &#x2F;pg100&#x2F;output</span><br></pre></td></tr></table></figure>
<p>注意：中间的WordCount指的是之前那个java文件的Class后面，注意下面只是上文的格式，不用运行！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar &lt;jar_file&gt; &lt;class_name&gt; &lt;HDFS_input_directory&gt; &lt;HDFS_output_directory&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src="https://pic3.zhimg.com/v2-5e6f74dafefc6178e7455b7a919456b6_b.png" alt="img"></p>
<p>可以查看output，“| head” 是为了查看前几个，这个sample的个数比较大，不适宜全部展开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop dfs -cat &#x2F;pg100&#x2F;output&#x2F;* | head</span><br></pre></td></tr></table></figure>
<p>效果图</p>
<p><img src="https://pic2.zhimg.com/v2-79965028669722decc012e514f918c35_b.png" alt="img"></p>
<p>如有问题，欢迎在评论区指出呀，写文件不容易，求点赞</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>cloud server</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 在mac本地的配置</title>
    <url>/2021/01/26/Hadoop-%E5%9C%A8mac%E6%9C%AC%E5%9C%B0%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/271772216" >loner：阿里云Hadoop第二弹（运行WordCount）<i class="fas fa-external-link-alt"></i></a></p>
<p>之前在阿里云上的案例我成功运行了wordcount。但是考虑到实际的编程，在阿里云上的可视化界面显得有些艰难，更不要提eclipse界面有点丑。我觉得还是用jetbrain公司的IDEA来开发，这儿学生可以免费使用专业版，如果有需要可以自行下载。主要是有大数据工具的插件Hadoop，然后就开始我一个礼拜的捣鼓，然后发现好像阿里云的9000端口好像无法打开（网上说什么内网的原因，所以在Hadoop上链接不上）于是偶然发现mac在本地配置的教程，就此汇总一下。</p>
<p><strong>Java的安装</strong></p>
<p>不再赘述，网上有很多的教程，在保证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version </span><br></pre></td></tr></table></figure>
<p>可以输出如下界面，则我们开始Hadoop的配置</p>
<p><img src="https://pic3.zhimg.com/v2-d0a5d1671f8e707705db4068ed2c3b36_b.png" alt="img"></p>
<p><strong>下载Hadoop的原始代码</strong></p>
<p>本文章全程以hadoop-2.9.2为例子，在下面的链接中下载hadoop-2.9.2.tar.gz 既可以</p>
<p>Index of /dist/hadoop/core/hadoop-2.9.2archive.apache.org</p>
<p>解压到本地的目录下面</p>
<p><strong>添加Hadoop的环境变量</strong></p>
<p>这儿我们需要用vim修改 ~/.bash_profile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>
<p>在最下面添加这几行代码，编辑完成后:wq退出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME&#x3D;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2</span><br><span class="line">export CLASSPATH&#x3D;$($HADOOP_HOME&#x2F;bin&#x2F;hadoop classpath):$CLASSPATH</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR&#x3D;$HADOOP_HOME&#x2F;lib&#x2F;native</span><br><span class="line">export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-930eafe5cc710ad971b5117743db5a01_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>
<p>运行保存修改，然后用hadoop version 查看Hadoop是否配置成功，若如下界面则成功</p>
<p><img src="https://pic1.zhimg.com/v2-ee20ec242e386db002380dcb72867920_b.png" alt="img"></p>
<p><strong>修改Hadoop的配置文件(如下操作都需要cd到Hadoop解压的环境来操作)</strong></p>
<p><strong>这些配置文件都保存在hadoop-2.9.2/etc/hadoop/路径下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;etc&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure>
<ol>
<li><a class="link"   href="http://hadoop-env.sh/" >hadoop-env.sh<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p>用vim打开后在JAVA_HOME 和 HADOOP_CONF_DIR和HADOOP_HOME 来进行修改,这些分别对应着本地各自的目录</p>
<p><img src="https://pic4.zhimg.com/v2-94f2b2349ea9e6c2702503234f4693a7_b.png" alt="img"></p>
<p>\2. core_site.xml </p>
<p><img src="https://pic2.zhimg.com/v2-53c0b5f20163d17f1ec17df2aba54361_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--用来指定hadoop运行时产生文件的存放目录  自己创建--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;tmp&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>
<p>\3. 修改hdfs-site.xml</p>
<p><img src="https://pic2.zhimg.com/v2-e604bbc1c67dbf33d1362ce2e607ada5_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--不是root用户也可以写文件到hdfs--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.permissions&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;false&lt;&#x2F;value&gt;    &lt;!--关闭防火墙--&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--把路径换成本地的name坐在位置--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;tmp&#x2F;dfs&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--在本地新建一个存放hadoop数据的文件夹，然后将路径在这里配置一下--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;tmp&#x2F;dfs&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>
<p><strong>启动Hadoop</strong></p>
<ol>
<li><strong>NameNode</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>
<p><strong>2. HDFS</strong></p>
<p><strong>首先先进入到sbin目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;sbin&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>启动HDFS</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start-dfs.sh</span><br></pre></td></tr></table></figure>
<p>若成功了，需要输入三次密码</p>
<p>若失败，则检查mac系统的远程登陆的许可是否打开</p>
<p><img src="https://pic2.zhimg.com/v2-81822aef74c93d30d0922e6418988df5_b.png" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-3dfdcfacb09068a89b21bdb0fb8bfc73_b.png" alt="img"></p>
<p>确保界面呈现这样</p>
<p><strong>3. 启动yarn</strong></p>
<p><strong>还是进入sbin目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start-yarn.sh</span><br></pre></td></tr></table></figure>
<p><strong>4. jps检查</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps </span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-e769560739e1e9e5b1d4d9ab625a1c38_b.png" alt="img"></p>
<p>若出现上述界面则配置成功了</p>
<p>然后可以在浏览器里验证(50070,8088)</p>
<p><a class="link"   href="http://localhost:50070/dfshealth.html#tab-overview" >http://localhost:50070/dfshealth.html#tab-overview<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="http://localhost:8088/cluster" >http://localhost:8088/cluster<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://pic2.zhimg.com/v2-cd6f142d46fe05e5de300617bfd95451_b.png" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-159a137c51c6c512abfdf60574fec7d0_b.png" alt="img"></p>
<p>后记：</p>
<p>如果隔了几天没有打开Hadoop，或者你的电脑重启了，反正就是jps上出现不了那几个玩意，或者你的浏览器页面打不开，请严格遵照Hadoop启动后的代码，比如进入Hadoop的sbin界面之类的，然后依次操作，于是就能重新打开Hadoop的界面了</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>tutorial</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Heart failure detection by SVM-based machine learning model</title>
    <url>/2021/01/24/YuxuanWu-1716309-INT305-Report/</url>
    <content><![CDATA[<p>Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide.<br>Heart failure is a common event caused by CVDs.</p>
<p>Most cardiovascular diseases can be prevented by addressing behavioural risk factors such as tobacco use, unhealthy diet and obesity, physical inactivity and harmful use of alcohol using population-wide strategies.</p>
<p>People with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.</p>
<h3 id="Project-description-overview"><a href="#Project-description-overview" class="headerlink" title="Project description (overview)"></a>Project description (overview)</h3><p>The input to our predictor is is a medical dataset which contains 12 features that can be used to predict mortality by heart failure.</p>
<ol>
<li>Data exploration<ul>
<li>Principle Components Analysis (PCA) to reduce the dimension of features to have a view of the input data distribution</li>
<li>Build a preliminary linear SVM model to incorporate all the features to see the model performance.</li>
</ul>
</li>
<li>Feature selection part.<ul>
<li>Chi-square test to check the correlation between each categorical feature and the target death event.</li>
<li>Heat map to return the features with high correlation coefficient with death events.</li>
<li>Visualized the each feature’s contribution significance in the SVM model</li>
<li>Compared the returned features and determined the final selected features</li>
</ul>
</li>
<li>Model comparison and hyperparameter tuning<ul>
<li>compare the performance in difference preprocessing methods MinMaxScalar, StandardScalar, RobustScalar</li>
<li>compare the performance in k-fold cross validation and leave-one-out methods</li>
<li>compare the kernel selected in Support Vector Machine (linear or rbf)</li>
<li>grid search to find the best performance model</li>
</ul>
</li>
<li>Selected model performance<ul>
<li>calculated the precision, recall, accuracy and f1-score</li>
<li>plot the ROC and PR-curve</li>
<li>plot the learning curve</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a>Related work</h2><h3 id="Explorative-data-analysis-EDA-approach"><a href="#Explorative-data-analysis-EDA-approach" class="headerlink" title="Explorative data analysis (EDA) approach"></a>Explorative data analysis (EDA) approach</h3><ol>
<li><a class="link"   href="https://www.kaggle.com/nayansakhiya/heart-fail-analysis-and-quick-prediction" >heart-fail-analysis-and-quick-prediction<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p><strong>Strength</strong>: Detailed explorative and associative data analysis with great data visualization: each factor is visualized by different types of figures <br><br><strong>Weakness</strong>: Prediction model are quite rudimentary, the author did not select the features and tune the models’ hyperparameters.<br><br><strong>Similarity</strong>: I learned and applied the plotly.express API to create fancy and concise figures for easy comparison; I furthered his rudimentary model by optimization</p>
<h3 id="Predictive-data-analysis-PDA-approach"><a href="#Predictive-data-analysis-PDA-approach" class="headerlink" title="Predictive data analysis (PDA) approach"></a>Predictive data analysis (PDA) approach</h3><ol>
<li><a class="link"   href="https://www.kaggle.com/rude009/heart-failure-model-prediction-comparisons-95" >heart-failure-model-prediction-comparisons-95<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p><strong>Strength</strong>: The author compares six prediction models with feature selection. The Extra Gradient Booster Classifier could achieve the accuracy up to 95.0% <br><br><strong>Weakness</strong>: The author consider the “time” column as the useful features. <br><br><strong>Similarity</strong>: I don’t think “time” colume should be included since “time” column stands for Follow-up period (days), which means itself could not contribute the diseases itself. Therefore, I consider this feature as uselessness in our prediction model</p>
<ol start="2">
<li><a class="link"   href="https://www.kaggle.com/ksvmuralidhar/heart-failure-prediction-auc-0-98" >heart-failure-prediction-auc-0-98<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p><strong>Strength</strong>: The author uses a new method: Chi-square test to find the correlation between single categorical feature with target death_event <br><br><strong>Weakness</strong>: The visualization part does not as fancy as previous work <br><br><strong>Similarity</strong>: I learned and used the Chi-square test to conduct the correlation test between single categorical data with the categorical death_event; but i didn’t agree the author’s method in using box plot comparison between numerical data with categorical data, I used heat map instead.</p>
<hr>
<h2 id="Data-download"><a href="#Data-download" class="headerlink" title="Data download"></a>Data download</h2><p>You could simply download the data from my own Github repository: <a class="link"   href="https://media.githubusercontent.com/media/yuxuanwu17/kaggle/main/heart_failure_clinical_records_dataset.csv" >https://media.githubusercontent.com/media/yuxuanwu17/kaggle/main/heart_failure_clinical_records_dataset.csv<i class="fas fa-external-link-alt"></i></a></p>
<p>You could also download the data from kaggle：<br><a class="link"   href="https://www.kaggle.com/andrewmvd/heart-failure-clinical-data" >https://www.kaggle.com/andrewmvd/heart-failure-clinical-data<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Libraries-used-in-this-project"><a href="#Libraries-used-in-this-project" class="headerlink" title="Libraries used in this project"></a>Libraries used in this project</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, cross_val_score, LeaveOneOut,GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler, StandardScaler, RobustScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve, classification_report</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> chi2_contingency</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sn</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Problem-formulation"><a href="#Problem-formulation" class="headerlink" title="Problem formulation"></a>Problem formulation</h2><h3 id="Return-the-head-of-dataset-a-overview-of-inside-components"><a href="#Return-the-head-of-dataset-a-overview-of-inside-components" class="headerlink" title="Return the head of dataset (a overview of inside components)"></a>Return the head of dataset (a overview of inside components)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df = pd.read_csv(&quot;/home/yuxuan/kaggle/heart_failure_clinical_records_dataset.csv&quot;)</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;/Users/yuxuan/Desktop/kaggle/heart_failure_clinical_records_dataset.csv&quot;</span>)</span><br><span class="line"><span class="comment"># df = pd.read_csv(&quot;../input/heart-failure-clinical-data/heart_failure_clinical_records_dataset.csv&quot;)</span></span><br><span class="line">heart_data = df.copy()</span><br><span class="line">heart_data.head()</span><br></pre></td></tr></table></figure>



<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>age</th>
      <th>anaemia</th>
      <th>creatinine_phosphokinase</th>
      <th>diabetes</th>
      <th>ejection_fraction</th>
      <th>high_blood_pressure</th>
      <th>platelets</th>
      <th>serum_creatinine</th>
      <th>serum_sodium</th>
      <th>sex</th>
      <th>smoking</th>
      <th>time</th>
      <th>DEATH_EVENT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>75.0</td>
      <td>0</td>
      <td>582</td>
      <td>0</td>
      <td>20</td>
      <td>1</td>
      <td>265000.00</td>
      <td>1.9</td>
      <td>130</td>
      <td>1</td>
      <td>0</td>
      <td>4</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>55.0</td>
      <td>0</td>
      <td>7861</td>
      <td>0</td>
      <td>38</td>
      <td>0</td>
      <td>263358.03</td>
      <td>1.1</td>
      <td>136</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>65.0</td>
      <td>0</td>
      <td>146</td>
      <td>0</td>
      <td>20</td>
      <td>0</td>
      <td>162000.00</td>
      <td>1.3</td>
      <td>129</td>
      <td>1</td>
      <td>1</td>
      <td>7</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>50.0</td>
      <td>1</td>
      <td>111</td>
      <td>0</td>
      <td>20</td>
      <td>0</td>
      <td>210000.00</td>
      <td>1.9</td>
      <td>137</td>
      <td>1</td>
      <td>0</td>
      <td>7</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>65.0</td>
      <td>1</td>
      <td>160</td>
      <td>1</td>
      <td>20</td>
      <td>0</td>
      <td>327000.00</td>
      <td>2.7</td>
      <td>116</td>
      <td>0</td>
      <td>0</td>
      <td>8</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="Print-the-size-of-the-dataset"><a href="#Print-the-size-of-the-dataset" class="headerlink" title="Print the size of the dataset"></a>Print the size of the dataset</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(heart_data.shape)</span><br></pre></td></tr></table></figure>
<pre><code>(299, 13)</code></pre>
<h3 id="Check-the-ratio-of-the-NaNs-for-each-column"><a href="#Check-the-ratio-of-the-NaNs-for-each-column" class="headerlink" title="Check the ratio of the NaNs for each column"></a>Check the ratio of the NaNs for each column</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> heart_data.columns:</span><br><span class="line">    print(col, <span class="built_in">str</span>(<span class="built_in">round</span>(<span class="number">100</span>* heart_data[col].isnull().<span class="built_in">sum</span>() / <span class="built_in">len</span>(heart_data), <span class="number">2</span>)) + <span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>age 0.0%
anaemia 0.0%
creatinine_phosphokinase 0.0%
diabetes 0.0%
ejection_fraction 0.0%
high_blood_pressure 0.0%
platelets 0.0%
serum_creatinine 0.0%
serum_sodium 0.0%
sex 0.0%
smoking 0.0%
time 0.0%
DEATH_EVENT 0.0%</code></pre>
<hr>
<h3 id="Dataset-description"><a href="#Dataset-description" class="headerlink" title="Dataset description"></a>Dataset description</h3><p>There are 13 dimensions and 299 samples. All the columns are devoid of NaNs. We need make some rules before the data processing。</p>
<p>Target features (binary classification): DEATH_EVENT</p>
<p><strong>Categorical data</strong></p>
<ul>
<li>Sex - Gender of patient Male = 1, Female =0</li>
<li>Diabetes - 0 = No, 1 = Yes</li>
<li>Anaemia - 0 = No, 1 = Yes</li>
<li>High_blood_pressure - 0 = No, 1 = Yes</li>
<li>Smoking - 0 = No, 1 = Yes</li>
<li>DEATH_EVENT - 0 = No, 1 = Yes</li>
</ul>
<p><strong>Numerical data</strong></p>
<ul>
<li>Age - Age of patient</li>
<li>creatinine_phosphokinase - Level of the CPK enzyme in the blood (mcg/L)</li>
<li>ejection_fraction - Percentage of blood leaving the heart at each contraction (percentage)</li>
<li>platelets - Platelets in the blood (kiloplatelets/mL)</li>
<li>serum_creatinine - Level of serum creatinine in the blood (mg/dL)</li>
<li>serum_sodium - Level of serum sodium in the blood (mEq/L)</li>
<li>time - Follow-up period (days)</li>
</ul>
<h3 id="Citation-or-Reference"><a href="#Citation-or-Reference" class="headerlink" title="Citation or Reference"></a>Citation or Reference</h3><p>Dataset from Davide Chicco, Giuseppe Jurman: Machine learning can predict survival of patients with heart failure from serum creatinine and ejection fraction alone. BMC Medical Informatics and Decision Making 20, 16 (2020)</p>
<p>The dataset downloaded from Kaggle <a class="link"   href="https://www.kaggle.com/andrewmvd/heart-failure-clinical-data" >https://www.kaggle.com/andrewmvd/heart-failure-clinical-data<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<h3 id="Principle-components-analysis"><a href="#Principle-components-analysis" class="headerlink" title="Principle components analysis"></a>Principle components analysis</h3><p>Reduce the dimensions and return the sample distribution</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">X = heart_data.iloc[:,<span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">X = StandardScaler().fit_transform(X)</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line">pca.fit(X)</span><br><span class="line">X_pca = pca.transform(X)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">0</span>,<span class="number">0</span>],X_pca[y==<span class="number">0</span>,<span class="number">1</span>],label=<span class="string">&quot;Alive&quot;</span>,c=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">1</span>,<span class="number">0</span>],X_pca[y==<span class="number">1</span>,<span class="number">1</span>],label=<span class="string">&quot;Death&quot;</span>,c=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">plt.legend([<span class="string">&quot;Alive&quot;</span>,<span class="string">&quot;Death&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_16_1.5uoi1jp366o0.png" alt="output_16_1"></p>
<p>I would like to have a view of the sample distribution in the dataset. Therefore, I used the principle component analysis (PCA) to reduce the dimension of features into 2D for visualization. The figure suggested that the data are densed and not easy to seperate (either linear or non-linear model), indicating the existence of insignificant feature which could negatively influence the future prediction accuracy.</p>
<hr>
<h3 id="Correlation-analysis"><a href="#Correlation-analysis" class="headerlink" title="Correlation analysis"></a>Correlation analysis</h3><p>I would like to find the correlation between each feature, especially with the target variable: DEATH_EVENT.<br>In this case, I excluded the column “time” since the time tracked could not contribute to the heart failure itself.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sn</span><br><span class="line">heart_data = heart_data.drop([<span class="string">&#x27;time&#x27;</span>],axis=<span class="number">1</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line">sn.heatmap(heart_data.corr(),vmin=-<span class="number">1</span>,cmap=<span class="string">&#x27;coolwarm&#x27;</span>,annot=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_19_1.1ne10klgnr1.png" alt="output_19_1"></p>
<h3 id="Data-partition"><a href="#Data-partition" class="headerlink" title="Data partition"></a>Data partition</h3><ul>
<li>As I mentioned before, I will not take the feature “time” into consideration. Therefore, 11 features are included in the final model prediction.</li>
<li>I split the dataset into two categories. 80% for raining data and 20% for testing data.</li>
<li>I used the StandardScalar normalization method to preprocess the data</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:,<span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">X = StandardScaler().fit_transform(X)</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&quot;The number of training sample is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(X_train.shape[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">&quot;The number of testing sample is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(X_test.shape[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>The number of training sample is 239
The number of testing sample is 60</code></pre>
<h3 id="Feature-selection-feature-engineering"><a href="#Feature-selection-feature-engineering" class="headerlink" title="Feature selection (feature engineering)"></a>Feature selection (feature engineering)</h3><p><strong>Method 1: Chi-square test</strong></p>
<ul>
<li>Based on previous research, I could conclude that DEATH_EVENT is our target. Since I have six categorical data I would like to figure out whether these single categorical valuable has significant correlation with the DEATH_EVENT.<br></li>
<li>Crosstables/contingency tables are one of the best ways to see how categorical variables are distributed among each other.</li>
<li>The following test suggests that we failed to reject the $H_0$ problem, indicating that there is no direct relationship between the DEATH_EVENT</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> chi2_contingency</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">cat_features = [<span class="string">&quot;anaemia&quot;</span>,<span class="string">&quot;diabetes&quot;</span>,<span class="string">&quot;high_blood_pressure&quot;</span>,<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;smoking&quot;</span>,<span class="string">&quot;DEATH_EVENT&quot;</span>]</span><br><span class="line">num_features = pd.Series(heart_data.columns)</span><br><span class="line">num_features = num_features[~num_features.isin(cat_features)]</span><br><span class="line">num_features</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cat_features:</span><br><span class="line">    ct = pd.crosstab(columns=heart_data[i],index=heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>])</span><br><span class="line">    stat, p, dof, expected = chi2_contingency(ct)</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;-&#x27;</span>*<span class="built_in">len</span>(<span class="string">&#x27;CROSSTAB BETWEEN &#123;&#125; &amp; DEATH_EVENT&#x27;</span>.<span class="built_in">format</span>(i.upper())))</span><br><span class="line">    print(<span class="string">&quot;CROSSTAB BETWEEN &#123;&#125; &amp; DEATH_EVENT&quot;</span>.<span class="built_in">format</span>(i.upper()))</span><br><span class="line">    print(<span class="string">&#x27;-&#x27;</span>*<span class="built_in">len</span>(<span class="string">&#x27;CROSSTAB BETWEEN &#123;&#125; &amp; DEATH_EVENT&#x27;</span>.<span class="built_in">format</span>(i.upper())))</span><br><span class="line">    print(ct)</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; &#123;&#125; \nH1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i.upper(),i.upper()))</span><br><span class="line">    print(<span class="string">&quot;\nP-VALUE: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(np.<span class="built_in">round</span>(p,<span class="number">2</span>)))</span><br><span class="line">    print(<span class="string">&quot;REJECT H0&quot;</span> <span class="keyword">if</span> p&lt;<span class="number">0.05</span> <span class="keyword">else</span> <span class="string">&quot;FAILED TO REJECT H0&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>​<br>​    ————————————–<br>​    CROSSTAB BETWEEN ANAEMIA &amp; DEATH_EVENT<br>​    ————————————–<br>​    anaemia        0   1<br>​    DEATH_EVENT<br>​    0            120  83<br>​    1             50  46</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; ANAEMIA<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; ANAEMIA<br>​<br>    P-VALUE: 0.31<br>    FAILED TO REJECT H0</p>
<p>​<br>​    —————————————<br>​    CROSSTAB BETWEEN DIABETES &amp; DEATH_EVENT<br>​    —————————————<br>​    diabetes       0   1<br>​    DEATH_EVENT<br>​    0            118  85<br>​    1             56  40</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; DIABETES<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; DIABETES<br>​<br>    P-VALUE: 0.93<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ————————————————–<br>​    CROSSTAB BETWEEN HIGH_BLOOD_PRESSURE &amp; DEATH_EVENT<br>​    ————————————————–<br>​    high_blood_pressure    0   1<br>​    DEATH_EVENT<br>​    0                    137  66<br>​    1                     57  39</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; HIGH_BLOOD_PRESSURE<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; HIGH_BLOOD_PRESSURE<br>​<br>    P-VALUE: 0.21<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ———————————-<br>​    CROSSTAB BETWEEN SEX &amp; DEATH_EVENT<br>​    ———————————-<br>​    sex           0    1<br>​    DEATH_EVENT<br>​    0            71  132<br>​    1            34   62</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; SEX<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; SEX<br>​<br>    P-VALUE: 0.96<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ————————————–<br>​    CROSSTAB BETWEEN SMOKING &amp; DEATH_EVENT<br>​    ————————————–<br>​    smoking        0   1<br>​    DEATH_EVENT<br>​    0            137  66<br>​    1             66  30</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; SMOKING<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; SMOKING<br>​<br>    P-VALUE: 0.93<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ——————————————<br>​    CROSSTAB BETWEEN DEATH_EVENT &amp; DEATH_EVENT<br>​    ——————————————<br>​    DEATH_EVENT    0   1<br>​    DEATH_EVENT<br>​    0            203   0<br>​    1              0  96</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; DEATH_EVENT<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; DEATH_EVENT<br>​<br>    P-VALUE: 0.0<br>    REJECT H0</p>
<p><strong>Method 2: correlation analysis</strong></p>
<ul>
<li>Use correlation coefficient &gt; 0.1 with death event</li>
<li>This method is applicable for both categorical data and numerical data</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feature_corr = heart_data.corr()</span><br><span class="line">feature_corr[<span class="built_in">abs</span>(feature_corr[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]) &gt; <span class="number">0.1</span>][<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<pre><code>age                  0.253729
ejection_fraction   -0.268603
serum_creatinine     0.294278
serum_sodium        -0.195204
time                -0.526964
DEATH_EVENT          1.000000
Name: DEATH_EVENT, dtype: float64</code></pre>
<p><strong>Method 3: Visualized plots of feature importance in linear SVM</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feature_plot</span>(<span class="params">classifier, feature_names, top_features=<span class="number">5</span></span>):</span></span><br><span class="line">    coef = classifier.coef_.ravel()</span><br><span class="line">    top_positive_coefficients = np.argsort(coef)[-top_features:]</span><br><span class="line">    top_negative_coefficients = np.argsort(coef)[:top_features]</span><br><span class="line">    middle_coefficient = np.argsort(coef)[top_features]</span><br><span class="line">    top_coefficients = np.hstack([top_negative_coefficients, middle_coefficient, top_positive_coefficients])</span><br><span class="line">    plt.figure(figsize=(<span class="number">18</span>, <span class="number">7</span>))</span><br><span class="line">    colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> c &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> coef[top_coefficients]]</span><br><span class="line">    plt.bar(np.arange(<span class="number">2</span> * top_features+<span class="number">1</span>), coef[top_coefficients], color=colors)</span><br><span class="line">    feature_names = np.array(feature_names)</span><br><span class="line">    plt.xticks(np.arange(<span class="number">2</span> * top_features+<span class="number">1</span>), feature_names[top_coefficients], rotation=<span class="number">45</span>, ha=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">X = StandardScaler().fit_transform(X)</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.1</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(heart_data.drop([&#x27;DEATH_EVENT&#x27;, &#x27;time&#x27;], axis=1).columns.values)</span></span><br><span class="line"></span><br><span class="line">trainedsvm = LinearSVC().fit(X, y)</span><br><span class="line">feature_plot(trainedsvm, heart_data.drop([<span class="string">&#x27;DEATH_EVENT&#x27;</span>, <span class="string">&#x27;time&#x27;</span>], axis=<span class="number">1</span>).columns.values)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_28_0.w2pbf35so00.png" alt="output_28_0"></p>
<ul>
<li>The ahead plot illustrates the importance of feature in SVM model. y axis could be considered as weights and the absolute value of weights could suggest the contribution to the final results.</li>
<li>The correlation analysis between factors and death event returned the coefficient &gt; 0.1 features</li>
<li>Both analysis returned three same features: serum_creatinine, age, ejection_fraction</li>
<li>we need to evaluate and compare the performance in serum_sodium and creatinine_phosphokinase</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">options = [<span class="string">&#x27;serum_sodium&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> options:</span><br><span class="line">    selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>]</span><br><span class="line">    selected_feature.append(i)</span><br><span class="line">    X_processed = X[selected_feature]</span><br><span class="line">    X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line">    sv_clf = SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">    sv_clf.fit(X_train, y_train)</span><br><span class="line">    sv_clf_pred = sv_clf.predict(X_test)</span><br><span class="line">    sv_clf_acc = accuracy_score(y_test,sv_clf_pred)</span><br><span class="line">    sc_clf_acc_format = <span class="built_in">round</span>(sv_clf_acc*<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#     accuracy_list.append(round(sv_clf_acc,2))</span></span><br><span class="line">    print(<span class="string">&quot;Accuracy of linear SVM model with feature &#123;&#125; is : &#123;&#125;%&quot;</span>.<span class="built_in">format</span>(i, sc_clf_acc_format))</span><br></pre></td></tr></table></figure>
<pre><code>Accuracy of linear SVM model with feature serum_sodium is : 81.67%
Accuracy of linear SVM model with feature creatinine_phosphokinase is : 83.33%</code></pre>
<p>Therefore, four features including serum_creatinine, age, ejection_fraction, creatinine_phosphokinase</p>
<hr>
<h3 id="Visualized-the-learning-curve-after-feature-selection"><a href="#Visualized-the-learning-curve-after-feature-selection" class="headerlink" title="Visualized the learning curve after feature selection"></a>Visualized the learning curve after feature selection</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> learning_curve</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span>(<span class="params">estimator, title, X, y, axes=<span class="literal">None</span>, ylim=<span class="literal">None</span>, cv=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                        n_jobs=<span class="literal">None</span>, train_sizes=np.linspace(<span class="params"><span class="number">.1</span>, <span class="number">1.0</span>, <span class="number">5</span></span>)</span>):</span></span><br><span class="line">    <span class="keyword">if</span> axes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _, axes = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, figsize=(<span class="number">20</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    axes[<span class="number">0</span>].set_title(title)</span><br><span class="line">    <span class="keyword">if</span> ylim <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        axes[<span class="number">0</span>].set_ylim(*ylim)</span><br><span class="line">    axes[<span class="number">0</span>].set_xlabel(<span class="string">&quot;Training examples&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].set_ylabel(<span class="string">&quot;Score&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_sizes, train_scores, test_scores, fit_times, _ = \</span><br><span class="line">        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,</span><br><span class="line">                       train_sizes=train_sizes,</span><br><span class="line">                       return_times=<span class="literal">True</span>)</span><br><span class="line">    train_scores_mean = np.mean(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">    train_scores_std = np.std(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">    test_scores_mean = np.mean(test_scores, axis=<span class="number">1</span>)</span><br><span class="line">    test_scores_std = np.std(test_scores, axis=<span class="number">1</span>)</span><br><span class="line">    fit_times_mean = np.mean(fit_times, axis=<span class="number">1</span>)</span><br><span class="line">    fit_times_std = np.std(fit_times, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot learning curve</span></span><br><span class="line">    axes[<span class="number">0</span>].grid()</span><br><span class="line">    axes[<span class="number">0</span>].fill_between(train_sizes, train_scores_mean - train_scores_std,</span><br><span class="line">                         train_scores_mean + train_scores_std, alpha=<span class="number">0.1</span>,</span><br><span class="line">                         color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].fill_between(train_sizes, test_scores_mean - test_scores_std,</span><br><span class="line">                         test_scores_mean + test_scores_std, alpha=<span class="number">0.1</span>,</span><br><span class="line">                         color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].plot(train_sizes, train_scores_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">                 label=<span class="string">&quot;Training score&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].plot(train_sizes, test_scores_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">                 label=<span class="string">&quot;Cross-validation score&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot n_samples vs fit_times</span></span><br><span class="line">    axes[<span class="number">1</span>].grid()</span><br><span class="line">    axes[<span class="number">1</span>].plot(train_sizes, fit_times_mean, <span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">    axes[<span class="number">1</span>].fill_between(train_sizes, fit_times_mean - fit_times_std,</span><br><span class="line">                         fit_times_mean + fit_times_std, alpha=<span class="number">0.1</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_xlabel(<span class="string">&quot;Training examples&quot;</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_ylabel(<span class="string">&quot;fit_times&quot;</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_title(<span class="string">&quot;Scalability of the model&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot fit_time vs score</span></span><br><span class="line">    axes[<span class="number">2</span>].grid()</span><br><span class="line">    axes[<span class="number">2</span>].plot(fit_times_mean, test_scores_mean, <span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">    axes[<span class="number">2</span>].fill_between(fit_times_mean, test_scores_mean - test_scores_std,</span><br><span class="line">                         test_scores_mean + test_scores_std, alpha=<span class="number">0.1</span>)</span><br><span class="line">    axes[<span class="number">2</span>].set_xlabel(<span class="string">&quot;fit_times&quot;</span>)</span><br><span class="line">    axes[<span class="number">2</span>].set_ylabel(<span class="string">&quot;Score&quot;</span>)</span><br><span class="line">    axes[<span class="number">2</span>].set_title(<span class="string">&quot;Performance of the model&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">3</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">15</span>))</span><br><span class="line"></span><br><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title = <span class="string">&quot;Learning Curves (SVM, linear kernel)&quot;</span></span><br><span class="line"><span class="comment"># cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)</span></span><br><span class="line"></span><br><span class="line">estimator = SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">plot_learning_curve(estimator, title, X_processed, y, axes=axes[:, <span class="number">0</span>], ylim=(<span class="number">0.5</span>, <span class="number">1.01</span>),</span><br><span class="line">                     n_jobs=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title = <span class="string">r&quot;Learning Curves (SVM, RBF kernel)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)</span></span><br><span class="line">estimator = SVC(kernel=<span class="string">&quot;rbf&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">plot_learning_curve(estimator, title, X_processed, y, axes=axes[:, <span class="number">1</span>], ylim=(<span class="number">0.5</span>, <span class="number">1.01</span>),</span><br><span class="line">                     n_jobs=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_34_0.wr0uxf8apts.png" alt="output_34_0"></p>
<ul>
<li><p>First column is the combination of learning curves, model scability, model performance in a SVM model with linear kernel. First row is the learning curve of linear SVM model: the training score is very high at the beginning and decreases and the cross-validation score is very low at the beginning and increases. The training score and the cross-validation score intertwines at about 220 training samples, and their difference after that are not significant</p>
</li>
<li><p>Second column is the combination of learning curves, model scability, model performance in a SVM model with linear kernel. The learning curve plots indicate that accuracy for both training score and cross validation score tend to be stable after 130 samples, which is similar in linear SVM model. The fit time for RBF kernel SVM is higher than linear kernel because of the complexity in calculation</p>
</li>
<li><p>RBF kernel has a relative higher performance, but the difference is not significant</p>
</li>
<li><p>The figure above doesn’t indicate either overfitting or underfitting problems</p>
</li>
</ul>
<hr>
<h3 id="Explorative-data-analysis-of-the-four-selected-features"><a href="#Explorative-data-analysis-of-the-four-selected-features" class="headerlink" title="Explorative data analysis of the four selected features:"></a>Explorative data analysis of the four selected features:</h3><ul>
<li>‘serum_creatinine’</li>
<li>‘age’</li>
<li>‘ejection_fraction’</li>
<li>‘creatinine_phosphokinase’</li>
</ul>
<h4 id="Specify-the-figure-size"><a href="#Specify-the-figure-size" class="headerlink" title="Specify the figure size"></a>Specify the figure size</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HEIGHT = <span class="number">500</span></span><br><span class="line">WIDTH = <span class="number">700</span></span><br><span class="line">NBINS = <span class="number">50</span></span><br><span class="line">SCATTER_SIZE=<span class="number">700</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Define the histogram</span></span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_histogram</span>(<span class="params">dataframe, column, color, bins, marginal,title, width=WIDTH, height=HEIGHT</span>):</span></span><br><span class="line">    figure = px.histogram(</span><br><span class="line">        dataframe,</span><br><span class="line">        column,</span><br><span class="line">        color=color,</span><br><span class="line">        nbins=bins,</span><br><span class="line">        marginal= marginal,</span><br><span class="line">        title=title,</span><br><span class="line">        width=width,</span><br><span class="line">        height=height</span><br><span class="line">    )</span><br><span class="line">    figure.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_histogram(heart_data, <span class="string">&#x27;serum_creatinine&#x27;</span>, <span class="string">&#x27;DEATH_EVENT&#x27;</span>, NBINS, <span class="string">&quot;violin&quot;</span>,<span class="string">&#x27;Figure 1: Distribution of serum creatinine VS death event&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/1.63r0a5e9q8k0.png" alt="1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_histogram(heart_data, <span class="string">&#x27;ejection_fraction&#x27;</span>, <span class="string">&#x27;DEATH_EVENT&#x27;</span>, NBINS, <span class="string">&quot;violin&quot;</span>,<span class="string">&#x27;Figure 2: Distribution of ejection fraction VS death event&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/2.6x2n1zgxkuk0.png" alt="2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_histogram(heart_data, <span class="string">&#x27;creatinine_phosphokinase&#x27;</span>, <span class="string">&#x27;DEATH_EVENT&#x27;</span>, NBINS, <span class="string">&quot;violin&quot;</span>,<span class="string">&#x27;Figure 3: Distribution of creatinine_phosphokinase VS death event&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/3.3onf6f093tg0.png" alt="3"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">male = heart_data[heart_data[<span class="string">&quot;sex&quot;</span>]==<span class="number">1</span>]</span><br><span class="line">female = heart_data[heart_data[<span class="string">&quot;sex&quot;</span>]==<span class="number">0</span>]</span><br><span class="line">male_survival= male[male[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]</span><br><span class="line">female_survival= female[female[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]</span><br><span class="line"><span class="comment">## assign the labels</span></span><br><span class="line">labels = [<span class="string">&#x27;Male - Survived&#x27;</span>,<span class="string">&#x27;Male - Not Survived&#x27;</span>, <span class="string">&quot;Female -  Survived&quot;</span>, <span class="string">&quot;Female - Not Survived&quot;</span>]</span><br><span class="line"><span class="comment">## value is set according to the labels</span></span><br><span class="line">values = [<span class="built_in">len</span>(male[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]),<span class="built_in">len</span>(male[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">1</span>]),</span><br><span class="line">         <span class="built_in">len</span>(female[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]),<span class="built_in">len</span>(female[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">1</span>])]</span><br><span class="line">fig = go.Figure(data=[go.Pie(labels=labels,values=values,hole=<span class="number">.3</span>)])</span><br><span class="line">fig.update_layout(</span><br><span class="line">    title_text = <span class="string">&quot;Figure 4: Analysis on Survival - Gender factor&quot;</span></span><br><span class="line">)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/4.4c73jb0v6ok0.png" alt="4"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Define the violin plot function method</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">violin_boxplot</span>(<span class="params">dataframe, x, y,color,points,hover_data, box, width=WIDTH, height=HEIGHT</span>):</span></span><br><span class="line">    figure = px.violin(</span><br><span class="line">        dataframe,</span><br><span class="line">        x=x,</span><br><span class="line">        y=y,</span><br><span class="line">        color = color,</span><br><span class="line">        box = box,</span><br><span class="line">        hover_data=hover_data,</span><br><span class="line">        points=points,</span><br><span class="line">        width=width,</span><br><span class="line">        height=height</span><br><span class="line">    )</span><br><span class="line">    figure.update_layout(title_text=<span class="string">&quot;Figure 5: Analysis of both gender and age factors in survival rates&quot;</span>)</span><br><span class="line">    figure.show()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">violin_boxplot(heart_data,x = <span class="string">&quot;sex&quot;</span>,y=<span class="string">&quot;age&quot;</span>,color=<span class="string">&quot;DEATH_EVENT&quot;</span>,points=<span class="string">&quot;all&quot;</span>,box=<span class="literal">True</span>,hover_data=heart_data.columns)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/5.74bv5l7tba00.png" alt="5"></p>
<p>Figure 1 - Figure 5 is the visualization of each feature, there is no clear patterns or strong association between the death_event. Therefore, we need to further our research by conducting the model prediction process.</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Python-library"><a href="#Python-library" class="headerlink" title="Python library"></a>Python library</h3><h1 id="Description-how-you-learned-the-predictor"><a href="#Description-how-you-learned-the-predictor" class="headerlink" title="Description: how you learned the predictor"></a>Description: how you learned the predictor</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br></pre></td></tr></table></figure>
<h3 id="PCA-to-visualize-the-sample-distribution"><a href="#PCA-to-visualize-the-sample-distribution" class="headerlink" title="PCA to visualize the sample distribution"></a>PCA to visualize the sample distribution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line">pca.fit(X_processed)</span><br><span class="line">X_pca = pca.transform(X_processed)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">0</span>,<span class="number">0</span>],X_pca[y==<span class="number">0</span>,<span class="number">1</span>],label=<span class="string">&quot;Alive&quot;</span>,c=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">1</span>,<span class="number">0</span>],X_pca[y==<span class="number">1</span>,<span class="number">1</span>],label=<span class="string">&quot;Death&quot;</span>,c=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">plt.legend([<span class="string">&quot;Alive&quot;</span>,<span class="string">&quot;Death&quot;</span>])</span><br></pre></td></tr></table></figure>



<pre><code>&lt;matplotlib.legend.Legend at 0x7fdff0ee0d90&gt;</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_50_1.2x87z2ut9k60.png" alt="output_50_1"></p>
<p>In this case, the data distribution after feature selection are scattered, which could be beneficial for separation. Still, we could not determine whether linear kernel or RBF kernel is suitable for classification. I then would compare the performance between these two methods.</p>
<h3 id="Machine-learning-algorithms-with-description"><a href="#Machine-learning-algorithms-with-description" class="headerlink" title="Machine learning algorithms with description"></a>Machine learning algorithms with description</h3><h4 id="SVM-with-linear-kernel"><a href="#SVM-with-linear-kernel" class="headerlink" title="SVM with linear kernel"></a>SVM with linear kernel</h4><p>$$ K(x,y) = X^Ty=x\cdot y$$</p>
<p>Loss function: hinge loss / squared hinge loss</p>
<p>$$ Agreement: z = y_i(w \cdot x_i + \alpha) $$</p>
<p>Hinge loss</p>
<p>$$<br>L_h(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>1-z &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Squared hinge loss</p>
<p>$$<br>L_{hsqr}(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>(1-z)^2 &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Optimization objective formula for hinge loss:</p>
<p>$$<br>J(w,\alpha) = \frac{1}{n}\sum_{i=1}^nL_h(y_i(w\cdot x_i + \alpha))+\frac{\lambda}{2}(||w||)^2<br>$$</p>
<p>Description:</p>
<ul>
<li>Linear Kernel is used when the data is linearly separable dataset.</li>
<li>One of the goal is to minimize the previous objective formula for the hinge loss. $\lambda$ in this case stands for the regularization hyperparameter.</li>
<li>The strength of the regularization is inversely proportional to $\lambda$, it has to be strictly positive. The smaller regularization parameter means less tolerant to misclassification.</li>
<li>Require grid serach to return the suitable hyperparameter</li>
</ul>
<h4 id="SVM-with-RBF-kernel"><a href="#SVM-with-RBF-kernel" class="headerlink" title="SVM with RBF kernel"></a>SVM with RBF kernel</h4><p>$$ K(x,y) = e^{-\gamma||x-y||^2}, \gamma &gt;0 $$</p>
<p>Loss function: hinge loss / squared hinge loss</p>
<p>$$ Agreement: z = y_i(w \cdot \phi(x_i) + \alpha) $$</p>
<p>Hinge loss</p>
<p>$$<br>L_h(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>1-z &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Squared hinge loss</p>
<p>$$<br>L_{hsqr}(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>(1-z)^2 &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Optimization objective formula for hinge loss:</p>
<p>$$<br>J(w,\alpha) = \frac{1}{n}\sum_{i=1}^nL_h(y_i(w\cdot \phi(x_i) + \alpha))+\frac{\lambda}{2}(||w||)^2<br>$$</p>
<p>Description:</p>
<ul>
<li>SVM with RBF kernel was utilized to solve the linearly inseparable probelms</li>
<li>kernel trick was used in RBF kernel SVM to increase the computational efficiency</li>
<li>$\gamma$ parameter how far the influence of a single training example reaches</li>
<li>C parameter trades off correct classification of training examples against maximization of the decision function’s margin</li>
</ul>
<h4 id="Evaluation-method"><a href="#Evaluation-method" class="headerlink" title="Evaluation method"></a>Evaluation method</h4><p>Mean squared error (MSE)</p>
<p>$$<br>MSE = \frac{1}{n}\sum_{i=1}^n(Y_i- \hat{Y_i})^2<br>$$</p>
<p>where $Y_i$ is the label and $\hat{Y_i}$ is the predicted label by model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## linear svm</span></span><br><span class="line"><span class="comment"># sv_clf = LinearSVC(loss=&#x27;hinge&#x27;,random_state=1, C=1.0, penalty = &#x27;l2&#x27;)</span></span><br><span class="line">sv_clf = SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">sv_clf.fit(X_train, y_train)</span><br><span class="line">sv_clf_pred = sv_clf.predict(X_test)</span><br><span class="line">sv_clf_acc = accuracy_score(y_test,sv_clf_pred)</span><br><span class="line">sv_clf_mse = mean_squared_error(y_test,sv_clf_pred)</span><br><span class="line">print(<span class="string">&quot;Accuracy of linear SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>*sv_clf_acc))</span><br><span class="line">print(<span class="string">&quot;Mean squared error of linear SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(sv_clf_mse))</span><br><span class="line"></span><br><span class="line"><span class="comment">## RBF kernel SVM</span></span><br><span class="line">sv_clf = SVC(kernel=<span class="string">&quot;rbf&quot;</span>,random_state=<span class="number">1</span>, C=<span class="number">1.0</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">sv_clf.fit(X_train, y_train)</span><br><span class="line">sv_clf_pred = sv_clf.predict(X_test)</span><br><span class="line">sv_clf_acc = accuracy_score(y_test,sv_clf_pred)</span><br><span class="line">sv_clf_mse = mean_squared_error(y_test,sv_clf_pred)</span><br><span class="line">print(<span class="string">&quot;Accuracy of RBF SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>*sv_clf_acc))</span><br><span class="line">print(<span class="string">&quot;Mean squared error of linear SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(sv_clf_mse))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>Accuracy of linear SVM model is : 83.33%
Mean squared error of linear SVM model is : 0.17
Accuracy of RBF SVM model is : 86.67%
Mean squared error of linear SVM model is : 0.13</code></pre>
<h2 id="Experiments-and-results"><a href="#Experiments-and-results" class="headerlink" title="Experiments and results"></a>Experiments and results</h2><h3 id="Compare-the-efficacy-of-different-preprocessing-methods"><a href="#Compare-the-efficacy-of-different-preprocessing-methods" class="headerlink" title="Compare the efficacy of different preprocessing methods"></a>Compare the efficacy of different preprocessing methods</h3><ul>
<li>MinMaxScalar</li>
<li>StandardScalar</li>
<li>RobustScalar</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler, StandardScaler, RobustScaler</span><br><span class="line"></span><br><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MinMaxScalar</span></span><br><span class="line">pipe1 = Pipeline([(<span class="string">&quot;scalar&quot;</span>,MinMaxScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(random_state=<span class="number">1</span>))])</span><br><span class="line">pipe1.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for MinMaxScalar RBF kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe1.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line">pipe1_linear = Pipeline([(<span class="string">&quot;scalar&quot;</span>,MinMaxScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>))])</span><br><span class="line">pipe1_linear.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for MinMaxScalar linear kernel: &#123;:.3f&#125;\n&quot;</span>.<span class="built_in">format</span>(pipe1_linear.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># StandardScalar</span></span><br><span class="line"></span><br><span class="line">pipe2 = Pipeline([(<span class="string">&quot;scalar&quot;</span>,StandardScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(random_state=<span class="number">1</span>))])</span><br><span class="line">pipe2.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for StandardScalar in RBF kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe2.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line">pipe2_linear = Pipeline([(<span class="string">&quot;scalar&quot;</span>,StandardScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(kernel=<span class="string">&quot;linear&quot;</span> ,random_state=<span class="number">1</span>))])</span><br><span class="line">pipe2_linear.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for StandardScalar in linear kernel: &#123;:.3f&#125;\n&quot;</span>.<span class="built_in">format</span>(pipe2_linear.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># RobustScalar</span></span><br><span class="line"></span><br><span class="line">pipe3 = Pipeline([(<span class="string">&quot;scalar&quot;</span>,RobustScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(random_state=<span class="number">1</span>))])</span><br><span class="line">pipe3.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for RobustScalar in RBF kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe3.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line">pipe3_linear = Pipeline([(<span class="string">&quot;scalar&quot;</span>,RobustScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(kernel = <span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>))])</span><br><span class="line">pipe3_linear.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for RobustScalar in linear kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe3_linear.score(X_test,y_test)))</span><br></pre></td></tr></table></figure>
<pre><code>Test score for MinMaxScalar RBF kernel: 0.850
Test score for MinMaxScalar linear kernel: 0.767

Test score for StandardScalar in RBF kernel: 0.850
Test score for StandardScalar in linear kernel: 0.833

Test score for RobustScalar in RBF kernel: 0.800
Test score for RobustScalar in linear kernel: 0.817</code></pre>
<ul>
<li>There is no significant difference between different preprocessing method in RBF kernels, especially in MinMaxScalar and StandardScalar.</li>
<li>Overall RBF kernel outperforms than linear kernel.</li>
<li>In this case, I would insist on using StandardScalar in following procedure.<br>
<br>
<br>



</li>
</ul>
<h3 id="Compare-the-model-performance-by-ten-fold-cross-validation-and-leave-one-out-method-in-model-evaluation"><a href="#Compare-the-model-performance-by-ten-fold-cross-validation-and-leave-one-out-method-in-model-evaluation" class="headerlink" title="Compare the model performance by ten-fold cross validation and leave-one-out method in model evaluation"></a>Compare the model performance by ten-fold cross validation and leave-one-out method in model evaluation</h3><br>

<p>Owing to the fact that the dataset I used is a small one, only containing 299 samples in total. In order to minimize the bias or error leading by accident, I used ten-fold cross validation and leave-one-out method to return a more general evaluation (calculating the mean value)</p>
<h4 id="Ten-fold-cross-validation-of-SVM"><a href="#Ten-fold-cross-validation-of-SVM" class="headerlink" title="Ten-fold cross validation of SVM"></a>Ten-fold cross validation of SVM</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heart_data = df.copy()</span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line">sv_clf = SVC(kernel= <span class="string">&#x27;linear&#x27;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">sv_clf_rbf = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">scores = cross_val_score(sv_clf, X_processed,y,cv=<span class="number">10</span>)</span><br><span class="line">scores_rbf = cross_val_score(sv_clf_rbf, X_processed,y,cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of linear SVM:&#123;:.3f&#125; &quot;</span>.<span class="built_in">format</span>(np.mean(scores)))</span><br><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of RBF kernel SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(scores_rbf)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>Ten-fold cross validation scores of linear SVM:0.756 
Ten-fold cross validation scores of RBF kernel SVM:0.763</code></pre>
<h4 id="Leave-on-out-method-of-SVM"><a href="#Leave-on-out-method-of-SVM" class="headerlink" title="Leave-on-out method of SVM"></a>Leave-on-out method of SVM</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> LeaveOneOut</span><br><span class="line">loo = LeaveOneOut()</span><br><span class="line">scores_loo = cross_val_score(sv_clf,X_processed,y,cv=loo)</span><br><span class="line">scores_loo_rbf = cross_val_score(sv_clf_rbf,X_processed,y,cv=loo)</span><br><span class="line">print(<span class="string">&quot;Number of CV iterations: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(scores_loo)))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for linear SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo.mean()))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for RBF SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo_rbf.mean()))</span><br></pre></td></tr></table></figure>
<pre><code>Number of CV iterations: 299
Leave one out method mean scores for linear SVM:0.763
Leave one out method mean scores for RBF SVM:0.756</code></pre>
<h4 id="Comparison-of-the-two-methods"><a href="#Comparison-of-the-two-methods" class="headerlink" title="Comparison of the two methods"></a>Comparison of the two methods</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of linear SVM:&#123;:.3f&#125; &quot;</span>.<span class="built_in">format</span>(np.mean(scores)))</span><br><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of RBF kernel SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(scores_rbf)))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for linear SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo.mean()))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for RBF SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo_rbf.mean()))</span><br></pre></td></tr></table></figure>
<pre><code>Ten-fold cross validation scores of linear SVM:0.756 
Ten-fold cross validation scores of RBF kernel SVM:0.763
Leave one out method mean scores for linear SVM:0.763
Leave one out method mean scores for RBF SVM:0.756</code></pre>
<p>**Summary: **<br>The results of either ten-fold cross validation and leave-one-out method results are quite similar, based on the consideration of time elapse, I would use ten-fold cross-validation for the following analysis</p>
<h3 id="Hyperparameters-tuning"><a href="#Hyperparameters-tuning" class="headerlink" title="Hyperparameters tuning"></a>Hyperparameters tuning</h3><ul>
<li>Grid search for SVM algorithm with ten-fold cross validation method</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">param_grid = [&#123;<span class="string">&#x27;kernel&#x27;</span>: [<span class="string">&#x27;rbf&#x27;</span>],</span><br><span class="line">               <span class="string">&#x27;C&#x27;</span>: [<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>],</span><br><span class="line">               <span class="string">&#x27;gamma&#x27;</span>:[<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>]&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;kernel&#x27;</span>:[<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">               <span class="string">&#x27;C&#x27;</span>: [<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>]</span><br><span class="line">                &#125;]</span><br><span class="line"><span class="comment"># print(param_grid)</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">grid_search = GridSearchCV(SVC(random_state=<span class="number">1</span>),param_grid,cv =<span class="number">10</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">grid_search.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Best cross validation accuracy: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_score_))</span><br><span class="line">print(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.score(X_test,y_test)))</span><br><span class="line">print(<span class="string">&quot;Best parameters: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_params_))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>Best cross validation accuracy: 0.75
Test set score: 0.87
Best parameters: &#123;&#39;C&#39;: 1, &#39;gamma&#39;: 0.1, &#39;kernel&#39;: &#39;rbf&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = pd.DataFrame(grid_search.cv_results_)</span><br><span class="line">results_rbf = results.iloc[<span class="number">0</span>:<span class="number">25</span>,:]</span><br><span class="line">results_linear = results.iloc[<span class="number">25</span>:,:]</span><br><span class="line"><span class="comment"># display(results_linear.T.head())</span></span><br><span class="line"><span class="comment"># display(results_rbf.T.head())</span></span><br><span class="line"><span class="comment"># display(results.T.head())</span></span><br><span class="line"><span class="comment"># display(results.T)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line">scores = np.array(results_rbf.mean_test_score).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">heatmap = sn.heatmap(data=scores,xticklabels=param_grid[<span class="number">0</span>][<span class="string">&#x27;gamma&#x27;</span>],</span><br><span class="line">           yticklabels=param_grid[<span class="number">0</span>][<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">           annot=<span class="literal">True</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;gamma&quot;</span>)</span><br></pre></td></tr></table></figure>



<pre><code>Text(0.5, 87.0, &#39;gamma&#39;)</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_68_1.3u7i0m4xy720.png" alt="output_68_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sv_clf_rbf = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>,C=<span class="number">1</span>, gamma = <span class="number">0.1</span>)</span><br><span class="line">scores_loo_rbf = cross_val_score(sv_clf_rbf,X_processed,y,cv=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># print(&quot;Number of CV iterations: &#123;&#125;&quot;.format(len(scores_loo)))</span></span><br><span class="line">print(<span class="string">&quot;10-fold cross validation mean method scores for RBF SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo_rbf.mean()))</span><br></pre></td></tr></table></figure>
<pre><code>10-fold cross validation mean method scores for RBF SVM:0.763</code></pre>
<p>As can be seen from the grid search, the SVM with RBF kernel and hyperparameter C: 1, gamma 0.1 could achieve the highest performance</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">linear_score = np.array(results_linear.mean_test_score)</span><br><span class="line">display(results_linear.T.head())</span><br><span class="line">print(<span class="built_in">max</span>(linear_score))</span><br></pre></td></tr></table></figure>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>25</th>
      <th>26</th>
      <th>27</th>
      <th>28</th>
      <th>29</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>mean_fit_time</th>
      <td>0.0021414</td>
      <td>0.00199142</td>
      <td>0.00196731</td>
      <td>0.00795052</td>
      <td>0.0434071</td>
    </tr>
    <tr>
      <th>std_fit_time</th>
      <td>0.000204684</td>
      <td>0.0003023</td>
      <td>0.000284892</td>
      <td>0.00302314</td>
      <td>0.010914</td>
    </tr>
    <tr>
      <th>mean_score_time</th>
      <td>0.000635695</td>
      <td>0.000739121</td>
      <td>0.000567961</td>
      <td>0.000703764</td>
      <td>0.000822139</td>
    </tr>
    <tr>
      <th>std_score_time</th>
      <td>0.000104189</td>
      <td>0.000289296</td>
      <td>9.88127e-05</td>
      <td>8.55103e-05</td>
      <td>0.000257763</td>
    </tr>
    <tr>
      <th>param_C</th>
      <td>0.01</td>
      <td>0.1</td>
      <td>1</td>
      <td>10</td>
      <td>100</td>
    </tr>
  </tbody>
</table>
</div>


<pre><code>0.7358695652173913</code></pre>
<p>In the meantime, the best performance in linear model is 0.73587, and the mean_test_score in c =1,10,100 is relative similar. The influence of hyperparameter C are not significant. Apart from that the SVC function only provide</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Hyperparameter tuning for linear SVM (penalty, loss, C)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parameters = &#123;<span class="string">&#x27;penalty&#x27;</span>:[<span class="string">&#x27;l1&#x27;</span>, <span class="string">&#x27;l2&#x27;</span>], <span class="string">&#x27;loss&#x27;</span>:[<span class="string">&#x27;hinge&#x27;</span>, <span class="string">&#x27;squared_hinge&#x27;</span>],<span class="string">&#x27;C&#x27;</span>:[<span class="number">1</span>, <span class="number">10</span>,<span class="number">100</span>]&#125;</span><br><span class="line">grid_search = GridSearchCV(LinearSVC(random_state=<span class="number">1</span>),parameters,cv =<span class="number">10</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">grid_search.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Best cross validation accuracy: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_score_))</span><br><span class="line">print(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.score(X_test,y_test)))</span><br><span class="line">print(<span class="string">&quot;Best parameters: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_params_))</span><br></pre></td></tr></table></figure>
<pre><code>Best cross validation accuracy: 0.75
Test set score: 0.80
Best parameters: &#123;&#39;C&#39;: 10, &#39;loss&#39;: &#39;squared_hinge&#39;, &#39;penalty&#39;: &#39;l2&#39;&#125;</code></pre>
<p>The test score of linear svm (test set score:0.80) still could not compete with the rbf kernel (test set score: 0.87), therefore, I would still insist on the SVM with RBF kernel and hyperparameter C: 1, gamma 0.1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> plot_confusion_matrix, confusion_matrix</span><br><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">2</span>)</span><br><span class="line">model = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>,C=<span class="number">1</span>, gamma = <span class="number">0.1</span>)</span><br><span class="line">model.fit(X_train,y_train)</span><br><span class="line">y_pred = model.predict(X_test)</span><br><span class="line">y_pred_train = model.predict(X_train)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Training-and-validation-loss"><a href="#Training-and-validation-loss" class="headerlink" title="Training and validation loss"></a>Training and validation loss</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Training loss is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(model.score(X_train,y_train),<span class="number">2</span>)))</span><br><span class="line">print(<span class="string">&quot;Testing loss is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(model.score(X_test,y_test),<span class="number">2</span>)))</span><br></pre></td></tr></table></figure>
<pre><code>Training loss is: 0.78
Testing loss is: 0.83</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_mse = mean_squared_error(y_train,y_pred_train)</span><br><span class="line">test_mse = mean_squared_error(y_test,y_pred)</span><br><span class="line">print(<span class="string">&quot;The MSE value of training sample is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(train_mse,<span class="number">2</span>)))</span><br><span class="line">print(<span class="string">&quot;The MSE value of testing sample is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(test_mse,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure>
<pre><code>The MSE value of training sample is: 0.22
The MSE value of testing sample is: 0.17</code></pre>
<p>The training loss in SVM with RBF kernel in hyperparameter C: 1, gamma 0.1 is 0.78, with testing loss equals 0.83<br>The MSE value for training and testing in SVM with RBF kernel is 0.22 and 0.17 accordingly</p>
<h3 id="Plot-the-confusion-matrix-plot"><a href="#Plot-the-confusion-matrix-plot" class="headerlink" title="Plot the confusion matrix plot"></a>Plot the confusion matrix plot</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># confusion = confusion_matrix(y_test,y_pred)</span></span><br><span class="line">plot_confusion_matrix(model,X_test,y_test)</span><br><span class="line">plt.title(<span class="string">&quot;SVC Model - Confusion Matrix&quot;</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">2</span>), [<span class="string">&quot;Alive&quot;</span>, <span class="string">&quot;Dead&quot;</span>], fontsize=<span class="number">8</span>)</span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">2</span>), [<span class="string">&quot;Alive&quot;</span>, <span class="string">&quot;Dead&quot;</span>], fontsize=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_83_0.nfr53d9ahao.png" alt="output_83_0"></p>
<h3 id="Evaluate-the-performance-of-the-final-selected-model-performance-with-respect-to-the-chosen-performance-matrix"><a href="#Evaluate-the-performance-of-the-final-selected-model-performance-with-respect-to-the-chosen-performance-matrix" class="headerlink" title="Evaluate the performance of the final selected model performance with respect to the chosen performance matrix"></a>Evaluate the performance of the final selected model performance with respect to the chosen performance matrix</h3><br>

<h3 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy:"></a>Accuracy:</h3><p>$$\frac{TP+TN}{TP+TN+FP+FN}$$<br><br></p>
<h3 id="Total"><a href="#Total" class="headerlink" title="Total:"></a>Total:</h3><p>$$Total = TP+TN+FP+FN$$</p>
<h3 id="Precision"><a href="#Precision" class="headerlink" title="Precision:"></a>Precision:</h3><p>$$\frac{TP}{TP+FP}$$</p>
<h3 id="Recall"><a href="#Recall" class="headerlink" title="Recall:"></a>Recall:</h3><p>$$\frac{TP}{TP+FN}$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line">print(classification_report(y_test,y_pred,target_names=[<span class="string">&quot;Heart Not Failed&quot;</span>, <span class="string">&quot;Heart Fail&quot;</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>                  precision    recall  f1-score   support

Heart Not Failed       0.85      0.93      0.89        43
      Heart Fail       0.77      0.59      0.67        17

        accuracy                           0.83        60
       macro avg       0.81      0.76      0.78        60
    weighted avg       0.83      0.83      0.83        60</code></pre>
<h3 id="ROC-curve"><a href="#ROC-curve" class="headerlink" title="ROC curve"></a>ROC curve</h3><p>AUC = Area under the curve</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve</span><br><span class="line">plot_roc_curve(model,X_test,y_test)</span><br></pre></td></tr></table></figure>



<pre><code>&lt;sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fdff1de91f0&gt;</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_87_1.50raz9ifl680.png" alt="output_87_1">    </p>
<h3 id="PR-curve"><a href="#PR-curve" class="headerlink" title="PR-curve"></a>PR-curve</h3><p>AP = Average Precision, summarizes such a plot as the weighted mean of precisions achieved at each threshold, with the increase in recall from the previous threshold used as the weight:</p>
<p>$$ AP =\sum_{N}(R_n-R_{n-1})P_n$$</p>
<p>where  and  are the precision and recall at the nth threshold. A pair  is referred to as an operating point.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_precision_recall_curve(model,X_test,y_test)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_89_1.zs7xp3919lc.png" alt="output_89_1"></p>
<h3 id="Summary-of-the-results"><a href="#Summary-of-the-results" class="headerlink" title="Summary of the results"></a>Summary of the results</h3><ul>
<li>Grid search to find the best hyperparameters in optimization of the model</li>
<li>ten-fold cross validation used to evaluate machine learning models on a limited data sample</li>
<li>SVM with RBF kernel and hyperparameter C: 1, gamma 0.1 would be the best performed model</li>
<li>precision, recall, f1-score, accuracy value were applied and summarized in the previous table</li>
<li>train loss and validation loss were 0.78 and 0.83 accordingly</li>
<li>MSE value of training sample and testing sample is 0.22 and 0.17 accordingly</li>
<li>No overfitting or underfitting problem observed because regularization method, cross-validation method were used to mitigate the potential problems</li>
<li>The overall model is robust and in good generalization ability</li>
<li>ROC curve and PR curve were visualized to demonstrate the final results; AUC is 0.83 and AP is 0.7</li>
</ul>
<h2 id="Conclusion-and-future-work"><a href="#Conclusion-and-future-work" class="headerlink" title="Conclusion and future work"></a>Conclusion and future work</h2><p>In this project, I compared and devised a RBF SVM machine learning model for the prediction of heart failure. I firstly conducted a preliminary analysis of the whole dataset and utilized the PCA method to visualize the distribution condition of the samples. The initial analysis was not robust and precise, which required me to optimize the model. Then, I conducted feature selection to return the top 4 most correlated feature with the death event. Apart from that, I also compared the difference between normalization method as well as the validation methods. The final determined methods were to use four selected features (‘serum_creatinine’,’age’,’ejection_fraction’, ‘creatinine_phosphokinase’), StandardScalar methods and ten-fold cross validation to conduct the prediction. In addition, I also conduct the explorative data analysis to have a view of the selected feature. Furthermore, the PCA condition after feature selection still could not determine whether the dataset is linearly seperable or not, I, therefore, used the grid serach to return the most suitable hyperparameters. The final results suggested that the SVM with RBF kernel in gamma equals 0.1 and penalty C equals 1 could achieve the best performance. After that, the model performance was evaluated from confusion matrix, accuracy, precision, recall, f1-score. Moreover, the ROC plot and PR-curve plot with AUC and AP accordingly were indicated. The final accuracy could achieve 0.83, which is satisfactory.</p>
<p>In the future, since this project only used SVM related algorithms, I would like to incorporate more complicate algorithms, for instance, XGboost. Furthermore, the model’s interpretability are not great enough, and that would be my focus in the future.</p>
<h2 id="Bibliography"><a href="#Bibliography" class="headerlink" title="Bibliography"></a>Bibliography</h2><p>Heart Fail:Analysis and Quick-prediction | Kaggle. (n.d.). Retrieved January 8, 2021, from <a class="link"   href="https://www.kaggle.com/nayansakhiya/heart-fail-analysis-and-quick-prediction" >https://www.kaggle.com/nayansakhiya/heart-fail-analysis-and-quick-prediction<i class="fas fa-external-link-alt"></i></a></p>
<p>Heart Failure - Model Prediction Comparisons (95%) | Kaggle. (n.d.). Retrieved January 8, 2021, from <a class="link"   href="https://www.kaggle.com/rude009/heart-failure-model-prediction-comparisons-95" >https://www.kaggle.com/rude009/heart-failure-model-prediction-comparisons-95<i class="fas fa-external-link-alt"></i></a></p>
<p>Heart Failure Prediction (AUC: 0.98) | Kaggle. (n.d.). Retrieved January 8, 2021, from <a class="link"   href="https://www.kaggle.com/ksvmuralidhar/heart-failure-prediction-auc-0-98" >https://www.kaggle.com/ksvmuralidhar/heart-failure-prediction-auc-0-98<i class="fas fa-external-link-alt"></i></a></p>
<p>Pedregosa et al., Scikit-learn: Machine Learning in Python, JMLR 12, pp. 2825-2830, 2011.</p>
<h2 id="Other-resources-to-download-the-code"><a href="#Other-resources-to-download-the-code" class="headerlink" title="Other resources to download the code"></a>Other resources to download the code</h2><p>Kaggle:<br><a class="link"   href="https://www.kaggle.com/yuxuanwu17/eda-of-heart-failure-and-optimization-of-svm" >https://www.kaggle.com/yuxuanwu17/eda-of-heart-failure-and-optimization-of-svm<i class="fas fa-external-link-alt"></i></a></p>
<p>Github:<br><a class="link"   href="https://github.com/yuxuanwu17/kaggle/blob/main/Final_report.ipynb" >https://github.com/yuxuanwu17/kaggle/blob/main/Final_report.ipynb<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>ML</tag>
        <tag>EDA</tag>
      </tags>
  </entry>
  <entry>
    <title>Explorative data anlysis of avocado price from 2015-2020</title>
    <url>/2021/01/25/avocado_pred/</url>
    <content><![CDATA[<p>Avocado, bright green fruit with a large pit and dark leathery skin, has become a fashion among millennials in America. Avocados are featured in their unique flavor, rich texture, and the high percentage of healthy fat, which is an ideal food for the healthy diet. However, the average price for avocados is not cheap, which made those millennials unable to achieve their “Avocado Freedom” dream. In addition, as an applicant in American master degree and a fan of avocados, it is of significant interest for me to conduct the explorative data analysis of avocados, hoping to figure out some hidden patterns, like seasonal patterns or cyclical patterns. Furthermore, related factors were also evaluated to suggest the influence on the avocados’ price, which could help these millennials to find the cheaper avocados in a scientific way. </p>
<h3 id="Import-the-libraries"><a href="#Import-the-libraries" class="headerlink" title="Import the libraries"></a>Import the libraries</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(tidyr)</span><br><span class="line">library(skimr)</span><br><span class="line">library(GGally)</span><br><span class="line">library(viridis)</span><br><span class="line">library(caret)</span><br><span class="line">library(e1071)</span><br><span class="line">library(rpart)</span><br><span class="line">library(xgboost)</span><br><span class="line">library(forecast)</span><br><span class="line">library(corrplot)</span><br><span class="line">library(corrgram)</span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggthemes)</span><br><span class="line">library(psych)</span><br><span class="line">library(scales)</span><br><span class="line">library(treemap)</span><br><span class="line">library(repr)</span><br><span class="line">library(cowplot)</span><br><span class="line">library(magrittr)</span><br><span class="line">library(ggpubr)</span><br><span class="line">library(RColorBrewer)</span><br><span class="line">library(plotrix)</span><br><span class="line">library(ggrepel)</span><br><span class="line">library(tidyverse)</span><br><span class="line">library(gridExtra)</span><br><span class="line">library(lubridate)</span><br><span class="line">library(tibbletime)</span><br><span class="line">library(reshape2)</span><br><span class="line">library(prophet)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Load-the-data-and-return-the-head-of-data"><a href="#Load-the-data-and-return-the-head-of-data" class="headerlink" title="Load the data and return the head of data"></a>Load the data and return the head of data</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df &lt;- read.csv(&quot;&#x2F;Users&#x2F;yuxuan&#x2F;Desktop&#x2F;INT303-Avocado-prediction&#x2F;avocado-updated-2020.csv&quot;)</span><br><span class="line">head(df)</span><br><span class="line">colnames(df)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">date</th>
<th align="left">average_price</th>
<th align="left">total_volume</th>
<th align="left">X4046</th>
<th align="left">X4225</th>
<th align="left">X4770</th>
<th align="left">total_bags</th>
<th align="left">small_bags</th>
<th align="left">large_bags</th>
<th align="left">xlarge_bags</th>
<th align="left">type</th>
<th align="left">year</th>
<th align="left">geography</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"><fct></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><fct></td>
<td align="left"><int></td>
<td align="left"><fct></td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">2015-01-04</td>
<td align="left">1.22</td>
<td align="left">40873.28</td>
<td align="left">2819.50</td>
<td align="left">28287.42</td>
<td align="left">49.90</td>
<td align="left">9716.46</td>
<td align="left">9186.93</td>
<td align="left">529.53</td>
<td align="left">0</td>
<td align="left">conventional</td>
<td align="left">2015</td>
<td align="left">Albany</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">2015-01-04</td>
<td align="left">1.79</td>
<td align="left">1373.95</td>
<td align="left">57.42</td>
<td align="left">153.88</td>
<td align="left">0.00</td>
<td align="left">1162.65</td>
<td align="left">1162.65</td>
<td align="left">0.00</td>
<td align="left">0</td>
<td align="left">organic</td>
<td align="left">2015</td>
<td align="left">Albany</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">2015-01-04</td>
<td align="left">1.00</td>
<td align="left">435021.49</td>
<td align="left">364302.39</td>
<td align="left">23821.16</td>
<td align="left">82.15</td>
<td align="left">46815.79</td>
<td align="left">16707.15</td>
<td align="left">30108.64</td>
<td align="left">0</td>
<td align="left">conventional</td>
<td align="left">2015</td>
<td align="left">Atlanta</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">2015-01-04</td>
<td align="left">1.76</td>
<td align="left">3846.69</td>
<td align="left">1500.15</td>
<td align="left">938.35</td>
<td align="left">0.00</td>
<td align="left">1408.19</td>
<td align="left">1071.35</td>
<td align="left">336.84</td>
<td align="left">0</td>
<td align="left">organic</td>
<td align="left">2015</td>
<td align="left">Atlanta</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">2015-01-04</td>
<td align="left">1.08</td>
<td align="left">788025.06</td>
<td align="left">53987.31</td>
<td align="left">552906.04</td>
<td align="left">39995.03</td>
<td align="left">141136.68</td>
<td align="left">137146.07</td>
<td align="left">3990.61</td>
<td align="left">0</td>
<td align="left">conventional</td>
<td align="left">2015</td>
<td align="left">Baltimore/Washington</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">2015-01-04</td>
<td align="left">1.29</td>
<td align="left">19137.28</td>
<td align="left">8040.64</td>
<td align="left">6557.47</td>
<td align="left">657.48</td>
<td align="left">3881.69</td>
<td align="left">3881.69</td>
<td align="left">0.00</td>
<td align="left">0</td>
<td align="left">organic</td>
<td align="left">2015</td>
<td align="left">Baltimore/Washington</td>
</tr>
</tbody></table>
<h3 id="Check-whether-the-dataset-contains-the-missing-value"><a href="#Check-whether-the-dataset-contains-the-missing-value" class="headerlink" title="Check whether the dataset contains the missing value"></a>Check whether the dataset contains the missing value</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum(is.na(df))</span><br></pre></td></tr></table></figure>
<p>The overall dataset do not contain any missing value</p>
<h3 id="Explore-the-data-and-some-clarification"><a href="#Explore-the-data-and-some-clarification" class="headerlink" title="Explore the data and some clarification"></a>Explore the data and some clarification</h3><h4 id="Explain-the-features"><a href="#Explain-the-features" class="headerlink" title="Explain the features"></a>Explain the features</h4><ul>
<li>date - The date of the observation</li>
<li>average_price - The average price of a single</li>
<li>total_volume - Total number of avocados sold</li>
<li>year - The year</li>
<li>type - conventional or organic</li>
<li>geography - The city or region of the observation</li>
</ul>
<h4 id="X4046-X4225-X4770-stands-for-the-PLU-code"><a href="#X4046-X4225-X4770-stands-for-the-PLU-code" class="headerlink" title="X4046, X4225, X4770 stands for the PLU code"></a>X4046, X4225, X4770 stands for the PLU code</h4><ul>
<li>Small/Medium Hass Avocado (~3-5oz avocado) | #4046 </li>
<li>Large Hass Avocado (~8-10oz avocado) | #4225 </li>
<li>Extra Large Hass Avocado (~10-15oz avocado) | #4770 </li>
</ul>
<h3 id="Exploratory-Data-Analysis"><a href="#Exploratory-Data-Analysis" class="headerlink" title="Exploratory Data Analysis"></a>Exploratory Data Analysis</h3><h4 id="Density-plot-of-the-difference-between-two-avocados"><a href="#Density-plot-of-the-difference-between-two-avocados" class="headerlink" title="Density plot of the difference between two avocados."></a>Density plot of the difference between two avocados.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">levels(df$type)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">options(repr.plot.width &#x3D; 8, repr.plot.height &#x3D; 4)</span><br><span class="line">density_plot &lt;- ggplot(df, aes(x&#x3D;average_price, fill&#x3D;type))+</span><br><span class="line">  geom_density()+</span><br><span class="line">  facet_wrap(~type)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),legend.position &#x3D; &quot;bottom&quot;)+</span><br><span class="line">  labs(title &#x3D; &quot;Avocado Price by type&quot;)+</span><br><span class="line">  scale_fill_brewer(palette &#x3D; &quot;Set2&quot;)</span><br><span class="line">density_plot</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___14_1.png" alt="img"></p>
<ol>
<li><h3 id="Create-a-matrix-to-demonstrate-the-volume-of-conventional-and-organic-avocados"><a href="#Create-a-matrix-to-demonstrate-the-volume-of-conventional-and-organic-avocados" class="headerlink" title="Create a matrix to demonstrate the volume of conventional and organic avocados"></a>Create a matrix to demonstrate the volume of conventional and organic avocados</h3></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(dplyr)</span><br><span class="line">vol_type &lt;- df %&gt;% group_by(type) %&gt;% summarise(average_volume &#x3D; round(mean(total_volume),3),average_price &#x3D; round(mean(average_price),3)) %&gt;% mutate(volume_percent&#x3D; round(prop.table(average_volume)*100,3))</span><br><span class="line">vol_type</span><br><span class="line"></span><br><span class="line">#plu_conv &lt;- df %&gt;% select(type,total_volume,X4046,X4225,X4770) %&gt;% group_by(type) %&gt;% summarise(average_volume &#x3D; round(mean(total_volume),3),x4046 &#x3D; sum(X4046),x4225 &#x3D; sum(X4225),x4770 &#x3D; sum(X4770)) %&gt;% mutate(volume_percent&#x3D; round(prop.table(average_volume)*100,3))</span><br><span class="line">#plu_conv</span><br><span class="line"></span><br><span class="line">#cor(df$average_price,df$total_volume)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">type</th>
<th align="left">average_volume</th>
<th align="left">average_price</th>
<th align="left">volume_percent</th>
</tr>
</thead>
<tbody><tr>
<td align="center">organic</td>
<td align="left">60127.48</td>
<td align="left">1.624</td>
<td align="left">3.201%</td>
</tr>
<tr>
<td align="center">conventional</td>
<td align="left">1818206.02</td>
<td align="left">1.158</td>
<td align="left">96.799%</td>
</tr>
</tbody></table>
<p><strong>As can be seen from the density plot and the table in avocados.</strong> </p>
<ul>
<li>there are two types of avocado: organic and conventional  </li>
<li>organic avocado share a small percent (3.2%) of volume but has a high price (1.62)  </li>
<li>conventional avocado share a large percent (96.8) of volume but has a relative low price (1.16) </li>
</ul>
<h3 id="Compare-the-volume-of-each-avocado"><a href="#Compare-the-volume-of-each-avocado" class="headerlink" title="Compare the volume of each avocado"></a>Compare the volume of each avocado</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x4770 &lt;- df$X4770 %&gt;% sum()</span><br><span class="line">x4046 &lt;- df$X4046 %&gt;% sum()</span><br><span class="line">x4225 &lt;- df$X4225 %&gt;% sum()</span><br><span class="line">total_types &lt;- x4770+x4046+x4225</span><br><span class="line">total_types</span><br><span class="line">df$total_volume %&gt;% sum()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1] &quot;The sum of volume in x4770, x4046, x4225 is:  18181860558.8&quot;</span><br><span class="line">[1] &quot;The sum of volume in the sum of total_volume:  28197362107.92&quot;</span><br></pre></td></tr></table></figure>
<p>The reason causing this difference is that there are different kinds of avocados, this dataset only consider the plu code of Hass avocados, it is obvious that it will cause the difference</p>
<h3 id="Avocado-price-from-2015-2020"><a href="#Avocado-price-from-2015-2020" class="headerlink" title="Avocado price from 2015-2020"></a>Avocado price from 2015-2020</h3><figure class="highlight plain"><figcaption><span>ggplot&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">## Change the Date column from factor to the date format</span><br><span class="line">df$date &lt;- as.Date(df$date, &quot;%Y-%m-%d&quot;)</span><br><span class="line"></span><br><span class="line">## Sort the dates and order the datesets in date</span><br><span class="line">df &lt;- df[order(df$date),]</span><br><span class="line"></span><br><span class="line">## Make the plot</span><br><span class="line">comparision_plot &lt;- df %&gt;% select(date, average_price, type) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;date,y&#x3D;average_price))+</span><br><span class="line">  geom_area(aes(color&#x3D;type,fill&#x3D;type),alpha&#x3D;0.3,position&#x3D;position_dodge(0.8))+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  scale_color_manual(values &#x3D; c(&quot;#ED7921&quot;,&quot;#62BE51&quot;))+</span><br><span class="line">  scale_fill_manual(values &#x3D; c(&quot;#FD833E&quot;,&quot;#B8FC5F&quot;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">comparision_plot</span><br><span class="line">#plot_grid(density_plot,comparision,ncol &#x3D; 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___22_0.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ggplot(data&#x3D;df, aes(x&#x3D;date, y&#x3D;average_price,col&#x3D;type))+</span><br><span class="line">  geom_line()+</span><br><span class="line">  facet_wrap(~ type)+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;position&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___23_0.png" alt="img"></p>
<ul>
<li>The price of organic avocados are always higher than normal</li>
<li>The price of both avocados follow some seasonal patterns, which obeyed the commob view</li>
<li>Whether the relationship between the volume and price existed need to be explored in the following part</li>
</ul>
<h3 id="Relationship-between-Prices-and-Total-on-either-conventional-or-organic-avocados"><a href="#Relationship-between-Prices-and-Total-on-either-conventional-or-organic-avocados" class="headerlink" title="Relationship between Prices and Total on either conventional or organic avocados"></a>Relationship between Prices and Total on either conventional or organic avocados</h3><h4 id="Filter-the-data-into-two-categories-conventional-or-organic"><a href="#Filter-the-data-into-two-categories-conventional-or-organic" class="headerlink" title="Filter the data into two categories, conventional or organic"></a>Filter the data into two categories, conventional or organic</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">organic &lt;- df %&gt;% select(type,average_price,total_volume,date) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;)</span><br><span class="line">#head(organic)</span><br><span class="line">conventional &lt;- df %&gt;% select(type,average_price,total_volume,date) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;)</span><br><span class="line">#head(conventional)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>tribble_tabel&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line">library(tibbletime)</span><br><span class="line">organic &lt;- as_tbl_time(organic,index &#x3D; date) %&gt;% as_period(&#39;1 month&#39;)</span><br><span class="line">conventional &lt;- as_tbl_time(conventional,index &#x3D; date) %&gt;% as_period(&#39;monthly&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Monthly-avocados-price-in-either-conventional-or-organic-avocados"><a href="#Monthly-avocados-price-in-either-conventional-or-organic-avocados" class="headerlink" title="Monthly avocados price in either conventional or organic avocados"></a>Monthly avocados price in either conventional or organic avocados</h4><figure class="highlight plain"><figcaption><span>cowplot, fig.width </span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggthemes)</span><br><span class="line">library(cowplot)</span><br><span class="line"></span><br><span class="line">options(repr.plot.width&#x3D;8, repr.plot.height&#x3D;6)</span><br><span class="line"></span><br><span class="line">## average-price with time series</span><br><span class="line">conventional_monthly &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;average_price))+</span><br><span class="line">    geom_line(color&#x3D;&quot;#5C374C&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    labs(title &#x3D; &quot;Conventional Avocados&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; max(conventional$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;red&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; min(conventional$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;blue&quot;)</span><br><span class="line"></span><br><span class="line">organic_monthly &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;average_price))+</span><br><span class="line">    geom_line(color&#x3D;&quot;#58D68D&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    labs(title &#x3D; &quot;Organic Avocados&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; max(organic$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;red&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; min(organic$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;blue&quot;)</span><br><span class="line"></span><br><span class="line">## create a volume chart</span><br><span class="line">conventional_volume &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;total_volume))+</span><br><span class="line">    geom_bar(stat &#x3D; &#39;identity&#39;,fill&#x3D;&quot;#7FB3D5&quot;,color&#x3D;&quot;black&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    geom_smooth(method &#x3D; &quot;loess&quot;,color&#x3D;&quot;red&quot;)</span><br><span class="line"></span><br><span class="line">organic_volume &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;total_volume))+</span><br><span class="line">    geom_bar(stat &#x3D; &#39;identity&#39;,fill&#x3D;&#39;#58D68D&#39;,color&#x3D;&quot;black&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    geom_smooth(method &#x3D; &quot;loess&quot;,color &#x3D;&quot;red&quot;)</span><br><span class="line"></span><br><span class="line">plot_grid(conventional_monthly,organic_monthly,conventional_volume,organic_volume,nrow &#x3D; 2,ncol &#x3D; 2,labels &#x3D; c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;))</span><br><span class="line"></span><br><span class="line">#plot_grid(conventional_monthly,conventional_volume,nrow &#x3D; 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___29_1.png"></p>
<ul>
<li>In order to find the seasonal patterns, I used the average price and volume in each month to conduct data analysis</li>
<li>Figure A,B stands for the average price in each month (monthly)</li>
<li>Blue dashed line stands for the minimum value while the red dashed value stands for the max value</li>
<li>The most expensive conventional avocados in one month could 1.8 $, the cheapest month of conventional avocados can be 0.82 $</li>
<li>The most expensive organic avocados in one month could 2.1 $, the cheapest month of conventional avocados can be 1.21 $</li>
<li>Figure C,D stands for the volume in each month, the red line stands for the trend</li>
<li>The love of American people are consistent, the sold volume continues to grow (conventional avocado)</li>
<li>Regarding with the organic avocados, in 2019-2020, possibly owing to the decline of economic situation and the covid 19 pandemic after 2020</li>
<li>The volume patterns could follow some seasonal patterns and need further analysis</li>
</ul>
<h3 id="Patterns-among-the-years-in-each-month-Autoplot-library"><a href="#Patterns-among-the-years-in-each-month-Autoplot-library" class="headerlink" title="Patterns among the years in each month (Autoplot library)"></a>Patterns among the years in each month (Autoplot library)</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Process the data into year and month format</span></span><br><span class="line">library(forecast)</span><br><span class="line">seasonal_df &lt;- read.csv(<span class="string">&quot;/Users/yuxuan/Desktop/INT303-Avocado-prediction/avocado-updated-2020.csv&quot;</span>)</span><br><span class="line">seasonal_df$month_year &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%Y-%m&quot;</span>)</span><br><span class="line">seasonal_df$month &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Change the month from a Date format into a numerical foramt, then convert to the three letter format</span></span><br><span class="line"></span><br><span class="line">seasonal_df$monthabb &lt;- sapply(seasonal_df$month, <span class="keyword">function</span> (x) <span class="built_in">month.abb</span>[<span class="built_in">as.numeric</span>(x)])</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb,levels=<span class="built_in">month.abb</span>)</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb)</span><br></pre></td></tr></table></figure>

<p>​                              </p>
<h3 id="Seasonal-patterns-analysis"><a href="#Seasonal-patterns-analysis" class="headerlink" title="Seasonal patterns analysis"></a>Seasonal patterns analysis</h3><p>Avocado price (both organic and conventional) distribution plot from 2015 to 2020</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ggplot(seasonal_df,aes(x&#x3D;average_price,fill&#x3D;as.factor(year)))+</span><br><span class="line">geom_density(alpha&#x3D;0.5)+</span><br><span class="line">theme_economist()+</span><br><span class="line">facet_wrap(~year)+</span><br><span class="line">theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">guides(fill&#x3D;FALSE)+</span><br><span class="line">labs(title &#x3D; &quot;Distribution of Prices by year&quot;,x&#x3D;&#39;Average Price&#39;,y&#x3D;&#39;Density&#39;)+</span><br><span class="line">scale_fill_manual(values &#x3D; c(&quot;#DA4511&quot;, &quot;#FFBD00&quot;, &quot;#6A953F&quot;, &quot;#9A6233&quot;, &quot;#D3AE7C&quot;, &quot;#307CA1&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___35_0.png" alt="img"></p>
<ul>
<li>The distribution plot of each year from 2015 to 2020</li>
<li>2017 is the year when avocado price functions like the normal distribution plot</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## Set the figure size</span></span><br><span class="line"></span><br><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the price by month</span></span><br><span class="line"></span><br><span class="line">conv_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">org_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">conv_price &lt;- ts(conv_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_price &lt;- ts(org_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the volume by month</span></span><br><span class="line"></span><br><span class="line">conv_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">org_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">conv_volume &lt;- ts(conv_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_volume &lt;- ts(org_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">byyearplot_price_conv &lt;- ggseasonplot(conv_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_price_org &lt;- ggseasonplot(org_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_conv &lt;- ggseasonplot(conv_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados volume \n by year for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_org &lt;- ggseasonplot(org_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados volume by year \n for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">plot_grid(byyearplot_price_conv,byyearplot_price_org,byyearplot_volume_conv,byyearplot_volume_org,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___37_1.png" alt="img"></p>
<h3 id="Seasonality-patterns"><a href="#Seasonality-patterns" class="headerlink" title="Seasonality patterns"></a>Seasonality patterns</h3><h4 id="Monthly-analysis"><a href="#Monthly-analysis" class="headerlink" title="Monthly analysis"></a>Monthly analysis</h4><figure class="highlight plain"><figcaption><span>seaonal patterns, fig.align </span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">options(repr.plot.width&#x3D;10,repr.plot.height&#x3D;8)</span><br><span class="line">conv_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb, y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">organic_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">whole_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;All Avocados&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns,organic_patterns,whole_patterns,nrow &#x3D; 3)</span><br><span class="line">#conv_patterns</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___39_1.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conv_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb, y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados volume&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">organic_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(total_volume)) %&gt;%</span><br><span class="line">ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados volume&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">whole_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;All Avocados volume&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns_vol,organic_patterns_vol,whole_patterns_vol,nrow &#x3D; 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___40_1.png" alt="img"></p>
<ul>
<li>Overall, the avocado price could reach the peak of the year during Sep and Oct, and Feb could be the lowest price</li>
<li>Regarding with the volume avocado sold, American people like to buy avocado at Feb and May, but not at Nov</li>
<li>Based on the research, avocado tend to ripe at Aug and Sep, plus the time in transportation and packaging, it is unavoidable that it could have some delay</li>
<li>From the plot we could see that the trend in Aug are positive</li>
<li>We could see that the sold volume and price demonstrated some negative correlation at some time, which obeys our common sense, people like buying staffs when their price are low</li>
<li>Meanwhile, some positive correlation could be discovered between price and volumes, the hypothesis is that the newly harvest avocados are definitely in high quality and the previous stored avocados could be consumed significantly, which means there is a gap between demand and output</li>
<li>The volumes are increasing with the time which possibly because of the widely broadcasting.</li>
</ul>
<h4 id="Seasonal-patterns"><a href="#Seasonal-patterns" class="headerlink" title="Seasonal patterns"></a>Seasonal patterns</h4><figure class="highlight plain"><figcaption><span>fig.height </span></figcaption><table><tr><td class="code"><pre><span class="line">options(repr.plot.width&#x3D;10,repr.plot.height&#x3D;8)</span><br><span class="line"></span><br><span class="line">## seperate the month into four seasons</span><br><span class="line">seasonal_df$season &lt;- ifelse(seasonal_df$month %in% c(&quot;03&quot;,&quot;04&quot;,&quot;05&quot;),&quot;Spring&quot;,</span><br><span class="line">ifelse(seasonal_df$month %in% c(&quot;06&quot;,&quot;07&quot;,&quot;08&quot;),&quot;Summer&quot;,</span><br><span class="line">ifelse(seasonal_df$month %in% c(&quot;09&quot;,&quot;10&quot;,&quot;11&quot;),&quot;Autumn&quot;,&quot;Winter&quot;)))</span><br><span class="line"></span><br><span class="line">## Prepare to analyze the results</span><br><span class="line">seasonality_plot_conventional_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type &#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados average price by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average price&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(&quot;$ &quot;,round(avg,2))),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">seasonality_plot_conventional_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;round(mean(total_volume&#x2F;1000000),2)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados total volume by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average volume&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(avg,&quot; m&quot;)),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">#plot_grid(seasonality_plot_conventional_price,seasonality_plot_conventional_volume,nrow &#x3D; 2)</span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type &#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados average price by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average price&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(&quot;$ &quot;,round(avg,2))),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;round(mean(total_volume&#x2F;1000000),2)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados total volume by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average volume&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(avg,&quot; m&quot;)),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">plot_grid(seasonality_plot_conventional_price,seasonality_plot_organic_price,seasonality_plot_conventional_volume,seasonality_plot_organic_volume,nrow &#x3D; 2,ncol &#x3D; 2,labels &#x3D; c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___43_1.png" alt="img"></p>
<ul>
<li>Spring (3-5), Summer (6-8), Autumn (9-11), Winter (12-2)</li>
<li>Figure A, B stands for the average price of avocados for either conventional or organic</li>
<li>Figure C, D stands for the volume sold for either conventional or organic, the unit is million (m)</li>
<li>In summary:<ul>
<li>it is relative cheaper to avocado in Spring or Winter</li>
<li>avocado most sold in Spring and Summer since it is close to the next round of ripen in avocado and the market are in great supply of avocados</li>
</ul>
</li>
</ul>
<h3 id="Find-the-city-where-avocado’s-price-is-lowest"><a href="#Find-the-city-where-avocado’s-price-is-lowest" class="headerlink" title="Find the city where avocado’s price is lowest"></a>Find the city where avocado’s price is lowest</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(forcats)</span><br><span class="line">geo_conv_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(geography)%&gt;%  summarise(avg&#x3D;round(mean(average_price),2)) %&gt;% arrange(avg) %&gt;% slice(1:6)  %&gt;% mutate(geography&#x3D;fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;geography,y&#x3D;avg))+</span><br><span class="line">  geom_bar(stat &#x3D; &quot;identity&quot;,position &#x3D; &quot;dodge&quot;,alpha&#x3D;.6,width &#x3D;.4,show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label&#x3D;avg),vjust&#x3D;1.5,color&#x3D;&#39;black&#39;,size&#x3D;5)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title &#x3D; element_text(hjust &#x3D; 0.6),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados average price by geography&quot;,x&#x3D;&quot;Geography place&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">geo_org_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(geography)%&gt;%  summarise(avg&#x3D;round(mean(average_price),2)) %&gt;% arrange(avg) %&gt;% slice(1:6) %&gt;% mutate(geography&#x3D;fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;geography,y&#x3D;avg))+</span><br><span class="line">  geom_bar(stat &#x3D; &quot;identity&quot;,position &#x3D; &quot;dodge&quot;,alpha&#x3D;.6,width &#x3D;.4,show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label&#x3D;avg),vjust&#x3D;1.5,color&#x3D;&#39;black&#39;,size&#x3D;5)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title &#x3D; element_text(hjust &#x3D; 0.6),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados average price by geography&quot;,x&#x3D;&quot;Geography place&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">plot_grid(geo_conv_price,geo_org_price,nrow &#x3D; 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___47_1.png" alt="img"></p>
<ul>
<li>Use the calculation to return the six cities or regions whether the average price for avocados is lowest</li>
<li>Based on the research from map, Top 5 is close to the Mexico, where the avocado originated</li>
<li>These places are possibly the region to supply avocado</li>
</ul>
<h3 id="The-future-price-prediction"><a href="#The-future-price-prediction" class="headerlink" title="The future price prediction"></a>The future price prediction</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(prophet)</span><br><span class="line">library(cowplot)</span><br><span class="line">library(gridExtra)</span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggpubr)</span><br><span class="line">library(devtools)</span><br><span class="line">## Select and filter the data and fit the model</span><br><span class="line">price_predict &lt;- df %&gt;% select(date,average_price) %&gt;% group_by(date) %&gt;% summarise(avg&#x3D;mean(average_price))</span><br><span class="line">colnames(price_predict) &lt;- c(&#39;ds&#39;,&#39;y&#39;)</span><br><span class="line">model &lt;- prophet(price_predict,daily.seasonality &#x3D; TRUE)</span><br><span class="line"></span><br><span class="line">## make prediction or forecast the results</span><br><span class="line">future &lt;- make_future_dataframe(model,periods &#x3D; 365)</span><br><span class="line">forecast &lt;- predict(model,future)</span><br><span class="line">plot(model,forecast)+</span><br><span class="line">theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Avocados price prediction in next year&quot;,x&#x3D;&quot;year&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">trend &lt;- prophet_plot_components(model,forecast)</span><br><span class="line"></span><br><span class="line">year_trend &lt;- trend[1]</span><br><span class="line">month_trend &lt;- trend[3]</span><br><span class="line">week_trend &lt;- trend[2]</span><br><span class="line">time_trend &lt;- trend[4]</span><br><span class="line"></span><br><span class="line">overall_trend &lt;- c(year_trend,month_trend,week_trend,time_trend)</span><br><span class="line">ggarrange(plotlist &#x3D; overall_trend, labels &#x3D; c(&#39;A&#39;, &#39;B&#39;,&#39;C&#39;,&#39;D&#39;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___52_0.png" alt="img"></p>
<ul>
<li>Figure A is analyze based on year: Since 2015, the average price of avocados continues to grow and 2017 was a crazy year, they grow in a speed higher than 1.3; After 2018, the average price tend to be stable, but still has a rate about 1.28; Regarding to the future prediction, the range is about [1.20-1.34]. But considering the pandemic in North America, the possible rate could be 1.20</li>
<li>Figure B is the analysis based on month: we could see that during May, the price tend to grow in a positive way and this trend continues to grow to Oct; After Oct, the price starts to decrease, which follows the previous analysis</li>
<li>Figure C is the analysis based on week. The average price follow the rule that ordinary family shopping habits, they prefer to buy things during weekends, so the price during weekends could be higher in other days</li>
</ul>
<hr>
<h3 id="Other-platforms"><a href="#Other-platforms" class="headerlink" title="Other platforms:"></a>Other platforms:</h3><p><strong>kaggle:</strong> <a class="link"   href="https://www.kaggle.com/yuxuanwu17/eda-of-avocado-price-from-2015-to-2020" >https://www.kaggle.com/yuxuanwu17/eda-of-avocado-price-from-2015-to-2020<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>zhihu (Chinese version):</strong> <a class="link"   href="https://zhuanlan.zhihu.com/p/332699778" >https://zhuanlan.zhihu.com/p/332699778<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Github:</strong> <a class="link"   href="https://github.com/yuxuanwu17/INT303-Avocado-prediction" >https://github.com/yuxuanwu17/INT303-Avocado-prediction<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>EDA</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop based big data analysis</title>
    <url>/2021/01/25/Hadoop_cw2/</url>
    <content><![CDATA[<p>Hadoop comprises three part:</p>
<ol>
<li>Main function, including some basic configuration of job</li>
<li>Mapper class, inherited from and override the Map function</li>
<li>Reduce class, inherited from Reduce function and override it</li>
</ol>
<h3 id="1-Calculate-the-bigram-frequency-and-return-the-Top-10"><a href="#1-Calculate-the-bigram-frequency-and-return-the-Top-10" class="headerlink" title="1. Calculate the bigram frequency and return the Top 10"></a>1. Calculate the bigram frequency and return the Top 10</h3><hr>
<h4 id="data-cleaning-part-single-world"><a href="#data-cleaning-part-single-world" class="headerlink" title="data cleaning part (single world)"></a>data cleaning part (single world)</h4><ul>
<li>Use regular expression to extract the useful information</li>
<li>For the neat of code, I separate the word cleaning part into one method: deleteNotion</li>
<li>The idea is to loop all the words and feed into the deleteNotion function to clean the data</li>
<li>Since the word fed into the program is a txt file, we need first calculate each word by .split(“\s+”), and called String [] single_word</li>
<li>The regular expression is designed to match all the punctuation and numbers except for English words </li>
<li>Note that \W didn’t include the number, so we have to make a union of numbers and other punctuation in \W, that is [\\w[0-9]]</li>
<li>Create an ArrayList to store the processed data.</li>
</ul>
<h4 id="bigram-extraction"><a href="#bigram-extraction" class="headerlink" title="bigram extraction"></a>bigram extraction</h4><ul>
<li>loop through the single_word [] list</li>
<li>Note that: since we are calculating the bigram, the length should be length(single_word)-1</li>
<li>We also need to ensure that the first and last were not empty</li>
<li>Then add the data to the newly created Arraylist</li>
</ul>
<hr>
<h3 id="2-Return-the-line-containing-the-word-‘torture’"><a href="#2-Return-the-line-containing-the-word-‘torture’" class="headerlink" title="2. Return the line containing the word ‘torture’"></a>2. Return the line containing the word ‘torture’</h3><ul>
<li>Use regular expression to separate line and store it in to the list</li>
<li>The regular expression was written as {\\n{1,}}, detecting the “\n” and store it as one line </li>
<li>Create an arraylist results to each line </li>
<li>Loop through the arraylist and use .contain function to find the line contain “torture”</li>
<li>Note that, the mapper variable and reduce variable should be switched to Text, the attribute problem should take it seriously</li>
</ul>
<hr>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><h4 id="bigram-frequency"><a href="#bigram-frequency" class="headerlink" title="bigram frequency"></a>bigram frequency</h4><p><img src="/fig/wordcount.png" alt="wordcount"></p>
<h4 id="lines-containing-“torture”"><a href="#lines-containing-“torture”" class="headerlink" title="lines containing “torture”"></a>lines containing “torture”</h4><p><img src="/fig/Shuffled_Maps.png" alt="img"></p>
<hr>
<h2 id="Code-resources"><a href="#Code-resources" class="headerlink" title="Code resources"></a>Code resources</h2><p>Github: <a class="link"   href="https://github.com/yuxuanwu17/Hadoop_cw2" >https://github.com/yuxuanwu17/Hadoop_cw2<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>FYP check lists</title>
    <url>/2021/01/27/FYP_requirements/</url>
    <content><![CDATA[<h2 id="General-requirements"><a href="#General-requirements" class="headerlink" title="General requirements:"></a>General requirements:</h2><p>Maximum word length (excluding abstract, figure legends, reference list and appendices) <strong>5000 words.</strong></p>
<p><strong>Double spaced</strong></p>
<p><strong>Font 12 point, black</strong></p>
<p><strong>Binding/e-versions</strong> (must be as described below)</p>
<p>Scientific English in appropriate tense</p>
<p>Free of grammar, punctuation and spelling errors</p>
<hr>
<h2 id="Contain-the-following-in-this-order"><a href="#Contain-the-following-in-this-order" class="headerlink" title="Contain the following, in this order;"></a>Contain the following, in this order;</h2><ol>
<li><p>Completed cover template</p>
</li>
<li><p>Abstract in Chinese and in English</p>
</li>
<li><p>Introduction</p>
</li>
<li><p>Methods</p>
</li>
<li><p>Results and Discussion or Results/Discussion as a single section</p>
</li>
<li><p>Acknowledgements (if appropriate)</p>
</li>
<li><p>Reference list</p>
</li>
<li><p>Appendices (only if appropriate) see below</p>
</li>
</ol>
<hr>
<p>Report must conform at least to the SBS style guides with respect to the following:</p>
<p>Article citations within the text</p>
<p>Reference list</p>
<p>Symbols, units, abbreviations</p>
<p>Accurate syntax for organism names</p>
<p>Organism specific rules for genetic loci</p>
<p>International rules for molecular nomenclature</p>
<p>Tables</p>
<p>Figures</p>
<p>Figure legends</p>
<hr>
<h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><ol>
<li>Maximum <strong>5000 words</strong> (total word length should be included on the title page) for the main text i.e. introduction; methods; results; discussion and any text in footnotes. Note that this is a maximum, not an expectation with a margin of variation; concise reports shorter than this may be entirely appropriate.</li>
<li>Word processed; <strong>12 point Times Roman (black); double spaced</strong>. Colour in figures is acceptable, but consider whether colour is really needed to illustrate what you require. Only use colour where it will increase legibility.</li>
<li>The hard copy should be <strong>on A4 paper with a cover sheet consisting of a completed project cover template and should be produced as booklets, preferably with a plastic cover and submitted in person to the department secretary by 11 am on Monday 4 of May (Week 12)</strong>, with a copy of your Ethical Approval, if appropriate. You will be required to sign a sheet to confirm that your report contains no instances of plagiarism, collusion or fabrication</li>
<li>The electronic version (including any appendix) should be submitted on the module’s ICE page before the <strong>11 am on Monday 4 May (Week 12)</strong>, in the form of a Microsoft Word file (<em>.doc or *.docx) using the following file format *</em>SURNAME_FIRST NAME_ID_NUMBER_FR**</li>
<li>t is usual to write about the work performed in the <strong>past tense</strong> and results are usually presented <strong>in the passive form</strong></li>
<li><strong>sub-headings</strong> may help readability.</li>
<li>Define abbreviations at the point in the text where they are first used</li>
</ol>
<hr>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="Title"><a href="#Title" class="headerlink" title="Title:"></a>Title:</h3><ul>
<li><input disabled="" type="checkbox"> Choose a title that is concise but informative</li>
<li><input disabled="" type="checkbox"> Ideally it should describe the work performed and findings but not be dramatic</li>
</ul>
<h3 id="Abstracts"><a href="#Abstracts" class="headerlink" title="Abstracts:"></a>Abstracts:</h3><ul>
<li><input disabled="" type="checkbox"> The abstract should be provided in Chinese and in English</li>
<li><input disabled="" type="checkbox"> Maximum words 250</li>
<li><input disabled="" type="checkbox"> Should not include references</li>
<li><input disabled="" type="checkbox"> Should condense the aims, observations, findings and main conclusions</li>
</ul>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction:"></a>Introduction:</h3><ul>
<li><input disabled="" type="checkbox"> Provide background (e.g. literature, preliminary data) to the field of study</li>
<li><input disabled="" type="checkbox"> State the purpose of the work e.g., the scientific hypothesis</li>
<li><input disabled="" type="checkbox"> Provide the rationale for the approach taken</li>
</ul>
<h3 id="Materials-and-Methods"><a href="#Materials-and-Methods" class="headerlink" title="Materials and Methods:"></a>Materials and Methods:</h3><ul>
<li><input disabled="" type="checkbox"> Should NOT be a protocol book.</li>
<li><input disabled="" type="checkbox"> Should be sufficiently detailed for the work to be repeatable.</li>
<li><input disabled="" type="checkbox"> Should be written in a format appropriate for publication in a journal relevant to the type of work performed.</li>
<li><input disabled="" type="checkbox"> Should refer back to previous Key Skills work.</li>
</ul>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><ul>
<li><input disabled="" type="checkbox"> Present analyses, not raw data, including appropriate and fully explained statistical analyses.</li>
<li><input disabled="" type="checkbox"> Each result should be accompanied by text explaining the rationale for the experiment/observation; a succinct description of the method used to obtain the data; the methods used to analyse/interpret the data and sufficient introductory comments and discussion to link the results into a coherent narrative.</li>
<li><input disabled="" type="checkbox"> Sub-headings may be appropriate.</li>
</ul>
<h3 id="Tables-must"><a href="#Tables-must" class="headerlink" title="Tables must:"></a>Tables must:</h3><ul>
<li><input disabled="" type="checkbox"> Be numbered consecutively according to their appearance in the text (Table 1 etc.).</li>
<li><input disabled="" type="checkbox"> Have short informative titles and legends placed above the Table.</li>
<li><input disabled="" type="checkbox"> All tables must be referred to in the text.</li>
<li><input disabled="" type="checkbox"> Explanatory material may be included as footnotes immediately below the table e.g. definitions of all acronyms and abbreviations.</li>
</ul>
<h3 id="Figures-must"><a href="#Figures-must" class="headerlink" title="Figures must:"></a>Figures must:</h3><ul>
<li> Be numbered consecutively according to their appearance in the text (Figure 1 etc.).</li>
<li>Have an accompanying title and legend below the Figure.</li>
<li>Have a uniform lettering style.</li>
<li>Consider putting extensive sequences and alignments or other data in an appendix</li>
</ul>
<h3 id="Figure-legends-must"><a href="#Figure-legends-must" class="headerlink" title="Figure legends must:"></a>Figure legends must:</h3><ul>
<li><p>Be intelligible to the reader without reference to the text.</p>
</li>
<li><p>Define abbreviations or symbols used in the Figure.</p>
</li>
</ul>
<h3 id="Discussion-should"><a href="#Discussion-should" class="headerlink" title="Discussion should:"></a>Discussion should:</h3><ul>
<li>Critically review the findings.</li>
<li>Indicate whether the findings support the hypothesis.</li>
<li>Provide some speculative debate.</li>
<li>Discuss possible future experiments.</li>
</ul>
<h3 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments:"></a>Acknowledgments:</h3><ul>
<li><p>Should be at the end of the text.</p>
</li>
<li><p>Should acknowledge contributions from others e.g. other lab/School members that have aided the work in any way.</p>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p>Harvard</p>
<h3 id="Symbols-units-abbreviations"><a href="#Symbols-units-abbreviations" class="headerlink" title="Symbols, units, abbreviations:"></a>Symbols, units, abbreviations:</h3><ul>
<li><p>Nonstandard abbreviations must be defined at first occurrence</p>
</li>
<li><p>Species and generic names must be italicized scientific binomens but generic names that are also common names should not be italicized when used alone e.g. Drosophila melanogaster and Drosophila [Drosophila melanogaster is incorrect]. D. melanogaster is acceptable for subsequent uses, provided no ambiguity would result.</p>
</li>
<li><p>Genetic loci must be italicized and must follow the established rules of genetic nomenclature for the organism in question</p>
</li>
<li><p>The International Union of Biochemistry and Molecular Biology rules of nomenclature must be followed for amino acids, peptides, proteins, enzymes, nucleic acids, polynucleotides, carbohydrates, and lipids; these can currently be found at <a class="link"   href="http://www.chem.qmul.ac.uk/iubmb/nomenclature/" >http://www.chem.qmul.ac.uk/iubmb/nomenclature/<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>FYP</category>
      </categories>
      <tags>
        <tag>to-do-list</tag>
      </tags>
  </entry>
  <entry>
    <title>deep learning based prediction of m6a reaeder in RNA modification</title>
    <url>/2021/01/26/Prediction%20of%20m6A%20Reader%20substrate%20sites%20using%20deep%20convolutional%20and%20recurrent%20neural%20network/</url>
    <content><![CDATA[<h1 id="Prediction-of-m6A-Reader-substrate-sites-using-deep-convolutional-and-recurrent-neural-network"><a href="#Prediction-of-m6A-Reader-substrate-sites-using-deep-convolutional-and-recurrent-neural-network" class="headerlink" title="Prediction of m6A Reader substrate sites using deep convolutional and recurrent neural network"></a>Prediction of m6A Reader substrate sites using deep convolutional and recurrent neural network</h1><p>The full transcript could be accessed in <a class="link"   href="https://github.com/yuxuanwu17/m6A_reader/blob/master/Artical/dp_final.docx" >https://github.com/yuxuanwu17/m6A_reader/blob/master/Artical/dp_final.docx<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>N6-methyladenosine (m6A) is the most prevalent post-transcriptional modification in mRNA since it could regulate some significant biological functions with the binding of some m6A reader proteins. Multiple readers exist in the human genome, however, the binding specificity was not clarified due to the limited wet experiments on this topic. Therefore, we devised a deep learning approach which incorporated CNN and RNN frameworks together to predict the epitranscriptome-wide targets of six m6A reader proteins (YTHDF1-3, YTHDC1-2, EIF3A). We also utilized layer-wise relevance calculation to obtain contribution of each input feature. Our model achieved state-of-the-art performance with the average AUROC of 0.942 in EIF3A full transcript, compared with 0.929 in CNN-only framework and 0.817 in Support Vector Machine (SVM) method under same condition. Besides, we identified the optimal sequence length (1001bp) in the m6A reader substrate prediction. The results provide new insight into epitranscriptome target prediction and functional characterization of m6A readers.</p>
<h2 id="Material-and-Methods"><a href="#Material-and-Methods" class="headerlink" title="Material and Methods"></a>Material and Methods</h2><h3 id="Identification-of-m6A-reader-binding-sites"><a href="#Identification-of-m6A-reader-binding-sites" class="headerlink" title="Identification of m6A reader binding sites"></a>Identification of m6A reader binding sites</h3><p>For the benefits of modeling, we need to define the positive and negative samples of m6A reader binding site. As can be seen from Figure 1, there are three significant factors to consider when determining the m6A reader binding sites, which is DRACH motif, known m6A Sites and CLIP labeled Sites. Generally, m6A readers have a tendency to bind known m6A sites and DRACH motif, but these two are not robust enough, without CLIP labeled sites, they could still be considered as negative samples. Therefore, in this experiment, three factors have to be satisfied simultaneously. In addition, the position of gene model would not influence the samples. To minimize the bias in selecting the polyA RNAs, we prepared the full transcript data and mature RNA data. In detail, mature RNA data exclude the sites on the intron region while the full transcript data covered either the exon or intron region.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/m6a_criteria.6x19fgcvhww0.png" alt="m6a_criteria"></p>
<p><strong>Figure 1</strong> Criteria of determining the m6A reader binding sites.</p>
<h3 id="Deep-learning-model-construction"><a href="#Deep-learning-model-construction" class="headerlink" title="Deep learning model construction"></a>Deep learning model construction</h3><p>Previously, we conducted a traditional machine learning about m6A reader by different encoding methods, however, the performance of one-hot method was not ideal, there was still a gap to improve. In addition, one-hot encoding method learned from the convolutional neural network (CNN) is suitable for learning potential motifs in the bioinformatics field, therefore, we opted for deep learning techniques in this research. Furthermore, recurrent neural network (RNN) was incorporated since it could capture the information in sequence, for instance, the potential relationship between each nucleotide. </p>
<p>To build the deep learning model, we used Keras v2.3.0 and R v4.0.2 to conduct the learning part and process the raw data for prediction. For the data preparation part, we used R to extract n nucleotides (bp) of flanking sequences centered on the target adenosine, ranging from 251 to 2001bp to explore a suitable length. The processed sequence data were then inputted to Python3 for encoding, in this case, we chose One-hot encoding method for better model interpretability, for instance, A (1,0,0,0), C (0,1,0,0), G (0,0,1,0), T (0,0,0,1). The overall framework can be seen in Figure 2. Each sequence was then transformed to an n×4 matrix and fed into two combinations of 1D convolution (Conv1D) layer and max-pooling layer. For the first combination, we set 90 kernels with size equaled 5 and applied L2 regulation to prevent overfitting. The rectified linear unit (ReLU) was used as the activation function to provide our necessary non-linearity. The following max-pooling layer was set in size equaled 4 with strides 2 to reduce the dimension of output from the previous layer. The dropout rate was incorporated to 0.25 to further reduce the possibility of overfitting. A second 1D convolution (Conv1D) layer with 100 filters and size equaled 3 to extract the feature of the previous data. Similarly, the ReLU function and L2 regulation were applied. However, the max-pooling size was 10 with 1 stride, under which circumstance could the model achieve higher performance. </p>
<p>The recurrent neural networks long short-term memory (LSTM) layer was used to aggregate the outputs of CNNs for predicting the RBP binding, in this case, the m6A readers’ substrates sites. LSTM processed sequentially of the sequence element, hoping to capture the inter-dependencies between motifs. Moreover, the fully connected layer with 1000 neurons would receive the output from the LSTM layer, and the non-linear activation function n, sigmoid, would calculate the prediction probability in each training class. The overall tuning process was used the loss function, binary cross-entropy to conduct the weight-tuning, optimizing the learning process, additionally, we found that Adam is the most suitable for this task. Finally, the output would be the probability of being m6A reader substrate sites. </p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/Architecture(3).3uagcw8fqhm0.png" alt="Architecture(3)"></p>
<p><strong>Figure 2</strong> The sequence data are encoded by One-hot method and fed into the convolution layer and followed by the pooling layer twice to extract the significant features. The LSTM layer learns the long-term dependencies between sequence data generated by convolution layers. The flatten layer combines the previous kernels into a vector and inputs to the fully connected layer to calculate the probability of being m6A reader substrate site </p>
<h3 id="Training-strategy-and-performance-evaluation"><a href="#Training-strategy-and-performance-evaluation" class="headerlink" title="Training strategy and performance evaluation"></a>Training strategy and performance evaluation</h3><p>We separated each gene data set into three categories, training, testing, validation dataset, the ratio was 8:1:1 respectively. Moreover, to reduce the bias caused by imbalanced data samples, we ensured the same number of positive and negative samples in each category. The early stopping method was included to reduce the unnecessary computation during the learning process and the patience was designed as 10. The loss plot was drawn to document the training procedure and monitor the potential overfitting.  </p>
<p>To validate the model performance, four commonly used performance metrics, including area under the ROC curve (AUC), area under the Precision-Recall curve (PR-AUC), accuracy (ACC) and Mathew’s correlation coefficient (MCC). The formula of ACC and MCC are demonstrated as follows:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/equation.75xnw9zlnaw0.png" alt="equation"></p>
<p>where TP and TN are denoted as True Positive and True Negative, FN and FT are denoted as False Negative and False Positive. To sum up, the higher the performance metrics value, the more accurate the prediction. Additionally, we compared the performance with the previous research using machine learning method, the combination of CNN + RNN frameworks and the CNN framework only to determine the optimal choice.</p>
<p>We also exploited DeepExplain’s epsilon-LRP method (gradient-based) to calculate the contribution in each feature input. With the assistance of this approach, we could rank the nucleotides’ significance in identifying the m6A readers’ substrates. Moreover, we extend the sequence upstream/downstream length from 50bp to 250bp, hoping to cover more information in determining each nucleotide contribution. </p>
<h2 id="Results-and-Discussion"><a href="#Results-and-Discussion" class="headerlink" title="Results and Discussion"></a>Results and Discussion</h2><h3 id="Performance-comparison"><a href="#Performance-comparison" class="headerlink" title="Performance comparison"></a>Performance comparison</h3><p>Classifiers might achieve varied performance on different datasets. To assess the fitness between the 6 reader binding site datasets and the two deep learning classifiers, models were built on full transcripts and their performance were analyzed. Similarly, different size of full transcripts was encoded with One-hot method. As shown in Figure 3(A), models using CNN classifier achieved theoretically good performance with overall AUROC larger than 0.8. It seems that the CNN classifier fit the YTHDF1 binding datasets better than other reader binding sites, with overall AUROC exceeding 0.9 and highest AUROC of 0.93. In addition, CNN model achieves good performance with YTHDF2 binding datasets as well, with highest AUROC of 0.929. It is noticeable that the performance of CNN models with EIF3a varied dramatically along with the size of transcript, from 0.96 to 0.81, which suggests that the performance of CNN classifier is depend on the size of transcripts. Similar trends can be seen in the YTHDC2 datasets, the trained model with different input size achieves different AUROC score, with optimal input transcript size of 251bp (AUROC = 0.89)</p>
<p>Regarding the fitness of CNN+RNN classifier with the six reader datasets, models shows similar performance for YTHDF3, YTHDF2, YTHDF1, YTHDC2 datasets (with AUROC around 0.9). Moreover, the model trained with these four datasets as well as the YTHDC1 datasets (with AUROC around 0.875) seems transcript-size independent since lines are relatively stable. Interestingly, the performance of models trained with EIF3a datasets varied greatly from length to length (AUROC varied from 0.88 to 0.94). The structure variation between YTH family protein and EIF3a might contribute to the difference on model performance.</p>
<p>To assess the feasibility of the two classifiers, namely CNN and RNN, performance of models was interpreted and compared. Figure 3(B) compares the performance of models with different size of EIF3a transcripts. As indicated, the combination of CNN and RNN classifier achieves overall better performance than the CNN classifier for both full transcript and mature transcript. Since the trend of line graph for CNN+RNN model is more stable than the line for CNN model, we can infer that the combination of CNN and RNN makes the model less dependent on the length of transcript used.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/cmbd2.2p61qbr5qg00.png" alt="cmbd2"></p>
<p><strong>Figure 3</strong> (A) Compared the performance of CNN model and CNN+RNN model in the prediction of six m6A reader substrates under different length in full transcripts. (B) Compared the AUROC value in either full transcript or mature transcript when predicting the EIF3A reader substrates. </p>
<h3 id="ROC-and-PR-curve-comparison-between-multiple-sequence-length"><a href="#ROC-and-PR-curve-comparison-between-multiple-sequence-length" class="headerlink" title="ROC and PR-curve comparison between multiple sequence length"></a>ROC and PR-curve comparison between multiple sequence length</h3><p>the Receiver Operating Characteristic (ROC) curve and Precision-Recall curve for EIF3A datasets under the combination of CNN and RNN were visualized in Figure 4. As can be seen from the figure that, although the performance was different under different sequence size, the overall trend was stable and devoid of fluctuation. In addition, the overall performance in full transcripts could outperform the mature transcripts, probably the reason that full transcript data could cover either the exon or intron region. </p>
<p>Here, we mainly opted EIF3A dataset for easy demonstration in this paper. More details of the other five datasets could be achieved in the supplementary file.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/rocs_update.56hoogl00z40.png" alt="rocs_update"></p>
<p><strong>Figure 4</strong> (A) Compared the ROC curve and the regarding AUROC of mature and full transcript of EIF3A under CNN+RNN model in various sequence lengths. (B) Compared the PR curve and the regarding PRAUC of mature and full transcript of EIF3A under CNN+RNN model in various sequence lengths. </p>
<h3 id="Quantify-each-input-nucleotide-contribution-by-the-layer-wise-relevance-calculation"><a href="#Quantify-each-input-nucleotide-contribution-by-the-layer-wise-relevance-calculation" class="headerlink" title="Quantify each input nucleotide contribution by the layer-wise relevance calculation"></a>Quantify each input nucleotide contribution by the layer-wise relevance calculation</h3><p>Each input feature was calculated to obtain its contribution to the results by DeepExplain’s epsilon-LRP method. The feature importance plots were based on the EIF3a binding site datasets (Figure 4). The higher score that the position gets, the larger probability that the center nucleotide is an EIF3a reader binding site if this nucleotide present at that position. As shown in the graph, positions located around the predicted m6A sites got significantly higher scores than other positions, which means those positions are more important in determining whether the center nucleotide is m6A reader substrate site or not. Additionally, the prediction of modification site would benefit from taking sequence more than 50bp upstream or downstream the predicted site since they include positions with high importance score</p>
<p>Specifically, a site would be less likely to be m6A modification site if the adenosine represents in 100bp downstream since the majority of position within this sequence got importance scores smaller than 0. In comparison, the presence of cytosine in 50 upstream/downstream the predicted site tends to boost the chance of the center nucleotide being modified. No specific patterns were found for guanine and thymine as the importance plot present a shape like the sine function. </p>
<p>The results showed that if those positions 34bp, 59bp, 11bp, 58bp, 27bp, 49bp, 72bp upstream, 21bp, 27bp, 24bp, 25bp, 116bp downstream the modification site is cytosine, the site would more likely to be the EIF3a reader binding site. In addition, the probability of the modification site being EIF3a substrate site would decrease if guanosine was found on positions 21bp, 71bp, 33bp, 32bp, 31bp, 22bp upstream the center site or uridine was found on positions 54bp upstream or 53bp downstream the center site. The screened top 20 nucleotides that will decrease the change of the site being EIF3a modification site include: adenosines on positions 39bp, 27bp, 47bp, 61bp, 10bp, 12bp, 23bp, 170bp, 157bp, 51bp, 14bp, 226bp, 52bp upstream the center nucleotide, cytosine on positions 93bp upstream and 185bp downstream the center nucleotide, guanosine on positions 92, 97bp downstream the center site as well as uridines on positions 56bp, 63bp upstream the modification site.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/contribution_plot.57p7fsjv0y80.png" alt="contribution_plot"></p>
<p><strong>Figure 5</strong> Feature importance scores in EIF3A full transcript prediction. We both extracted upstream/downstream 50bp and upstream/downstream 250 bp of the sequence to rank the contribution of each nucleotide in determining the binding site. In each position, the higher score it gains, the higher contribution towards the binding sites.</p>
<h1 id="How-to-use-this-file"><a href="#How-to-use-this-file" class="headerlink" title="How to use this file?"></a>How to use this file?</h1><h2 id="Prerequisite-packages"><a href="#Prerequisite-packages" class="headerlink" title="Prerequisite packages"></a>Prerequisite packages</h2><p>keras version 2.3.0, numpy, pandas, argparse</p>
<h2 id="Run-‘python3-main-py-h’-in-command-line-for-help"><a href="#Run-‘python3-main-py-h’-in-command-line-for-help" class="headerlink" title="Run ‘python3 main.py -h’ in command line for help"></a>Run ‘python3 main.py -h’ in command line for help</h2><h3 id="Select-the-input-genes"><a href="#Select-the-input-genes" class="headerlink" title="Select the input genes"></a>Select the input genes</h3><p>You could select 6 genes, including YTHDC1-2, YTHDF1-3, EIF3A</p>
<h3 id="Select-the-input-length-of-the-sequence"><a href="#Select-the-input-length-of-the-sequence" class="headerlink" title="Select the input length of the sequence"></a>Select the input length of the sequence</h3><p>You could choose 251, 501, 1001, 2001bp input length to compare the prediction performance.<br>Due to the size limitation, i only upload some some small sized sequence as examples.<br>Email me, if you want to apply all the data</p>
<h3 id="Select-the-condition-of-the-sequence-either-full-transcript-full-or-mature-RNA-exon"><a href="#Select-the-condition-of-the-sequence-either-full-transcript-full-or-mature-RNA-exon" class="headerlink" title="Select the condition of the sequence, either full transcript (full) or mature RNA (exon)"></a>Select the condition of the sequence, either full transcript (full) or mature RNA (exon)</h3><p>To minimize the bias in selecting the polyA RNAs, we prepared the full transcript data and mature RNA data. In detail, mature RNA data exclude the sites on the intron region while the full transcript data covered either the exon or intron region.</p>
<h3 id="Choose-the-CNN-or-CNN-RNN-model"><a href="#Choose-the-CNN-or-CNN-RNN-model" class="headerlink" title="Choose the CNN or CNN+RNN model"></a>Choose the CNN or CNN+RNN model</h3><p>To compare the performance under different framework</p>
]]></content>
      <categories>
        <category>publications</category>
      </categories>
      <tags>
        <tag>conference</tag>
        <tag>deep learning</tag>
        <tag>RNA modification</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Meta analysis for knockdown of METTL3 or METTL14 affecting N6-methyladenosine methylation level</title>
    <url>/2021/01/27/meta-analysis/</url>
    <content><![CDATA[<h1 id="Meta-analysis-for-knockdown-of-METTL3-or-METTL14-affecting-N6-methyladenosine-methylation-level"><a href="#Meta-analysis-for-knockdown-of-METTL3-or-METTL14-affecting-N6-methyladenosine-methylation-level" class="headerlink" title="Meta-analysis for knockdown of METTL3 or METTL14 affecting N6-methyladenosine methylation level"></a>Meta-analysis for knockdown of METTL3 or METTL14 affecting N6-methyladenosine methylation level</h1><p>The full transcript could be accessed from <a class="link"   href="https://github.com/yuxuanwu17/meta_analysis/blob/master/Full_transcript/Meta_Analysis.docx" >https://github.com/yuxuanwu17/meta_analysis/blob/master/Full_transcript/Meta_Analysis.docx<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>N6-methyladenosine (m6A) is the most prevalent internal chemical modification present in multiple eukaryotic mRNAs, which is dynamically installed by methyltransferases (“writers”) and removed by demethylases (“erasers”). METTL3 and METTL14 are two typical m6A writers and several studies have found that knockdown or depletion of METTL3 and METTL14 genes influence the methylation level. A meta-analysis study was performed to assess the strength and quality of current evidence regarding to it and assess the how the knockdown of METTL3 or METTL14 affect the mRNA methylation level. Data was collected and classified into groups. Metafor, a R package was used to generate the Random-effects meta-analysis model and calculate the risk ratios (RRs) and 95% CIs. Since the heterogeneity of the overall data is extremely high (I2 &gt; 99%), specific samples were excluded to minimize the downgrade the heterogeneity to acceptable level. Three and two published trails for METTL3 and METTLE14 samples, respectively, were eligible for review and analysis due to the acceptable low heterogeneity of their combination (METTL3 (Q = 12.85, I2 = 37.8%) and METTL14 (Q = 45.48, I2 = 82.9%) ). The positive relationship between knockdown of METTL3/METTL14 and methylation level was successfully verified and the difference among cell lines and gene types was identified.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h2><p>The full script was in final file. But due to the size limitation, I could not upload the data set, please email me if you need the data set</p>
<h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><h3 id="PRISMA-flowchart"><a href="#PRISMA-flowchart" class="headerlink" title="PRISMA flowchart"></a>PRISMA flowchart</h3><p>For this systematic review and meta-analysis, our discovery data cohort came from various databases including Cochrane library, EMBASE, and PubMed/MEDLINE from inception to Feb 20, 2020. Seventeen datasets of epitranscriptome-wide homo sapiens m6A sites under different cell lines screened by six different high-resolution profiling approaches were collected. Missing and ambiguous data were further ensured and validated by the original researchers (Figure 1). </p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/prisma.6fmfuc39y5s0.png" alt="prisma"></p>
<p>Figure 1: PRISMA flowchart for inclusion or exclusion criteria in this meta-analysis We firstly retrieved our data (n=1555) from both GEO and GSA database. In this analysis, the primary focus was on Homo sapiens, we then exclude other unrelated species, like Mus musculus and Rattus norvegicus, our sample then restricted to 242. When explored in the full-text articles, we did not consider genes other than METTL3 or METTL14, therefore, genes like FTO, ALKBH5 and WTAP were excluded, and sample number was retained to 28. Owing to the fact that some experiments shared the same control group, we then eliminated the duplication and 17 samples remained. The remained samples were used to conduct the whole meta-analysis. </p>
<hr>
<h3 id="Forest-plot-of-the-basic-model"><a href="#Forest-plot-of-the-basic-model" class="headerlink" title="Forest plot of the basic model"></a>Forest plot of the basic model</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG26.40fi7vuvz540.jpeg" alt="WechatIMG26"></p>
<p>Figure 2. Forest plot of the basic model. This is a Random Effect model which accommodates differences in study sample. Q statistic is based on the chi-square distribution, most commonly testing heterogeneity. I2 index is the total variability in a set of effect sizes due to true heterogeneity. Log Risk Ratio is a measurement of effect size. </p>
<hr>
<h3 id="Baujat-plot-in-the-identification-of-heterogenity"><a href="#Baujat-plot-in-the-identification-of-heterogenity" class="headerlink" title="Baujat plot in the identification of heterogenity"></a>Baujat plot in the identification of heterogenity</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG30.4e7gw6et4o00.png" alt="WechatIMG30"></p>
<p>Figure 3. The Baujat plot to identify studies contributing to heterogeneity. The study ID numbers represent eight studies, respectively.</p>
<p>As shown in Figure 3, Baujat plot generated from the METTL3 study datasets identifies the influence on the overall result and the squared Pearson Residual of each study. As the 8th study is located in the top right quadrant, it has both a greater impact on the whole result and contributes most to heterogeneity; while other studies are near to the origin. Therefore, we keep all studies but the one far away on the top right. Similarly, we excluded the 4th study as it lies far top right in the Baujat plot of METTL14</p>
<hr>
<h3 id="Forest-plot-of-moderator-analysis"><a href="#Forest-plot-of-moderator-analysis" class="headerlink" title="Forest plot of moderator analysis"></a>Forest plot of moderator analysis</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG31.5re8upv5y1w0.jpeg" alt="WechatIMG31"></p>
<p>Figure 4. Forest plot of moderator analysis.</p>
<p>As shown in Figure 4, we can still conclude that there is a highly positive relationship (Log RR 5.66, 95% CI 5.31-6.02; p-value = 0.12) between the m6A methylation level and the knockdown of the METTL3 gene, although the p-value increases from &lt;0.01 to 0.12 meaning less confidence. The Log RR is adjusted from 6.93 to 5.66. The CI narrows down greatly and CI of each subgroup overlaps more than the basic model, reflecting less between-study variability. As for the METTL14 model, the positive relationship (Log RR 5.39, 95% CI 4.97-5.84; p-value &lt; 0.01) between the m6A methylation level and the absence of METTL14 gene shows similar Log RR with that of METTL3 meta-regression model. Importantly, we found no large heterogeneity or inconsistency of METTL 3 (Q(df = 8) = 12.85, I2 = 37.8%, tau2 = 0.0035) and METTL14 (Q(df = 9) = 45.48, I2= 82.9%, tau2 = 0.0140) among the studies. </p>
<hr>
<h3 id="Funnel-plot-to-investigate-the-possible-publication-bias"><a href="#Funnel-plot-to-investigate-the-possible-publication-bias" class="headerlink" title="Funnel plot to investigate the possible publication bias"></a>Funnel plot to investigate the possible publication bias</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG32.7kzbbb47n5o0.png" alt="WechatIMG32"></p>
<p>Figure 5. The Funnel plot.</p>
<p>Publication bias, occurring in the selective publication of studies based on magnitude and direction of findings, poses a particular threat to the validity of meta-analysis. Here, we investigate possible publication bias by visual inspection of Funnel plots. If the effect size versus standard is broadly symmetrical, the publication bias is absent. As shown in Figure 5., the Funnel plot on the left shows the points of nine studies of METTL3 knockdown evenly fall on both sides of the summary effect size and the standard error is approximately 0.075 on average. However, the vertical line representing the summary of all the studies of METTL3 knockdown lies on the right of zero, around 1.73, suggests that there is a positive effect of publication bias on the summary effect size. As for the Funnel plot on the right, points of ten studies of METTL14 knockdown evenly fall on both sides of the summary effect size. The standard error is approximately 0.050 on average and the vertical line lies on the origin meaning no publication bias on the summary effect size.   </p>
]]></content>
      <categories>
        <category>publications</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>RNA modification</tag>
        <tag>meta-analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB based neural network for image classification</title>
    <url>/2021/01/25/matlab_cw2_readme/</url>
    <content><![CDATA[<h2 id="Project-overview"><a href="#Project-overview" class="headerlink" title="Project overview :"></a>Project overview :</h2><p>This task includes five algorithms to classify the characters segmented from the license plates of automobiles using MATLAB</p>
<ul>
<li>MLP (multi-layer perceptron)</li>
<li>CNN (convolutional neural network)</li>
<li>LVQ (learning vector quantization)</li>
<li>RBF1 with k-means clustering</li>
<li>RBF2 with SOM (self-organizing map)</li>
</ul>
<hr>
<h2 id="Files-running-order"><a href="#Files-running-order" class="headerlink" title="Files running order"></a>Files running order</h2><ol>
<li>run the figure_preprocessing.m and create a new file folder ass2_processede_data</li>
<li>run data_partition.m split the dataset in 8:2 version and returned the X_train, X_test, y_train, y_test and save as train_test_data.mat</li>
<li>run ass2_CNN.m (this script did not use the processed data, but read the figure directly from the original file)</li>
<li>run ass2_mlp.m </li>
<li>run ass2_lvq.m</li>
<li>run ass2_rbf_kmean.m</li>
<li>run ass2_rbf_som.m</li>
<li>run ass2_confusion_matrix_summary.m</li>
</ol>
<hr>
<h2 id="Components-Scripts-inside-the-project"><a href="#Components-Scripts-inside-the-project" class="headerlink" title="Components/Scripts inside the project"></a>Components/Scripts inside the project</h2><h2 id="The-script-part"><a href="#The-script-part" class="headerlink" title="The script part"></a>The script part</h2><h3 id="figure-preprocessing-m"><a href="#figure-preprocessing-m" class="headerlink" title="figure_preprocessing.m"></a>figure_preprocessing.m</h3><p>This is the script to extract the ass2data and rewrite to a new file folder ass2_processed_data. </p>
<pre><code>- read both jpeg and jpg files in all folders ass2_data
- rewrite into another folders ass2_processed_data with uniform style (jpeg) and uniform naming styles (label+number) e.g. (A1,B10,C99)</code></pre>
<h3 id="data-partition-m"><a href="#data-partition-m" class="headerlink" title="data_partition.m"></a>data_partition.m</h3><p>This is the script splitted the processed data into training and testing dataset in 8:2 ratio. It adjusted the size and columns or rows for fitting the designed model’s network.</p>
<pre><code>- read images from the processed folder ass2_processed_data. 
- split the dataset into 8:2
- save the splitted samples and parameters as train_test_data.mat</code></pre>
<h3 id="ass2-CNN-m"><a href="#ass2-CNN-m" class="headerlink" title="ass2_CNN.m"></a>ass2_CNN.m</h3><p>This is the script to conduct the CNN.</p>
<pre><code>- use imageDataset to store and train the model
- use splitEachLabel to split the training and testing datasets
- do not use the train_test_data as the input since CNN has standard samples in Matlab documents
- imageInputLayer(48,24,1)
- Layer 1:
    - kernel size: 3; filters number: 8; padding: same
    - batchNormalizationLayer
    - Relu layer
    - Maxpooling with a pooling size equals [2 2] and Stride equals [2 2]
- Layer 2:
    - kernel size: 3; filters number: 16; padding: same    
    - batchNormalizationLayer
    - Relu layer
    - Maxpooling with a pooling size equals [2 2] and Stride equals [2 2]
- Layer 3:
    - kernel size: 3; filters number: 32; padding: same    
    - batchNormalizationLayer
    - Relu layer
    - Maxpooling with a pooling size equals [2 2] and Stride equals [2 2]
- Layer 4:
    - fully connected layer with neurons equals 24
    - softmaxLayer
- calculate the training and testing accuracy
- return and save the confusion matrix as C_CNN.mat</code></pre>
<h3 id="ass2-mlp-m"><a href="#ass2-mlp-m" class="headerlink" title="ass2_mlp.m"></a>ass2_mlp.m</h3><p>This is the script to conduct the MLP</p>
<pre><code>- load the dataset obtained previously train_test_data.mat
- lr_rate = 0.2;
- momentum = 0.4;
- epochs = 1000;
- 3 layers with 50, 100, 100 
- Hyperbolic tangent sigmoid transfer function (tansig)
- gradient descent to update the weights
- calculate the training and testing accuracy
- return and save the confusion matrix as C_mlp.mat</code></pre>
<h3 id="ass2-lvq-m"><a href="#ass2-lvq-m" class="headerlink" title="ass2_lvq.m"></a>ass2_lvq.m</h3><pre><code>- load the dataset obtained previously train_test_data.mat
- set the cluster into 360 due to its performance, you could also set cluster into 24 for computational convenience
- lvqnet(24) could achieve ideal performance, but the performance could not be comparable with the cluster set into 360
- save the lvqnet(360) as lvq_360.mat, uncomment the line if you wish to see the performance
- calculate the training and testing accuracy
- return and save the confusion matrix C_lvq.mat</code></pre>
<h3 id="ass2-rbf-kmean-m"><a href="#ass2-rbf-kmean-m" class="headerlink" title="ass2_rbf_kmean.m"></a>ass2_rbf_kmean.m</h3><pre><code>- load the dataset obtained previously train_test_data.mat
- use kmeans to return the center of each cluster, the number of cluster is determined as 360
- use assembled function RBF_training_kmeans to calculate the W (weights), sigma (the variance of the RBF kernel) and the coordinate of each cluster's center 
- use the previous returned parameter to return the training prediction by assembled function: RBF_predict
- calculate the training and testing accuracy
- return and save the confusion matrix C_rbf_kmeans.mat</code></pre>
<h3 id="ass2-rbf-som-m"><a href="#ass2-rbf-som-m" class="headerlink" title="ass2_rbf_som.m"></a>ass2_rbf_som.m</h3><pre><code>- load the dataset obtained previously train_test_data.mat
- define the SOM network, the dimension is set to 18*20 for convenience, keep it uniform to the previous number of clusters: 360
- coverSteps = 10 %% Number of training steps for initial covering of the input space (default = 100)
- initNeighbor = 80 %% Initial neighborhood size (default = 3)
- topologyFcn = 'hextop' %% Layer topology function (default = 'hextop')
- distanceFcn = 'dist' %%  Neuron distance function (default = 'linkdist')
- once finished the training of SOM network, use assembled function RBF_training_som.m to calculate the weights W, sigma (the variance of the RBF kernel) and center of SOM clusters, which is the IW{1,1}.
- use the previous returned parameter to return the training prediction by assembled function: RBF_predict
- return and save the confusion matrix C_rbf_som.mat</code></pre>
<h3 id="ass2-confusion-matrix-summary-m"><a href="#ass2-confusion-matrix-summary-m" class="headerlink" title="ass2_confusion_matrix_summary.m"></a>ass2_confusion_matrix_summary.m</h3><pre><code>- load the previous saved mat file
- reshow the confusion matrix
- compare the performance returned by different neural networks
- compare the accuracy returned by different neural networks  </code></pre>
<hr>
<h2 id="The-function-part-assembled-function-for-reproduction"><a href="#The-function-part-assembled-function-for-reproduction" class="headerlink" title="The function part (assembled function for reproduction)"></a>The function part (assembled function for reproduction)</h2><h3 id="getimdata-m"><a href="#getimdata-m" class="headerlink" title="getimdata.m"></a>getimdata.m</h3><pre><code>- Input: the file path, in this case the processed file with renamed figure and same format jpeg (ass2_processed_data) 
- Output: Transormed the numerical data into the one-hot encoding vector format (one-hot format)</code></pre>
<h3 id="getimdata2-m"><a href="#getimdata2-m" class="headerlink" title="getimdata2.m"></a>getimdata2.m</h3><pre><code>- Input: the file path, in this case the processed file with renamed figure and same format jpeg (ass2_processed_data) 
    - normalize the data into range 0-1
    - assign the numerical labels to each character
    - combine all the processed plot into a dataset 2400 * 1152
    - 2400 stands for the number of samples; 1152 stands for the features in one figure
- Output: The normalized figure data (0-1), with data and corresponding labels. Labels are in numerical format (1,2,3...24) (without one-hot)
- This function method is selected in the whole project</code></pre>
<h3 id="RBF-training-kmeans-m"><a href="#RBF-training-kmeans-m" class="headerlink" title="RBF_training_kmeans.m"></a>RBF_training_kmeans.m</h3><pre><code>- Input: data, labels, number of clusters to be determined by kmeans
- sigma is determined by the mean Euclidean distance between two clusters
- k weight matrix is calculated by the radbas(distance of samples between clusters' centers/2*sigma^2)
- W weights is calculated by the pesudo inverse of (k'*k)*k'*labels</code></pre>
<h3 id="RBF-training-som-m"><a href="#RBF-training-som-m" class="headerlink" title="RBF_training_som.m"></a>RBF_training_som.m</h3><pre><code>- Input: data, labels and net
- net is pre-trained by som networks
- the cluster center is returned by the first layer of som network, which is denoted by net.IW{1,1}
- sigma is determined by the mean Euclidean distance between two clusters
- k weight matrix is calculated by the radbas(distance of samples between clusters' centers/2*sigma^2)
- W weights is calculated by the pesudo inverse of (k'*k)*k'*labels</code></pre>
<h3 id="RBF-predict-m"><a href="#RBF-predict-m" class="headerlink" title="RBF_predict.m"></a>RBF_predict.m</h3><pre><code>- Input: data, W, sigma, C trained previously from either RBF_training_kmeans or RBF_training_som
- Output: vectors of the final prediction
- data could be either training data or testing data</code></pre>
<h3 id="getcls-m"><a href="#getcls-m" class="headerlink" title="getcls.m"></a>getcls.m</h3><pre><code>- Input: vecs - matrix of column vectors (returned from the RBF_predict.m)
- Output: cls - matrix where the largest element in each column in vectors is set to 1 and the rest to 0   Ex: vecs = [2 4; 1 5], gives c = [1 0; 0 1]
- This function is used to return the most likely label in multi-variable classification, especially after the one-hot encoding method</code></pre>
<h3 id="rate-m"><a href="#rate-m" class="headerlink" title="rate.m"></a>rate.m</h3><pre><code>- Input: matrix of class vectors
- Computes the percentage of equal columns in t1 and t2, can be used to compute the rate of correct classified patterns in a pattern recognition application
- Output: number of matching vectors</code></pre>
<hr>
<h2 id="Saved-parameters"><a href="#Saved-parameters" class="headerlink" title="Saved parameters"></a>Saved parameters</h2><h3 id="train-test-data-mat"><a href="#train-test-data-mat" class="headerlink" title="train_test_data.mat"></a>train_test_data.mat</h3><pre><code>- the value obtained from the data_partition.m
- X_train, X_test, y_train, y_value</code></pre>
<h3 id="som-net-data-mat"><a href="#som-net-data-mat" class="headerlink" title="som_net_data.mat"></a>som_net_data.mat</h3><pre><code>- the network trained by som (it takes long time, for computation convenience)</code></pre>
<h3 id="lvq-360-mat"><a href="#lvq-360-mat" class="headerlink" title="lvq_360.mat"></a>lvq_360.mat</h3><pre><code>- lvq with cluster set to 360</code></pre>
<h3 id="lvq-24-mat"><a href="#lvq-24-mat" class="headerlink" title="lvq_24.mat"></a>lvq_24.mat</h3><pre><code>- lvq with cluster set to 24 </code></pre>
<h3 id="kmeans-plot-mat"><a href="#kmeans-plot-mat" class="headerlink" title="kmeans_plot.mat"></a>kmeans_plot.mat</h3><pre><code>- calculate silhouette value to find the suitable cluster k, but the results are not satisfied
- return the plot of each epoch</code></pre>
<h3 id="Confusion-matrix-summary"><a href="#Confusion-matrix-summary" class="headerlink" title="Confusion_matrix summary:"></a>Confusion_matrix summary:</h3><pre><code>- CNN_confusion.mat
- C_rbf_som.mat
- C_rbf_kmeans.mat
- C_mlp.mat
- C_lvq.mat
- C_CNN.mat</code></pre>
<hr>
<p>Assessment2</p>
<p>You could download the whole file with script and report in 1716309_Yuxuan_Wu.zip from my own repository</p>
<p><a class="link" href="https://github.com/yuxuanwu17/INT301_Assessment2">https://github.com/yuxuanwu17/INT301_Assessment2<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Neural networks</tag>
        <tag>image classification</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab相关的知识</title>
    <url>/2021/01/28/matlab_links/</url>
    <content><![CDATA[<p><strong>matlab神经网络newff函数的用法</strong></p>
<p><a class="link"   href="https://blog.csdn.net/xiaotao_1/article/details/79078729" >https://blog.csdn.net/xiaotao_1/article/details/79078729<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>分割数据集</strong></p>
<p><a class="link"   href="https://blog.csdn.net/shengchaohua163/article/details/79876007" >https://blog.csdn.net/shengchaohua163/article/details/79876007<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.itdaan.com/blog/2018/04/10/7c17309d448c3f414edafe886a257d7b.html" >https://www.itdaan.com/blog/2018/04/10/7c17309d448c3f414edafe886a257d7b.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>理解train的函数的意义</strong></p>
<p><a class="link"   href="https://www.mathworks.com/matlabcentral/answers/337308-net-tr-y-e-train-net-p-t-how-y-and-e-get-their-dimensions-with-this-syntax" >https://www.mathworks.com/matlabcentral/answers/337308-net-tr-y-e-train-net-p-t-how-y-and-e-get-their-dimensions-with-this-syntax<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>newff</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43857827/article/details/102924575" >https://blog.csdn.net/weixin_43857827/article/details/102924575<i class="fas fa-external-link-alt"></i></a></p>
<p>net = newff(minmax(p),[隐层的神经元的个数，输出层的神经元的个数],{隐层神经元的传输函数，输出层的传输函数｝,’反向传播的训练函数’)</p>
<p><strong>混淆矩阵</strong></p>
<p><a class="link"   href="https://ww2.mathworks.cn/help/stats/confusionmat.html" >https://ww2.mathworks.cn/help/stats/confusionmat.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>如何优化MLP</strong></p>
<p><a class="link"   href="https://ww2.mathworks.cn/matlabcentral/answers/137-how-do-i-improve-my-neural-network-performance" >https://ww2.mathworks.cn/matlabcentral/answers/137-how-do-i-improve-my-neural-network-performance<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>XOR problem</strong> </p>
<p>[<a class="link"   href="https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The%20XOr%2C%20or%20%E2%80%9Cexclusive%20or,value%20if%20they%20are%20equal]" >https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The%20XOr%2C%20or%20%E2%80%9Cexclusive%20or,value%20if%20they%20are%20equal]<i class="fas fa-external-link-alt"></i></a>(<a class="link"   href="https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The" >https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The<i class="fas fa-external-link-alt"></i></a> XOr%2C or “exclusive or,value if they are equal)</p>
<p><strong>Rbf 问题算法</strong></p>
<p><a class="link"   href="https://blog.csdn.net/zouxy09/article/details/13297881" >https://blog.csdn.net/zouxy09/article/details/13297881<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Rbf 神经网络和bp神经网络的区别和优缺点</strong></p>
<p><a class="link"   href="https://blog.csdn.net/kykankankan/article/details/79749307?utm_medium=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase" >https://blog.csdn.net/kykankankan/article/details/79749307?utm_medium=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase<i class="fas fa-external-link-alt"></i></a></p>
<p>遍历读取文件</p>
<p><a class="link"   href="https://blog.csdn.net/FX677588/article/details/53126961" >https://blog.csdn.net/FX677588/article/details/53126961<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Matlab CNN</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_41923961/article/details/80382502" >https://blog.csdn.net/weixin_41923961/article/details/80382502<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>for语句循环系列处理一部分文件，并且改写</strong></p>
<p><a class="link"   href="https://blog.csdn.net/zhangziyou719/article/details/54647331?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" >https://blog.csdn.net/zhangziyou719/article/details/54647331?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>kmeans</strong></p>
<p><a class="link"   href="https://www.mathworks.com/help/stats/k-means-clustering.html" >https://www.mathworks.com/help/stats/k-means-clustering.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>matlab函数</strong></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/19802747" >https://zhuanlan.zhihu.com/p/19802747<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>径向基函数的sigma选择（当然也可以用mean）</strong></p>
<p><a class="link"   href="https://www.cnblogs.com/yymn/p/4537992.html" >https://www.cnblogs.com/yymn/p/4537992.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>SOM</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_30300225/article/details/95509788?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control" >https://blog.csdn.net/weixin_30300225/article/details/95509788?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>python 相关的知识和笔记链接</title>
    <url>/2021/01/28/python-%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86%E5%92%8C%E7%AC%94%E8%AE%B0%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>Python learning: 入门大全</p>
<p><a class="link"   href="https://apachecn.gitee.io/ailearning/#/" >https://apachecn.gitee.io/ailearning/#/<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="接受不定参数"><a href="#接受不定参数" class="headerlink" title="接受不定参数"></a>接受不定参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, *args</span>):</span></span><br><span class="line">    total = x</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        total += arg</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>这里，<code>*args</code> 表示参数数目不定，可以看成一个元组，把第一个参数后面的参数当作元组中的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">----</span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, **kwargs</span>):</span></span><br><span class="line">    total = x</span><br><span class="line">    <span class="keyword">for</span> arg, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;adding &quot;</span>, arg</span><br><span class="line">        total += value</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>这里， <code>**kwargs</code> 表示参数数目不定，相当于一个字典，关键词和值对应于键值对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(<span class="number">10</span>, y=<span class="number">11</span>, z=<span class="number">12</span>, w=<span class="number">13</span>)</span><br><span class="line">----</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adding  y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adding  z</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adding  w</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">46</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span> args, kwargs</span><br><span class="line"></span><br><span class="line">foo(<span class="number">2</span>, <span class="number">3</span>, x=<span class="string">&#x27;bar&#x27;</span>, z=<span class="number">10</span>)</span><br><span class="line">-----</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>tf 里面的training=True</p>
<p>Some neural network layers behave differently during training and inference, for example Dropout and BatchNormalization layers. For example</p>
<ul>
<li>During training, dropout will randomly drop out units and correspondingly scale up activations of the remaining units.</li>
<li>During inference, it does nothing (since you usually don’t want the randomness of dropping out units here).</li>
</ul>
<p>The training argument lets the layer know which of the two “paths” it should take. If you set this incorrectly, your network might not behave as expected.</p>
<p>pycharm的奇技淫巧</p>
<p><a class="link"   href="https://www.zhihu.com/question/37787004" >https://www.zhihu.com/question/37787004<i class="fas fa-external-link-alt"></i></a></p>
<p>为什么要做归一化处理</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/TF6d9NRz0lDFQeC_K3CVaw" >https://mp.weixin.qq.com/s/TF6d9NRz0lDFQeC_K3CVaw<i class="fas fa-external-link-alt"></i></a></p>
<p>npy 格式的好处</p>
<p><a class="link"   href="https://towardsdatascience.com/what-is-npy-files-and-why-you-should-use-them-603373c78883" >https://towardsdatascience.com/what-is-npy-files-and-why-you-should-use-them-603373c78883<i class="fas fa-external-link-alt"></i></a></p>
<ol>
<li>不用reshape了，什么格式保存，什么格式读取</li>
<li>storage比较小</li>
<li>Read的速度比较快</li>
</ol>
<p>pickle data</p>
<p><a class="link"   href="https://www.geeksforgeeks.org/understanding-python-pickling-example/" >https://www.geeksforgeeks.org/understanding-python-pickling-example/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.zhihu.com/search?type=content&amp;q=Pickling" >https://www.zhihu.com/search?type=content&amp;q=Pickling<i class="fas fa-external-link-alt"></i></a></p>
<p>答：Pickle模块读入任何Python对象，将它们转换成字符串，然后使用dump函数将其转储到一个文件中——这个过程叫做pickling。反之从存储的字符串文件中提取原始Python对象的过程，叫做unpickling。    allow_pickle = True文件传输的过程中可能会有压缩，true则表示压缩后文件不变</p>
<p>Python的面试</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/41962762" >https://zhuanlan.zhihu.com/p/41962762<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>1.这两个参数是什么意思:*args,\</strong>kwargs？我们为什么要使用它们?**</p>
<p>答:如果我们不确定往一个函数中传入多少参数，或者我们希望以元组(tuple)或者列表(list)的形式传参数的时候，我们可以使用*args(单星号).如果我们不知道往函数中传递多少个关键词参数或者想传入字典的值作为关键词参数的时候我们可以使用**kwargs(双星号),args,kwargs两个标识符是约定俗成的用法。</p>
<p>lists are mutable while tuple are not </p>
<p><strong>这个就非常的好，解释kargs and args</strong></p>
<p><a class="link"   href="https://realpython.com/python-kwargs-and-args/" >https://realpython.com/python-kwargs-and-args/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.jianshu.com/p/592cf526b1e6" >https://www.jianshu.com/p/592cf526b1e6<i class="fas fa-external-link-alt"></i></a></p>
<p>Python 的iteration 这个模块的用法</p>
<p><a class="link"   href="https://www.zhihu.com/search?type=content&amp;q=itertools" >https://www.zhihu.com/search?type=content&amp;q=itertools<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Itertools.zip_longest()</strong></p>
<p>This iterator falls under the category of <a class="link"   href="https://www.geeksforgeeks.org/python-itertools/#terminate" >Terminating Iterators<i class="fas fa-external-link-alt"></i></a>. It prints the values of iterables alternatively in sequence. If one of the iterables is printed fully, the remaining values are filled by the values assigned to fillvalue parameter.</p>
<p>Python新手常见的坑</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/81012511" >https://zhuanlan.zhihu.com/p/81012511<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Tf.function 装饰器的玩意</strong> </p>
<table>
<thead>
<tr>
<th>func</th>
<th>the function to be compiled. If func is None, <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/function" >tf.function<i class="fas fa-external-link-alt"></i></a> returns a decorator that can be invoked with a single argument - func. In other words, tf.function(input_signature=…)(func) is equivalent to <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/function" >tf.function(func, input_signature=…)<i class="fas fa-external-link-alt"></i></a>. The former can be used as decorator.</th>
</tr>
</thead>
<tbody><tr>
<td>input_signature</td>
<td>A possibly nested sequence of <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/TensorSpec" >tf.TensorSpec<i class="fas fa-external-link-alt"></i></a> objects specifying the shapes and dtypes of the Tensors that will be supplied to this function. If None, a separate function is instantiated for each inferred input signature. If input_signature is specified, every input to func must be a Tensor, and func cannot accept **kwargs.</td>
</tr>
</tbody></table>
<p><strong>tf graph：</strong></p>
<p>Graphs are data structures that contain a set of <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/Operation" >tf.Operation<i class="fas fa-external-link-alt"></i></a> objects, which represent units of computation; and <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/Tensor" >tf.Tensor<i class="fas fa-external-link-alt"></i></a> objects, which represent the units of data that flow between operations. They are defined in a <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/Graph" >tf.Graph<i class="fas fa-external-link-alt"></i></a> context. Since these graphs are data structures, they can be saved, run, and restored all without the original Python code.</p>
<p><strong>permutation invariant</strong></p>
<p>In this context this refers to the fact that the model does not assume any spatial relationships between the features. E.g. for multilayer perceptron, you can permute the pixels and the performance would be the same. This is not the case for convolutional networks, which assume neighbourhood relations.</p>
<p>numpy -1 的作用</p>
<p><a class="link"   href="https://stackoverflow.com/questions/tagged/numpy-ndarray" >https://stackoverflow.com/questions/tagged/numpy-ndarray<i class="fas fa-external-link-alt"></i></a></p>
<p>Tensorflow.Dataset中map，shuffle，repeat，batch的总结 </p>
<p><a class="link"   href="https://blog.csdn.net/anshuai_aw1/article/details/105094548" >https://blog.csdn.net/anshuai_aw1/article/details/105094548<i class="fas fa-external-link-alt"></i></a></p>
<p>shuffle的顺序很重要，应该先shuffle再batch，如果先batch后shuffle的话，那么此时就只是对batch进行shuffle，而batch里面的数据顺序依旧是有序的，那么随机程度会减弱</p>
<p>buffer_size 越大，打乱的程度越高</p>
<p><a class="link"   href="https://www.cnblogs.com/HolyShine/p/8673322.html" >https://www.cnblogs.com/HolyShine/p/8673322.html<i class="fas fa-external-link-alt"></i></a></p>
<p>数据集的处理和预处理，非常重要</p>
<p><a class="link"   href="https://tf.wiki/zh_hans/basic/tools.html#zh-hans-tfdata" >https://tf.wiki/zh_hans/basic/tools.html#zh-hans-tfdata<i class="fas fa-external-link-alt"></i></a></p>
<p>Tensorflow Dataset API 用法</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/30751039" >https://zhuanlan.zhihu.com/p/30751039<i class="fas fa-external-link-alt"></i></a></p>
<p>Tensorflow 数据读取机制</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/27238630" >https://zhuanlan.zhihu.com/p/27238630<i class="fas fa-external-link-alt"></i></a></p>
<p>训练gpu的tricks</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/53345706" >https://zhuanlan.zhihu.com/p/53345706<i class="fas fa-external-link-alt"></i></a></p>
<p><strong><em>\</em>tensorflow的训练和教程(非常重要)</strong></p>
<p><a class="link"   href="https://tf.wiki/" >https://tf.wiki/<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="blob:file:///c0a2b963-ad70-4970-82dd-9ca515c90f18" alt="model.png"></p>
<p>python的包之类的问题</p>
<p><a class="link"   href="https://www.zhihu.com/question/430339227/answer/1577177268" >https://www.zhihu.com/question/430339227/answer/1577177268<i class="fas fa-external-link-alt"></i></a></p>
<p>Python __init__之类的问题</p>
<p><a class="link"   href="https://www.zhihu.com/question/46973549/answer/767530541" >https://www.zhihu.com/question/46973549/answer/767530541<i class="fas fa-external-link-alt"></i></a></p>
<p>nohup</p>
<p><a class="link"   href="https://www.zhihu.com/question/429726293/answer/1568963793" >https://www.zhihu.com/question/429726293/answer/1568963793<i class="fas fa-external-link-alt"></i></a></p>
<p>Pycharm 的debug</p>
<p><a class="link"   href="https://www.zhihu.com/search?type=content&q=pycharm%E6%96%AD%E7%82%B9debug" >https://www.zhihu.com/search?type=content&amp;q=pycharm%E6%96%AD%E7%82%B9debug<i class="fas fa-external-link-alt"></i></a></p>
<p>五分钟学算法</p>
<p><a class="link"   href="http://www.cxyxiaowu.com/" >http://www.cxyxiaowu.com/<i class="fas fa-external-link-alt"></i></a></p>
<p>python浅拷贝</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/KrdXyYMtyElUGuPH5eNYvg" >https://mp.weixin.qq.com/s/KrdXyYMtyElUGuPH5eNYvg<i class="fas fa-external-link-alt"></i></a></p>
<p>爬取b站的弹幕</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/OYo1VwKkUWIX9p73mvSLOQ" >https://mp.weixin.qq.com/s/OYo1VwKkUWIX9p73mvSLOQ<i class="fas fa-external-link-alt"></i></a></p>
<p>表情包</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/0Yguofg54GZSjvfUfjezmw" >https://mp.weixin.qq.com/s/0Yguofg54GZSjvfUfjezmw<i class="fas fa-external-link-alt"></i></a></p>
<p>爬去百度的表格</p>
<p><a class="link"   href="https://blog.csdn.net/wyquin/article/details/79601918" >https://blog.csdn.net/wyquin/article/details/79601918<i class="fas fa-external-link-alt"></i></a></p>
<p>python 的项目组织结构</p>
<p><a class="link"   href="https://marlous.github.io/2019/04/03/Python-%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87/" >https://marlous.github.io/2019/04/03/Python-%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87/<i class="fas fa-external-link-alt"></i></a></p>
<p>爬虫403问题</p>
<p><a class="link"   href="http://zhaoxuhui.top/blog/2017/06/19/Python%E7%88%AC%E8%99%AB403%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AE%9E%E4%BE%8B.html" >http://zhaoxuhui.top/blog/2017/06/19/Python%E7%88%AC%E8%99%AB403%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AE%9E%E4%BE%8B.html<i class="fas fa-external-link-alt"></i></a></p>
<p>Matplot 问题总结</p>
<p><a class="link"   href="https://www.jianshu.com/p/778d78463028" >https://www.jianshu.com/p/778d78463028<i class="fas fa-external-link-alt"></i></a></p>
<p>爬虫csdn 大全</p>
<p><a class="link"   href="https://blog.csdn.net/llllllkkkkkooooo/category_10129586.html" >https://blog.csdn.net/llllllkkkkkooooo/category_10129586.html<i class="fas fa-external-link-alt"></i></a></p>
<p>阿里云部署 flask</p>
<p><a class="link"   href="https://blog.csdn.net/qq_16293649/article/details/78601569?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-2&amp;spm=1001.2101.3001.4242" >https://blog.csdn.net/qq_16293649/article/details/78601569?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-2&amp;spm=1001.2101.3001.4242<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>NBA kaggle analysis</title>
    <url>/2021/01/31/nba%E4%BC%A4%E7%97%85%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>本文参考，并将其延伸至2018-2020 赛季。全文用rmd 完成，ggplot2为主要做图工具。主要想研究下各个球队和伤病之间的关系</p>
<p><a class="link"   href="https://www.kaggle.com/jaseziv83/extensive-nba-injuries-deep-dive-eda/comments" >https://www.kaggle.com/jaseziv83/extensive-nba-injuries-deep-dive-eda/comments<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h3><p><a class="link"   href="https://www.kaggle.com/ghopkins/nba-injuries-2010-2018" >https://www.kaggle.com/ghopkins/nba-injuries-2010-2018<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><ul>
<li>返回头部数据看下格式</li>
</ul>
<p>注： 这里的Acquired 和 Relinquished是呈现互补关系。若Acquired非空，则Relinquished 空</p>
<p><img src="https://pic2.zhimg.com/v2-a50518a5b79efdd79a5474d690787931_b.png" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-1fe0510282ecbea48dd9ddc9b4443f18_b.png" alt="img"></p>
<p>最后的记录是到2020-10-2.</p>
<p>发现存在很多空的列表，看下个数 （这里有一个坑就是这里的缺失值不是NA，而是“”。）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">print(colSums(df == <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-cbfbdd1564ab4f7b7c1dc9bdbf0c16a2_b.png" alt="img"></p>
<p>再看一下总体数据的size</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">glimpse(df)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-7988747e7210a3e91b0bbc730cba096f_b.png" alt="img"></p>
<h3 id="Team-列查看"><a href="#Team-列查看" class="headerlink" title="Team 列查看"></a>Team 列查看</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;% dplyr::filter(Team == <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-c3e8eb624aeebc696ec3f767dc4c92b7_b.png" alt="img"></p>
<p>这两例情况其实都是受伤了，被球队裁掉了</p>
<p>这里以大宝贝为例</p>
<p><img src="https://pic4.zhimg.com/v2-c4483ddbe7fe983ef01017ee72f34d7b_b.png" alt="img"></p>
<p>所以我们可以大胆的排除掉这两种情况</p>
<h3 id="Acquired列查看"><a href="#Acquired列查看" class="headerlink" title="Acquired列查看"></a>Acquired列查看</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  filter(Acquired != <span class="string">&quot;&quot;</span>) %&gt;%</span><br><span class="line">  count(Notes) %&gt;%</span><br><span class="line">  arrange(desc(n))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-0f2b3bff9bd82964f586314b9fdf1288_b.png" alt="img"></p>
<p>发现这是一些恢复的数据，而我们的目的是找到一些球队和伤病的问题，所以我们可以单纯的不考虑这些。正如我前面提到的那样，Acquired 和 Relinquished 是互补的，所以我们可以如下处理数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df_exc &lt;- df %&gt;%</span><br><span class="line">  filter(Acquired == <span class="string">&quot;&quot;</span>) %&gt;% <span class="comment"># 排除Acquired==““</span></span><br><span class="line">  filter(Team != <span class="string">&quot;&quot;</span>) %&gt;% <span class="comment"># 排除Team==““</span></span><br><span class="line">  select(-Acquired) <span class="string">&quot;直接删掉Acquired这一个变量&quot;</span></span><br><span class="line">print(colSums(df_exc == <span class="string">&quot;&quot;</span>)) <span class="comment"># 检查一下还有没有多的缺失值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-a0ad0f8d56cf29878a1595f21170957a_b.png" alt="img"></p>
<p>还有四个漏网之鱼，也处理掉</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Exclude some missing values in Relinquished variable</span></span><br><span class="line">df &lt;- df_exc %&gt;% filter(Relinquished != <span class="string">&quot;&quot;</span>)</span><br><span class="line">print(colSums(df == <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-a75e544978e1af2722cd77c931ec256a_b.png" alt="img"></p>
<p>到目前为止，缺失值已经处理完毕了</p>
<h3 id="以时间为单位来进行处理（转换成Date格式）"><a href="#以时间为单位来进行处理（转换成Date格式）" class="headerlink" title="以时间为单位来进行处理（转换成Date格式）"></a>以时间为单位来进行处理（转换成Date格式）</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df$year &lt;- format(as.Date(df$Date), <span class="string">&quot;%Y&quot;</span>)</span><br><span class="line">df$yr_mo &lt;- format(as.Date(df$Date), <span class="string">&quot;%Y-%m&quot;</span>)</span><br><span class="line">df$month &lt;- month(as.Date(df$Date), <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p>看一下这十年究竟谁伤病情况（包含轮休）的最多</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  count(Team) %&gt;%</span><br><span class="line">  ggplot(aes(x = reorder(Team, n), y = n)) +</span><br><span class="line">  geom_col(fill = <span class="string">&quot;midnightblue&quot;</span>, color = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">  coord_flip() +</span><br><span class="line">  theme_bw() +</span><br><span class="line">  labs(x = <span class="string">&quot;Team&quot;</span>, y = <span class="string">&quot;Number of injury events&quot;</span>, title = <span class="string">&quot;Which team has the most injury events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-4084964e3ded6dc032bebd0501494d6c_b.png" alt="img"></p>
<p>前三名分别是雄鹿，马刺和火箭。</p>
<p>由于联盟在2018 年发布了新的政策，对非伤轮休的球队会处以罚款，之前的记录可能有一些水分。所以我又做了2018年之后的数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  filter(yr_mo &gt; <span class="string">&quot;2018-09&quot;</span>) %&gt;%</span><br><span class="line">  count(Team) %&gt;%</span><br><span class="line">  ggplot(aes(x = reorder(Team, n), y = n)) +</span><br><span class="line">  geom_col(fill = <span class="string">&quot;midnightblue&quot;</span>, color = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">  coord_flip() +</span><br><span class="line">  theme_bw() +</span><br><span class="line">  labs(x = <span class="string">&quot;Team&quot;</span>, y = <span class="string">&quot;Number of injury events&quot;</span>, title = <span class="string">&quot;Which team has the most injury events since 2018-2019 season&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-afd7ae98b4b21a7187fb1099b1c019f2_b.png" alt="img"></p>
<p>马刺在本次赛季失去效力了十七年的后卫托尼·帕克，他在休赛期间选择与夏洛特黄蜂签约，而杰弗瑞·罗德曼吉、凯尔·安德森以及布兰登·保罗等重要角色球员也先后离队。这也是自2002–03赛季以来第一次没有马努·吉诺比利的赛季，他在2018年8月27日选择对外宣布退役，因此这也标志着马刺的“三巨头时代”至此已经彻底结束。2018年7月18日，马刺管理层将科怀·伦纳德和丹尼·格林交易到多伦多猛龙，以换取德玛尔·德罗赞、雅各·伯尔特和一枚受保护的2019年首轮选秀签。</p>
<p>新鲜血液的加入以及整体阵容的年轻化，马刺在2018-2019赛季几乎全员健康，受伤病影响最小。</p>
<p>此时受伤病影响最严重的前三只球队分别是凯尔特人，雄鹿和勇士。</p>
<h3 id="十年内哪位球员受伤病影响（含轮休）最多"><a href="#十年内哪位球员受伤病影响（含轮休）最多" class="headerlink" title="十年内哪位球员受伤病影响（含轮休）最多"></a>十年内哪位球员受伤病影响（含轮休）最多</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  <span class="comment">#filter(yr_mo &gt; &quot;2018-09&quot; &amp; yr_mo&lt; &quot;2019-09&quot;) %&gt;%</span></span><br><span class="line">  count(Relinquished) %&gt;%</span><br><span class="line">  arrange(desc(n)) %&gt;%</span><br><span class="line">  top_n(n = <span class="number">20</span>) %&gt;%</span><br><span class="line">  ggplot(aes(x = reorder(Relinquished, n), y = n)) +</span><br><span class="line">  geom_col(fill = <span class="string">&quot;midnightblue&quot;</span>, color = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">  coord_flip() +</span><br><span class="line">  theme_bw() +</span><br><span class="line">  labs(x = <span class="string">&quot;Player&quot;</span>, y = <span class="string">&quot;Number of injury events on players&quot;</span>, title = <span class="string">&quot;Which player has the most injury events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-04962af2c15848bb7b8e04bf9fbbd4f7_b.png" alt="img"></p>
<p>乐福，戈登和罗斯是近十年来受伤病影响最大的 （轮休也是预防伤病）</p>
<h3 id="每年nba球员受伤病伤病影响的数量"><a href="#每年nba球员受伤病伤病影响的数量" class="headerlink" title="每年nba球员受伤病伤病影响的数量"></a>每年nba球员受伤病伤病影响的数量</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">count(year, Relinquished) %&gt;%</span><br><span class="line">ggplot(aes(x = n)) +</span><br><span class="line">geom_density(color = <span class="string">&quot;midnightblue&quot;</span>, fill = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">facet_wrap(~year, scales = <span class="string">&quot;free_y&quot;</span>) +</span><br><span class="line">theme_bw() +</span><br><span class="line">labs(y = <span class="string">&quot;&quot;</span>, x = <span class="string">&quot;Number of events&quot;</span>, title = <span class="string">&quot;Number of events per player&quot;</span>, subtitle = <span class="string">&quot;Note: 2010 &amp; 2020 not a full year&quot;</span>) +</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>), plot.subtitle = element_text(hjust = <span class="number">0.5</span>), panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-58c0de51e96334cf89cbf0ca34b75635_b.png" alt="img"></p>
<p>每年的分布趋势都大致相同</p>
<h3 id="NBA-球员每年受伤数量汇总（折线图）"><a href="#NBA-球员每年受伤数量汇总（折线图）" class="headerlink" title="NBA 球员每年受伤数量汇总（折线图）"></a>NBA 球员每年受伤数量汇总（折线图）</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  count(year) %&gt;%</span><br><span class="line">  ggplot(aes(x = year, y = n, group = <span class="number">1</span>)) +</span><br><span class="line">  ylim(<span class="number">0</span>, <span class="number">2700</span>) +</span><br><span class="line">  geom_line(size = <span class="number">1</span>, color = <span class="string">&quot;darkred&quot;</span>) +</span><br><span class="line">  geom_point(size = <span class="number">2</span>, color = <span class="string">&quot;midnightblue&quot;</span>) +</span><br><span class="line">  geom_text(color = <span class="string">&quot;midnightblue&quot;</span>, aes(label = n, y = n + <span class="number">100</span>)) +</span><br><span class="line">  theme_classic() +</span><br><span class="line">  labs(title = <span class="string">&quot;Tracking injury events over time&quot;</span>, subtitle = <span class="string">&quot;Note: 2010 &amp; 2018 not a full year&quot;</span>, x = <span class="string">&quot;Calendar Year&quot;</span>, y = <span class="string">&quot;Number events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>), plot.subtitle = element_text(hjust = <span class="number">0.5</span>),)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-05929610308694c35e634220a8597dd5_b.png" alt="img"></p>
<h3 id="以月为单位进行分析"><a href="#以月为单位进行分析" class="headerlink" title="以月为单位进行分析"></a>以月为单位进行分析</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  count(month) %&gt;%</span><br><span class="line">  ggplot(aes(x = month, y = n, group = <span class="number">1</span>)) +</span><br><span class="line">  ylim(<span class="number">0</span>, <span class="number">4000</span>) +</span><br><span class="line">  geom_line(size = <span class="number">1</span>, color = <span class="string">&quot;darkred&quot;</span>) +</span><br><span class="line">  geom_point(size = <span class="number">2</span>, color = <span class="string">&quot;midnightblue&quot;</span>) +</span><br><span class="line">  geom_text(color = <span class="string">&quot;midnightblue&quot;</span>, aes(label = n, y = n + <span class="number">100</span>)) +</span><br><span class="line">  theme_classic() +</span><br><span class="line">  labs(title = <span class="string">&quot;Tracking injury events over time&quot;</span>, subtitle = <span class="string">&quot;Note: 2010 &amp; 2020 not a full year&quot;</span>, x = <span class="string">&quot;Calendar Year&quot;</span>, y = <span class="string">&quot;Number events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>), plot.subtitle = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-530dfc5a43268735c3c96e6ed366f5b2_b.png" alt="img"></p>
<p>注意：季后赛通常是四月中旬，所以一些轮休的球员，一些小伤病的球员通常会选择在季后赛前复出，所以伤病情况会有一个显著的下降，然后是休赛期，到了九月联赛开打，不可避免的伤病会逐渐增多</p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>EDA</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令</title>
    <url>/2021/02/03/2021-02-03-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Docker-的常用命令"><a href="#Docker-的常用命令" class="headerlink" title="Docker 的常用命令"></a>Docker 的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version # 显示docker的版本信息</span><br><span class="line">docker info    # 显示docker的系统信息，包括镜像和容器</span><br><span class="line">docker 命令 --help #帮助命令</span><br></pre></td></tr></table></figure>
<p>帮助文档的地址：<a class="link"   href="https://docs.docker.com/engine/reference/commandline/docker/" >https://docs.docker.com/engine/reference/commandline/docker/<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong> 查看所有本地主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker images </span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql         latest    c8562eaf9d81   2 weeks ago     546MB</span><br><span class="line">centos        latest    300e315adb2f   2 months ago    209MB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像的id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             (列出所有镜像)Show all images (default hides intermediate images)</span><br><span class="line">  -q, --quiet           （只显示镜像的id）Only show image IDs</span><br></pre></td></tr></table></figure>
<p>**docker serach **搜索镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10471     [OK]       </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3894      [OK]       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">--filter=STARS=3000 # 搜索出来的镜像是STAR&gt;3000的</span><br><span class="line"></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker search mysql --filter=STARS=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   10471     [OK]       </span><br><span class="line">mariadb   MariaDB is a community-developed fork of MyS…   3894      [OK]   </span><br></pre></td></tr></table></figure>
<p><strong>docker pull 下载</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[：tag]</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker pull mysql</span><br><span class="line">Using default tag: latest #如果不写tag，默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">a076a628af6f: Pull complete  #分层下载，docker image 的核心，联合文件系统</span><br><span class="line">f6c208f3f991: Pull complete </span><br><span class="line">88a9455a9165: Pull complete </span><br><span class="line">406c9b8427c6: Pull complete </span><br><span class="line">7c88599c0b25: Pull complete </span><br><span class="line">25b5c6debdaf: Pull complete </span><br><span class="line">43a5816f1617: Pull complete </span><br><span class="line">1a8c919e89bf: Pull complete </span><br><span class="line">9f3cf4bd1a07: Pull complete </span><br><span class="line">80539cea118d: Pull complete </span><br><span class="line">201b3cad54ce: Pull complete </span><br><span class="line">944ba37e1c06: Pull complete </span><br><span class="line">Digest: sha256:feada149cb8ff54eade1336da7c1d080c4a1c7ed82b5e320efb5beebed85ae8c#签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两者等价</span></span><br><span class="line">docker pull mysql </span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line"></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker images </span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql         5.7       a70d36bc331a   2 weeks ago     449MB</span><br><span class="line">mysql         latest    c8562eaf9d81   2 weeks ago     546MB</span><br></pre></td></tr></table></figure>


<p><strong>删除镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi -f 镜像id # 删除指定的容器 镜像id</span><br><span class="line">docker rmi -f 镜像id，镜像id，镜像id # 删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 删除全部的镜像</span><br></pre></td></tr></table></figure>


<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：我们有了镜像才可以创建容，Linux，下载一个centos来进行学习</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<p><strong>新建容器并且启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot; #容器名字 tomcat01, tomcat02, 用来区分容器</span><br><span class="line">-d 						#后台方式进行运行</span><br><span class="line">-it 					#使用交互方式运行，进入容器查看内容</span><br><span class="line">-p 						#指定容器的端口 -p 8080：8080</span><br><span class="line">	-p ip: 主机端口：容器端口</span><br><span class="line">	-p 主机端：容器端口（常用）</span><br><span class="line">	-p 容器端口</span><br><span class="line">-P						#随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动，并且进入命令</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@87d185b2076b /]# ls #查看内部的centos</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@203dae537771 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz /]# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz /]# </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>列出所有正在运行中的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令</span></span><br><span class="line">-a #列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器</span><br><span class="line">-q # 只显示容器的编号</span><br></pre></td></tr></table></figure>
<p><strong>退出容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit #直接停止容器并且退出</span><br><span class="line">Ctrl + P + Q # 容器不停止退出</span><br></pre></td></tr></table></figure>
<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id # 删除指定的容器, 不能删除正在运行的，要删除的rm-f</span><br><span class="line">docker rm -f $(docker ps -aq) # 删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有的容器</span><br></pre></td></tr></table></figure>
<p><strong>启动和停止容器的操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker restart 容器id # 重启容器 </span><br><span class="line">docker kill 容器id # 强制停止</span><br></pre></td></tr></table></figure>


<h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><p><strong>后台启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 docker run -d 镜像名</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker run -d centos </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">问题docker ps 发现centos停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑，docker 容器用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx，容器启动后，发现自己没有提供服务，就会立即停止，没有程序了</span></span><br></pre></td></tr></table></figure>


<p><strong>查看日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 容器，没有日志</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">自己编写一段脚本</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker run -d centos /bin/sh -c &quot;while true;do echo print;sleep 1;done&quot;</span><br><span class="line"></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">7c922733df50   centos    &quot;/bin/sh -c &#x27;while t…&quot;   42 seconds ago   Up 41 seconds             goofy_knuth</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示日志</span></span><br><span class="line">-tf  f是follow指持续输出日志内容；t代表一个时间戳</span><br><span class="line"></span><br><span class="line">--tail number # 要显示日志的条数</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker logs -tf --tail 10 0fd350596b56</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>查看容器中的进程信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令docker top 容器id</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker top 0fd350596b56 </span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                13201               13169               0                   08:42               ?                   00:00:00            /bin/sh -c while true;do echo print;sleep 1;done</span><br><span class="line">root                14630               13201               0                   09:04               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>查看镜像的元数据</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker inspect 0fd350596b56 </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-02-08T00:42:27.388342152Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo print;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 13201,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-02-08T00:42:27.823500663Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/friendly_khayyam&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c-init/diff:/var/lib/docker/overlay2/da23e695d17a9e7ed2ad81c9f2486a4cbdec8e601031b2b660fddf001f3fe9a2/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;0fd350596b56&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo print;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;ccabded2409ffbc145c5130acb301ea392e0063c9c012f4d3562f6fcb1efb71c&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/ccabded2409f&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;fd9e4c4d71b0dba8b4dda169059ead023d887a2498f857da737236c786ef2641&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;efde225ef685bc98209337a5cdd4d66bb8a8f85d8762be2fca7313ad00d353bc&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;fd9e4c4d71b0dba8b4dda169059ead023d887a2498f857da737236c786ef2641&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>进入当前正在运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exec -it 容器id bashshell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">0fd350596b56   centos    &quot;/bin/sh -c &#x27;while t…&quot;   27 minutes ago   Up 27 minutes             friendly_khayyam</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker exec -it 0fd350596b56 /bin/bash</span><br><span class="line">[root@0fd350596b56 /]# ls </span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@0fd350596b56 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 00:42 ?        00:00:00 /bin/sh -c while true;do echo print;sleep 1;done</span><br><span class="line">root      1660     0  0 01:09 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1681     1  0 01:09 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root      1682  1660  0 01:09 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker attach 0fd350596b56</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> <span class="comment"># 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker attach <span class="comment"># 进入容器正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></table></figure>
<p><strong>从容器内拷贝文件到主机上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器id：容器内路径 目的主机路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前主机目录下</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# ls </span><br><span class="line">admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入当前容器内部 （也可以用attach 命令）</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker run -it centos /bin/bash</span><br><span class="line">[root@6442d7af4f41 /]# cd /home  </span><br><span class="line">[root@6442d7af4f41 home]# ls </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内创建一个新的文件</span></span><br><span class="line">[root@6442d7af4f41 home]# touch test.java</span><br><span class="line">[root@6442d7af4f41 home]# exit </span><br><span class="line">exit</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker ps -a </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">6442d7af4f41   centos    &quot;/bin/bash&quot;   41 seconds ago   Exited (0) 17 seconds ago              ecstatic_aryabhata</span><br><span class="line">97b8ac803f12   centos    &quot;/bin/bash&quot;   3 minutes ago    Exited (127) 2 minutes ago             elastic_thompson</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件拷贝到主机上</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker cp 6442d7af4f41:/home/test.java /home</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# ls </span><br><span class="line">admin  test.java</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用-v 卷的技术，可以实现，自动同步</span> </span><br></pre></td></tr></table></figure>


<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.4e00.com%2Fblog%2Fimg%2Flinux%2Fdocker%2Fdocker-commands.png&refer=http%3A%2F%2Fwww.4e00.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1615339851&t=03dc8021bab2635051350bab0bfc51eb" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach     Attach to a running container             #当前she1l下attach连接指定运行镜像</span><br><span class="line">build      Build an image from a Dockerfile          #通过Dockerfile 定制镜像</span><br><span class="line">commit     Create a new image from a container changes #提交当前容器为新的镜像</span><br><span class="line">cp         Copy files/folders from the containers filesystem to the host path #从容器中拷贝指定文件或者目 #录到宿主机中</span><br><span class="line">create     Create a new container #创建一个新的容器，同run， 但不启动容器</span><br><span class="line">diff       Inspect changes on a containers filesys tem #查看docker 容器变化</span><br><span class="line">events     Get real time events from the server #从docker 服务获取容器实时事件</span><br><span class="line">exec       Run a command in an existing container #在已存在的容器上运行命令</span><br><span class="line">export     Stream the contents of a container as a tar archive#导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line">history    Show the history of an image #展示一个镜像形成历史</span><br><span class="line">images     List images #列出系统当前镜像</span><br><span class="line">import     Create a new filesystem image from the contents of a tarball #从tar包 中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info 			 Display sys tem-wide informati on #显示系统相关信息</span><br><span class="line">inspect		 Return 1ow-1eve1 information on a container #查看容器详细信息</span><br><span class="line">ki1l 			 Ki1l a running container # ki11 指定docker 容器</span><br><span class="line">load 			 Load an image from a tar archive #从一个tar包中加载一个镜像[对应save]</span><br><span class="line">login			 Register or Login to the docker registry server #注册或者登陆一个docker 源服务器</span><br><span class="line">1ogout		 Log out from a Docker registry server #从当前Docker registry 退出</span><br><span class="line">1ogs			 Fetch the logs of a container #输出当前容器日志信息</span><br><span class="line">port			 Lookup the pub1ic-facing port which is NAT-ed to PRIVATE_ PORT #查看映射端口对应的容器内部源端口</span><br><span class="line">pause 		 Pause a11 processes within a container #暂停容器</span><br><span class="line">ps 				 List containers #列出容器列表</span><br><span class="line">pu11 			 Pu11 an image or a repository from the docker registry server #从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push 			 Push an image or a repository to the docker registry server #推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart 	 Restart a running container #重启运行的容器</span><br><span class="line">rm 				 Remove one or more containers #移除一个或者多个容器</span><br><span class="line">rmi 			 Remove one or more i mages #移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]</span><br><span class="line">run 			 Run a command in a new container #创建一个新的容器并运行一个命令</span><br><span class="line">save 			 Save an image to a tar archive #保存一个镜像为一个tar 包[对应load]</span><br><span class="line">search 	   search for an image on the Dockerhub #在dockerhub中搜索镜像</span><br><span class="line">start      Start a stopped containers #启动容器</span><br><span class="line">stop       Stop a running containers #停止容器</span><br><span class="line">tag 			 tag an image into a repository #给源中镜像打标签</span><br><span class="line">top		 		 Lookup the runring processes of a container #查看容器中运行的进程信息</span><br><span class="line">unpause 	 Unpause a paused container #取消暂停容器</span><br><span class="line">version 	 Show the docker version information #查看docker版本号</span><br><span class="line">wait 			 Block until a container stops，then print its exit code #截取容器停止时的退出状态值</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 回顾</title>
    <url>/2021/02/10/2021-02-10-Java-%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<h1 id="JAVA-基础知识复习"><a href="#JAVA-基础知识复习" class="headerlink" title="JAVA 基础知识复习"></a>JAVA 基础知识复习</h1><p>视频地址：</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV12J41137hu?t=2607&amp;p=80" >https://www.bilibili.com/video/BV12J41137hu?t=2607&amp;p=80<i class="fas fa-external-link-alt"></i></a></p>
<p>相关笔记：</p>
<h2 id="数据类型以及面试拓展"><a href="#数据类型以及面试拓展" class="headerlink" title="数据类型以及面试拓展"></a>数据类型以及面试拓展</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">010</span>; <span class="comment">// 八进制 0</span></span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">0x10</span>; <span class="comment">//十六进制0x</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      ================================</span></span><br><span class="line"><span class="comment">//        浮点数</span></span><br><span class="line"><span class="comment">//        银行类用BigDecimal</span></span><br><span class="line"><span class="comment">//        float 有限 离散 舍入误差</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        最好完全避免使用浮点数进行比较</span></span><br><span class="line"><span class="comment">//        最好完全避免使用浮点数进行比较</span></span><br><span class="line"><span class="comment">//        最好完全避免使用浮点数进行比较</span></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.1f</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1.0</span> / <span class="number">10</span>;</span><br><span class="line">        System.out.println(f==d);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        =================================</span></span><br><span class="line"><span class="comment">//        强制转换</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)c1); <span class="comment">// 强制转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        所有的字符串本质还是数字</span></span><br><span class="line"><span class="comment">//        编码 Unicode 2 字节 （97 = a ）</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;\u0061&#x27;</span>;</span><br><span class="line">        System.out.println(c3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        转义字符</span></span><br><span class="line"><span class="comment">//        \t 制表符</span></span><br><span class="line"><span class="comment">//        \n 换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        =============================</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        String sa = <span class="keyword">new</span> String(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        String sb = <span class="keyword">new</span> String(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        System.out.println(sa==sb);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String sc = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        String sd = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        System.out.println(sc==sd);</span><br><span class="line">        <span class="comment">// 对象 内存的关系</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i; <span class="comment">//内存溢出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小数优先级永远高于整数</span></span><br><span class="line">        <span class="comment">// 强制转换，（类型）变量 高-低</span></span><br><span class="line">        <span class="comment">// 自动转换 低-高</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        注意点：</span></span><br><span class="line"><span class="comment">        1。 不能对布尔值进行转换</span></span><br><span class="line"><span class="comment">        2。 不能把对象类型转换为不相关的类型</span></span><br><span class="line"><span class="comment">        3。 在把高容量转换到低容量的时候，强制转换</span></span><br><span class="line"><span class="comment">        4。 转换的时候可能存在内存溢出，或者精度的问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)<span class="number">23.7</span>);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)-<span class="number">45.89f</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> d = c + <span class="number">1</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="溢出的问题"><a href="#溢出的问题" class="headerlink" title="溢出的问题"></a>溢出的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 操作比较大的数的时候，注意溢出的问题</span></span><br><span class="line">        <span class="comment">// JDK7 的新特性，数字之间可以使用下划线来进行分割</span></span><br><span class="line">        <span class="keyword">int</span> money = <span class="number">10_0000_0000</span>;</span><br><span class="line">        <span class="keyword">int</span> years = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> total = money * years;</span><br><span class="line">        <span class="keyword">long</span> total2 = money * years;</span><br><span class="line">        <span class="keyword">long</span> total3 = money * (<span class="keyword">long</span>) years;</span><br><span class="line"></span><br><span class="line">        System.out.println(total);</span><br><span class="line">        System.out.println(total2);</span><br><span class="line">        System.out.println(total3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo08</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性：变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例变量：从属于对象；如果不自省初始化，这个类型的默认值0，0.0</span></span><br><span class="line">    <span class="comment">// 布尔值：默认是false</span></span><br><span class="line">    <span class="comment">// 除了基本类型，其余的默认走都是null</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//局部变量，必须声明和初始化值得量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 变量类型 变量名字 = new demo08</span></span><br><span class="line">        demo08 Demo08 = <span class="keyword">new</span> demo08();</span><br><span class="line">        System.out.println(Demo08.age);</span><br><span class="line">        System.out.println(Demo08.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类变量 static</span></span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="位运算-效率考虑"><a href="#位运算-效率考虑" class="headerlink" title="位运算(效率考虑)"></a>位运算(效率考虑)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A = 0011 1100</span></span><br><span class="line"><span class="comment">        B = 0000 1101</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        A&amp;B = 0000 1100</span></span><br><span class="line"><span class="comment">        A|B = 0011 1101</span></span><br><span class="line"><span class="comment">        A^B = 0011 0001</span></span><br><span class="line"><span class="comment">        ~B = 1111 0010</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2*8  = 16 怎么最快2*2*2*2 (计算机是不会乘除法的)</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        位运算，效率极高</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;&lt;  相当于 *2</span></span><br><span class="line"><span class="comment">        &gt;&gt;  相当于 /2</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        0000 0000 0</span></span><br><span class="line"><span class="comment">        0000 0001 1</span></span><br><span class="line"><span class="comment">        0000 0010 2</span></span><br><span class="line"><span class="comment">        0000 0011 3</span></span><br><span class="line"><span class="comment">        0000 0100 4</span></span><br><span class="line"><span class="comment">        0000 1000 8</span></span><br><span class="line"><span class="comment">        0001 0000 16</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        a += b; <span class="comment">//a = a+b</span></span><br><span class="line">        a -= b;<span class="comment">// a = a-b</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串连接符 + ， String</span></span><br><span class="line">        <span class="comment">// 注意第一个是什么就会运行什么样子的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + a + b);</span><br><span class="line">        System.out.println(a + b + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="三元运算符（if的更简单的写法形式）"><a href="#三元运算符（if的更简单的写法形式）" class="headerlink" title="三元运算符（if的更简单的写法形式）"></a>三元运算符（if的更简单的写法形式）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//x?y:z</span></span><br><span class="line">        <span class="comment">//如果x==true，则结果为y，否则结果为z</span></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line">        String type = score &lt; <span class="number">60</span> ? <span class="string">&quot;不及格&quot;</span>:<span class="string">&quot;及格&quot;</span>; <span class="comment">//必须掌握，让代码更加精简，且容易掌握</span></span><br><span class="line">        System.out.println(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.base;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yuxuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doc</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@authore</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过命令行生成JavaDoc文档！ </span></span><br><span class="line"><span class="comment">// 命令行进入到包所在的地址，然后输入：javadoc -encoding UTF-8 -charset UTF-8 Doc.java </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Scanner-对象"><a href="#Scanner-对象" class="headerlink" title="Scanner 对象"></a>Scanner 对象</h3><p>Next():</p>
<pre><code>1. 一定要读取到有效字符后菜可以结束输入
2. 对输入有效字符之前遇到的空白，next（）会将其自动去掉
3. 只有输入有效字符后才讲其后面输入的空白作为分隔符或者结束符号
4. next（）不能得到带有空格的字符串</code></pre>
<p>nextLine（）：</p>
<ol>
<li>以enter作为结束符号，也就是说nexline（）方法返回的是回车之前的字母</li>
<li>可以获得空白</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个扫描器对象，用于接受键盘数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式来接受： &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出内容是： &quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯用完就关闭</span></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用nextLine方式来接受： &quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="Switch-case-语句"><a href="#Switch-case-语句" class="headerlink" title="Switch case 语句"></a>Switch case 语句</h3><p>注意case的穿透特性，建议加上break</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//case 穿透 //switch 匹配一个具体的值</span></span><br><span class="line">        <span class="keyword">char</span> grade = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;再接再厉&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知等级&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="方法（methods）"><a href="#方法（methods）" class="headerlink" title="方法（methods）"></a>方法（methods）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(max(1, 2));</span></span><br><span class="line">        <span class="keyword">int</span> max = max(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(max );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1==num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//终止方法</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">            result = num1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>Java 都是值传递</strong></p>
<h3 id="方法的重载（overload）"><a href="#方法的重载（overload）" class="headerlink" title="方法的重载（overload）"></a>方法的重载（overload）</h3><ul>
<li>重载就是在一个类中，有相同的函数名称，但是形式参数不同的函数</li>
<li>方法的重载规则：<ul>
<li>方法名称必须相同</li>
<li>参数列表必须不同（个数不同，或者类型不同，参数排列顺序不同等）</li>
<li>方法的返回类型可以相同也可以不相同</li>
<li>仅仅返回类型不同不足以成为方法的重载</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overloading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest3&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest4&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Overloading o = <span class="keyword">new</span> Overloading();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">&quot;test3&quot;</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">&quot;test4&quot;</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">test1</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">test2</span></span><br><span class="line"><span class="comment">test3</span></span><br><span class="line"><span class="comment">returntest3</span></span><br><span class="line"><span class="comment">test4</span></span><br><span class="line"><span class="comment">returntest4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/overloading-vs-overriding.png" alt="img"></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/20171102-1.png" alt="img"></p>
<h3 id="命令行传参数"><a href="#命令行传参数" class="headerlink" title="命令行传参数"></a>命令行传参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//args.length 数组长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]: &quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先用javac 打包成一个class文件</p>
<p>然后注意要退回到src文件才可以调用，因为里面有一个包的成分</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在方法声明中，在指定参数类型后加一个省略好（…）</p>
<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数，任何普通的参数都必须在它之前声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printMax(<span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">56.5</span>);</span><br><span class="line">        printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;no argument passed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &gt; result) &#123;</span><br><span class="line">                result = numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The max value is &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><ul>
<li>递归头：什么时候<strong>不调用自身方法</strong>。如果没有头，就会陷入死循环</li>
<li>递归体：什么时候需要调用自身的方法</li>
</ul>
<p>基数比较小的数字建议用递归，如果数字太多，会出现压栈，然后内存溢出</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>数组是相同类型数据的有序集合</li>
<li>数组描述的是相同类型的若干数据，按照一定的先后次序排列组合而成</li>
<li>其中一个数据称作一个数组元素，每个数组元素可以通过一个下标来进行访问（从0开始）</li>
</ul>
<p>数组的声明以及创建</p>
<ul>
<li>首先必须声明数组变量，才能在程序中使用数组</li>
<li>java使用new来创建数组</li>
<li>数组的元素是通过索引来进行访问的，数组索引从</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 变量的类型 变量的名字 = 变量的值；</span></span><br><span class="line">    <span class="comment">// 数组的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums; <span class="comment">//1. 定义</span></span><br><span class="line"><span class="comment">//        int nums2[]; //2.效果相同，但不是首选的方法</span></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">// 这里面可以存在10个变量</span></span><br><span class="line">        <span class="comment">//3. 给数组元素来进行赋值</span></span><br><span class="line">        nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">        nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">        nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">        nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        System.out.println(nums[1]);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum = sum + nums[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210213225954841.11k4g6aaa2cg.png" alt="image-20210213225954841"></p>
<p>Java 内存</p>
<ul>
<li>堆：<ul>
<li>存放new的对象和数组</li>
<li>可以被所有的线程共享，不会存在别的对象引用</li>
</ul>
</li>
<li>栈：<ul>
<li>存放基本变量类型（包含这个基本类型的具体数值）</li>
<li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
</ul>
</li>
<li>方法区：<ul>
<li>可以被所有的线程共享</li>
<li>包含了所有的class和static的变量</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210213231032055.57d6zgn6z2g0.png" alt="image-20210213231032055"></p>
<p><strong>数组的默认初始化</strong></p>
<p>​    -     数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也会被按照实例变量同样的方式被隐式初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态初始化： 创建+赋值</span></span><br><span class="line">        <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">//        System.out.println(a[0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态初始化 包含默认初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul>
<li>其长度是确定的。数组一旦被创建，它的大小就是不可以被改变的</li>
<li>其元素必须是相同类型的，不允许出现混合类型</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，java 的对象都是在堆中的，因此数组无论保存<strong>原始类型</strong>还是其他<strong>对象类型</strong>，==数组对象本身是在堆中的==</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 这种方式适合遍历数组 JDK1.5，没有下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int array : arrays) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(array);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        printArray(arrays);</span></span><br><span class="line">        <span class="keyword">int</span>[] reverse = reverse(arrays);</span><br><span class="line">        printArray(reverse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数组元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> []arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.print(arrays[i] + <span class="string">&quot; &quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span> arrays[]) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其中每一个元素都是一个一维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>]</span><br><span class="line"> <span class="comment">// 一个二行五列的数组</span></span><br></pre></td></tr></table></figure>


<h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9090</span>, <span class="number">32132</span>, <span class="number">543</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">23</span>&#125;;</span><br><span class="line"><span class="comment">//        System.out.println(a);</span></span><br><span class="line">        <span class="comment">// 不建议重复造轮子</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印数组元素Arrays.toString(a)</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组进行排序</span></span><br><span class="line"></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fill 填充</span></span><br><span class="line">        Arrays.fill(a,<span class="number">0</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">34</span>, <span class="number">56</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="comment">// 1. 比较数组中两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span></span><br><span class="line">    <span class="comment">// 2. 每一次比较，都会产生出一个最大或者最小的数字</span></span><br><span class="line">    <span class="comment">// 3. 下一次可以少一次排序</span></span><br><span class="line">    <span class="comment">// 4. 以此循环，直到结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array ) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//通过flag标识符来减少没有意义比较</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">                    tmp = array[j];</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="keyword">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们看到嵌套循环，应该立马就可以得出这个算法的时间复杂度为O(n2)</p>
<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><ul>
<li>当一个数组大部分的元素为0，或者为同一值的数组时候，可以用稀疏数组来保存该数组</li>
<li>稀疏数组的处理方式一般是：<ul>
<li>记录数组一共有几航几列，有多少个不同的值</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个二维数组11*11， 0 没有棋子， 1：黑棋，2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//        输出原始数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为稀疏数组</span></span><br><span class="line">        <span class="comment">// 获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值的个数是：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历二维数组，将非零的值，存放在稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输出稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                    array2[i][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                    array2[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> [][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 给其中的元素还原它的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><ul>
<li>面向过程思想 （线性思维）<ul>
<li>步骤清晰简单，第一步做什么第二部做什么</li>
<li>面对过程适合处理一些较为简单的问题</li>
</ul>
</li>
<li>面向对象思想<ul>
<li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些类进行单独思考，最后才对某个分类下的细节进行面向过程的思索</li>
<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题</li>
<li>属性+方法就是一个类</li>
</ul>
</li>
<li>对于描述复杂的事物，为了从宏观上进行把握，从整体上进行合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到围观操作，荏苒需要使用面向过程的思路来进行处理</li>
</ul>
<p>OOP本质：==以类的方式组织代码，以对象的组织（封装）数据==</p>
<p>三大特性：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<p>从认识角度考虑是先有对象，后有类</p>
<p>对象，是具体的事物</p>
<p>类，是抽象的，是对对象的抽象</p>
<p><strong>类是一种抽象的数据类型，它是对某一类食物的整体描述/定义，但是并不能代表某一个具体的事物</strong></p>
<ul>
<li>动物，植物，手机，电脑</li>
<li>Person 类，Pet类，Car类，这些类是用来描述/定义某一类具体的事物应该具备的特点和行为</li>
</ul>
<p><strong>对象是抽象概念的具体实例</strong></p>
<ul>
<li>张三是人的一个具体实例，张三家里的旺财就是狗的一个具体实例</li>
<li>能狗体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态方法 static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student.say();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态方法</span></span><br><span class="line">    <span class="comment">// 实例化这个类 new</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static 是和类一起加载的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        b(); //会报错 （但如果两个method都是static不会，都不是，也不会；只有一个是另一个不是才出错）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类实例化之后才存在的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实际参数和形式参数的值需要保持一致</span></span><br><span class="line">        <span class="keyword">int</span> add = Demo03.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        Demo04.change(a);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回值是空</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用传递：对象， 本质还是值传递</span></span><br><span class="line"><span class="comment">// 引用传递是传递的类的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象，内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line">        Demo05.change(person);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// person 是一个对象：指向的是---&gt; Person person = new Person() 这是一个具体的人，属性可以改变</span></span><br><span class="line">        person.name = <span class="string">&quot;yuxuan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了一个Person 类，有一个属性：name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h3><ul>
<li><strong>使用new关键字创建对象</strong></li>
<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及类中构造器的调用</li>
<li>类中构造器也被称为构造方法，实在进行穿件对象的时候必须要调用的。并且构造器有一下几个特点<ul>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写void</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"><span class="comment">// 一个项目最好只有一个main方法，测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类抽象的，需要实例化</span></span><br><span class="line">        <span class="comment">// 类实例化后会返回一个自己的对象！</span></span><br><span class="line">        <span class="comment">// student 对象就是一个Student类的具体实例！</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaoming = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line"></span><br><span class="line">        xiaoming.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        xiaoming.age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p><strong>构造器</strong><br>    1. 和类名相同<br>    2. 没有返回值<br><strong>作用</strong><br>    1. new 本质在调用构造方法<br>    2. 初始化对象的值<br><strong>注意点：</strong><br>    1. 定义有参构造后，如果想使用无参构造，显示的定义一个无参的构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个类即使什么都不写，也会存在一个方法</span></span><br><span class="line">    <span class="comment">// 显示的定义一个构造器</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化初始值</span></span><br><span class="line">    <span class="comment">// 1. 使用new关键字，必须是在调用构造器</span></span><br><span class="line">    <span class="comment">// 2. 用来初始化值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.name = &quot;yuxuan&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造:一旦定义了有参构造，无参就必须显示定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//control + N 自动生成构造器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//        Person person = new Person();</span></span><br><span class="line"><span class="comment">        Person person = new Person(&quot;yuxuan&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(person.name);</span></span><br><span class="line"><span class="comment"> 构造器：</span></span><br><span class="line"><span class="comment"> 1。 和类名相同</span></span><br><span class="line"><span class="comment"> 2。 没有返回值</span></span><br><span class="line"><span class="comment"> 作用</span></span><br><span class="line"><span class="comment"> 1。 new 本质在调用构造方法</span></span><br><span class="line"><span class="comment"> 2。 初始化对象的值</span></span><br><span class="line"><span class="comment"> 注意点：</span></span><br><span class="line"><span class="comment"> 1。 定义有参构造后，如果想使用无参构造，显示的定义一个无参的构造</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> alt+ N</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> this. = 参数传进来的值</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<h3 id="创建对象内存与分析"><a href="#创建对象内存与分析" class="headerlink" title="创建对象内存与分析"></a>创建对象内存与分析</h3><p>堆：存储对象和数组元素，栈：存储系统调用变量（例如引用）</p>
<p>堆：存放new的数组和对象，栈：存放基本变量类型和引用变量</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210214170938226.us87tdkrnv4.png" alt="image-20210214170938226"></p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>类加载过程中将静态变量，静态方法，常量存入到方法区</p>
<p>静态方法只执行一次</p>
<p>Final 后面断子绝孙</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2 赋初始值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码块（匿名）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代码快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 </span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>作者：愚公要移山<br>链接：<a class="link"   href="https://zhuanlan.zhihu.com/p/70110497" >https://zhuanlan.zhihu.com/p/70110497<i class="fas fa-external-link-alt"></i></a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p><strong>Static 关键字</strong></p>
<p><strong>（1）特点：</strong></p>
<p>　　1、static是一个修饰符，用于修饰成员。（成员变量，成员函数）static修饰的成员变量 称之为静态变量或类变量。</p>
<p>　　2、static修饰的成员被所有的对象共享。</p>
<p>　　3、static优先于对象存在，因为static的成员随着类的加载就已经存在。</p>
<p>　　4、static修饰的成员多了一种调用方式，可以直接被类名所调用，（类名.静态成员）。</p>
<p>　　5、static修饰的数据是共享数据，对象中的存储的是特有的数据。</p>
<p><strong>（2）成员变量和静态变量的区别：</strong></p>
<p>　　1、生命周期的不同：</p>
<p>　　　　成员变量随着对象的创建而存在随着对象的回收而释放。</p>
<p>　　　　静态变量随着类的加载而存在随着类的消失而消失。</p>
<p>　　2、调用方式不同：</p>
<p>　　　　成员变量只能被对象调用。</p>
<p>　　　　静态变量可以被对象调用，也可以用类名调用。（推荐用类名调用）</p>
<p>　　3、别名不同：</p>
<p>　　　　成员变量也称为实例变量。</p>
<p>　　　　静态变量称为类变量。</p>
<p>　　4、数据存储位置不同：</p>
<p>　　　　成员变量数据存储在堆内存的对象中，所以也叫对象的特有数据。</p>
<p>　　　　静态变量数据存储在方法区（共享数据区）的静态区，所以也叫对象的共享数据。</p>
<p><strong>（3）静态使用时需要注意的事项：</strong></p>
<p>　　1、静态方法只能访问静态成员。（非静态既可以访问静态，又可以访问非静态）</p>
<p>　　2、静态方法中不可以使用this或者super关键字。</p>
<p>　　3、主函数是静态的</p>
<h3 id="类与对象的小结"><a href="#类与对象的小结" class="headerlink" title="类与对象的小结"></a>类与对象的小结</h3><ol>
<li>类与对象<ol>
<li>类是一个模版，对象是一个具体的实例</li>
</ol>
</li>
<li>方法<ol>
<li>定义，调用</li>
</ol>
</li>
<li>对象的引用<ol>
<li>引用类型：八大基本类型（8）</li>
<li>对象是通过引用来操作的：栈–》堆</li>
</ol>
</li>
<li>属性：字段field 成员变量<ol>
<li>默认初始化<ol>
<li>数字： 0， 0.0</li>
<li>char： u0000</li>
<li>boolean：false</li>
<li>引用： null</li>
<li>修饰符 属性类型 属性名 = 属性值</li>
</ol>
</li>
</ol>
</li>
<li>对象的创建和使用<ol>
<li><ul>
<li>必须使用new 关键字创建对象 构造器 Person Yuxuan = new Person</li>
<li>对象的属性：yuxuan.name</li>
<li>对象的方法：yuxuan.sleep()</li>
</ul>
</li>
</ol>
</li>
<li>类<ol>
<li>静态的属性 属性</li>
<li>动态的行为 方法</li>
</ol>
</li>
<li>封装，继承，多态</li>
</ol>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><code>高内聚，低耦合</code>:</p>
<p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</p>
<p>低耦合：尽量暴露少量的方法给外部使用</p>
<p><code>封装</code>（数据的隐藏）</p>
<ul>
<li>通常，应该禁止访问一个对象中数据的实际表示，而应该通过操作接口来进行访问，这称为信息的隐藏</li>
</ul>
<p>==属性私有，get/set==</p>
<p><strong>好处</strong>：</p>
<ol>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>提高系统的可维护性</li>
</ol>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>extends</p>
<ul>
<li>继承是类和类之间的关系</li>
<li>继承关系的两个类，一个是父类，一个是子类</li>
<li>在Java中，所有的类，都默认直接或者间接继承Object类</li>
</ul>
<p>control+h 可以看结构</p>
<p><strong>java类中只有单继承，没有多继承</strong></p>
<p>私有的可以被继承，但拒绝被访问（无法继承）</p>
<p>调用弗雷德构造器，必须要在子类的第一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;dacy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>super</strong> <strong>注意点</strong></p>
<ol>
<li>super调用父类的构造方法，必须在狗仔方法的第一个</li>
<li>super 必须只能出现在子类的方法或者构造方法中！</li>
<li>super 和this不能同时调用构造方式</li>
</ol>
<p><strong>VS this:</strong></p>
<ul>
<li><p>代表的对象不同：</p>
<p>this: 本身调用者的这个对象</p>
<p>super：代表父类对象的应用</p>
</li>
<li><p>前提</p>
<p>this：没有继承也可以使用</p>
<p>super：只能在继承条件下才可以使用</p>
</li>
<li><p>构造方法</p>
<p>this() 本类的构造</p>
<p>super() :父类的构造</p>
</li>
</ul>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>需要有继承关系，子类重写父类的方法！</p>
<ol>
<li>方法名称必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大：public&gt;Protected&gt;default&gt;private</li>
<li>抛出的异常:范围，可以被缩小，但不能扩大：ClassNotFoundException –&gt; Exception</li>
</ol>
<p>重写，子类的方法和父类的必须要一致：方法体不同</p>
<p>为什么需要重写：</p>
<ol>
<li>父类的功能，子类不一定需要，或者不一定满足！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        <span class="comment">// 静态方法： 方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 非静态：重写</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A(); <span class="comment">// 子类重写了父类的方法</span></span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><h3 id="抽象概念"><a href="#抽象概念" class="headerlink" title="抽象概念"></a>抽象概念</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210420092329.png" alt="05-抽象的概念"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day09.demo11;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。</span></span><br><span class="line"><span class="comment">抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用抽象类和抽象方法：</span></span><br><span class="line"><span class="comment">1. 不能直接创建new抽象类对象。</span></span><br><span class="line"><span class="comment">2. 必须用一个子类来继承抽象父类。</span></span><br><span class="line"><span class="comment">3. 子类必须覆盖重写抽象父类当中所有的抽象方法。</span></span><br><span class="line"><span class="comment">覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</span></span><br><span class="line"><span class="comment">4. 创建子类对象进行使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个抽象方法，代表吃东西，但是具体吃什么（大括号的内容）不确定。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是普通的成员方法</span></span><br><span class="line"><span class="comment">//    public void normalMethod() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day09.demo11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day09.demo11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Animal animal = new Animal(); // 错误写法！不能直接创建抽象类对象</span></span><br><span class="line"></span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p>
<ol>
<li>抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</li>
</ol>
<blockquote>
<p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p>
</blockquote>
<ol start="2">
<li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</li>
</ol>
<blockquote>
<p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p>
</blockquote>
<ol start="3">
<li>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
</ol>
<blockquote>
<p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p>
</blockquote>
<ol start="4">
<li>抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。</li>
</ol>
<blockquote>
<p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有</p>
</blockquote>
<p>意义。</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 不能new这个抽象类，只能靠子类去实现它：约束</span></span><br><span class="line"><span class="comment">//2. 抽象类中可以写普通的方法～</span></span><br><span class="line"><span class="comment">//3. 抽象方法必须在抽象类中～</span></span><br><span class="line"><span class="comment">// 抽象的抽象：约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在的意义，提高开发效率</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">// abstract 抽象类：类 extends： 单继承 ～ 接口可以多继承 插座</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 约束～有人帮我实现～</span></span><br><span class="line">    <span class="comment">// abstract，抽象方法，只有方法名字，没有方法的实现！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 不能new这个抽象类，只能靠子类去实现它：约束</span></span><br><span class="line"><span class="comment">//2. 抽象类中可以写普通的方法～</span></span><br><span class="line"><span class="comment">//3. 抽象方法必须在抽象类中～</span></span><br><span class="line"><span class="comment">// 抽象的抽象：约束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>本质：契约</p>
<p>接口：interface</p>
<p>作用：</p>
<ol>
<li>约束</li>
<li>定义一些方法，让不同的人实现</li>
<li>public abstract final</li>
<li>接口不能被实例化，接口中没有构造方法～</li>
<li>implements可以实现多个接口</li>
<li><code>必须要重写</code>接口中的方法</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210420095904.png" alt="01-生活中接口的举例"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口就是多个类的公共规范。</span></span><br><span class="line"><span class="comment">接口是一种引用数据类型，最重要的内容就是其中的：抽象方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何定义一个接口的格式：</span></span><br><span class="line"><span class="comment">public interface 接口名称 &#123;</span></span><br><span class="line"><span class="comment">    // 接口内容</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注：换成了关键字interface之后，编译生成的字节码文件仍然是：.java --&gt; .class。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果是Java 7，那么接口中可以包含的内容有：</span></span><br><span class="line"><span class="comment">1. 常量</span></span><br><span class="line"><span class="comment">2. 抽象方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果是Java 8，还可以额外包含有：</span></span><br><span class="line"><span class="comment">3. 默认方法</span></span><br><span class="line"><span class="comment">4. 静态方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果是Java 9，还可以额外包含有：</span></span><br><span class="line"><span class="comment">5. 私有方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">接口使用步骤：</span></span><br><span class="line"><span class="comment">1. 接口不能直接使用，必须有一个“实现类”来“实现”该接口。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public class 实现类名称 implements 接口名称 &#123;</span></span><br><span class="line"><span class="comment">    // ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2. 接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。</span></span><br><span class="line"><span class="comment">实现：去掉abstract关键字，加上方法体大括号。</span></span><br><span class="line"><span class="comment">3. 创建实现类的对象，进行使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 错误写法！不能直接new接口对象使用。</span></span><br><span class="line"><span class="comment">//        MyInterfaceAbstract inter = new MyInterfaceAbstract();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建实现类的对象使用</span></span><br><span class="line">        MyInterfaceAbstractImpl impl = <span class="keyword">new</span> MyInterfaceAbstractImpl();</span><br><span class="line">        impl.methodAbs1();</span><br><span class="line">        impl.methodAbs2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在任何版本的Java中，接口都能定义抽象方法。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public abstract 返回值类型 方法名称(参数列表);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">1. 接口当中的抽象方法，修饰符必须是两个固定的关键字：public abstract</span></span><br><span class="line"><span class="comment">2. 这两个关键字修饰符，可以选择性地省略。（今天刚学，所以不推荐。）</span></span><br><span class="line"><span class="comment">3. 方法的三要素，可以随意定义。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这也是抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这也是抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这也是抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodAbs4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口使用步骤：</p>
<ol>
<li>接口不能直接使用，必须有一个“实现类”来“实现”该接口。<br>格式：<br>public class 实现类名称 implements 接口名称 {<br> // …<br>}</li>
<li>接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。<br>实现：去掉abstract关键字，加上方法体大括号。</li>
<li>创建实现类的对象，进行使用。</li>
</ol>
<p>注意事项：<br>如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。</p>
<h3 id="默认方法Default"><a href="#默认方法Default" class="headerlink" title="默认方法Default"></a>默认方法Default</h3><p><code>default</code> 关键字常常用于解决接口升级的问题，即新增一个抽象方法，不用去对应的实现类修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从Java 8开始，接口里允许定义默认方法。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public default 返回值类型 方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注：接口当中的默认方法，可以解决接口升级的问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新添加了一个抽象方法</span></span><br><span class="line"><span class="comment">//    public abstract void methodAbs2();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新添加的方法，改成默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是新添加的默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDefaultA</span> <span class="keyword">implements</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了抽象方法，AAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDefaultB</span> <span class="keyword">implements</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了抽象方法，BBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类B覆盖重写了接口的默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Demo02-interface</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 接口的默认方法，可以通过接口实现类对象，直接调用。</span></span><br><span class="line"><span class="comment">2. 接口的默认方法，也可以被接口实现类进行覆盖重写。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建了实现类对象</span></span><br><span class="line">        MyInterfaceDefaultA a = <span class="keyword">new</span> MyInterfaceDefaultA();</span><br><span class="line">        a.methodAbs(); <span class="comment">// 调用抽象方法，实际运行的是右侧实现类。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用默认方法，如果实现类当中没有，会向上找接口</span></span><br><span class="line">        a.methodDefault(); <span class="comment">// 这是新添加的默认方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MyInterfaceDefaultB b = <span class="keyword">new</span> MyInterfaceDefaultB();</span><br><span class="line">        b.methodAbs();</span><br><span class="line">        b.methodDefault(); <span class="comment">// 实现类B覆盖重写了接口的默认方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="接口的静态关键词"><a href="#接口的静态关键词" class="headerlink" title="接口的静态关键词"></a>接口的静态关键词</h3><p>注意事项：不能通过接口实现类的对象来调用接口当中的静态方法。<br>正确用法：通过接口名称，直接调用其中的静态方法。<br>格式：<br>接口名称.静态方法名(参数);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从Java 8开始，接口当中允许定义静态方法。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public static 返回值类型 方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">提示：就是将abstract或者default换成static即可，带上方法体。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是接口的静态方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Final-关键字"><a href="#Final-关键字" class="headerlink" title="Final 关键字"></a>Final 关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口当中也可以定义“成员变量”，但是必须使用public static final三个关键字进行修饰。</span></span><br><span class="line"><span class="comment">从效果上看，这其实就是接口的【常量】。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public static final 数据类型 常量名称 = 数据值;</span></span><br><span class="line"><span class="comment">备注：</span></span><br><span class="line"><span class="comment">一旦使用final关键字进行修饰，说明不可改变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">1. 接口当中的常量，可以省略public static final，注意：不写也照样是这样。</span></span><br><span class="line"><span class="comment">2. 接口当中的常量，必须进行赋值；不能不赋值。</span></span><br><span class="line"><span class="comment">3. 接口中常量的名称，使用完全大写的字母，用下划线进行分隔。（推荐命名规则）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceConst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这其实就是一个常量，一旦赋值，不可以修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MY_CLASS = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><ol>
<li>类与类之间是单继承的。直接父类只有一个。</li>
<li>类与接口之间是多实现的。一个类可以实现多个接口。</li>
<li>接口与接口之间是多继承的。</li>
</ol>
<p>注意事项：</p>
<ol>
<li>多个父接口当中的抽象方法如果重复，没关系。</li>
<li>多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写，【而且带着default关键字】。</li>
</ol>
<h3 id="接口小结"><a href="#接口小结" class="headerlink" title="接口小结"></a>接口小结</h3><p>在Java 9+版本中，接口的内容可以有：</p>
<ol>
<li>成员变量其实是常量，格式：<br>[public] [static] [final] 数据类型 常量名称 = 数据值;<br>注意：<br> 常量必须进行赋值，而且一旦赋值不能改变。<br> 常量名称完全大写，用下划线进行分隔。</li>
<li>接口中最重要的就是抽象方法，格式：<br>[public] [abstract] 返回值类型 方法名称(参数列表);<br><code>注意</code>：实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类。</li>
<li>从Java 8开始，接口里允许定义默认方法，格式：<br>[public] default 返回值类型 方法名称(参数列表) { 方法体 }<br><code>注意</code>：默认方法也可以被覆盖重写</li>
<li>从Java 8开始，接口里允许定义静态方法，格式：<br>[public] static 返回值类型 方法名称(参数列表) { 方法体 }<br><code>注意</code>：应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法</li>
<li>从Java 9开始，接口里允许定义私有方法，格式：<br>普通私有方法：private 返回值类型 方法名称(参数列表) { 方法体 }<br>静态私有方法：private static 返回值类型 方法名称(参数列表) { 方法体 }<br><code>注意</code>：private的方法只有接口自己才能调用，不能被实现类或别人使用。</li>
</ol>
<p>==使用接口的时候，需要注意：==</p>
<ol>
<li>接口是没有静态代码块或者构造方法的。</li>
<li>一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。<br>格式：<br>public class MyInterfaceImpl implements MyInterfaceA, MyInterfaceB {<br> // 覆盖重写所有抽象方法<br>}</li>
<li>如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。</li>
<li>如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。</li>
<li>如果实现类锁实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</li>
<li>一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法。```</li>
</ol>
<hr>
<h3 id="狂神java-Demo"><a href="#狂神java-Demo" class="headerlink" title="狂神java Demo"></a>狂神java Demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类： extends</span></span><br><span class="line"><span class="comment">// 类可以实现接口 implement 接口</span></span><br><span class="line"><span class="comment">// 实现了接口的类，就需要重写接口中的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多继承～利用接口实现多继承～</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的思维 Java</span></span><br><span class="line"><span class="comment">// interface 是定义的关键字，接口都需要有实现的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 接口中的所有定义其实都是抽象的public</span></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line"><span class="comment">//    public static int final AGE = 99;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210420142352.png" alt="03-多态的概述"></p>
<p>代码当中体现多态性，其实就是一句话：<code>父类引用指向子类对象。</code></p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父类名称 对象名 &#x3D; new 子类名称();</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接口名称 对象名 &#x3D; new 实现类名称();</span><br></pre></td></tr></table></figure>
<p>或者：<br>接口名称 对象名 = new 实现类名称();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码当中体现多态性，其实就是一句话：父类引用指向子类对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">父类名称 对象名 = new 子类名称();</span></span><br><span class="line"><span class="comment">或者：</span></span><br><span class="line"><span class="comment">接口名称 对象名 = new 实现类名称();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Multi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用多态的写法</span></span><br><span class="line">        <span class="comment">// 左侧父类的引用，指向了右侧子类的对象</span></span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi();</span><br><span class="line"></span><br><span class="line">        obj.method();</span><br><span class="line">        obj.methodFu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类特有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类方法</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="访问成员变量："><a href="#访问成员变量：" class="headerlink" title="访问成员变量："></a>访问<code>成员变量</code>：</h3><p><code>两种方式</code></p>
<ol>
<li>直接通过对象名称访问成员变量：看<code>等号左边</code>是谁，优先用谁，没有则向上找。</li>
<li>间接通过成员方法访问成员变量：看<code>该方法属于谁</code>，优先用谁，没有则向上找。</li>
</ol>
<p>成员变量不可以修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">访问成员变量的两种方式：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment">2. 间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MultiField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用多态的写法，父类引用指向子类对象</span></span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(obj.num); <span class="comment">// 父：10</span></span><br><span class="line"><span class="comment">//        System.out.println(obj.age); // 错误写法！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子类没有覆盖重写，就是父：10</span></span><br><span class="line">        <span class="comment">// 子类如果覆盖重写，就是子：20</span></span><br><span class="line">        obj.showNum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类特有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类特有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="成员方法的访问规则"><a href="#成员方法的访问规则" class="headerlink" title="成员方法的访问规则"></a><code>成员方法</code>的访问规则</h3><p>在多态的代码当中，成员方法的访问规则是：<br>    看new的是谁，就优先用谁，没有则向上找。</p>
<p>口诀：编译看左边，运行看右边。</p>
<p>编译：编译通过代码就不会出现红线；不通过IDE会出现红色的字</p>
<p>对比一下：<br>成员变量：编译看左边，运行还看左边。<br>成员方法：编译看左边，运行看右边。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在多态的代码当中，成员方法的访问规则是：</span></span><br><span class="line"><span class="comment">    看new的是谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">口诀：编译看左边，运行看右边。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对比一下：</span></span><br><span class="line"><span class="comment">成员变量：编译看左边，运行还看左边。</span></span><br><span class="line"><span class="comment">成员方法：编译看左边，运行看右边。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02MultiMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi(); <span class="comment">// 多态</span></span><br><span class="line"></span><br><span class="line">        obj.method(); <span class="comment">// 父子都有，优先用子</span></span><br><span class="line">        obj.methodFu(); <span class="comment">// 子类没有，父类有，向上找到父类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译看左边，左边是Fu，Fu当中没有methodZi方法，所以编译报错。</span></span><br><span class="line"><span class="comment">//        obj.methodZi(); // 错误写法！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="使用多态的好处"><a href="#使用多态的好处" class="headerlink" title="使用多态的好处"></a>使用多态的好处</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210420154611.png" alt="04-使用多态的好处"></p>
<h3 id="向上转型-amp-向下转型"><a href="#向上转型-amp-向下转型" class="headerlink" title="向上转型 &amp; 向下转型"></a>向上转型 &amp; 向下转型</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210420154743.png" alt="05-对象的上下转型"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">向上转型一定是安全的，没有问题的，正确的。但是也有一个弊端：</span></span><br><span class="line"><span class="comment">对象一旦向上转型为父类，那么就无法调用子类原本特有的内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决方案：用对象的向下转型【还原】。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象的向上转型，就是：父类引用指向之类对象。</span></span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat(); <span class="comment">// 本来创建的时候是一只猫</span></span><br><span class="line">        animal.eat(); <span class="comment">// 猫吃鱼</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        animal.catchMouse(); // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型，进行“还原”动作</span></span><br><span class="line">        Cat cat = (Cat) animal;</span><br><span class="line">        cat.catchMouse(); <span class="comment">// 猫抓老鼠</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面是错误的向下转型</span></span><br><span class="line">        <span class="comment">// 本来new的时候是一只猫，现在非要当做狗</span></span><br><span class="line">        <span class="comment">// 错误写法！编译不会报错，但是运行会出现异常：</span></span><br><span class="line">        <span class="comment">// java.lang.ClassCastException，类转换异常</span></span><br><span class="line">        Dog dog = (Dog) animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><code>对应的向下转型</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何才能知道一个父类引用的对象，本来是什么子类？</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">对象 instanceof 类名称</span></span><br><span class="line"><span class="comment">这将会得到一个boolean值结果，也就是判断前面的对象能不能当做后面类型的实例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Instanceof</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Dog(); <span class="comment">// 本来是一只狗</span></span><br><span class="line">        animal.eat(); <span class="comment">// 狗吃SHIT</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果希望掉用子类特有方法，需要向下转型</span></span><br><span class="line">        <span class="comment">// 判断一下父类引用animal本来是不是Dog</span></span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            Dog dog = (Dog) animal;</span><br><span class="line">            dog.watchHouse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断一下animal本来是不是Cat</span></span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">            Cat cat = (Cat) animal;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        giveMeAPet(<span class="keyword">new</span> Dog());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">giveMeAPet</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            Dog dog = (Dog) animal;</span><br><span class="line">            dog.watchHouse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">            Cat cat = (Cat) animal;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="狂神说java部分笔记"><a href="#狂神说java部分笔记" class="headerlink" title="狂神说java部分笔记"></a>狂神说java部分笔记</h3><ul>
<li>动态编译：类型：可扩展性更强</li>
<li>统一方法可以根据发送对象的不同而采取不同的行为方式</li>
<li>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类，有关系的类）</li>
</ul>
<p><strong>多态存在的条件</strong></p>
<ol>
<li>有继承的关系</li>
<li>子类重写父类方法</li>
<li>父类引用指向子类的对象</li>
</ol>
<p><strong>注意事项</strong>：</p>
<ol>
<li>多态是方法的多态，属性没有多态</li>
<li>父类和子类，有联系 类型转换异常！ClassCastException</li>
<li>存在的条件：继承关系，方法需要重写，父类的引用指向子类对象<ol>
<li>static 方法，属于累，它不属于实例</li>
<li>final 常量</li>
<li>private 方法</li>
</ol>
</li>
</ol>
<p>instanceof （类型转换） 引用类型，判断一个对象是什么类型</p>
<ol>
<li>父类引用指向子类的对象</li>
<li>把子类转换为父类，向上转型；可以直接转过去</li>
<li>把父类转换为子类，向下转型，强制转换</li>
<li>方便方法的调用，减少重复的代码！简洁</li>
<li>：抽象：封装，继承，多态</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">// new Person();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以指向的引用类型就不确定了：父类的引用指向了子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Student 能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Person 父类型，但是不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line"></span><br><span class="line">        s2.run(); <span class="comment">// 子类重写了父亲的方法。执行子类的方法</span></span><br><span class="line">        ((Student)s2).eat(); <span class="comment">//子类重写类父类的方法，执行了子类的方法</span></span><br><span class="line">        s1.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object&gt;String</span></span><br><span class="line">        <span class="comment">//Obj&gt;Person&gt;Student</span></span><br><span class="line">        <span class="comment">//Obj&gt;Person&gt;Teacher</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(X instanceof Y); // 能不能编译通过！判断X和Y是否有父子关系</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);</span><br><span class="line"><span class="comment">//        System.out.println(person instanceof String); 编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);</span><br><span class="line"><span class="comment">//        System.out.println(student instanceof Teacher);编译报错</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof String); 编译报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person obj = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//obj 将这个对象转换为Student类，我们就可以使用Student类型的方法了</span></span><br><span class="line">        <span class="comment">// 高 &gt; 低 转需要强制转换</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//子类转换成父类，可能丢失自己本来的一些方法</span></span><br><span class="line">        Student student = (Student) obj;</span><br><span class="line">        student.go();</span><br><span class="line"></span><br><span class="line">        ((Student)obj).go(); <span class="comment">// 想要用子类的方法就直接强制转换就行啦</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="接口多态的综合案例"><a href="#接口多态的综合案例" class="headerlink" title="接口多态的综合案例"></a>接口多态的综合案例</h3><p>案例分析</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210420160658.png" alt="06-笔记本电脑案例分析"></p>
<p><a class="link"   href="https://github.com/yuxuanwu17/USB_demo" >https://github.com/yuxuanwu17/USB_demo<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p> 在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public：公共的。</span><br><span class="line"></span><br><span class="line">protected：受保护的</span><br><span class="line"></span><br><span class="line">default：默认的</span><br><span class="line"></span><br><span class="line">private：私有的</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Java中有四种权限修饰符："><a href="#Java中有四种权限修饰符：" class="headerlink" title="Java中有四种权限修饰符："></a>Java中有四种权限修饰符：</h3><p><code>public  &gt;   protected   &gt;   (default)   &gt;   private</code></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th>public</th>
<th>protected</th>
<th>(default)</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td align="center">同一个类（我自己）</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td align="center">同一个包（我邻居）</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td align="center">不同包子类（我儿子）</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td align="center">不同包非子类（陌生人）</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody></table>
<p><code>注意事项</code>：(default)并不是关键字“default”，而是根本不写。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="什么是内部类"><a href="#什么是内部类" class="headerlink" title="什么是内部类"></a>什么是内部类</h3><p>将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类。</p>
<p><code>成员内部类</code> ：定义在类中方法外的类。</p>
<p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 外部类 </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>【外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();】</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。</span></span><br><span class="line"><span class="comment">例如：身体和心脏的关系。又如：汽车和发动机的关系。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">1. 成员内部类</span></span><br><span class="line"><span class="comment">2. 局部内部类（包含匿名内部类）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">成员内部类的定义格式：</span></span><br><span class="line"><span class="comment">修饰符 class 外部类名称 &#123;</span></span><br><span class="line"><span class="comment">    修饰符 class 内部类名称 &#123;</span></span><br><span class="line"><span class="comment">        // ...</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    // ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：内用外，随意访问；外用内，需要内部类对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">==========================</span></span><br><span class="line"><span class="comment">如何使用成员内部类？有两种方式：</span></span><br><span class="line"><span class="comment">1. 间接方式：在外部类的方法当中，使用内部类；然后main只是调用外部类的方法。</span></span><br><span class="line"><span class="comment">2. 直接方式，公式：</span></span><br><span class="line"><span class="comment">类名称 对象名 = new 类名称();</span></span><br><span class="line"><span class="comment">【外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body(); <span class="comment">// 外部类的对象</span></span><br><span class="line">        <span class="comment">// 通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照公式写：</span></span><br><span class="line">        Body.Heart heart = <span class="keyword">new</span> Body().<span class="function">new <span class="title">Heart</span><span class="params">()</span></span>;</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================================</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123; <span class="comment">// 外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; <span class="comment">// 成员内部类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;心脏跳动：蹦蹦蹦！&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;我叫：&quot;</span> + name); <span class="comment">// 正确写法！</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果出现了重名现象，那么格式是：外部类名称.this.外部类成员变量名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">// 外部类的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>; <span class="comment">// 内部类的成员变量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">30</span>; <span class="comment">// 内部类方法的局部变量</span></span><br><span class="line">            System.out.println(num); <span class="comment">// 局部变量，就近原则</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num); <span class="comment">// 内部类的成员变量</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num); <span class="comment">// 外部类的成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注：从Java 8+开始，只要局部变量事实不变，那么final关键字可以省略。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原因：</span></span><br><span class="line"><span class="comment">1. new出来的对象在堆内存当中。</span></span><br><span class="line"><span class="comment">2. 局部变量是跟着方法走的，在栈内存当中。</span></span><br><span class="line"><span class="comment">3. 方法运行结束之后，立刻出栈，局部变量就会立刻消失。</span></span><br><span class="line"><span class="comment">4. 但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOuter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">// 所在方法的局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyInner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。</span></span><br><span class="line"><span class="comment">“局部”：只有当前所属的方法才能使用它，出了这个方法外面就不能用了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义格式：</span></span><br><span class="line"><span class="comment">修饰符 class 外部类名称 &#123;</span></span><br><span class="line"><span class="comment">    修饰符 返回值类型 外部类方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">        class 局部内部类名称 &#123;</span></span><br><span class="line"><span class="comment">            // ...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">小节一下类的权限修饰符：</span></span><br><span class="line"><span class="comment">public &gt; protected &gt; (default) &gt; private</span></span><br><span class="line"><span class="comment">定义一个类的时候，权限修饰符规则：</span></span><br><span class="line"><span class="comment">1. 外部类：public / (default)</span></span><br><span class="line"><span class="comment">2. 成员内部类：public / protected / (default) / private</span></span><br><span class="line"><span class="comment">3. 局部内部类：什么都不能写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num); <span class="comment">// 10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>局部内部类的final问题</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注：从Java 8+开始，只要局部变量事实不变，那么final关键字可以省略。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原因：</span></span><br><span class="line"><span class="comment">1. new出来的对象在堆内存当中。</span></span><br><span class="line"><span class="comment">2. 局部变量是跟着方法走的，在栈内存当中。</span></span><br><span class="line"><span class="comment">3. 方法运行结束之后，立刻出栈，局部变量就会立刻消失。</span></span><br><span class="line"><span class="comment">4. 但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOuter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*final*/</span> <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">// 所在方法的局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyInner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="匿名类部类"><a href="#匿名类部类" class="headerlink" title="匿名类部类"></a>匿名类部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，</span></span><br><span class="line"><span class="comment">那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">匿名内部类的定义格式：</span></span><br><span class="line"><span class="comment">接口名称 对象名 = new 接口名称() &#123;</span></span><br><span class="line"><span class="comment">    // 覆盖重写所有抽象方法</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对格式“new 接口名称() &#123;...&#125;”进行解析：</span></span><br><span class="line"><span class="comment">1. new代表创建对象的动作</span></span><br><span class="line"><span class="comment">2. 接口名称就是匿名内部类需要实现哪个接口</span></span><br><span class="line"><span class="comment">3. &#123;...&#125;这才是匿名内部类的内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">另外还要注意几点问题：</span></span><br><span class="line"><span class="comment">1. 匿名内部类，在【创建对象】的时候，只能使用唯一一次。</span></span><br><span class="line"><span class="comment">如果希望多次创建对象，而且类的内容一样的话，那么就需要使用单独定义的实现类了。</span></span><br><span class="line"><span class="comment">2. 匿名对象，在【调用方法】的时候，只能调用唯一一次。</span></span><br><span class="line"><span class="comment">如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</span></span><br><span class="line"><span class="comment">3. 匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】</span></span><br><span class="line"><span class="comment">强调：匿名内部类和匿名对象不是一回事！！！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        MyInterface obj = new MyInterfaceImpl();</span></span><br><span class="line"><span class="comment">//        obj.method();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        MyInterface some = new MyInterface(); // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用匿名内部类，但不是匿名对象，对象名称就叫objA</span></span><br><span class="line">        MyInterface objA = <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！111-A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！222-A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        objA.method1();</span><br><span class="line">        objA.method2();</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用了匿名内部类，而且省略了对象名称，也是匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！111-B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！222-B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method1();</span><br><span class="line">        <span class="comment">// 因为匿名对象无法调用第二次方法，所以需要再创建一个匿名内部类的匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！111-B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！222-B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">My interface</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>; <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">My interface implemention </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类覆盖重写了方法！111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类覆盖重写了方法！222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="接口作为变量传递"><a href="#接口作为变量传递" class="headerlink" title="接口作为变量传递"></a>接口作为变量传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 英雄的名称</span></span><br><span class="line">    <span class="keyword">private</span> Skill skill; <span class="comment">// 英雄的技能</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name, Skill skill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，开始施放技能：&quot;</span>);</span><br><span class="line">        skill.use(); <span class="comment">// 调用接口中的抽象方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;施放技能完成。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Skill <span class="title">getSkill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSkill</span><span class="params">(Skill skill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==================*/</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>; <span class="comment">// 释放技能的抽象方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*==================*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkillImpl</span> <span class="keyword">implements</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Biu~biu~biu~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==================*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.List正是ArrayList所实现的接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左边是接口名称，右边是实现类名称，这就是多态写法</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = addNames(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class="line">            System.out.println(result.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">addNames</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;古力娜扎&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;玛尔扎哈&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;沙扬娜拉&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*==================*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">        hero.setName(<span class="string">&quot;艾希&quot;</span>); <span class="comment">// 设置英雄的名称</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置英雄技能</span></span><br><span class="line"><span class="comment">//        hero.setSkill(new SkillImpl()); // 使用单独定义的实现类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 还可以改成使用匿名内部类</span></span><br><span class="line"><span class="comment">//        Skill skill = new Skill() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void use() &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Pia~pia~pia~&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        hero.setSkill(skill);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步简化，同时使用匿名内部类和匿名对象</span></span><br><span class="line">        hero.setSkill(<span class="keyword">new</span> Skill() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Biu~Pia~Biu~Pia~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        hero.attack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="抢红包实例"><a href="#抢红包实例" class="headerlink" title="抢红包实例"></a>抢红包实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.day11.demo08;</span><br><span class="line"></span><br><span class="line">import cn.itcast.day11.red.OpenMode;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">场景说明：</span><br><span class="line">    红包发出去之后，所有人都有红包，大家抢完了之后，最后一个红包给群主自己。</span><br><span class="line">大多数代码都是现成的，我们需要做的就是填空题。</span><br><span class="line">我们自己要做的事情有：</span><br><span class="line">    1. 设置一下程序的标题，通过构造方法的字符串参数</span><br><span class="line">    2. 设置群主名称</span><br><span class="line">    3. 设置分发策略：平均，还是随机？</span><br><span class="line"></span><br><span class="line">红包分发的策略：</span><br><span class="line">    1. 普通红包（平均）：totalMoney &#x2F; totalCount，余数放在最后一个红包当中。</span><br><span class="line">    2. 手气红包（随机）：最少1分钱，最多不超过平均数的2倍。应该越发越少。</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Bootstrap &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyRed red &#x3D; new MyRed(&quot;传智播客双元课程&quot;);</span><br><span class="line">        &#x2F;&#x2F; 设置群主名称</span><br><span class="line">        red.setOwnerName(&quot;王思聪&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 普通红包</span><br><span class="line">&#x2F;&#x2F;        OpenMode normal &#x3D; new NormalMode();</span><br><span class="line">&#x2F;&#x2F;        red.setOpenWay(normal);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 手气红包</span><br><span class="line">        OpenMode random &#x3D; new RandomMode();</span><br><span class="line">        red.setOpenWay(random);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>狂神说java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获得外部类的私有属性～</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">// 通过这个外部类来实例化内部类</span></span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.in();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个java类中可以有多个class类，但是只能有一个public class</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210215111612243.5dlgkhhid0g.png" alt="image-20210215111612243"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210215111941652.79xf5xr1emg0.png" alt="image-20210215111941652"></p>
<h3 id="异常的处理机制"><a href="#异常的处理机制" class="headerlink" title="异常的处理机制"></a>异常的处理机制</h3><p>抛出/捕获异常</p>
<p>Idea 快捷键 option+command+T</p>
<p>主动跑出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo07.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Test2().test(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>java protected关键字： 同包不同级</p>
<ul>
<li>基类的 protected 成员是包内可见的，并且对子类可见；</li>
<li>若子类与基类不在同一包中，那么在子类中，子类实例可以访问其从基类继承而来的protected方法，而不能访问基类实例的protected方法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/02/15/2021-02-15-MySQL/</url>
    <content><![CDATA[<p>全文是根据【狂神说java MySQL教程所做的笔记和资料，非常感谢他的分享和资料】</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1NJ411J79W?p=1" >https://www.bilibili.com/video/BV1NJ411J79W?p=1<i class="fas fa-external-link-alt"></i></a></p>
<p>笔记在</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/E1PM4EHwU6Joot4OG0gDjw" >https://mp.weixin.qq.com/s/E1PM4EHwU6Joot4OG0gDjw<i class="fas fa-external-link-alt"></i></a></p>
<p>这是我的笔记，所以有些图直接引用的公众号的原图，所以会显示不出，请去公众号查看。</p>
<p>侵删</p>
<h2 id="1-初始MySQL"><a href="#1-初始MySQL" class="headerlink" title="1.初始MySQL"></a>1.初始MySQL</h2><p>JavaEE: 企业级的java开发 Web</p>
<p>前端（页面：展示，数据！）</p>
<p>后台 （连接点：连接数据库JDBC，连接前端（控制视图跳转，和给前端传递数据））</p>
<p>数据库（存数据）</p>
<blockquote>
<p>如果你只会写代码的是码农；要学好数据库，才能基本能混口饭吃；在此基础上如果再学好操作系统和计算机网络，就能当一个不错的程序员。如果能再把离散数学、数字电路、体系结构、数据结构/算法、编译原理学通透，再加上丰富的实践经验与领域特定知识，就能算是一个优秀的工程师了。</p>
</blockquote>
<h2 id="上课视频同步文档"><a href="#上课视频同步文档" class="headerlink" title="上课视频同步文档"></a>上课视频同步文档</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibanXyCIx7b0vsP25gWsA4A2sVibKSbbj0vwUSMZRT6DDdB5kTm22h7YQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><blockquote>
<p>为什么学习数据库</p>
</blockquote>
<p>1、岗位技能需求</p>
<p>2、现在的世界,得数据者得天下</p>
<p>3、存储数据的方法</p>
<p>4、程序,网站中,大量数据如何长久保存?</p>
<p>==5、<strong>数据库是几乎软件体系中最核心的一个存在。</strong>==</p>
<blockquote>
<p>什么是数据库</p>
</blockquote>
<p>数据库 ( <strong>DataBase</strong> , 简称<strong>DB</strong> )</p>
<p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”</p>
<p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p>
<p><strong>数据库总览 :</strong></p>
<ul>
<li><p>关系型数据库 ( SQL )</p>
</li>
<li><ul>
<li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li>
<li>关系型数据库通过外键关联来建立表与表之间的关系</li>
</ul>
</li>
<li><p>非关系型数据库 ( NOSQL )</p>
</li>
<li><ul>
<li>Redis , MongoDB , …</li>
<li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li>
</ul>
</li>
</ul>
<blockquote>
<p>什么是DBMS</p>
</blockquote>
<p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p>
<p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibIew3vo8N1zoy9ic2nOVVJWtjZsXg7TWsDDGhAI5rSGZ0tnQ6OIO8MBg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>为什么要说这个呢?</p>
<p>因为我们要学习的MySQL应该算是一个数据库管理系统.</p>
<blockquote>
<p>MySQL简介</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibkYI5jfkYj8hphYv7GEdQSczjb1icQwjWGlWqhG26VO1y5tgM2OcStaA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>概念 :</strong> 是现在<strong>流行</strong>的<strong>开源</strong>的,<strong>免费</strong>的 <strong>关系型</strong>数据库</p>
<p><strong>历史 :</strong> 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。</p>
<p><strong>特点 :</strong> </p>
<ul>
<li>免费 , 开源数据库</li>
<li>小巧 , 功能齐全</li>
<li>使用便捷</li>
<li>可运行于Windows或Linux操作系统</li>
<li>可适用于中小型甚至大型网站应用</li>
</ul>
<p><strong>官网 :</strong> <strong><a class="link"   href="https://www.mysql.com/" >https://www.mysql.com/<i class="fas fa-external-link-alt"></i></a></strong></p>
<blockquote>
<p>安装MySQL</p>
</blockquote>
<p><strong>这里建议大家使用压缩版,安装快,方便.不复杂.</strong></p>
<p><strong>软件下载</strong></p>
<p>mysql5.7 64位下载地址:</p>
<p><a class="link"   href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip" >https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip<i class="fas fa-external-link-alt"></i></a></p>
<p>电脑是64位的就下载使用64位版本的！</p>
<blockquote>
<p>安装步骤</p>
</blockquote>
<p>1、下载后得到zip压缩包.</p>
<p>2、解压到自己想要安装到的目录，本人解压到的是D:\Environment\mysql-5.7.19</p>
<p>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹</span><br></pre></td></tr></table></figure>
<p>4、编辑 my.ini 文件 ,注意替换路径位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;D:\Program Files\mysql-5.7\</span><br><span class="line">datadir&#x3D;D:\Program Files\mysql-5.7\data\</span><br><span class="line">port&#x3D;3306</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
<p>5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql)</p>
<p>6、再输入  mysqld –initialize-insecure –user=mysql 初始化数据文件</p>
<p>7、然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空）</p>
<p>8、进入界面后更改root密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string&#x3D;password(&#39;123456&#39;) where user&#x3D;&#39;root&#39; and Host &#x3D; &#39;localhost&#39;;</span><br></pre></td></tr></table></figure>
<p>9、刷新权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>10、修改 my.ini文件删除最后一句skip-grant-tables</p>
<p>11、重启mysql即可正常使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
<p>12、连接上测试出现以下结果就安装好了</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYib5jn0ggWLtIrViavAcBpOXW2ick2ibI2un63gLrFMdtviamYxttX2knoPibQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>一步步去做 , 理论上是没有任何问题的 .</p>
<p>如果您以前装过,现在需要重装,一定要将环境清理干净 .</p>
<p>好了,到这里大家都装好了,因为刚接触,所以我们先不学习命令.</p>
<hr>
<h3 id="如果是MAC系统："><a href="#如果是MAC系统：" class="headerlink" title="如果是MAC系统："></a>如果是MAC系统：</h3><p><a class="link"   href="https://zhuanlan.zhihu.com/p/27960044" >https://zhuanlan.zhihu.com/p/27960044<i class="fas fa-external-link-alt"></i></a></p>
<p>这里给大家推荐一个工具 : <strong>SQLyog</strong> .</p>
<p>即便有了可视化工具,可是基本的DOS命名大家还是要记住!</p>
<blockquote>
<p>SQLyog</p>
</blockquote>
<p>可手动操作,管理MySQL数据库的软件工具</p>
<p>特点 : 简洁 , 易用 , 图形化</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibEvvP8V27JN1wk2BDkph6PCOj45JfcnhJaibHsV6jVewwZZumapwTibicg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibXng7TQzNhPmic2H3wByaUhebwTKoVDVkHjeRxGx67YxGjlgd13axWVg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>使用SQLyog管理工具自己完成以下操作 :</p>
<ul>
<li><p>连接本地MySQL数据库</p>
</li>
<li><p>新建MySchool数据库</p>
</li>
<li><ul>
<li>字段</li>
<li>GradeID : int(11) , Primary Key (pk)</li>
<li>GradeName : varchar(50)</li>
<li>数据库名称MySchool</li>
<li>新建数据库表(grade)</li>
</ul>
</li>
</ul>
<p>在历史记录中可以看到相对应的数据库操作的语句 .</p>
<blockquote>
<p>连接数据库</p>
</blockquote>
<p>命令行连接！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123 </span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line">123</span><br><span class="line">-----------------</span><br><span class="line"># 进入mysql以后,所有语句的结尾都是以; 结尾的</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>打开MySQL命令窗口</p>
<ul>
<li>在DOS命令行窗口进入 <strong>安装目录\mysql\bin</strong></li>
<li>可设置环境变量，设置了环境变量，可以在任意目录打开！</li>
</ul>
<p><strong>连接数据库语句 :</strong> mysql -h 服务器主机地址 -u 用户名 -p 用户密码</p>
<p>注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 !</p>
<p><strong>几个基本的数据库操作命令 :</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update user set password&#x3D;password(&#39;123&#39;)where user&#x3D;&#39;root&#39;; 修改密码</span><br><span class="line">flush privileges; 刷新数据库</span><br><span class="line">show databases; 显示所有数据库</span><br><span class="line">use dbname；打开某个数据库 # use student</span><br><span class="line">show tables; 显示数据库mysql中所有的表</span><br><span class="line">describe user; 显示表mysql数据库中user表的列信息 # describe student</span><br><span class="line">create database name; 创建数据库</span><br><span class="line">use databasename; 选择数据库</span><br><span class="line"></span><br><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line">-- 表示注释 (sql 本身的注释)</span><br><span class="line">&#x2F;*</span><br><span class="line">*&#x2F; sql的多行注释</span><br></pre></td></tr></table></figure>


<h3 id="结构化查询语句分类"><a href="#结构化查询语句分类" class="headerlink" title="结构化查询语句分类"></a>结构化查询语句分类</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QOGpDicLzwS6NJVAeLECu2rx2qboGU36S9hXLov0x0c5vzZAceySSXnA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote>
<p>命令行操作数据库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建数据库 :  create database [if not exists] 数据库名;</span><br><span class="line"></span><br><span class="line">删除数据库 : drop database [if exists] 数据库名;</span><br><span class="line"></span><br><span class="line">查看数据库 : show databases;</span><br><span class="line"></span><br><span class="line">使用数据库 : use 数据库名; # 如果你的名称是一个特殊字符，就要带&#96; &#96;(tab上面的)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>对比工具操作数据库</p>
</blockquote>
<p><strong>学习方法：</strong></p>
<ul>
<li>对照SQLyog工具自动生成的语句学习</li>
<li>固定语法中的单词需要记忆</li>
<li><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Q2ITxibRRsQuuqibHorhqzYI83QYKRUVpMLCPA1chKQ39eUFQibJ2fwWFg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></li>
</ul>
<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>属于DDL的一种，语法 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table [if not exists] &#96;表名&#96;(</span><br><span class="line">   &#39;字段名1&#39; 列类型 [属性][索引][注释],</span><br><span class="line">   &#39;字段名2&#39; 列类型 [属性][索引][注释],</span><br><span class="line">  #...</span><br><span class="line">   &#39;字段名n&#39; 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure>
<p><strong>说明 :</strong> 反引号用于区别MySQL保留字与普通字符而引入的 (键盘esc下面的键).</p>
<h3 id="数据值和列类型"><a href="#数据值和列类型" class="headerlink" title="数据值和列类型"></a>数据值和列类型</h3><p>列类型 : 规定数据库中该列存放的数据类型</p>
<blockquote>
<p>数值类型</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QLXRrfmQjbUt3O7sLw0KKv9UtriaTr60JspXIZ69HkeOiagz86CE3a9Wg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<blockquote>
<p>字符串类型</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QsjOPftNfn1ibXSP8OIYnsJaaPC8da61jCzcbdkqbApibQWgQ7KBjYbuw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<blockquote>
<p>日期和时间型数值类型</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Qcib3OwGtWEJkEE2biaa4jT3xokY1UicPT1MQcQNsa1EsjiaIqM1vvyUPjg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<blockquote>
<p>NULL值</p>
</blockquote>
<ul>
<li>理解为 “没有值” 或 “未知值”</li>
<li>不要用NULL进行算术运算 , 结果仍为NULL</li>
</ul>
<h3 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h3><p><strong>UnSigned</strong></p>
<ul>
<li>无符号的整数</li>
<li>声明该数据列不允许负数 .</li>
</ul>
<p><strong>ZEROFILL</strong></p>
<ul>
<li>0填充的</li>
<li>不足位数的用0来填充 , 如int(3),5则为005</li>
</ul>
<p><strong>Auto_InCrement</strong></p>
<ul>
<li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p>
</li>
<li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p>
</li>
<li><p>可定义起始值和步长</p>
</li>
<li><ul>
<li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li>
<li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li>
</ul>
</li>
</ul>
<p><strong>NULL 和 NOT NULL</strong></p>
<ul>
<li>默认为NULL , 即没有插入该列的数值</li>
<li>如果设置为NOT NULL , 则该列必须有值</li>
</ul>
<p><strong>DEFAULT</strong></p>
<ul>
<li>默认的</li>
<li>用于设置默认值</li>
<li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li>
</ul>
<p>==拓展：听听就好==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 每一个表，都必须存在以下五个字段！未来做项目用的，表示一个记录都存在意义！</span><br><span class="line"></span><br><span class="line">id 主键</span><br><span class="line">&#96;version&#96; 乐观锁</span><br><span class="line">is_delete 伪删除</span><br><span class="line">gmt_create 创建时间</span><br><span class="line">gmt_update 修改时间</span><br><span class="line">&#x2F;*</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 目标 : 创建一个school数据库</span><br><span class="line">-- 创建学生表(列,字段)</span><br><span class="line">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span><br><span class="line">-- 注意点，使用英文（），表的名称和字段尽量使用&#96;&#96; 扩起来</span><br><span class="line">-- AUTO_INCREMENT 自增</span><br><span class="line">-- 字符串使用 单引号扩起来</span><br><span class="line">-- 所有的语句后面家，（英文的），最后一个不用加</span><br><span class="line">-- PRIMARY KEY 主键，一般一个表只有一个唯一的主键</span><br><span class="line">-- 创建表之前 , 一定要先选择数据库</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;student&#96; (</span><br><span class="line">&#96;id&#96; int(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,</span><br><span class="line">&#96;name&#96; varchar(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,</span><br><span class="line">&#96;pwd&#96; varchar(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,</span><br><span class="line">&#96;sex&#96; varchar(2) NOT NULL DEFAULT &#39;男&#39; COMMENT &#39;性别&#39;,</span><br><span class="line">&#96;birthday&#96; datetime DEFAULT NULL COMMENT &#39;生日&#39;,</span><br><span class="line">&#96;address&#96; varchar(100) DEFAULT NULL COMMENT &#39;地址&#39;,</span><br><span class="line">&#96;email&#96; varchar(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 查看数据库的定义</span><br><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line">-- 查看数据表的定义</span><br><span class="line">SHOW CREATE TABLE student;</span><br><span class="line">-- 显示表结构</span><br><span class="line">DESC student;  -- 设置严格检查模式(不能容错了)SET sql_mode&#x3D;&#39;STRICT_TRANS_TABLES&#39;;</span><br></pre></td></tr></table></figure>


<h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h3><blockquote>
<p>设置数据表的类型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">   -- 省略一些代码</span><br><span class="line">   -- Mysql注释</span><br><span class="line">   -- 1. # 单行注释</span><br><span class="line">   -- 2. &#x2F;*...*&#x2F; 多行注释</span><br><span class="line">)ENGINE &#x3D; MyISAM (or InnoDB)</span><br><span class="line"></span><br><span class="line">-- 查看mysql所支持的引擎类型 (表类型)</span><br><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure>
<p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p>
<p>常见的 MyISAM 与 InnoDB 类型：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QpmSFMlJ4fDFdGoWOsTuNfFZq0XKW1GyibdZHU2F73DTezMYM1K0dc2A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>经验 ( 适用场合 )  :</p>
<ul>
<li>适用 MyISAM : 节约空间及相应速度</li>
<li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li>
</ul>
<blockquote>
<p>数据表的存储位置</p>
</blockquote>
<ul>
<li><p>MySQL数据表以文件方式存放在磁盘中</p>
</li>
<li><ul>
<li>包括表文件 , 数据文件 , 以及数据库的选项文件</li>
<li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 . </li>
</ul>
</li>
<li><p>==Mac==：/usr/local/mysql</p>
</li>
<li><p>注意 :</p>
</li>
<li><ul>
<li><p>* . frm – 表结构定义文件</p>
</li>
<li><p>* . MYD – 数据文件 ( data )</p>
</li>
<li><p>* . MYI – 索引文件 ( index )</p>
</li>
<li><p>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</p>
</li>
<li><p>MyISAM类型数据表对应三个文件 :</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Q5tk8XtNtNGnUgevhFSzwTUrO7AmbXZFumTibt43SDII9nOQY97OtQdQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>设置数据表字符集</p>
</blockquote>
<p>我们可为数据库,数据表,数据列设定不同的字符集，设定方法 :</p>
<ul>
<li>创建时通过命令来设置 , 如 : CREATE TABLE 表名()CHARSET = utf8;</li>
<li>如无设定 , 则根据MySQL数据库配置文件 my.ini 中的参数设定</li>
<li>若不设定则不支持中文</li>
</ul>
<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><blockquote>
<p>修改表 ( ALTER TABLE )</p>
</blockquote>
<p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p>
<p>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p>
<p>修改字段 :</p>
<ul>
<li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li>
<li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li>
</ul>
<p>删除字段 :  ALTER TABLE 表名 DROP 字段名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE teacher RENAME AS teacher1</span><br><span class="line">ALTER TABLE teacher1 ADD age INT(11)</span><br><span class="line">ALTER TABLE teacher1 MODIFY age VARCHAR(11)</span><br><span class="line">ALTER TABLE teacher CHANGE age age1 INT(1)</span><br><span class="line">ALTER TABLE teacher1 DROP age1									</span><br></pre></td></tr></table></figure>


<p><strong>最终结论</strong>：</p>
<ul>
<li>change用来字段重命名，不能修改字段类型和约束</li>
<li>modify不用来字段重命名，只能修改字段类型和约束</li>
</ul>
<blockquote>
<p>删除数据表</p>
</blockquote>
<p>语法：DROP TABLE [IF EXISTS] 表名</p>
<ul>
<li>IF EXISTS为可选 , 判断是否存在该数据表</li>
<li>如删除不存在的数据表会抛出错误</li>
</ul>
<p>==所有的创建和删除操作尽量加上判断，以免报错～==</p>
<blockquote>
<p>其他</p>
</blockquote>
<ol>
<li>可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</li>
<li>每个库目录存在一个保存当前数据库的选项文件db.opt。</li>
<li>注释：<br> 单行注释 # 注释内容<br> 多行注释 /* 注释内容 */<br> 单行注释 – 注释内容       (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</li>
<li>模式通配符：<br> _   任意单个字符<br> %   任意多个字符，甚至包括零字符<br> 单引号需要进行转义 &#39;</li>
<li>CMD命令行内的语句结束符可以为 “;”, “\G”, “\g”，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</li>
<li>SQL对大小写不敏感 （关键字）</li>
<li>清除已有语句：\c</li>
</ol>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><blockquote>
<p>外键概念</p>
</blockquote>
<p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p>
<p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p>
<p><strong>外键作用</strong></p>
<p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p>
<blockquote>
<p>创建外键</p>
</blockquote>
<p>建表时指定外键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建外键的方式一 : 创建子表同时创建外键</span><br><span class="line"></span><br><span class="line">-- 年级表 (id\年级名称)</span><br><span class="line">CREATE TABLE &#96;grade&#96; (</span><br><span class="line">&#96;gradeid&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;年级ID&#39;,</span><br><span class="line">&#96;gradename&#96; VARCHAR(50) NOT NULL COMMENT &#39;年级名称&#39;,</span><br><span class="line">PRIMARY KEY (&#96;gradeid&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)</span><br><span class="line">CREATE TABLE &#96;student&#96; (</span><br><span class="line">&#96;studentno&#96; INT(4) NOT NULL COMMENT &#39;学号&#39;,</span><br><span class="line">&#96;studentname&#96; VARCHAR(20) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,</span><br><span class="line">&#96;sex&#96; TINYINT(1) DEFAULT &#39;1&#39; COMMENT &#39;性别&#39;,</span><br><span class="line">&#96;gradeid&#96; INT(10) DEFAULT NULL COMMENT &#39;年级&#39;,</span><br><span class="line">&#96;phoneNum&#96; VARCHAR(50) NOT NULL COMMENT &#39;手机&#39;,</span><br><span class="line">&#96;address&#96; VARCHAR(255) DEFAULT NULL COMMENT &#39;地址&#39;,</span><br><span class="line">&#96;borndate&#96; DATETIME DEFAULT NULL COMMENT &#39;生日&#39;,</span><br><span class="line">&#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">&#96;idCard&#96; VARCHAR(18) DEFAULT NULL COMMENT &#39;身份证号&#39;,</span><br><span class="line">PRIMARY KEY (&#96;studentno&#96;),</span><br><span class="line">KEY &#96;FK_gradeid&#96; (&#96;gradeid&#96;),</span><br><span class="line">CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96; (&#96;gradeid&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure>
<p>建表后修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span><br><span class="line">ALTER TABLE &#96;student&#96;</span><br><span class="line">ADD CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96; (&#96;gradeid&#96;);</span><br></pre></td></tr></table></figure>


<blockquote>
<p>删除外键</p>
</blockquote>
<p>操作：删除 grade 表，发现报错</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LCI6xGKJ7bKiaBudOSBHd9dAFiaLn6yfOjQtCB0o2bo5uaJH6GKpmGXVCbrFKSzQOeMKpPbG57dIgA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>注意</strong> : 删除具有主外键关系的表时 , 要先删子表 , 后删主表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 删除外键</span><br><span class="line">ALTER TABLE student DROP FOREIGN KEY FK_gradeid;</span><br><span class="line">-- 发现执行完上面的,索引还在,所以还要删除索引</span><br><span class="line">-- 注:这个索引是建立外键的时候默认生成的</span><br><span class="line">ALTER TABLE student DROP INDEX FK_gradeid;</span><br></pre></td></tr></table></figure>


<p>以上的操作都是物理外键，数据库级别的外键，我们不建议使用（避免因为数据库过多造成困扰，这里了解即可～）</p>
<p>==最佳实践==</p>
<ul>
<li>数据库就是单纯的表，只是用来存储数据，只有行（数据）和列（字段）</li>
<li>我们想使用多张表的数据，想使用外键（程序去实现）</li>
</ul>
<h3 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h3><p><strong>数据库意义</strong> ： 数据存储、数据管理</p>
<p><strong>管理数据库数据方法：</strong></p>
<ul>
<li>通过SQLyog等管理工具管理数据库数据</li>
<li>通过<strong>DML语句</strong>管理数据库数据</li>
</ul>
<p><strong>DML语言</strong>  ：数据操作语言</p>
<ul>
<li><p>用于操作数据库对象中所包含的数据</p>
</li>
<li><p>包括 :</p>
</li>
<li><ul>
<li>INSERT (添加数据语句)</li>
<li>UPDATE (更新数据语句)</li>
<li>DELETE (删除数据语句)</li>
</ul>
</li>
</ul>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><blockquote>
<p>INSERT命令</p>
</blockquote>
<p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</span><br></pre></td></tr></table></figure>
<p><strong>注意 :</strong> </p>
<ul>
<li>字段或值之间用英文逗号隔开 .</li>
<li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li>
<li>可同时插入多条数据 , values 后用英文逗号隔开 .</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 使用语句如何增加语句?</span><br><span class="line">-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</span><br><span class="line">INSERT INTO grade(gradename) VALUES (&#39;大一&#39;);</span><br><span class="line"></span><br><span class="line">-- 主键自增,那能否省略呢?</span><br><span class="line">INSERT INTO grade VALUES (&#39;大二&#39;);</span><br><span class="line"></span><br><span class="line">-- 查询:INSERT INTO grade VALUE (&#39;大二&#39;)错误代码：1136</span><br><span class="line">Column count doesn&#96;t match value count at row 1</span><br><span class="line"></span><br><span class="line">-- 结论:&#39;字段1,字段2...&#39;该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致. 数据和字段一定的要一一匹配</span><br><span class="line"></span><br><span class="line">-- 一次插入多条数据</span><br><span class="line">INSERT INTO grade(gradename) VALUES (&#39;大三&#39;),(&#39;大四&#39;);</span><br></pre></td></tr></table></figure>
<p><strong>练习题目</strong> </p>
<p>自己使用INSERT语句为课程表subject添加数据 . 使用到外键.</p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><blockquote>
<p>update命令</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 SET column_name&#x3D;value [,column_name2&#x3D;value2,...] [WHERE condition];</span><br></pre></td></tr></table></figure>
<p><strong>注意 :</strong> </p>
<ul>
<li>column_name 为要更改的数据列, 尽量带上``</li>
<li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果 e.g. CURRENT_TIME</li>
<li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li>
<li>多个设置的属性之间，使用英文的逗号隔开</li>
</ul>
<blockquote>
<p>where条件子句</p>
</blockquote>
<p>可以简单的理解为 : 有条件地从表中筛选数据</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LCI6xGKJ7bKiaBudOSBHd9dyJWPxp3H9GicphPXMEvCwtUyKX3vibUCESqSaDnKnLzlwYpcRTJsdUIg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 修改年级信息</span><br><span class="line">UPDATE grade SET gradename &#x3D; &#39;高中&#39; WHERE gradeid &#x3D; 1;</span><br></pre></td></tr></table></figure>


<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote>
<p>DELETE命令</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE condition];</span><br></pre></td></tr></table></figure>
<p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 删除最后一个数据</span><br><span class="line">DELETE FROM grade WHERE gradeid &#x3D; 5</span><br><span class="line"></span><br><span class="line">-- 删除数据（避免这样写）这样会删除全部的数据</span><br><span class="line">DELETE FROM &#96;student&#96;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>TRUNCATE命令</p>
</blockquote>
<p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE [TABLE] table_name;</span><br><span class="line"></span><br><span class="line">-- 清空年级表</span><br><span class="line">TRUNCATE grade</span><br></pre></td></tr></table></figure>
<p><strong>注意：区别于DELETE命令</strong></p>
<ul>
<li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p>
</li>
<li><p>不同 :</p>
</li>
<li><ul>
<li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li>
<li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li>
</ul>
</li>
</ul>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建一个测试表</span><br><span class="line">CREATE TABLE &#96;test&#96; (</span><br><span class="line">&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">&#96;coll&#96; VARCHAR(20) NOT NULL,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 插入几个测试数据</span><br><span class="line">INSERT INTO test(coll) VALUES(&#39;row1&#39;),(&#39;row2&#39;),(&#39;row3&#39;);</span><br><span class="line"></span><br><span class="line">-- 删除表数据(不带where条件的delete)</span><br><span class="line">DELETE FROM test;</span><br><span class="line">-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</span><br><span class="line"></span><br><span class="line">-- 删除表数据(truncate)</span><br><span class="line">TRUNCATE TABLE test;</span><br><span class="line">-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</span><br><span class="line"></span><br><span class="line">-- 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后</span><br><span class="line">-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失,从1开始)</span><br><span class="line">-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</span><br></pre></td></tr></table></figure>


<h3 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p>
<ul>
<li>查询数据库数据 , 如<strong>SELECT</strong>语句</li>
<li>简单的单表查询或多表的复杂查询和嵌套查询</li>
<li>是数据库语言中最核心,最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<blockquote>
<p>SELECT语法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [ALL | DISTINCT]</span><br><span class="line">&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;</span><br><span class="line">FROM table_name [as table_alias]</span><br><span class="line">  [left | right | inner join table_name2]  -- 联合查询</span><br><span class="line">  [WHERE ...]  -- 指定结果需满足的条件</span><br><span class="line">  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组</span><br><span class="line">  [HAVING]  -- 过滤分组的记录必须满足的次要条件</span><br><span class="line">  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序</span><br><span class="line">  [LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;];</span><br><span class="line">   -- 指定查询的记录从哪条至哪条</span><br></pre></td></tr></table></figure>
<p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p>
<h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询表中所有的数据列结果 , 采用 **&quot; \* &quot;** 符号; 但是效率低，不推荐 .</span><br><span class="line"></span><br><span class="line">-- 查询所有学生信息</span><br><span class="line">SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询指定列(学号 , 姓名)</span><br><span class="line">SELECT studentno,studentname FROM student;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>AS 子句作为别名</p>
</blockquote>
<p>作用：</p>
<ul>
<li>可给数据列取一个新别名</li>
<li>可给表取一个新别名</li>
<li>可把经计算或总结的结果用另一个新名称来代替</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 这里是为列取别名(当然as关键词可以省略)</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student;</span><br><span class="line"></span><br><span class="line">-- 使用as也可以为表取别名</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;</span><br><span class="line"></span><br><span class="line">-- 使用as,为查询结果取一个新名字</span><br><span class="line">-- CONCAT()函数拼接字符串</span><br><span class="line">SELECT CONCAT(&#39;姓名:&#39;,studentname) AS 新姓名 FROM student;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>DISTINCT关键字的使用</p>
</blockquote>
<p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- # 查看哪些同学参加了考试(学号) 去除重复项</span><br><span class="line">SELECT * FROM result; -- 查看考试成绩</span><br><span class="line">SELECT studentno FROM result; -- 查看哪些同学参加了考试</span><br><span class="line">SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>使用表达式的列</p>
</blockquote>
<p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p>
<p>应用场景 :</p>
<ul>
<li><p>SELECT语句返回结果列中使用</p>
</li>
<li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p>
</li>
<li><p>DML语句中的 where 条件语句中使用表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- selcet查询中可以使用表达式</span><br><span class="line">SELECT @@auto_increment_increment; -- 查询自增步长</span><br><span class="line">SELECT VERSION(); -- 查询版本号</span><br><span class="line">SELECT 100*3-1 AS 计算结果; -- 表达式</span><br><span class="line"></span><br><span class="line">-- 学员考试成绩集体提分一分查看</span><br><span class="line">SELECT studentno,StudentResult+1 AS &#39;提分后&#39; FROM result;</span><br></pre></td></tr></table></figure></li>
<li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p>
</li>
</ul>
<h3 id="where条件语句"><a href="#where条件语句" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p>
<p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p>
<blockquote>
<p>逻辑操作符</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 满足条件的查询(where)</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩在95-100之间的</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- AND也可以写成 &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询(对应的词:精确查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号同学,要其他同学的成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno<span class="operator">!=</span><span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentno<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>模糊查询 ：比较操作符</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>注意：</p>
<ul>
<li>数值数据类型的记录之间才能进行算术运算 ;</li>
<li>相同数据类型的数据之间才能进行比较 ;</li>
</ul>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 模糊查询 between and \ like \ in \ null</span><br><span class="line"></span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- LIKE</span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 查询姓刘的同学的学号及姓名</span><br><span class="line">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;刘%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学,后面只有一个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;刘_&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学,后面只有两个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;刘__&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中含有 嘉 字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;%嘉%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中含有特殊字符的需要使用转义符号 &#39;\&#39;</span><br><span class="line">-- 自定义转义符关键字: ESCAPE &#39;:&#39;</span><br><span class="line"></span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- IN</span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 查询学号为1000,1001,1002的学生姓名</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentno IN (1000,1001,1002);</span><br><span class="line"></span><br><span class="line">-- 查询地址在北京,南京,河南洛阳的学生</span><br><span class="line">SELECT studentno,studentname,address FROM student</span><br><span class="line">WHERE address IN (&#39;北京&#39;,&#39;南京&#39;,&#39;河南洛阳&#39;);</span><br><span class="line"></span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- NULL 空</span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 查询出生日期没有填写的同学</span><br><span class="line">-- 不能直接写&#x3D;NULL , 这是代表错误的 , 用 is null</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NULL;</span><br><span class="line"></span><br><span class="line">-- 查询出生日期填写的同学</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 查询没有写家庭住址的同学(空字符串不等于null)</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE Address&#x3D;&#39;&#39; OR Address IS NULL;</span><br></pre></td></tr></table></figure>


<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote>
<p>JOIN 对比</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>七种Join：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDw5aZLehIYzwLprCfqdxSjsm2wficHrSEzJiaJBGaKWpatQ7sISib9MgCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>on 和 where 的区别</strong></p>
<p>On 是先筛选后关联，where是先关联后筛选。</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/169737345" >https://zhuanlan.zhihu.com/p/169737345<i class="fas fa-external-link-alt"></i></a></p>
<p>– join （连接的表）on （判断的条件）连接查询</p>
<p>– where 等值查询</p>
<p><strong>ON</strong> should be used to <strong>define the join condition</strong> and WHERE should be used to <strong>filter the data</strong>.</p>
<p><a class="link"   href="https://dataschool.com/how-to-teach-people-sql/difference-between-where-and-on-in-sql/" >https://dataschool.com/how-to-teach-people-sql/difference-between-where-and-on-in-sql/<i class="fas fa-external-link-alt"></i></a></p>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">连接查询</span><br><span class="line">   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span><br><span class="line">内连接 inner join</span><br><span class="line">   查询两个表中的结果集中的交集</span><br><span class="line">外连接 outer join</span><br><span class="line">   左外连接 left join</span><br><span class="line">       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span><br><span class="line">   右外连接 right join</span><br><span class="line">       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span><br><span class="line">       </span><br><span class="line">等值连接和非等值连接</span><br><span class="line"></span><br><span class="line">自连接</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM result;</span><br><span class="line"></span><br><span class="line">&#x2F;*思路:</span><br><span class="line">(1):分析需求,确定查询的列来源于两个类,student result,连接查询</span><br><span class="line">(2):确定使用哪种连接查询?(内连接)</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 右连接(也可实现)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">RIGHT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 等值连接</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s , result r</span><br><span class="line">WHERE r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 左连接 (查询了所有同学,不考试的也会查出来)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 查一下缺考的同学(左连接应用场景)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">WHERE StudentResult IS NULL</span><br><span class="line"></span><br><span class="line">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON sub.subjectno &#x3D; r.subjectno</span><br></pre></td></tr></table></figure>


<blockquote>
<p>自连接</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">自连接</span><br><span class="line">   数据表与自身进行连接</span><br><span class="line"></span><br><span class="line">需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中</span><br><span class="line">    查询父栏目名称和其他子栏目名称</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 创建一个表</span><br><span class="line">CREATE TABLE &#96;category&#96; (</span><br><span class="line">&#96;categoryid&#96; INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#39;主题id&#39;,</span><br><span class="line">&#96;pid&#96; INT(10) NOT NULL COMMENT &#39;父id&#39;,</span><br><span class="line">&#96;categoryName&#96; VARCHAR(50) NOT NULL COMMENT &#39;主题名字&#39;,</span><br><span class="line">PRIMARY KEY (&#96;categoryid&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;9 DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO &#96;category&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;categoryName&#96;)</span><br><span class="line">VALUES(&#39;2&#39;,&#39;1&#39;,&#39;信息技术&#39;),</span><br><span class="line">(&#39;3&#39;,&#39;1&#39;,&#39;软件开发&#39;),</span><br><span class="line">(&#39;4&#39;,&#39;3&#39;,&#39;数据库&#39;),</span><br><span class="line">(&#39;5&#39;,&#39;1&#39;,&#39;美术设计&#39;),</span><br><span class="line">(&#39;6&#39;,&#39;3&#39;,&#39;web开发&#39;),</span><br><span class="line">(&#39;7&#39;,&#39;5&#39;,&#39;ps技术&#39;),</span><br><span class="line">(&#39;8&#39;,&#39;2&#39;,&#39;办公信息&#39;);</span><br><span class="line"></span><br><span class="line">-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)</span><br><span class="line">-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</span><br><span class="line">SELECT a.categoryName AS &#39;父栏目&#39;,b.categoryName AS &#39;子栏目&#39;</span><br><span class="line">FROM category AS a,category AS b</span><br><span class="line">WHERE a.&#96;categoryid&#96;&#x3D;b.&#96;pid&#96;</span><br><span class="line"></span><br><span class="line">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON sub.subjectno &#x3D; r.subjectno</span><br><span class="line"></span><br><span class="line">-- 查询学员及所属的年级(学号,学生姓名,年级名)</span><br><span class="line">SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN grade g</span><br><span class="line">ON s.&#96;GradeId&#96; &#x3D; g.&#96;GradeID&#96;</span><br><span class="line"></span><br><span class="line">-- 查询科目及所属的年级(科目名称,年级名称)</span><br><span class="line">SELECT subjectname AS 科目名称,gradename AS 年级名称</span><br><span class="line">FROM SUBJECT sub</span><br><span class="line">INNER JOIN grade g</span><br><span class="line">ON sub.gradeid &#x3D; g.gradeid</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br></pre></td></tr></table></figure>


<h3 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 排序 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">语法 : ORDER BY</span><br><span class="line">   ORDER BY 语句用于根据指定的列对结果集进行排序。</span><br><span class="line">   ORDER BY 语句默认按照ASC升序对记录进行排序。</span><br><span class="line">   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</span><br><span class="line">   </span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line">-- 按成绩降序排序</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line"></span><br><span class="line">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分页 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span><br><span class="line">好处 : (用户体验,网络传输,查询压力)</span><br><span class="line"></span><br><span class="line">推导:</span><br><span class="line">   第一页 : limit 0,5</span><br><span class="line">   第二页 : limit 5,5</span><br><span class="line">   第三页 : limit 10,5</span><br><span class="line">   ......</span><br><span class="line">   第N页 : limit (pageNo-1)*pageSzie,pageSzie</span><br><span class="line">   [pageNo:页码,</span><br><span class="line">   pageSize:单页面显示条数,</span><br><span class="line">   (n-1)*pageSize:起始值，</span><br><span class="line">   n:当前页</span><br><span class="line">   数据总数&#x2F;页面大小&#x3D;总页数]</span><br><span class="line">   </span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 每页显示5条数据</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY StudentResult DESC , studentno</span><br><span class="line">LIMIT 0,5</span><br><span class="line"></span><br><span class="line">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;JAVA第一学年&#39; AND StudentResult &gt;&#x3D;80</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line">LIMIT 0,10</span><br></pre></td></tr></table></figure>


<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 子查询 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">什么是子查询?</span><br><span class="line">   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句</span><br><span class="line">   嵌套查询可由多个子查询组成,求解的方式是由里及外;</span><br><span class="line">   子查询返回的结果一般都是集合,故而建议使用IN关键字;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span><br><span class="line">-- 方法一:使用连接查询</span><br><span class="line">SELECT studentno,r.subjectno,StudentResult</span><br><span class="line">FROM result r</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.&#96;SubjectNo&#96;&#x3D;sub.&#96;SubjectNo&#96;</span><br><span class="line">WHERE subjectname &#x3D; &#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">-- 方法二:使用子查询(执行顺序:由里及外)</span><br><span class="line">SELECT studentno,subjectno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE subjectno&#x3D;(</span><br><span class="line">   SELECT subjectno FROM &#96;subject&#96;</span><br><span class="line">   WHERE subjectname &#x3D; &#39;数据库结构-1&#39;</span><br><span class="line">)</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span><br><span class="line">-- 方法一:使用连接查询</span><br><span class="line">SELECT s.studentno,studentname</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON s.&#96;StudentNo&#96; &#x3D; r.&#96;StudentNo&#96;</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON sub.&#96;SubjectNo&#96; &#x3D; r.&#96;SubjectNo&#96;</span><br><span class="line">WHERE subjectname &#x3D; &#39;高等数学-2&#39; AND StudentResult&gt;&#x3D;80</span><br><span class="line"></span><br><span class="line">-- 方法二:使用连接查询+子查询</span><br><span class="line">-- 分数不小于80分的学生的学号和姓名</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.&#96;StudentNo&#96;&#x3D;r.&#96;StudentNo&#96;</span><br><span class="line">WHERE StudentResult&gt;&#x3D;80</span><br><span class="line"></span><br><span class="line">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.&#96;StudentNo&#96;&#x3D;r.&#96;StudentNo&#96;</span><br><span class="line">WHERE StudentResult&gt;&#x3D;80 AND subjectno&#x3D;(</span><br><span class="line">   SELECT subjectno FROM &#96;subject&#96;</span><br><span class="line">   WHERE subjectname &#x3D; &#39;高等数学-2&#39;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 方法三:使用子查询</span><br><span class="line">-- 分步写简单sql语句,然后将其嵌套起来</span><br><span class="line">SELECT studentno,studentname FROM student WHERE studentno IN(</span><br><span class="line">   SELECT studentno FROM result WHERE StudentResult&gt;&#x3D;80 AND subjectno&#x3D;(</span><br><span class="line">       SELECT subjectno FROM &#96;subject&#96; WHERE subjectname &#x3D; &#39;高等数学-2&#39;</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">练习题目:</span><br><span class="line">   查 C语言-1 的前5名学生的成绩信息(学号,姓名,分数)</span><br><span class="line">   使用子查询,查询郭靖同学所在的年级名称</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>


<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ABS(-8);  &#x2F;*绝对值*&#x2F;</span><br><span class="line">SELECT CEILING(9.4); &#x2F;*向上取整*&#x2F;</span><br><span class="line">SELECT FLOOR(9.4);   &#x2F;*向下取整*&#x2F;</span><br><span class="line">SELECT RAND();  &#x2F;*随机数,返回一个0-1之间的随机数*&#x2F;</span><br><span class="line">SELECT SIGN(0); &#x2F;*符号函数: 负数返回-1,正数返回1,0返回0*&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>字符串函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CHAR_LENGTH(&#39;狂神说坚持就能成功&#39;); &#x2F;*返回字符串包含的字符数*&#x2F;</span><br><span class="line">SELECT CONCAT(&#39;我&#39;,&#39;爱&#39;,&#39;程序&#39;);  &#x2F;*合并字符串,参数可以有多个*&#x2F;</span><br><span class="line">SELECT INSERT(&#39;我爱编程helloworld&#39;,1,2,&#39;超级热爱&#39;);  &#x2F;*替换字符串,从某个位置开始替换某个长度*&#x2F;</span><br><span class="line">SELECT LOWER(&#39;KuangShen&#39;); &#x2F;*小写*&#x2F;</span><br><span class="line">SELECT UPPER(&#39;KuangShen&#39;); &#x2F;*大写*&#x2F;</span><br><span class="line">SELECT LEFT(&#39;hello,world&#39;,5);   &#x2F;*从左边截取*&#x2F;</span><br><span class="line">SELECT RIGHT(&#39;hello,world&#39;,5);  &#x2F;*从右边截取*&#x2F;</span><br><span class="line">SELECT REPLACE(&#39;狂神说坚持就能成功&#39;,&#39;坚持&#39;,&#39;努力&#39;);  &#x2F;*替换字符串*&#x2F;</span><br><span class="line">SELECT SUBSTR(&#39;狂神说坚持就能成功&#39;,4,6); &#x2F;*截取字符串,开始和长度*&#x2F;</span><br><span class="line">SELECT REVERSE(&#39;狂神说坚持就能成功&#39;); &#x2F;*反转</span><br><span class="line"></span><br><span class="line">-- 查询姓周的同学,改成邹</span><br><span class="line">SELECT REPLACE(studentname,&#39;周&#39;,&#39;邹&#39;) AS 新名字</span><br><span class="line">FROM student WHERE studentname LIKE &#39;周%&#39;;</span><br></pre></td></tr></table></figure>
<p><strong>日期和时间函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CURRENT_DATE();   &#x2F;*获取当前日期*&#x2F;</span><br><span class="line">SELECT CURDATE();   &#x2F;*获取当前日期*&#x2F;</span><br><span class="line">SELECT NOW();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line">SELECT LOCALTIME();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line">SELECT SYSDATE();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 获取年月日,时分秒</span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT MONTH(NOW());</span><br><span class="line">SELECT DAY(NOW());</span><br><span class="line">SELECT HOUR(NOW());</span><br><span class="line">SELECT MINUTE(NOW());</span><br><span class="line">SELECT SECOND(NOW());</span><br></pre></td></tr></table></figure>
<p><strong>系统信息函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT VERSION();  &#x2F;*版本*&#x2F;</span><br><span class="line">SELECT USER();     &#x2F;*用户*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回数字字段或表达式列作统计，返回一列的总和。</td>
</tr>
<tr>
<td>AVG()</td>
<td>通常为数值字段或表达列作统计，返回一列的平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td>
</tr>
<tr>
<td>MIN()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 聚合函数</span><br><span class="line">&#x2F;*COUNT:非空的*&#x2F;</span><br><span class="line">SELECT COUNT(studentname) FROM student;</span><br><span class="line">SELECT COUNT(*) FROM student;</span><br><span class="line">SELECT COUNT(1) FROM student;  &#x2F;*推荐*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span><br><span class="line">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span><br><span class="line">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span><br><span class="line">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span><br><span class="line">&#x2F;*</span><br><span class="line">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span><br><span class="line"></span><br><span class="line">下面它们之间的一些对比：</span><br><span class="line"></span><br><span class="line">1）在表没有主键时，count(1)比count(*)快</span><br><span class="line">2）有主键时，主键作为计算条件，count(主键)效率最高；</span><br><span class="line">3）若表格只有一个字段，则count(*)效率较高。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT SUM(StudentResult) AS 总和 FROM result;</span><br><span class="line">SELECT AVG(StudentResult) AS 平均分 FROM result;</span><br><span class="line">SELECT MAX(StudentResult) AS 最高分 FROM result;</span><br><span class="line">SELECT MIN(StudentResult) AS 最低分 FROM result;</span><br></pre></td></tr></table></figure>
<p><strong>题目：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询不同课程的平均分,最高分,最低分</span><br><span class="line">-- 前提:根据不同的课程进行分组</span><br><span class="line"></span><br><span class="line">SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分</span><br><span class="line">FROM result AS r</span><br><span class="line">INNER JOIN &#96;subject&#96; AS s</span><br><span class="line">ON r.subjectno &#x3D; s.subjectno</span><br><span class="line">GROUP BY r.subjectno</span><br><span class="line">HAVING 平均分&gt;80;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">where 的条件不能使用聚合函数</span><br><span class="line">where写在group by前面.</span><br><span class="line">要是放在分组后面的筛选</span><br><span class="line">要使用HAVING..</span><br><span class="line">因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MD5 加密</p>
</blockquote>
<p><strong>一、MD5简介</strong></p>
<p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p>
<p><strong>二、实现数据加密</strong></p>
<p>新建一个表 testmd5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;testmd5&#96; (</span><br><span class="line"> &#96;id&#96; INT(4) NOT NULL,</span><br><span class="line"> &#96;name&#96; VARCHAR(20) NOT NULL,</span><br><span class="line"> &#96;pwd&#96; VARCHAR(50) NOT NULL,</span><br><span class="line"> PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure>
<p>插入一些数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(1,&#39;kuangshen&#39;,&#39;123456&#39;),(2,&#39;qinjiang&#39;,&#39;456789&#39;)</span><br></pre></td></tr></table></figure>
<p>如果我们要对pwd这一列数据进行加密，语法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update testmd5 set pwd &#x3D; md5(pwd);</span><br></pre></td></tr></table></figure>
<p>如果单独对某个用户(如kuangshen)的密码加密：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(3,&#39;kuangshen2&#39;,&#39;123456&#39;)</span><br><span class="line">update testmd5 set pwd &#x3D; md5(pwd) where name &#x3D; &#39;kuangshen2&#39;;</span><br></pre></td></tr></table></figure>
<p>插入新的数据自动加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(4,&#39;kuangshen3&#39;,md5(&#39;123456&#39;));</span><br></pre></td></tr></table></figure>
<p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM testmd5 WHERE &#96;name&#96;&#x3D;&#39;kuangshen&#39; AND pwd&#x3D;MD5(&#39;123456&#39;);</span><br></pre></td></tr></table></figure>




<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210217103312123.59blg5gt2fs0.png" alt="image-20210217103312123"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 内置函数 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 数值函数</span><br><span class="line">abs(x)            -- 绝对值 abs(-10.9) &#x3D; 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) &#x3D; 1,234,567.46</span><br><span class="line">ceil(x)            -- 向上取整 ceil(10.1) &#x3D; 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) &#x3D; 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)        -- m%n m mod n 求余 10%3&#x3D;1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)        -- m^n</span><br><span class="line">sqrt(x)            -- 算术平方根</span><br><span class="line">rand()            -- 随机数</span><br><span class="line">truncate(x, d)    -- 截取d位小数</span><br><span class="line"></span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                    -- 当前日期</span><br><span class="line">current_time();                    -- 当前时间</span><br><span class="line">date(&#39;yyyy-mm-dd hh:ii:ss&#39;);    -- 获取日期部分</span><br><span class="line">time(&#39;yyyy-mm-dd hh:ii:ss&#39;);    -- 获取时间部分</span><br><span class="line">date_format(&#39;yyyy-mm-dd hh:ii:ss&#39;, &#39;%d %y %a %d %m %b %j&#39;);    -- 格式化时间</span><br><span class="line">unix_timestamp();                -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line"></span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)            -- string长度，字节</span><br><span class="line">char_length(string)        -- string的字符个数</span><br><span class="line">substring(str, position [,length])        -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])    -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)            -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position])    -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)            -- 去除前端空格</span><br><span class="line">repeat(string, count)    -- 重复count次</span><br><span class="line">rpad(string, length, pad)    --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)            -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line"></span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure>


<h2 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h2><blockquote>
<p>什么是事务</p>
</blockquote>
<ul>
<li>事务就是将一组SQL语句放在同一批次内去执行</li>
<li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li>
<li>MySQL事务处理只支持InnoDB和BDB数据表类型</li>
</ul>
<blockquote>
<p>事务的ACID原则  百度 ACID</p>
</blockquote>
<p><strong>原子性(Atomic)</strong></p>
<ul>
<li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
</ul>
<p><strong>一致性(Consist)</strong></p>
<ul>
<li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li>
</ul>
<p><strong>隔离性(Isolated)</strong></p>
<ul>
<li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li>
</ul>
<p><strong>持久性(Durable)</strong></p>
<ul>
<li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li>
</ul>
<blockquote>
<p>一句话解释：</p>
</blockquote>
<p><strong>原子性</strong>：要么都成功，要么都失败</p>
<p><strong>一致性</strong>：事物前后的数据完整性要保证一致，1000</p>
<p><strong>持久性</strong>：事物一旦提交就不可逆，被持久化到数据库中</p>
<p><strong>隔离性</strong>：事物的隔离性是指多个用户并发访问数据库时，数据库为每一个用户开启的事物，不能被其他事物的操作数据所干扰，事务之间需要互相隔离</p>
<blockquote>
<p>隔离所导致的一些问题</p>
</blockquote>
<p><strong>（脏读）dirty read</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210217104017748.7k5ocwq7meg0.png" alt="image-20210217104017748"></p>
<p><strong>不可重复读：</strong></p>
<p>在一个事务哪读区列表中的某一行数据，多次读区结果不相同（这个不一定是错的，只是某些场合不合适）</p>
<p><strong>虚读（幻读）</strong></p>
<p>是指在一个事务那读区到了别的事物插入的数据，导致前后读取不一致</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>mysql是默认开启事务自动提交的</p>
<blockquote>
<p><strong>基本语法</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 使用set语句来改变自动提交模式</span><br><span class="line">SET autocommit &#x3D; 0;   &#x2F;*关闭*&#x2F;</span><br><span class="line">SET autocommit &#x3D; 1;   &#x2F;*开启*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 注意:</span><br><span class="line">--- 1.MySQL中默认是自动提交</span><br><span class="line">--- 2.使用事务时应先关闭自动提交</span><br><span class="line"></span><br><span class="line">-- 开始一个事务,标记事务的起始点</span><br><span class="line">START TRANSACTION  </span><br><span class="line"></span><br><span class="line">-- 提交一个事务给数据库</span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line">-- 将事务回滚,数据回到本次事务的初始状态</span><br><span class="line">ROLLBACK</span><br><span class="line"></span><br><span class="line">-- 还原MySQL数据库的自动提交</span><br><span class="line">SET autocommit &#x3D;1;</span><br><span class="line"></span><br><span class="line">-- 保存点</span><br><span class="line">SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210218091458193.rikanbyaiy8.png" alt="image-20210218091458193"></p>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">课堂测试题目</span><br><span class="line"></span><br><span class="line">A在线买一款价格为500元商品,网上银行转账.</span><br><span class="line">A的银行卡余额为2000,然后给商家B支付500.</span><br><span class="line">商家B一开始的银行卡余额为10000</span><br><span class="line"></span><br><span class="line">创建数据库shop和创建表account并插入2条数据</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE &#96;shop&#96;CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">USE &#96;shop&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;account&#96; (</span><br><span class="line">&#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">&#96;name&#96; VARCHAR(32) NOT NULL,</span><br><span class="line">&#96;cash&#96; DECIMAL(9,2) NOT NULL,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO account (&#96;name&#96;,&#96;cash&#96;)</span><br><span class="line">VALUES(&#39;A&#39;,2000.00),(&#39;B&#39;,10000.00)</span><br><span class="line"></span><br><span class="line">-- 转账实现</span><br><span class="line">SET autocommit &#x3D; 0; -- 关闭自动提交</span><br><span class="line">START TRANSACTION;  -- 开始一个事务,标记事务的起始点</span><br><span class="line">UPDATE account SET cash&#x3D;cash-500 WHERE &#96;name&#96;&#x3D;&#39;A&#39;;</span><br><span class="line">UPDATE account SET cash&#x3D;cash+500 WHERE &#96;name&#96;&#x3D;&#39;B&#39;;</span><br><span class="line">COMMIT; -- 提交事务</span><br><span class="line"># rollback;</span><br><span class="line">SET autocommit &#x3D; 1; -- 恢复自动提交</span><br></pre></td></tr></table></figure>


<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><a class="link"   href="https://blog.codinglabs.org/articles/theory-of-mysql-index.html" >MySQL索引背后的数据结构及算法原理<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>MySQL 官方对索引的定义为：索引（index）是帮助MySQL搞笑获取数据的数据结构。</p>
<p>提取句子的主干，就可以得到索引的本质，索引就是数据结构</p>
</blockquote>
<blockquote>
<p>索引的作用</p>
</blockquote>
<ul>
<li>提高查询速度</li>
<li>确保数据的唯一性</li>
<li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li>
<li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li>
<li>全文检索字段进行搜索优化.</li>
</ul>
<blockquote>
<p>分类</p>
</blockquote>
<ul>
<li>主键索引 (Primary Key)</li>
<li>唯一索引 (Unique)</li>
<li>常规索引 (Index)</li>
<li>全文索引 (FullText)</li>
</ul>
<blockquote>
<p>主键索引</p>
</blockquote>
<p>主键 : 某一个属性组能<strong>唯一标识</strong>一条记录（不可重复，只能有一个列）</p>
<p>特点 :</p>
<ul>
<li>最常见的索引类型</li>
<li>确保数据记录的唯一性</li>
<li>确定特定数据记录在数据库中的位置</li>
</ul>
<blockquote>
<p>唯一索引</p>
</blockquote>
<p>作用 : <strong>避免同一个表中某数据列中的值重复</strong></p>
<p>与主键索引的区别</p>
<ul>
<li>主键索引只能有一个</li>
<li>唯一索引可能有多个</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;Grade&#96;(</span><br><span class="line">  &#96;GradeID&#96; INT(11) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">  &#96;GradeName&#96; VARCHAR(32) NOT NULL UNIQUE</span><br><span class="line">   -- 或 UNIQUE KEY &#96;GradeID&#96; (&#96;GradeID&#96;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常规索引</p>
</blockquote>
<p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>index 和 key 关键字都可以设置常规索引</li>
<li>应加在查询找条件的字段</li>
<li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;result&#96;(</span><br><span class="line">   -- 省略一些代码</span><br><span class="line">  INDEX&#x2F;KEY &#96;ind&#96; (&#96;studentNo&#96;,&#96;subjectNo&#96;) -- 创建表时添加</span><br><span class="line">)</span><br><span class="line">-- 创建后添加</span><br><span class="line">ALTER TABLE &#96;result&#96; ADD INDEX &#96;ind&#96;(&#96;studentNo&#96;,&#96;subjectNo&#96;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全文索引</p>
</blockquote>
<p>百度搜索：全文索引</p>
<p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>只能用于MyISAM类型的数据表</li>
<li>只能用于CHAR , VARCHAR , TEXT数据列类型</li>
<li>适合大型数据集</li>
</ul>
<h3 id="索引的使用："><a href="#索引的使用：" class="headerlink" title="索引的使用："></a>索引的使用：</h3><ul>
<li>创建表的时候给字段增加索引</li>
<li>创建完表后，增加索引</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">#方法一：创建表时</span><br><span class="line">  　　CREATE TABLE 表名 (</span><br><span class="line">               字段名1 数据类型 [完整性约束条件…],</span><br><span class="line">               字段名2 数据类型 [完整性约束条件…],</span><br><span class="line">               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">               [索引名] (字段名[(长度)] [ASC |DESC])</span><br><span class="line">               );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名</span><br><span class="line">                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                            索引名 (字段名[(长度)] [ASC |DESC]) ;</span><br><span class="line">                           </span><br><span class="line">                           </span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br><span class="line">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#显示索引信息: SHOW INDEX FROM student;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*增加全文索引*&#x2F;</span><br><span class="line">ALTER TABLE &#96;school&#96;.&#96;student&#96; ADD FULLTEXT INDEX &#96;studentname&#96; (&#96;StudentName&#96;);</span><br><span class="line"></span><br><span class="line">&#x2F;*EXPLAIN : 分析SQL语句执行性能*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM student WHERE studentno&#x3D;&#39;1000&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;*使用全文索引*&#x2F;</span><br><span class="line">-- 全文搜索通过 MATCH() 函数完成。</span><br><span class="line">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span><br><span class="line">EXPLAIN SELECT *FROM student WHERE MATCH(studentname) AGAINST(&#39;love&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况</span><br><span class="line"></span><br><span class="line">MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</span><br><span class="line">MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</span><br><span class="line">只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</span><br><span class="line">测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>拓展：测试索引</p>
</blockquote>
<p><strong>建表app_user：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;app_user&#96; (</span><br><span class="line">&#96;id&#96; bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">&#96;name&#96; varchar(50) DEFAULT &#39;&#39; COMMENT &#39;用户昵称&#39;,</span><br><span class="line">&#96;email&#96; varchar(50) NOT NULL COMMENT &#39;用户邮箱&#39;,</span><br><span class="line">&#96;phone&#96; varchar(20) DEFAULT &#39;&#39; COMMENT &#39;手机号&#39;,</span><br><span class="line">&#96;gender&#96; tinyint(4) unsigned DEFAULT &#39;0&#39; COMMENT &#39;性别（0:男；1：女）&#39;,</span><br><span class="line">&#96;password&#96; varchar(100) NOT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">&#96;age&#96; tinyint(4) DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;,</span><br><span class="line">&#96;create_time&#96; datetime DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">&#96;update_time&#96; timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATECURRENT_TIMESTAMP,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;app用户表&#39;</span><br></pre></td></tr></table></figure>
<p><strong>批量插入数据：100w</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP FUNCTION IF EXISTS mock_data;</span><br><span class="line">DELIMITER $$ -- 写函数之前必须要写，标志</span><br><span class="line">CREATE FUNCTION mock_data()</span><br><span class="line">RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE num INT DEFAULT 1000000;</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">WHILE i &lt; num DO</span><br><span class="line">-- 插入语句</span><br><span class="line">  INSERT INTO app_user(&#96;name&#96;, &#96;email&#96;, &#96;phone&#96;, &#96;gender&#96;, &#96;password&#96;, &#96;age&#96;)</span><br><span class="line">   VALUES(CONCAT(&#39;用户&#39;, i), &#39;24736743@qq.com&#39;, CONCAT(&#39;18&#39;, FLOOR(RAND()*(999999999-100000000)+100000000)),FLOOR(RAND()*2),UUID(), FLOOR(RAND()*100));</span><br><span class="line">  SET i &#x3D; i + 1;</span><br><span class="line">END WHILE;</span><br><span class="line">RETURN i;</span><br><span class="line">END;</span><br><span class="line">SELECT mock_data();</span><br></pre></td></tr></table></figure>
<p><strong>索引效率测试</strong></p>
<p>无索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;; -- 查看耗时</span><br><span class="line">SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">          id: 1</span><br><span class="line">select_type: SIMPLE</span><br><span class="line">       table: app_user</span><br><span class="line">  partitions: NULL</span><br><span class="line">        type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">        key: NULL</span><br><span class="line">    key_len: NULL</span><br><span class="line">        ref: NULL</span><br><span class="line">        rows: 992759</span><br><span class="line">    filtered: 10.00</span><br><span class="line">      Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>创建索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE INDEX idx_app_user_name ON app_user(name);</span><br></pre></td></tr></table></figure>
<p>测试普通索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">          id: 1</span><br><span class="line">select_type: SIMPLE</span><br><span class="line">       table: app_user</span><br><span class="line">  partitions: NULL</span><br><span class="line">        type: ref</span><br><span class="line">possible_keys: idx_app_user_name</span><br><span class="line">        key: idx_app_user_name</span><br><span class="line">    key_len: 203</span><br><span class="line">        ref: const</span><br><span class="line">        rows: 1</span><br><span class="line">    filtered: 100.00</span><br><span class="line">      Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>索引在小数据量的时候，用处不大，但是在大数据的时候，区别十分明显～</p>
<blockquote>
<p>索引准则</p>
</blockquote>
<ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表建议不要加索引</li>
<li>索引一般应加在查找条件的字段</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span><br><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br><span class="line"></span><br><span class="line">-- 不同的存储引擎支持的索引类型也不一样</span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote>
<p>使用SQLyog 创建用户，并授予权限演示</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Jf7deolwQa44rXvicIhXZ0NGL4sZKg8nicBGrYlEBJh1V3ymJ4WzBx9zXsIZyPYFADJBzn0ibCmgiauA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<blockquote>
<p>基本命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 用户和权限管理 *&#x2F; ------------------</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES</span><br><span class="line"></span><br><span class="line">-- 增加用户 CREATE USER kuangshen IDENTIFIED BY &#39;123456&#39;</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">  - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">  - 只能创建用户，不能赋予权限。</span><br><span class="line">  - 用户名，注意引号：如 &#39;user_name&#39;@&#39;192.168.1.1&#39;</span><br><span class="line">  - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">  - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"></span><br><span class="line">-- 重命名用户 RENAME USER kuangshen TO kuangshen2</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line"></span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD &#x3D; PASSWORD(&#39;密码&#39;)    -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 &#x3D; PASSWORD(&#39;密码&#39;)    -- 为指定用户设置密码</span><br><span class="line"></span><br><span class="line">-- 删除用户 DROP USER kuangshen2</span><br><span class="line">DROP USER 用户名</span><br><span class="line"></span><br><span class="line">-- 分配权限&#x2F;添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#39;password&#39;]</span><br><span class="line">  - all privileges 表示所有权限</span><br><span class="line">  - *.* 表示所有库的所有表</span><br><span class="line">  - 库名.表名 表示某库下面的某表</span><br><span class="line"></span><br><span class="line">-- 查看权限   SHOW GRANTS FOR root@localhost;</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">   -- 查看当前用户权限</span><br><span class="line">  SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line"></span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名    -- 撤销所有权限</span><br></pre></td></tr></table></figure>
<blockquote>
<p>权限解释</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER    -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE    -- 更改或取消已存储的子程序</span><br><span class="line">CREATE    -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE    -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES        -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER        -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW        -- 允许使用CREATE VIEW</span><br><span class="line">DELETE    -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE        -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX     -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT    -- 允许使用INSERT</span><br><span class="line">LOCK TABLES        -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES    -- 未被实施</span><br><span class="line">RELOAD    -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT    -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE    -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT    -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES    -- 显示所有数据库</span><br><span class="line">SHOW VIEW    -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER    -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE    -- 允许使用UPDATE</span><br><span class="line">USAGE    -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 表维护 *&#x2F;</span><br><span class="line"></span><br><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option &#x3D; &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>


<h3 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h3><p>数据库备份必要性</p>
<ul>
<li>保证重要数据不丢失</li>
<li>数据转移</li>
</ul>
<p>MySQL数据库备份方法</p>
<ul>
<li>mysqldump备份工具</li>
<li>数据库管理工具,如SQLyog</li>
<li>直接拷贝数据库文件和相关配置文件</li>
</ul>
<p><strong>mysqldump客户端</strong></p>
<p>作用 :</p>
<ul>
<li>转储数据库</li>
<li>搜集数据库进行备份</li>
<li>将数据转移到另一个SQL服务器,不一定是MySQL服务器</li>
</ul>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Jf7deolwQa44rXvicIhXZ0NzgWJWeyYYcf1Dy3ibfN66SiaZQmqTF3Hv8HBjr1zIowXh201pEjUzyJw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 导出</span><br><span class="line">1. 导出一张表 -- mysqldump -uroot -p123456 school student &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">2. 导出多张表 -- mysqldump -uroot -p123456 school student result &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">3. 导出所有表 -- mysqldump -uroot -p123456 school &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">4. 导出一个库 -- mysqldump -uroot -p123456 -B school &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line"></span><br><span class="line">可以-w携带备份条件</span><br><span class="line"></span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：-- source D:&#x2F;a.sql</span><br><span class="line">　　source 备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure>


<h2 id="规范化数据库设计"><a href="#规范化数据库设计" class="headerlink" title="规范化数据库设计"></a>规范化数据库设计</h2><h3 id="为什么需要数据库设计"><a href="#为什么需要数据库设计" class="headerlink" title="为什么需要数据库设计"></a>为什么需要数据库设计</h3><p><strong>当数据库比较复杂时我们需要设计数据库</strong></p>
<p><strong>糟糕的数据库设计 :</strong> </p>
<ul>
<li>数据冗余,存储空间浪费</li>
<li>数据更新和插入的异常</li>
<li>程序性能差</li>
</ul>
<p><strong>良好的数据库设计 :</strong> </p>
<ul>
<li>节省数据的存储空间</li>
<li>能够保证数据的完整性</li>
<li>方便进行数据库应用系统的开发</li>
</ul>
<p> <strong>软件项目开发周期中数据库设计 :</strong></p>
<ul>
<li>需求分析阶段: 分析客户的业务和数据处理需求</li>
<li>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</li>
</ul>
<p><strong>设计数据库步骤</strong></p>
<ul>
<li><p>收集信息</p>
</li>
<li><ul>
<li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li>
</ul>
</li>
<li><p>标识实体[Entity]</p>
</li>
<li></li>
<li><ul>
<li>标识数据库要管理的关键对象或实体,实体一般是名词</li>
</ul>
</li>
<li><p>标识每个实体需要存储的详细信息[Attribute]</p>
</li>
<li><p>标识实体之间的关系[Relationship]</p>
</li>
</ul>
<h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p><strong>问题 : 为什么需要数据规范化?</strong></p>
<p>不合规范的表设计会导致的问题：</p>
<ul>
<li><p>信息重复</p>
</li>
<li><p>更新异常</p>
</li>
<li><p>插入异常</p>
</li>
<li><ul>
<li>无法正确表示信息</li>
</ul>
</li>
<li><p>删除异常</p>
</li>
<li><ul>
<li>丢失有效信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式</p>
</blockquote>
<p><strong>第一范式 (1st NF)</strong></p>
<p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p>
<p><strong>原子性</strong>：<strong>保证每一列不可再分</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210218115552323.1o92uy9a94ww.png" alt="image-20210218115552323"></p>
<p><strong>第二范式(2nd NF)</strong></p>
<p><strong>前提</strong>：满足第一范式</p>
<p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p>
<p>第二范式要求<strong>每个表只描述一件事情</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210218115144469.1y2662u0gh6o.png" alt="image-20210218115144469"></p>
<p><strong>第三范式(3rd NF)</strong></p>
<p>前提：满足第一范式和第二范式</p>
<p>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.</p>
<p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210218115523217.3ooi64tynew0.png" alt="image-20210218115523217"></p>
<p><strong>规范化和性能的关系</strong></p>
<p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p>
<p>在数据规范化的同时 , 要综合考虑数据库的性能</p>
<p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p>
<p>通过在给定的表中插入计算列,以方便查询</p>
<h3 id="JDBC（重点）"><a href="#JDBC（重点）" class="headerlink" title="JDBC（重点）"></a>JDBC（重点）</h3><h4 id="10-1数据库驱动"><a href="#10-1数据库驱动" class="headerlink" title="10.1数据库驱动"></a>10.1数据库驱动</h4><p>驱动：声卡，显卡，数据库</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210218125024282.28vw3vtf76kg.png" alt="image-20210218125024282"></p>
<p>我们的程序会通过数据库驱动，和数据库打交道</p>
<h4 id="10-2-JDBC"><a href="#10-2-JDBC" class="headerlink" title="10.2 JDBC"></a>10.2 JDBC</h4><p>SUN 公司为了简化 开发人员的对数据库统一的操作，提供了一个（java数据库操作的）规范，俗称JDBC。这些规范的实现是由具体的厂商去做。</p>
<p>对于开发人员，我们只需要加一层JDBC就可以了</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/mysql/image-20210218125439332.2jbc2bzvs7m0.png" alt="image-20210218125439332"></p>
<p>Java.sql</p>
<p>Javax.sql</p>
<p>还需要导入一个数据库驱动的包</p>
<h4 id="10-3-第一个jdbc-程序"><a href="#10-3-第一个jdbc-程序" class="headerlink" title="10.3 第一个jdbc 程序"></a>10.3 第一个jdbc 程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deom01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException</span>&#123;</span><br><span class="line">        <span class="comment">//1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">//固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 用户信息和url useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String usename = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 连接成功，数据库对象</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, usename, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行sql的对象 Statement 执行sql的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行sql的对象去执行sql，可能存在结果，返回</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql); <span class="comment">//返回的结果集,结果封装了我们全部的查询结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span>+resultSet.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birth=&quot;</span>+resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>步骤总结：</p>
<ol>
<li>加载驱动</li>
<li>连接数据库DriverManager</li>
<li>获得执行sql的对象 Statement</li>
<li>获得返回的结果及</li>
<li>释放连接</li>
</ol>
<blockquote>
<p>DriverManager </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">//固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, usename, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connection 代表数据库</span></span><br><span class="line"><span class="comment">// 数据库设置自动提交</span></span><br><span class="line"><span class="comment">// 事务提交</span></span><br><span class="line"><span class="comment">// 事务回滚</span></span><br><span class="line"></span><br><span class="line">connection.rollback();</span><br><span class="line">connection.commit();</span><br><span class="line">connection.setAutoCommit();</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. 用户信息和url useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String usename = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql 默认端口是3306</span></span><br><span class="line"><span class="comment">//jdbc:mysql://主机地址：端口号/数据库名？参数1&amp;参数2&amp;参数3</span></span><br><span class="line"><span class="comment">//oracle -1521</span></span><br><span class="line"><span class="comment">//jdbc:oracle:thin:@localhost:8521:sid </span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>Statement 执行sql的对象 PrepareStatement 执行sql的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">statement.executeQuery(); <span class="comment">//查询操作返回ResultSet</span></span><br><span class="line">statement.execute(); <span class="comment">//执行任何sql</span></span><br><span class="line">statement.executeUpdate(); <span class="comment">//更新插入删除都是用这个，返回的是一个受影响的行数</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>ResultSet 查询的结果集：封装了所有的查询结果</p>
</blockquote>
<p>获得指定的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.getObject(); <span class="comment">// 在不知道类型的情况下使用</span></span><br><span class="line"><span class="comment">// 如果知道列的类型就使用指定的类型</span></span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">resultSet.getDate();</span><br></pre></td></tr></table></figure>
<p>遍历，指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.beforeFirst(); <span class="comment">// 移动到最前面</span></span><br><span class="line">resultSet.afterLast(); <span class="comment">// 移动到最后一个数据</span></span><br><span class="line">resultSet.next(); <span class="comment">// 移动到下一个数据</span></span><br><span class="line">resultSet.previous(); <span class="comment">// 移动到前一行</span></span><br><span class="line">resultSet.absolute(row); <span class="comment">//移动到指定的行数</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6.释放连接</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close(); <span class="comment">// 耗资源，用完就关掉</span></span><br></pre></td></tr></table></figure>


<h3 id="statement对象"><a href="#statement对象" class="headerlink" title="statement对象"></a>statement对象</h3><p>Jdbc 中的 statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查语句即可</p>
<p>Statement对象的executeUpdate 方法，用于向数据库发送增删改查的sql语句，executeUpdate执行完后，将会返回一个整数（即增删改查语句导致了数据库几行数据发生了变化）</p>
<p>Statement.executeQuery 方法用于向数据库发送查询语句，executeQuery 方法返回代表查询结果的ResultSet对象</p>
<blockquote>
<p>CRUD 操作-create</p>
<p>使用executeUpdate(String sql)方法完成数据添加操作，实例操作：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st =conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;insert into user (...) values (...)&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;插入成功！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD 操作-delete</p>
<p>使用executeUpdate(String sql)方法完成数据添加操作，实例操作：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st =conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;delete from user where id=1;</span></span><br><span class="line"><span class="string">int num = st.executeUpdate(sql);</span></span><br><span class="line"><span class="string">if(num&gt;0)&#123;</span></span><br><span class="line"><span class="string">  System.out.println(&quot;</span>删除成功！<span class="string">&quot;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD 操作-update</p>
<p>使用executeUpdate(String sql)方法完成数据添加操作，实例操作：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st =conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;update user set name=&#x27;&#x27; where name=&#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;插入成功！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD 操作-read </p>
<p>使用executeUpdate(String sql)方法完成数据添加操作，实例操作：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st =conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;select * from user where id=1&quot;</span>;</span><br><span class="line">ResultSet rs = st.executeQuery(sql); <span class="comment">// 从查询速率来考虑</span></span><br><span class="line"><span class="keyword">while</span>(rs.next)&#123;</span><br><span class="line">  <span class="comment">// 根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li>提取工具类</li>
<li>编写增删改查的方法executeUpdate</li>
</ol>
<p><strong>工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;/Users/yuxuan/coding/IDEA/JDBC_demo1/src/db.properties&quot;</span>));</span><br><span class="line">            properties.load(bufferedReader);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1. 驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>操作类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson02;<span class="comment">//import lesson02.utils.JdbcUtils;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection(); <span class="comment">// 获取数据库的连接</span></span><br><span class="line">            st = conn.createStatement(); <span class="comment">// 获取sql的执行对象</span></span><br><span class="line">            <span class="comment">// 插入语句</span></span><br><span class="line"><span class="comment">//            String sql = &quot;INSERT INTO `users`(id,NAME,PASSWORD,email,birthday)&quot; +</span></span><br><span class="line"><span class="comment">//                    &quot;VALUES(1,&#x27;yuxuan&#x27;,&#x27;123456&#x27;,&#x27;zs@sina.com&#x27;,&#x27;1980-12-04&#x27;)&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除语句</span></span><br><span class="line"><span class="comment">//            String sql = &quot;delete from `users` where id = 1&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新语句</span></span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;update `users` set `name`=&#x27;yuxuan&#x27;,`email`=&#x27;624677306@qq.com&#x27; where id =1&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;插入成功&quot;);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;删除成功&quot;);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>查询</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson02;<span class="comment">//import lesson02.utils.JdbcUtils;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection(); <span class="comment">// 获取数据库的连接</span></span><br><span class="line">            st = conn.createStatement(); <span class="comment">// 获取sql的执行对象</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from `users` where id =1&quot;</span>;</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>SQL 注入的问题</p>
</blockquote>
<p>sql 存在漏洞，会被攻击导致泄漏,欺骗word</p>
<p><a class="link"   href="https://www.jianshu.com/p/078df7a35671" >https://www.jianshu.com/p/078df7a35671<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sql_injection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        logging(&quot;yuxuan&quot;,&quot;123456&quot;); // 正常登陆</span></span><br><span class="line">        logging(<span class="string">&quot;&#x27;or &#x27;1=1&quot;</span>,<span class="string">&quot;123456&quot;</span>); <span class="comment">// sql 注入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登陆业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logging</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection(); <span class="comment">// 获取数据库的连接</span></span><br><span class="line">            st = conn.createStatement(); <span class="comment">// 获取sql的执行对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            select * from `users` where `NAME` =&#x27;&#x27;or &#x27;1=1&#x27; and `password`=&#x27;123456&#x27; 总会是true</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from `users` where `NAME` =&#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and `password`=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="PreparedStatement对象"><a href="#PreparedStatement对象" class="headerlink" title="PreparedStatement对象"></a>PreparedStatement对象</h3><p>PreparedStatement 可以防止SQL注入，且效率更高</p>
<p><strong>插入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson03;</span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">// 使用？占位符来代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO `users`(id,NAME,PASSWORD,email,birthday)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql); <span class="comment">//预编译sql，然后不执行</span></span><br><span class="line">            <span class="comment">// 手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;yuxuan&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;624677306@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注意点：sql.Date 数据库用的</span></span><br><span class="line"><span class="comment">//            util.Date java 下面使用的 new Date().getTime() 获得时间戳</span></span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">// 使用？占位符来代替参数</span></span><br><span class="line">            String sql =<span class="string">&quot;delete from `users` where id =?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql); <span class="comment">//预编译sql，然后不执行</span></span><br><span class="line">            <span class="comment">// 手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>更新</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">// 使用？占位符来代替参数</span></span><br><span class="line">            String sql =<span class="string">&quot;update `users` set `name`=? where id =?&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql); <span class="comment">//预编译sql，然后不执行</span></span><br><span class="line">            <span class="comment">// 手动给参数赋值</span></span><br><span class="line">            st.setString(<span class="number">1</span>,<span class="string">&quot;宇轩&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">// 使用？占位符来代替参数</span></span><br><span class="line">            String sql =<span class="string">&quot;select * from `users` where id = ?;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql); <span class="comment">//预编译sql，然后不执行</span></span><br><span class="line">            <span class="comment">// 手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;查询成功成功&quot;);</span></span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>完整的查询业务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInjectSolved</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        logging(&quot;yuxuan&quot;,&quot;123456&quot;); // 正常登陆</span></span><br><span class="line">        logging(<span class="string">&quot;&#x27;or &#x27;1=1&quot;</span>,<span class="string">&quot;123456&quot;</span>); <span class="comment">// sql 注入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登陆业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logging</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection(); <span class="comment">// 获取数据库的连接</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// preparedStatement 防止SQL 注入的本质，把传递进来的参数当作字符</span></span><br><span class="line">            <span class="comment">// 假设其中存在转义字符，就直接忽略，比如 &#x27; ，会被直接转义</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from `users` where `NAME` =? and `password`=?&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);</span><br><span class="line">            st.setString(<span class="number">1</span>,username);</span><br><span class="line">            st.setString(<span class="number">2</span>,password);</span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h3><p>==要么都成功，要么都失败==</p>
<blockquote>
<p>ACID 原则</p>
</blockquote>
<p>原子性：要么全部完成，要么都不完成</p>
<p>一致性：总数不变</p>
<p><strong>隔离性：多个进程互不干扰</strong></p>
<p>持久性：一旦提交就不可逆了，持久化到数据库中</p>
<p>隔离性的问题：</p>
<p>脏读：一个事务读取了另一个没有提交的事务</p>
<p>不可重复读：在同一个事务内，重复读取表中的数据，表数据发生了改变</p>
<p>虚读（幻读）：在一个事务内，读取到了别人插入的数据，导致前后读取出来不一致</p>
<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li>开启事务：<code>conn.setAutoCommit(false);</code></li>
<li>一组业务执行完毕，提交事务</li>
<li>可以catch语句中显示的定义，回滚语句，但默认失败就会回滚</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 关闭数据库的自动提交,自动会开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>); <span class="comment">//开启事务</span></span><br><span class="line"></span><br><span class="line">            String sql1 = <span class="string">&quot;update `account` set money=money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">&quot;update account set money=money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务完毕，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据库连接池-（暂时不学习，过于难，以后补上）"><a href="#数据库连接池-（暂时不学习，过于难，以后补上）" class="headerlink" title="数据库连接池 （暂时不学习，过于难，以后补上）"></a>数据库连接池 （暂时不学习，过于难，以后补上）</h3><p>数据库连接-执行完毕-释放</p>
<p>连接–释放 是一种十分浪费资源的</p>
<p><strong>池化技术：准备一些预先的资源，过来就连接提前准备好的</strong></p>
]]></content>
      <categories>
        <category>Databases</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Java</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>(CSE201) Advanced Databases</title>
    <url>/2021/02/19/2021-02-19-(CSE201)-Advanced-Databases/</url>
    <content><![CDATA[<h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><h3 id="Building-a-Database-High-Level"><a href="#Building-a-Database-High-Level" class="headerlink" title="Building a Database: High-Level"></a>Building a Database: High-Level</h3><ul>
<li><p>Design conceptual schema using a data model.</p>
<ul>
<li> Design relational schema, e.g., student(sid, name)</li>
</ul>
</li>
<li><p>Data Definition Language <strong>(DDL)</strong></p>
<ul>
<li>CREATE TABLE student (sid char(8) primary key, name varchar(32))</li>
</ul>
</li>
<li><p>Data Manipulation Language <strong>(DML)</strong></p>
<ul>
<li>INSERT INTO student VALUES (‘00112233’, ‘Paul’)</li>
</ul>
</li>
</ul>
<h3 id="Access-Time"><a href="#Access-Time" class="headerlink" title="Access Time"></a>Access Time</h3><p>Access time is the time it takes from when a read or write a block request is issued to when data transfer begins (or ends).</p>
<p><strong>Access time = Seek time + Rotational latency + (Transfer time)</strong></p>
<ul>
<li><p>Seek time – time it takes to position the arm over the right track.</p>
<ul>
<li>Average seek time is about <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220, 394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220, -345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container> of the worst case seek time (e.g., from the innermost to the outermost)</li>
</ul>
</li>
<li><p>Rotational latency – time it takes for the sector to be accessed to appear under the head.</p>
<ul>
<li>Average latency is 1/2 of the worst case latency (e.g., nearly 360 degree rotation)</li>
</ul>
</li>
<li><p>Transfer time – time to actually read/write the data in the sector once the head is positioned, that is, the time for the disk to rotate over the sectors.</p>
<ul>
<li> In most cases, transfer time is much less than the seek time and rotational latency.</li>
</ul>
</li>
</ul>
<h3 id="Disk-Block"><a href="#Disk-Block" class="headerlink" title="Disk Block"></a>Disk Block</h3><ul>
<li><p>A contiguous sequence of sectors from a single track</p>
</li>
<li><p>Data is transferred between disk and main memory in blocks</p>
</li>
<li><p>Sizes range from 512 bytes to several kilobytes</p>
</li>
</ul>
<h3 id="Organization-of-Records-in-Files"><a href="#Organization-of-Records-in-Files" class="headerlink" title="Organization of Records in Files"></a>Organization of Records in Files</h3><p><strong>Heap</strong> – a record can be placed anywhere in the file where there is space</p>
<p><strong>Sequential</strong> – store records in sequential order, based on the value of the search key of each record</p>
<p><strong>Hashing</strong> – a hash function computed on some attribute of each record; the result specifies in which block of the file the record should be placed</p>
<blockquote>
<p>Records of each relation may be stored in a separate file. In a multi-table clustering file organization records of several different relations can be stored in the same file </p>
</blockquote>
<p>Motivation: store related records on the same block to minimize I/O</p>
<p>![image-20210219194326826](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210219194326826.png)</p>
<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p>Indexing mechanisms used to speed up access to the desired data.</p>
<p><strong>Indexing</strong> is a <strong>data structure technique</strong> which allows you to <strong>quickly retrieve records from a database file</strong>. </p>
<p>An Index is a small table having only two columns. </p>
<ul>
<li>The first column comprises a copy of the primary or candidate key of a table. </li>
<li>Its second column contains a set of pointers for holding the address of the disk block where that specific key value stored.</li>
</ul>
<h3 id="Types-of-Indexing"><a href="#Types-of-Indexing" class="headerlink" title="Types of Indexing"></a>Types of Indexing</h3><p><img src="https://www.guru99.com/images/1/070119_0833_IndexinginD1.png" alt="img"></p>
<h3 id="The-Structure-of-Index"><a href="#The-Structure-of-Index" class="headerlink" title="The Structure of Index"></a>The Structure of Index</h3><p><strong>Data file:</strong> collection of blocks holding records on disk</p>
<p><strong>Index file:</strong> a data structure allowing the DBMS to find particular records in a data file more efficiently.</p>
<ul>
<li><p>An index file consists of records (called index entries) of the form:</p>
<ul>
<li><strong>Search-key - pointer</strong></li>
</ul>
</li>
<li><p><strong>Search Key:</strong> one or set of attributes used to look up records in a file.</p>
</li>
</ul>
<p><strong>Relationship</strong>: a <strong>search key K</strong> in the index file is associated with a <strong>pointer to a data-file record</strong> that has search key K.</p>
<h3 id="Index-Techniques"><a href="#Index-Techniques" class="headerlink" title="Index Techniques"></a>Index Techniques</h3><ul>
<li>Depending on the organisation of index file, an index can be:<ul>
<li>an <strong>ordered Index</strong> where index entries <strong>are sorted on the search key value.</strong> (Primary indexing)</li>
<li>a <strong>hashing Index</strong> where <strong>hashing technique</strong> is employed to organize index entries (Secondary indexing)</li>
</ul>
</li>
</ul>
<h4 id="Ordered-Indices-Primary-index"><a href="#Ordered-Indices-Primary-index" class="headerlink" title="Ordered Indices (Primary index)"></a>Ordered Indices (Primary index)</h4><ul>
<li><p><strong>Dense index</strong>: index record appears for <strong>every search-key</strong> value in the file.</p>
</li>
<li><p><strong>Sparse Index:</strong> contains index records for <strong>only some</strong> search-key values.</p>
</li>
</ul>
<h4 id="Dense-Index-vs-Sparse-Index"><a href="#Dense-Index-vs-Sparse-Index" class="headerlink" title="Dense Index vs. Sparse Index"></a>Dense Index vs. Sparse Index</h4><ul>
<li><p>Index size</p>
<ul>
<li>Sparse index is smaller</li>
</ul>
</li>
<li><p>Requirement on data file</p>
<ul>
<li>The data file must be sequential file</li>
</ul>
</li>
<li><p>Lookup</p>
<ul>
<li>Sparse index is smaller and may fit in memory</li>
<li>Dense index can directly tell if a record exists.</li>
</ul>
</li>
<li><p>Update</p>
<ul>
<li>Sparse index requires less space and maintenance for insertion and deletion.</li>
</ul>
</li>
<li><p>Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-keyvalue in the block.</p>
</li>
</ul>
<h4 id="Dense-index-files"><a href="#Dense-index-files" class="headerlink" title="Dense index files"></a>Dense index files</h4><p>![image-20210219210300684](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210219210300684.png)</p>
<h4 id="Sparse-index-files"><a href="#Sparse-index-files" class="headerlink" title="Sparse index files"></a>Sparse index files</h4><p>![image-20210219210345875](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210219210345875.png)</p>
<h4 id="An-ordered-index-can-also-be"><a href="#An-ordered-index-can-also-be" class="headerlink" title="An ordered index can also be:"></a>An ordered index can also be:</h4><ul>
<li><p><strong>Primary index:</strong> in a sequentially ordered file, the index whose search key specifies the sequential order of the file.</p>
<ul>
<li>Also called <strong>clustering index.</strong> The search key of a primary index is usually but not necessarily the primary key.</li>
<li> Can be sparse</li>
</ul>
</li>
<li><p><strong>Secondary index:</strong> an index whose search key specifies an order different from the sequential order of the file.</p>
<ul>
<li><p>Also called non-clustering index.</p>
</li>
<li><p>Can not be sparse</p>
</li>
</ul>
</li>
<li><p>Index-sequential file: ordered sequential file with a primary index.</p>
</li>
</ul>
<p>![image-20210219211429706](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210219211429706.png)</p>
<ul>
<li>Index record points to a bucket that contains pointers to all the actual records with that particular search-key value.</li>
<li>Secondary indices have to be dense</li>
</ul>
<h4 id="Primary-and-Secondary-Indices"><a href="#Primary-and-Secondary-Indices" class="headerlink" title="Primary and Secondary Indices"></a>Primary and Secondary Indices</h4><ul>
<li><p>Indices offer substantial benefits when searching for records.</p>
</li>
<li><p>But: updating indices imposes overhead on database modification - when a file is modified, every index on the file must be updated,</p>
</li>
<li><p>Sequential scan using primary index is efficient</p>
</li>
<li><p>But a sequential scan using a secondary index is expensive</p>
<ul>
<li>Each record access may fetch a new block from disk    </li>
<li>Block fetch requires about 5 to 10 milliseconds; versus about 100 nanoseconds for memory access</li>
</ul>
</li>
</ul>
<h4 id="Clustering-Index"><a href="#Clustering-Index" class="headerlink" title="Clustering Index"></a>Clustering Index</h4><p>In a clustered index, records themselves are stored in the Index and not pointers. Sometimes the Index is created on non-primary key columns which might not be unique for each record. In such a situation, you can group two or more columns to get the unique values and create an index which is called clustered Index. This also helps you to identify the record faster.</p>
<p><strong>Example:</strong></p>
<p>Let’s assume that a company recruited many employees in various departments. In this case, clustering indexing in DBMS should be created for all employees who belong to the same dept.</p>
<p>It is considered in a single cluster, and index points point to the cluster as a whole. Here, Department _no is a non-unique key.</p>
<h4 id="What-is-Multilevel-Index"><a href="#What-is-Multilevel-Index" class="headerlink" title="What is Multilevel Index?"></a>What is Multilevel Index?</h4><p>Multilevel Indexing in Database is created when a primary index does not fit in memory. In this type of indexing method, you can reduce the number of disk accesses to short any record and kept on a disk as a sequential file and create a sparse base on that file.</p>
<p><a href="https://www.guru99.com/images/1/070119_0833_IndexinginD5.png"><img src="https://www.guru99.com/images/1/070119_0833_IndexinginD5.png" alt="img"></a></p>
<h4 id="B-Tree-Index"><a href="#B-Tree-Index" class="headerlink" title="B-Tree Index"></a>B-Tree Index</h4><p>B-tree index is the widely used data structures for tree based indexing in DBMS. It is a multilevel format of tree based indexing in DBMS technique which has balanced binary search trees. All leaf nodes of the B tree signify actual data pointers.</p>
<p>Moreover, all leaf nodes are interlinked with a link list, which allows a B tree to support both random and sequential access.</p>
<p><a href="https://www.guru99.com/images/1/070119_0833_IndexinginD6.png"><img src="https://www.guru99.com/images/1/070119_0833_IndexinginD6.png" alt="img"></a></p>
<ul>
<li>Lead nodes must have between 2 and 4 values.</li>
<li>Every path from the root to leaf are mostly on an equal length.</li>
<li>Non-leaf nodes apart from the root node have between 3 and 5 children nodes.</li>
<li>Every node which is not a root or a leaf has between n/2] and n children.</li>
</ul>
<h4 id="Index-Definition-in-SQL"><a href="#Index-Definition-in-SQL" class="headerlink" title="Index Definition in SQL"></a>Index Definition in SQL</h4><ul>
<li>Create an index</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index <span class="operator">&lt;</span>index<span class="operator">-</span>name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>relation<span class="operator">-</span>name<span class="operator">&gt;</span>(<span class="operator">&lt;</span>attribute<span class="operator">-</span>list<span class="operator">&gt;</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">create</span> index b<span class="operator">-</span>index <span class="keyword">on</span> branch(branch_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>To drop an index</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">n <span class="keyword">drop</span> index <span class="operator">&lt;</span>index<span class="operator">-</span>name<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Most database systems allow specification of type of index.</li>
</ul>
<h4 id="Advantages-of-Indexing"><a href="#Advantages-of-Indexing" class="headerlink" title="Advantages of Indexing"></a>Advantages of Indexing</h4><p>Important pros/ advantage of Indexing are:</p>
<ul>
<li>It helps you to reduce the total number of I/O operations needed to retrieve that data, so you don’t need to access a row in the database from an index structure.</li>
<li>Offers Faster search and retrieval of data to users.</li>
<li>Indexing also helps you to reduce tablespace as you don’t need to link to a row in a table, as there is no need to store the ROWID in the Index. Thus you will able to reduce the tablespace.</li>
<li>You can’t sort data in the lead nodes as the value of the primary key classifies it.</li>
</ul>
<h4 id="Disadvantages-of-Indexing"><a href="#Disadvantages-of-Indexing" class="headerlink" title="Disadvantages of Indexing"></a>Disadvantages of Indexing</h4><p>Important drawbacks/cons of Indexing are:</p>
<ul>
<li>To perform the indexing database management system, you need a primary key on the table with a unique value.</li>
<li>You can’t perform any other indexes in Database on the Indexed data.</li>
<li>You are not allowed to partition an index-organized table.</li>
<li>SQL Indexing Decrease performance in INSERT, DELETE, and UPDATE query.</li>
</ul>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h4><ul>
<li>Indexing is a small table which is consist of two columns.</li>
<li>Two main types of indexing methods are 1)Primary Indexing 2) Secondary Indexing.</li>
<li>Primary Index is an ordered file which is fixed length size with two fields.</li>
<li>The primary Indexing is also further divided into two types 1)Dense Index 2)Sparse Index.</li>
<li>In a dense index, a record is created for every search key valued in the database.</li>
<li>A sparse indexing method helps you to resolve the issues of dense Indexing.</li>
<li>The secondary Index in DBMS is an indexing method whose search key specifies an order different from the sequential order of the file.</li>
<li>Clustering index is defined as an order data file.</li>
<li>Multilevel Indexing is created when a primary index does not fit in memory.</li>
<li>The biggest benefit of Indexing is that it helps you to reduce the total number of I/O operations needed to retrieve that data.</li>
<li>The biggest drawback to performing the indexing database management system, you need a primary key on the table with a unique value.</li>
</ul>
<h3 id="B-tree-index"><a href="#B-tree-index" class="headerlink" title="B+ tree index"></a>B+ tree index</h3><p>B+-Tree is “short” and “Fat”:</p>
<ul>
<li><p>Disk-based: one node per block; large fan-out</p>
</li>
<li><p>Balanced (more or less): good performance guarantee</p>
</li>
</ul>
<p><a class="link" href="https://www.guru99.com/introduction-b-plus-tree.html">https://www.guru99.com/introduction-b-plus-tree.html<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="Rules-for-B-Tree"><a href="#Rules-for-B-Tree" class="headerlink" title="Rules for B+ Tree"></a>Rules for B+ Tree</h4><p>Here are essential rules for B+ Tree.</p>
<ul>
<li>Leaves are used to store data records.</li>
<li>It stored in the internal nodes of the Tree.</li>
<li>If a target key value is less than the internal node, then the point just to its left side is followed.</li>
<li>If a target key value is greater than or equal to the internal node, then the point just to its right side is followed.</li>
<li>The root has a minimum of two children.</li>
</ul>
<table>
<thead>
<tr>
<th><strong>B + Tree</strong></th>
<th><strong>B Tree</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Search keys can be repeated.</td>
<td>Search keys cannot be redundant.</td>
</tr>
<tr>
<td>Data is only saved on the leaf nodes.</td>
<td>Both leaf nodes and internal nodes can store data</td>
</tr>
<tr>
<td>Data stored on the leaf node makes the search more accurate and faster.</td>
<td>Searching is slow due to data stored on Leaf and internal nodes.</td>
</tr>
<tr>
<td>Deletion is not difficult as an element is only removed from a leaf node.</td>
<td>Deletion of elements is a complicated and time-consuming process.</td>
</tr>
<tr>
<td>Linked leaf nodes make the search efficient and quick.</td>
<td>You cannot link leaf nodes.</td>
</tr>
</tbody></table>
<p>In a B+-Tree:</p>
<ul>
<li><p>n is the number of pointers in a <strong>node</strong>; <strong>pointers</strong>: P1, P2, …Pn</p>
</li>
<li><p>Search keys: K1 &lt; K2 &lt; K3 &lt; . . . &lt; Kn–1</p>
</li>
<li><p>All paths (from root to leaf) have same length (<strong>balanced trees specific character</strong>)</p>
</li>
<li><p>Root must have at least two children</p>
</li>
<li><p>In each non-leaf node (inner node), more than half (≥⎡n/2⎤ ) pointers must be used</p>
</li>
<li><p>Each leaf node must contain at least ⎡(n-1)/2)⎤ keys</p>
</li>
</ul>
<p>![image-20210219214406436](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210219214406436.png)</p>
<p><strong>Example</strong></p>
<p>![image-20210219214509314](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210219214509314.png)</p>
<h4 id="Characters-of-the-B-trees"><a href="#Characters-of-the-B-trees" class="headerlink" title="Characters of the B+ trees"></a>Characters of the B+ trees</h4><ul>
<li><p>Since the inner-node connections are done by pointers, “logically” close blocks need not be “physically” close.</p>
</li>
<li><p>The non-leaf levels of the B+-tree form <strong>a hierarchy of sparse indices.</strong></p>
</li>
<li><p>If there are K search-key values in the file </p>
<ul>
<li><p>The <strong>B+-tree height</strong> is no more than <strong>⎡log⎡n/2⎤(K)⎤</strong> .</p>
</li>
<li><p>Level below root has at least 2* ⎡n/2⎤ values</p>
</li>
<li><p>Next level has at least 2* ⎡n/2⎤ * ⎡n/2⎤ values</p>
</li>
</ul>
</li>
<li><p>Searching can be conducted efficiently</p>
</li>
<li><p>Insertion and deletion to the main file can be handled efficiently, as the index can be restructured in logarithmic time</p>
</li>
</ul>
<h4 id="Search-operation"><a href="#Search-operation" class="headerlink" title="Search operation"></a>Search operation</h4><ul>
<li>To find the required record, you need to execute the binary search on the available records in the Tree.</li>
<li>In case of an exact match with the search key, the corresponding record is returned to the user.</li>
<li>In case the exact key is not located by the search in the parent, current, or leaf node, then a “not found message” is displayed to the user.</li>
<li>The search process can be re-run for better and more accurate results.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Call the binary search method on the records in the B+ Tree.</span><br><span class="line">2. If the search parameters match the exact key</span><br><span class="line">           The accurate result is returned and displayed to the user</span><br><span class="line">         Else, if the node being searched is the current and the exact key is not found by the algorithm</span><br><span class="line">           Display the statement "Recordset cannot be found.</span><br></pre></td></tr></table></figure>


<h4 id="Procedure-in-updates-on-B-tree"><a href="#Procedure-in-updates-on-B-tree" class="headerlink" title="Procedure in updates on B+ tree"></a>Procedure in updates on B+ tree</h4><ol>
<li><p>Find the leaf node in which the search-key value would appear</p>
</li>
<li><p>If the search-key value is already present in the leaf node</p>
<p>2.1. Add record to the file</p>
<p>2.2. If necessary add a pointer to the bucket.</p>
</li>
<li><p>If the search-key value is not present, then</p>
<p>3.1. add the record to the main file (and create a bucket if necessary)</p>
<p>3.2. If there is room in the leaf node, insert (key-value, pointer) pair in the leaf node</p>
<p>3.3. Otherwise, split the node (along with the new (key-value, pointer) entry) </p>
</li>
<li><p>Splitting a leaf node:</p>
<p>4.1.  take the n (search-key value, pointer) pairs (including the one being inserted) an in-memory area M <strong>in sorted order</strong>. Place the first ⎡n/2⎤ in the original node, and the rest in a new node.</p>
<p>4.2. let the new node be p, and let k be the least key value in p. Insert (k,p) in the parent of the node being split.</p>
<p>4.3. If the parent is full, split it and propagate the split further up. </p>
</li>
<li><p>Splitting of nodes proceeds upwards till a node that is not full is found.</p>
<ul>
<li>In the worst case the root node may be split increasing the height of the tree by 1</li>
</ul>
</li>
</ol>
<p><img src="https://www.guru99.com/images/1/120319_1235_BTREESearc1.png" alt="img"></p>
<p>![image-20210220082907159](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210220082907159.png)</p>
<p>![image-20210220082923546](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210220082923546.png)</p>
<h4 id="Delete-Operation"><a href="#Delete-Operation" class="headerlink" title="Delete Operation"></a>Delete Operation</h4><p>The complexity of the delete procedure in the B+ Tree surpasses that of the insert and search functionality.</p>
<p>The following algorithm is applicable while deleting an element from the B+ Tree:</p>
<ul>
<li>Firstly, we need to locate a leaf entry in the Tree that is holding the key and pointer. , delete the leaf entry from the Tree if the Leaf fulfills the exact conditions of record deletion.</li>
<li>In case the leaf node only meets the satisfactory factor of being half full, then the operation is completed; otherwise, the Leaf node has minimum entries and cannot be deleted.</li>
<li>The other linked nodes on the right and left can vacate any entries then move them to the Leaf. If these criteria is not fulfilled, then they should combine the leaf node and its linked node in the tree hierarchy.</li>
<li>Upon merging of leaf node with its neighbors on the right or left, entries of values in the leaf node or linked neighbor pointing to the top-level node are deleted.</li>
</ul>
<p><img src="https://www.guru99.com/images/1/120319_1235_BTREESearc2.png" alt="img"></p>
<p>The example above illustrates the procedure to remove an element from the B+ Tree of a specific order.</p>
<ul>
<li>Firstly, the exact locations of the element to be deleted are identified in the Tree.</li>
<li>Here the element to be deleted can only be accurately identified at the leaf level and not at the index placement. Hence, the element can be deleted without affecting the rules of deletion, which is the value of the bare-minimum key.</li>
</ul>
<p><a href="https://www.guru99.com/images/1/120319_1235_BTREESearc3.png"><img src="https://www.guru99.com/images/1/120319_1235_BTREESearc3.png" alt="img"></a></p>
<ul>
<li>In the above example, we have to delete 31 from the Tree.</li>
<li>We need to locate the instances of 31 in Index and Leaf.</li>
<li>We can see that 31 is available in both Index and Leaf node level. Hence, we delete it from both instances.</li>
<li>But, we have to fill the index pointing to 42. We will now look at the right child under 25 and take the minimum value and place it as an index. So, 42 being the only value present, it will become the index.</li>
</ul>
<h4 id="Delete-Operation-Algorithm"><a href="#Delete-Operation-Algorithm" class="headerlink" title="Delete Operation Algorithm"></a>Delete Operation Algorithm</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) Start at the root and go up to leaf node containing the key K</span><br><span class="line">2) Find the node n on the path from the root to the leaf node containing K</span><br><span class="line">    A. If n is root, remove K</span><br><span class="line">         a. if root has more than one key, done</span><br><span class="line">         b. if root has only K</span><br><span class="line">            i) if any of its child nodes can lend a node</span><br><span class="line">               Borrow key from the child and adjust child links</span><br><span class="line">            ii) Otherwise merge the children nodes. It will be a new root</span><br><span class="line">         c. If n is an internal node, remove K</span><br><span class="line">            i) If n has at least ceil(m/2) keys, done!</span><br><span class="line">            ii) If n has less than ceil(m/2) keys,</span><br><span class="line">                If a sibling can lend a key,</span><br><span class="line">                Borrow key from the sibling and adjust keys in n and the parent node</span><br><span class="line">                    Adjust child links</span><br><span class="line">                Else</span><br><span class="line">                    Merge n with its sibling</span><br><span class="line">                    Adjust child links</span><br><span class="line">         d. If n is a leaf node, remove K</span><br><span class="line">            i) If n has at least ceil(M/2) elements, done!</span><br><span class="line">                In case the smallest key is deleted, push up the next key</span><br><span class="line">            ii) If n has less than ceil(m/2) elements</span><br><span class="line">            If the sibling can lend a key</span><br><span class="line">                Borrow key from a sibling and adjust keys in n and its parent node</span><br><span class="line">            Else</span><br><span class="line">                Merge n and its sibling</span><br><span class="line">                Adjust keys in the parent node</span><br></pre></td></tr></table></figure>
<p><strong>Output</strong>:</p>
<p>The Key “K” is deleted, and keys are borrowed from siblings for adjusting values in n and its parent nodes if needed.</p>
<h4 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary:"></a>Summary:</h4><ul>
<li>B+ Tree is a self-balancing data structure for executing accurate and faster searching, inserting and deleting procedures on data</li>
<li>We can easily retrieve complete data or partial data because going through the linked tree structure makes it efficient.</li>
<li>The B+ tree structure grows and shrinks with an increase/decrease in the number of stored records.</li>
<li>Storage of data on the leaf nodes and subsequent branching of internal nodes evidently shortens the tree height, which reduces the disk input and output operations, ultimately consuming much less space on the storage devices.</li>
</ul>
<h3 id="Hash-Index"><a href="#Hash-Index" class="headerlink" title="Hash Index"></a>Hash Index</h3><h4 id="What-is-Hashing-in-DBMS"><a href="#What-is-Hashing-in-DBMS" class="headerlink" title="What is Hashing in DBMS?"></a>What is Hashing in DBMS?</h4><ul>
<li><p>In DBMS, hashing is a technique to directly search the location of desired data on the disk without using index structure. </p>
</li>
<li><p>Hashing method is used to index and retrieve items in a database as it is faster to search that specific item using the shorter hashed key instead of using its original value. </p>
</li>
<li><p>Data is stored in the form of data blocks whose address is generated by applying a hash function in the memory location where these records are stored known as a <strong>data block or data bucket</strong>.</p>
</li>
</ul>
<h4 id="Why-do-we-need-Hashing"><a href="#Why-do-we-need-Hashing" class="headerlink" title="Why do we need Hashing?"></a>Why do we need Hashing?</h4><p>Here, are the situations in the DBMS where you need to apply the Hashing method:</p>
<ul>
<li>For a huge database structure, it’s tough to search all the index values through all its level and then you need to reach the destination data block to get the desired data.</li>
<li>Hashing method is used to index and retrieve items in a database as it is faster to search that specific item using the shorter hashed key instead of using its original value.</li>
<li>Hashing is an ideal method to calculate the direct location of a data record on the disk without using index structure.</li>
<li>It is also a helpful technique for implementing dictionaries</li>
</ul>
<h4 id="Structure-of-Static-Hashing"><a href="#Structure-of-Static-Hashing" class="headerlink" title="Structure of Static Hashing"></a>Structure of Static Hashing</h4><ul>
<li><p>A <strong>bucket</strong> is a unit of storage containing one or more records (a bucket is typically a disk block).</p>
</li>
<li><p><strong>Hash function h</strong> is a function from the set of all search-key values K to the set of all bucket addresses B.</p>
</li>
<li><p>Hash function is used to locate records for access, insertion as well as deletion.</p>
</li>
<li><p>Records with different search-key values may be mapped to the same bucket; thus entire bucket has to be searched sequentially to locate a record.</p>
</li>
</ul>
<h4 id="Important-Terminologies-using-in-Hashing"><a href="#Important-Terminologies-using-in-Hashing" class="headerlink" title="Important Terminologies using in Hashing"></a>Important Terminologies using in Hashing</h4><p>Here, are important terminologies which are used in Hashing:</p>
<ul>
<li><strong>Data bucket</strong> – Data buckets are memory locations where the records are stored. It is also known as Unit Of Storage.</li>
<li><strong>Key</strong>: A DBMS key is an attribute or set of an attribute which helps you to identify a row(tuple) in a relation(table). This allows you to find the relationship between two tables.</li>
<li><strong>Hash function</strong>: A hash function, is a mapping function which maps all the set of search keys to the address where actual records are placed.</li>
<li><strong>Linear Probing</strong> – Linear probing is a fixed interval between probes. In this method, the next available data block is used to enter the new record, instead of overwriting on the older record.</li>
<li><strong>Quadratic probing</strong>- It helps you to determine the new bucket address. It helps you to add Interval between probes by adding the consecutive output of quadratic polynomial to starting value given by the original computation.</li>
<li><strong>Hash index</strong> – It is an address of the data block. A hash function could be a simple mathematical function to even a complex mathematical function.</li>
<li><strong>Double Hashing</strong> –Double hashing is a computer programming method used in hash tables to resolve the issues of has a collision.</li>
<li><strong>Bucket Overflow</strong>: The condition of bucket-overflow is called collision. This is a fatal stage for any static has to function.</li>
</ul>
<p>There are mainly two types of SQL hashing methods:</p>
<ol>
<li>Static Hashing</li>
<li>Dynamic Hashing</li>
</ol>
<h4 id="Static-Hashing"><a href="#Static-Hashing" class="headerlink" title="Static Hashing"></a>Static Hashing</h4><p>In the static hashing, the resultant data bucket address will always remain the same.</p>
<p>Therefore, if you generate an address for say <strong>Student_ID = 10</strong> using hashing function <strong>mod(3)</strong>, the resultant bucket address will always be <strong>1</strong>. So, you will not see any change in the bucket address.</p>
<p>Therefore, in this static hashing method, the number of data buckets in memory always remains constant.</p>
<h4 id="Static-Hash-Functions"><a href="#Static-Hash-Functions" class="headerlink" title="Static Hash Functions"></a>Static Hash Functions</h4><ul>
<li><strong>Inserting a record</strong>: When a new record requires to be inserted into the table, you can generate an address for the new record using its hash key. When the address is generated, the record is automatically stored in that location.</li>
<li><strong>Searching</strong>: When you need to retrieve the record, the same hash function should be helpful to retrieve the address of the bucket where data should be stored.</li>
<li><strong>Delete a record</strong>: Using the hash function, you can first fetch the record which is you wants to delete. Then you can remove the records for that address in memory.</li>
</ul>
<p>Static hashing is further divided into</p>
<ol>
<li>Open hashing</li>
<li>Close hashing.</li>
</ol>
<h4 id="Open-Hashing"><a href="#Open-Hashing" class="headerlink" title="Open Hashing"></a>Open Hashing</h4><p>In Open hashing method, Instead of overwriting older one the next available data block is used to enter the new record, This method is also known as linear probing.</p>
<p>For example, A2 is a new record which you wants to insert. The hash function generates address as 222. But it is already occupied by some other value. That’s why the system looks for the next data bucket 501 and assigns A2 to it.</p>
<p><a href="https://www.guru99.com/images/1/042919_0419_HashinginDB1.png"><img src="https://www.guru99.com/images/1/042919_0419_HashinginDB1.png" alt="img"></a>How Open Hash Works</p>
<h4 id="Close-Hashing"><a href="#Close-Hashing" class="headerlink" title="Close Hashing"></a>Close Hashing</h4><p>In the close hashing method, when buckets are full, a new bucket is allocated for the same hash and result are linked after the previous one.</p>
<h4 id="Dynamic-Hashing"><a href="#Dynamic-Hashing" class="headerlink" title="Dynamic Hashing"></a>Dynamic Hashing</h4><p>Dynamic hashing offers a mechanism in which data buckets are added and removed dynamically and on demand. In this hashing, the hash function helps you to create a large number of values.</p>
<h4 id="Comparison-of-Ordered-Indexing-and-Hashing"><a href="#Comparison-of-Ordered-Indexing-and-Hashing" class="headerlink" title="Comparison of Ordered Indexing and Hashing"></a>Comparison of Ordered Indexing and Hashing</h4><table>
<thead>
<tr>
<th><strong>Parameters</strong></th>
<th><strong>Order Indexing</strong></th>
<th><strong>Hashing</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Storing of address</td>
<td>Addresses in the memory are sorted according to a key value called the primary key</td>
<td>Addresses are always generated using a hash function on the key value.</td>
</tr>
<tr>
<td>Performance</td>
<td>It can decrease when the data increases in the hash file. As it stores the data in a sorted form when there is any (insert/delete/update) operation performed which decreases its performance.</td>
<td>Performance of hashing will be best when there is a constant addition and deletion of data. However, when the database is huge, then hash file organization and its maintenance will be costlier.</td>
</tr>
<tr>
<td>Use for</td>
<td>Preferred for range retrieval of data- which means whenever there is retrieval data for a particular range, this method is an ideal option.</td>
<td>This is an ideal method when you want to retrieve a particular record based on the search key. However, it will only perform well when the hash function is on the search key.</td>
</tr>
<tr>
<td>Memory management</td>
<td>There will be many unused data blocks because of the delete/update operation. These data blocks can’t be released for re-use. That’s why regular maintenance of the memory is required.</td>
<td>In static and dynamic hashing methods, memory is always managed. Bucket overflow is also handled perfectly to extend static hashing.</td>
</tr>
</tbody></table>
<h4 id="What-is-Collision-Bucket-Overflow"><a href="#What-is-Collision-Bucket-Overflow" class="headerlink" title="What is Collision (Bucket Overflow)?"></a>What is Collision (Bucket Overflow)?</h4><p>Hash collision is a state when the resultant hashes from two or more data in the data set, wrongly map the same place in the hash table.</p>
<h4 id="Bucket-overflow-can-occur-because-of"><a href="#Bucket-overflow-can-occur-because-of" class="headerlink" title="Bucket overflow can occur because of"></a>Bucket overflow can occur because of</h4><ul>
<li><p>Insufficient buckets</p>
</li>
<li><p>Skew in distribution of records. This can occur due to two reasons:</p>
<ul>
<li>multiple records have same search-key value</li>
<li>chosen hash function produces non-uniform distribution of key value</li>
</ul>
</li>
</ul>
<p>Overflow chaining – the overflow buckets of a given bucket are chained together in a linked list.</p>
<h4 id="Hash-Indices"><a href="#Hash-Indices" class="headerlink" title="Hash Indices"></a>Hash Indices</h4><ul>
<li><p>Hashing can be used not only for file organization, but also for index-structure creation.</p>
</li>
<li><p>A hash index organizes the search keys, with their associated record pointers, into a hash file structure.</p>
</li>
<li><p>Strictly speaking, hash indices are always <strong>secondary indices</strong>.</p>
</li>
<li><p>We use the term hash index to refer to both secondary index structures and hash organized files.</p>
</li>
</ul>
<h4 id="How-to-deal-with-Hashing-Collision"><a href="#How-to-deal-with-Hashing-Collision" class="headerlink" title="How to deal with Hashing Collision?"></a>How to deal with Hashing Collision?</h4><p>There are two technique which you can use to avoid a hash collision:</p>
<ol>
<li><strong>Rehashing</strong>: This method, invokes a secondary hash function, which is applied continuously until an empty slot is found, where a record should be placed.</li>
<li><strong>Chaining</strong>: Chaining method builds a Linked list of items whose key hashes to the same value. This method requires an extra link field to each table position.</li>
</ol>
<h4 id="Deficiencies-of-Static-Hashing"><a href="#Deficiencies-of-Static-Hashing" class="headerlink" title="Deficiencies of Static Hashing"></a>Deficiencies of Static Hashing</h4><ul>
<li><p>In static hashing, function h maps search-key values to a fixed set of B of bucket addresses. Databases grow or shrink with time.</p>
<ul>
<li>If initial number of buckets is too small, and file grows, performance will degrade due to too many overflows.</li>
<li>If space is allocated for anticipated growth, a significant amount of space will be wasted initially (and buckets will be underfull).</li>
<li>If database shrinks, again space will be wasted.</li>
</ul>
</li>
<li><p>One solution: periodic re-organisation of the file with a new hash function</p>
<ul>
<li>Expensive, disrupts normal operations</li>
</ul>
</li>
<li><p>Better solution: allow the number of buckets to be modified dynamically - Dynamic Hashing!</p>
</li>
</ul>
<h4 id="Dynamic-Hashing-1"><a href="#Dynamic-Hashing-1" class="headerlink" title="Dynamic Hashing"></a>Dynamic Hashing</h4><ul>
<li><p>Good for database that <strong>grows and shrinks in size</strong></p>
</li>
<li><p>Allows the hash function to be <strong>modified dynamically</strong></p>
</li>
<li><p><strong>Extendable hashing</strong> – one form of dynamic hashing</p>
<ul>
<li><p>Hash function generates values over a large range — typically b-bit integers, with b = 32.</p>
</li>
<li><p>At any time use only a prefix of the hash function to index into a table of bucket addresses.</p>
</li>
<li><p>Let the length of the prefix be i bits, 0 ≤ i ≤ 32.</p>
</li>
<li><p>Bucket address table size = 2i. Initially i = 0</p>
</li>
<li><p>Value of i grows and shrinks as the size of the database grows and shrinks.</p>
</li>
<li><p>Multiple entries in the bucket address table may point to the same bucket</p>
</li>
<li><p>Thus, actual number of buckets is &lt; 2i</p>
</li>
<li><p>The number of buckets also changes dynamically due to <strong>coalescing</strong> and <strong>splitting</strong> of buckets.</p>
</li>
</ul>
</li>
</ul>
<p>![image-20210220111058629](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210220111058629.png)</p>
<h4 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary:"></a>Summary:</h4><ul>
<li>In DBMS, hashing is a technique to directly search the location of desired data on the disk without using index structure.</li>
<li>Hashing method is used to index and retrieve items in a database as it is faster to search that specific item using the shorter hashed key instead of using its original value.</li>
<li>Data bucket, Key , Hash function, Linear Probing, Quadratic probing , Hash index, Double Hashing, Bucket Overflow are important terminologies used in hashing</li>
<li>Two types of hashing methods are 1) static hashing 2) dynamic hashing</li>
<li>In the static hashing, the resultant data bucket address will always remain the same.</li>
<li>Dynamic hashing offers a mechanism in which data buckets are added and removed dynamically and on demand.</li>
<li>In order Indexing addresses in the memory are sorted according to a critical value while in hashing addresses are always generated using a hash function on the key value.</li>
<li>Hash collision is a state when the resultant hashes from two or more data in the data set, wrongly map the same place in the hash table.</li>
<li>Rehashing and chaining are two methods which help you to avoid hashing collision.</li>
</ul>
]]></content>
      <categories>
        <category>Databases</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文件系统</title>
    <url>/2021/02/10/2021-02-10-Linux-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="走进Linux系统"><a href="#走进Linux系统" class="headerlink" title="走进Linux系统"></a>走进Linux系统</h2><p><img src="https://media.geeksforgeeks.org/wp-content/uploads/linuxDir.jpg" alt="Image result for linux file system hierarchy"></p>
<ul>
<li><strong>/bin</strong>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li>
<li><strong>/boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 (不要动)</li>
<li><strong>/dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li>
<li>==<strong>/etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。== </li>
<li>==<strong>/home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。==</li>
<li><strong>/lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。（不要动）</li>
<li><strong>/lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。（存放突然关机的文件）</li>
<li><strong>/media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li>
<li><strong>/mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。（我们会把一些本地文件挂载在这个目录下）</li>
<li>==<strong>/opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。==</li>
<li><strong>/proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。（不用管）</li>
<li><strong>/root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</li>
<li><strong>/sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li>
<li><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li>
<li><strong>/sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li>
<li>==<strong>/tmp</strong>：这个目录是用来存放一些临时文件的。用完即丢的文件，可以放在这个目录下，安装包！==</li>
<li>==<strong>/usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。==</li>
<li><strong>/usr/bin：</strong> 系统用户使用的应用程序。</li>
<li><strong>/usr/sbin：</strong> （super）超级用户使用的比较高级的管理程序和系统守护程序。</li>
<li><strong>/usr/src：</strong> 内核源代码默认的放置目录。</li>
<li>==<strong>/var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。==</li>
<li><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li>
<li>==<strong>/www：存放服务器网站相关的资源，环境，网站的项目</strong>==</li>
</ul>
<h2 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote>
<p>绝对路径，相对路径</p>
</blockquote>
<p>绝对路径：/Users/yuxuan/Desktop/GraphProt2.pdf </p>
<p>相对路径：在当前文件下的xxx.xx文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd: 切换目录命令</span><br><span class="line"></span><br><span class="line">./ ：当前目录</span><br><span class="line"></span><br><span class="line">cd.. 返回上一级目录</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ls(列出目录！)</p>
</blockquote>
<p>在Linux中ls是最常用的</p>
<p>-a 参数：all，查看全部的文件，包括隐藏的文件</p>
<p>-l 参数：列出所有的文件，包含文件的属性和权限，没有隐藏文件</p>
<p>所有linux语句可以同时使用 (ls -al)</p>
<blockquote>
<p>cd 命令</p>
</blockquote>
<p>![image-20210210192207429](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210210192207429.png)</p>
<blockquote>
<p>mkdir 创建目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建多级目录</span></span><br><span class="line">mkdir -p test1/test2/test3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>rmdir删除目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rmdir 仅能删除空的目录，如果下面存在文件，需要先删除文件，递归删除多个目录 -p</span></span><br><span class="line">rmdir -p test1/test2/test3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>cp (复制文件或者目录)</p>
</blockquote>
<p>cp 原来的地方 新的地方！</p>
<blockquote>
<p>rm(移除文件或者目录！ )</p>
</blockquote>
<p>-f 忽略不存在的文件，不会出现警告，强制删除</p>
<p>-r 递归删除目录！</p>
<p>-I 互动，删除询问是否删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf / 系统中所有的文件都被删除了，删库跑路的操作</span><br></pre></td></tr></table></figure>


<blockquote>
<p>mv 移动文件或者目录！重命名文件</p>
</blockquote>
<p>-f 强制</p>
<p>-u 只替换已经更新过的文件</p>
<p>![image-20210210195051021](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210210195051021.png)</p>
<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><p>十个字母，1 类型</p>
<blockquote>
<p>看懂文件属性</p>
</blockquote>
<p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
<p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JGpeIS4j9q3B4LQhsQkFiauXAQN0qOnVCYvj7Cm1oQbvexVDFqPhUIeTe83BdAHlXCJhGoNabSFKQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p>
<ul>
<li>==当为[ <strong>d</strong> ]则是目录==</li>
<li>==当为[ <strong>-</strong> ]则是文件；==</li>
<li>==若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；==</li>
<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li>
<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>
<p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p>
<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>
<p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JGpeIS4j9q3B4LQhsQkFiauEybzG2XIdlOMLyO13lMfPKUWRpGJGgyxCAJ9mics9dTZ1qrWDIvleYQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>从左至右用0-9这些数字来表示。</p>
<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中：</p>
<p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>
<p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p>
<p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p>
<blockquote>
<p>修改文件属性</p>
</blockquote>
<p><strong>1、chgrp：更改文件属组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>
<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p>
<p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure>
<p>==<strong>3、chmod：更改文件9个属性</strong>==</p>
<p>你没有权限操作此文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure>
<p>Linux文件属性有两种设置方法，一种是数字（常用的是数字），一种是符号。</p>
<p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p>
<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r:4     w:2         x:1</span><br><span class="line"></span><br><span class="line">可读可写不可执行 rw- 6</span><br><span class="line">可读可写不可执行 rwx  7</span><br><span class="line"></span><br><span class="line">chmod 777 文件可读可写可执行</span><br></pre></td></tr></table></figure>
<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure>
<p>可以自己下去多进行测试！</p>
<h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote>
<p>概述</p>
</blockquote>
<p>我们会经常查看文件内容</p>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li><p>==cat 由第一行开始显示文件内容，用来读文章，或者读取配置文件啊，都是用cat命令==</p>
</li>
<li><p>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</p>
</li>
<li><p>==nl  显示的时候，顺道输出行号！ 看代码的时候希望带行号！常用==</p>
<p>![image-20210210210000612](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210210210000612.png)</p>
</li>
<li><p>more 一页一页的显示文件内容 看余下内容的（空格代表翻页，enter代表向下看一行，：f看行号）</p>
</li>
<li><p>==less 与 more 类似，但是比 more 更好的是，他可以往前翻页！（空格翻页，上下键代表翻动页面，退出是q命令，查找字符串 /要查询的字符向下查询，向上查询用？n代表继续执行下一个，N向上寻找）==</p>
</li>
<li><p>head 只看头几行 -n 参数来看前面n行</p>
</li>
<li><p>tail 只看尾巴几行 -n 参数来看后面n行</p>
</li>
</ul>
<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p>
<p>网络配置目录：<code>cd /etc/sysconfig/network-scripts</code> <strong>（centos7）</strong></p>
<p>![image-20210210205649801](/Users/yuxuan/Library/Application Support/typora-user-images/image-20210210205649801.png)</p>
<p>ifconfig 命令查看网络配置</p>
<blockquote>
<p>cat 由第一行开始显示文件内容</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看网络配置: 文件地址 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;</span><br><span class="line">[root@kuangshen ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br><span class="line">DEVICE&#x3D;eth0</span><br><span class="line">BOOTPROTO&#x3D;dhcp</span><br><span class="line">ONBOOT&#x3D;yes</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tac</p>
</blockquote>
<p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# tac &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">BOOTPROTO&#x3D;dhcp</span><br><span class="line">DEVICE&#x3D;eth0</span><br></pre></td></tr></table></figure>


<blockquote>
<p>nl  显示行号</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# nl &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br><span class="line">1DEVICE&#x3D;eth0</span><br><span class="line">2BOOTPROTO&#x3D;dhcp</span><br><span class="line">3ONBOOT&#x3D;yes</span><br></pre></td></tr></table></figure>


<blockquote>
<p>more  一页一页翻动</p>
</blockquote>
<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter   ：代表向下翻『一行』；</li>
<li>/字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f    ：立刻显示出档名以及目前显示的行数；</li>
<li>q    ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login</span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></table></figure>


<blockquote>
<p>less  一页一页翻动，以下实例输出/etc/man.config文件的内容：</p>
</blockquote>
<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串  ：向下搜寻『字串』的功能；</li>
<li>?字串  ：向上搜寻『字串』的功能；</li>
<li>n   ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N   ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q   ：离开 less 这个程序；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login</span><br><span class="line">....(中间省略)....</span><br><span class="line">:   # 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure>


<blockquote>
<p>head  取出文件前面几行</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure>
<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>
<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login</span><br></pre></td></tr></table></figure>


<blockquote>
<p>tail  取出文件后面几行</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# tail -n 20 &#x2F;etc&#x2F;csh.login</span><br></pre></td></tr></table></figure>


<blockquote>
<p>拓展：Linux 链接概念</p>
</blockquote>
<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p>
<p>情况下，<strong>ln</strong> 命令产生硬链接。</p>
<p><strong>硬连接</strong></p>
<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：<strong>A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同</strong>，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。==（允许一个文件含有多种路径）==</p>
<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<p><strong>软连接</strong></p>
<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。==软链接文件有类似于 Windows 的快捷方式。删除源文件，快捷方式也访问不了了==它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>
<p><strong>测试：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kuangshen /]# cd /home</span><br><span class="line">[root@kuangshen home]# touch f1 # 创建一个测试文件f1</span><br><span class="line">[root@kuangshen home]# ls</span><br><span class="line">f1</span><br><span class="line">[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2</span><br><span class="line">[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3</span><br><span class="line">[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息</span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1</span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2</span><br><span class="line">397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure>
<p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> 字符串输出 &gt;&gt; f1 输出到 f1文件</span></span><br><span class="line">[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1 # 给f1输入些字符</span><br><span class="line">[root@kuangshen home]# cat f1</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f3</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# rm -f f1</span><br><span class="line">[root@kuangshen home]# cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f3</span><br><span class="line">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure>
<p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p>
<p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>
<ul>
<li>删除符号连接f3,对f1,f2无影响；</li>
<li>删除硬连接f2，对f1,f3也无影响；</li>
<li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li>
<li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li>
</ul>
<h3 id="Vim-编辑器"><a href="#Vim-编辑器" class="headerlink" title="Vim 编辑器"></a>Vim 编辑器</h3><blockquote>
<p>什么是Vim编辑器</p>
</blockquote>
<p>Vim 通过一些插件可以实现和IDE一样的功能</p>
<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。尤其是在Linux环境中，必须要会使用Vim ==查看内容，编辑内容，保存内容！==</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>
<p>vim 则可以说是程序开发者的一项很好用的工具。</p>
<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>连 vim 的官方网站 (<a class="link"   href="http://www.vim.org/" >http://www.vim.org<i class="fas fa-external-link-alt"></i></a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<p>vim 键盘图：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1I72C1HrwJ9bG6XAbVggM4RsQuEaoMI78gr3jGxkVH7ONWyDHmremOHiaUibc3sqPRfEuVuHqicfqA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<blockquote>
<p>三种使用模式</p>
</blockquote>
<p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p>
<p><strong>命令模式：</strong></p>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<p><strong>输入模式：</strong></p>
<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<p><strong>底线命令模式</strong></p>
<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。光标移动到了最底下，就可以在这里输入一些命令了</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1I72C1HrwJ9bG6XAbVggMIxVoDyQ4LWxSbHDjAYfHuId7xfHHichtqZK2ehsXvcC9KiaibPf68s9dg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<blockquote>
<p>上手体验一下，在home目录下测试</p>
</blockquote>
<p>如果你想要使用 vi 来建立一个名为 kuangstudy.txt 的文件时，你可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen home]# vim kuangstudy.txt</span><br></pre></td></tr></table></figure>
<p>然后就会进入文件</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1I72C1HrwJ9bG6XAbVggM4461hqusRbQZ32967zqUhChqXbCzJTN3I20RpiaVbFqWvHicvicc9icBUQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</strong></p>
<p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p>
<p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p>
<p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1I72C1HrwJ9bG6XAbVggMEarICtkr8ia1N6zqcuv3ROj1TBDoMicM5DoYzaGU29qQ2mbQhlBUbbww/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>按下 ESC 按钮回到一般模式</strong></p>
<p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p>
<p>在一般模式中按下 <strong>:wq</strong> 储存后离开 vim！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1I72C1HrwJ9bG6XAbVggMeA5EoVUt4j2544oibjdoeRah06s2ALh1QDXwep41Mj4ZnhWyb6icdp0w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>OK! 这样我们就成功创建了一个 kuangstudy.txt 的文件。</p>
<blockquote>
<p>Vim 按键说明</p>
</blockquote>
<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>
<p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p>
<table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td align="left">数字&lt; space&gt;</td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。快捷切换光标</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td>
</tr>
<tr>
<td align="left">n&lt; Enter&gt;</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">==/word==</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">删除、复制与粘贴</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
</tbody></table>
<p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">i, I</td>
<td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">a, A</td>
<td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">o, O</td>
<td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td align="left">r, R</td>
<td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td align="left">[Esc]</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody></table>
<p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left">:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td align="left">==:set nu==设置行号，代码中经常使用！</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><blockquote>
<p>简介</p>
</blockquote>
<p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<blockquote>
<p>用户账号的管理</p>
</blockquote>
<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p>
<blockquote>
<p>添加账号 useradd</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><p>选项 :</p>
</li>
<li><ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>==-m　使用者目录如不存在则自动建立。(自动创建这个用户的主目录 /home/qinjiang)==</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名 :</p>
</li>
<li><ul>
<li>指定新账号的登录名。</li>
</ul>
</li>
</ul>
<p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 /home/kuangshen</span></span><br><span class="line">[root@kuangshen home]# useradd -m kuangshen</span><br></pre></td></tr></table></figure>
<p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p>
<p>理解一下本质：Linux 中一切皆文件</p>
<blockquote>
<p>Linux下如何切换用户</p>
</blockquote>
<p>1.切换用户的命令为：su username 【username是你的用户名哦】</p>
<p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p>
<p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p>
<p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p>
<p>$表示普通用户</p>
<p>#表示超级用户，也就是root用户</p>
<p>更改查看主机名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname: 名字</span><br></pre></td></tr></table></figure>


<blockquote>
<p>删除帐号</p>
</blockquote>
<p>如果一个用户的账号不再使用，可以从系统中删除。</p>
<p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>删除一个已有的用户账号使用userdel命令，其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure>
<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen home]# userdel -r kuangshen</span><br></pre></td></tr></table></figure>
<p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p>
<blockquote>
<p>修改帐号</p>
</blockquote>
<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>修改已有用户的信息使用usermod命令，其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure>
<p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;z –g developer kuangshen</span><br></pre></td></tr></table></figure>
<p>此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p>
<p>修改完毕之后查看配置文件即可</p>
<blockquote>
<p>用户口令的管理</p>
</blockquote>
<p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>
<p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p>
<p>命令的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure>
<p>可使用的选项：</p>
<ul>
<li>-l 锁定口令，即禁用账号。</li>
<li>-u 口令解锁。</li>
<li>-d 使账号无口令。(没有密码也无法成功)</li>
<li>-f 强迫用户下次登录时修改口令。</li>
</ul>
<p>如果默认用户名，则修改当前用户的口令。</p>
<p>例如，假设当前用户是kuangshen，则下面的命令修改该用户自己的口令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ passwd </span><br><span class="line">Old password:******</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>
<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd kuangshen</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>
<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>
<p>为用户指定空口令时，执行下列形式的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd -d kuangshen</span><br></pre></td></tr></table></figure>
<p>此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。</p>
<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd -l kuangshen</span><br></pre></td></tr></table></figure>


<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是==对/etc/group文件的更新。==</p>
<blockquote>
<p>增加一个新的用户组使用groupadd命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure>
<p>可以使用的选项有：</p>
<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@yuxuan ~]# groupadd kuangshen</span><br><span class="line">[root@yuxuan ~]# cat /etc/group</span><br></pre></td></tr></table></figure>
<p>实例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupadd group1</span><br></pre></td></tr></table></figure>
<p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p>
<p>实例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupadd -g 101 group2</span><br></pre></td></tr></table></figure>
<p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。若不指定则自增1</p>
<blockquote>
<p>如果要删除一个已有的用户组，使用groupdel命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupdel group1</span><br></pre></td></tr></table></figure>
<p>此命令从系统中删除组group1。</p>
<blockquote>
<p>修改用户组的属性使用groupmod命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>
<p>常用的选项有：</p>
<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 此命令将组group2的组标识号修改为102。</span><br><span class="line">groupmod -g 102 group2</span><br><span class="line"></span><br><span class="line"># 将组group2的标识号改为10000，组名修改为group3。</span><br><span class="line">groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>


<blockquote>
<p>切换组</p>
</blockquote>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>
<p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure>
<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p>
<blockquote>
<p>/etc/passwd</p>
</blockquote>
<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>
<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p>
<p>下面分别介绍这些文件的内容。</p>
<p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p>
<p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">＃ cat &#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line">root:x:0:0:Superuser:&#x2F;:</span><br><span class="line">daemon:x:1:1:System daemons:&#x2F;etc:</span><br><span class="line">bin:x:2:2:Owner of system commands:&#x2F;bin:</span><br><span class="line">sys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys:</span><br><span class="line">adm:x:4:4:System accounting:&#x2F;usr&#x2F;adm:</span><br><span class="line">uucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp:</span><br><span class="line">auth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth:</span><br><span class="line">cron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron:</span><br><span class="line">listen:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls:</span><br><span class="line">lp:x:71:18:Printer administrator:&#x2F;usr&#x2F;spool&#x2F;lp:</span><br></pre></td></tr></table></figure>
<p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure>
<p>这个文件中的每一行都代表一个用户，我们可以从这里看出这个用户的主目录在哪里，可以看到属于哪一个组！</p>
<p>登陆口令：/etc/shadow，保障我们密码的安全命令</p>
<p>1）”用户名”是代表用户账号的字符串。</p>
<p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>
<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>
<p>2）“口令”一些系统中，<strong>存放着加密后的用户口令字</strong>(不可见)。</p>
<p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
<p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p>
<p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p>
<p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p>
<p>4）“组标识号”字段记录的是用户所属的用户组。</p>
<p>它对应着/etc/group文件中的一条记录。</p>
<p>5)“注释性描述”字段记录着用户的一些个人情况。</p>
<p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p>
<p>6)“主目录”，也就是用户的起始工作目录。</p>
<p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>
<p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p>
<p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>
<p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p>
<p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>
<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>
<p>8)系统中有一类用户称为伪用户（pseudo users）。</p>
<p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>
<p>常见的伪用户如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伪 用 户 含 义</span><br><span class="line">bin 拥有可执行的用户命令文件</span><br><span class="line">sys 拥有系统文件</span><br><span class="line">adm 拥有帐户文件</span><br><span class="line">uucp UUCP使用</span><br><span class="line">lp lp或lpd子系统使用</span><br><span class="line">nobody NFS使用</span><br></pre></td></tr></table></figure>
<blockquote>
<p>/etc/shadow</p>
</blockquote>
<p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p>
<p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>
<p><strong>2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</strong></p>
<p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure>
<ol>
<li>“登录名”是与/etc/passwd文件中的登录名相一致的用户账号</li>
<li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li>
<li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li>
<li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li>
<li>“最大时间间隔”指的是口令保持有效的最大天数。</li>
<li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>
<li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>
<li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>
</ol>
<blockquote>
<p>/etc/group</p>
</blockquote>
<p>用户组的所有信息都存放在/etc/group文件中。</p>
<p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>
<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>
<p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>
<p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p>
<p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组名:口令:组标识号:组内用户列表</span><br></pre></td></tr></table></figure>
<ol>
<li><p>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</p>
</li>
<li><p>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</p>
</li>
<li><p>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</p>
</li>
<li><p>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p>
</li>
</ol>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote>
<p>概述</p>
</blockquote>
<p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用命令为 df、du。</p>
<ul>
<li>df ：列出文件系统的整体磁盘使用量</li>
<li>du：检查磁盘空间使用量</li>
</ul>
<blockquote>
<p>df</p>
</blockquote>
<p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将系统内所有的文件系统列出来！</span><br><span class="line"># 在 Linux 底下如果 df 没有加任何选项</span><br><span class="line"># 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</span><br><span class="line">[root@kuangshen &#x2F;]# df</span><br><span class="line">Filesystem     1K-blocks   Used Available Use% Mounted on</span><br><span class="line">devtmpfs          889100       0    889100   0% &#x2F;dev</span><br><span class="line">tmpfs             899460     704    898756   1% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs             899460     496    898964   1% &#x2F;run</span><br><span class="line">tmpfs             899460       0    899460   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;vda1       41152812 6586736  32662368  17% &#x2F;</span><br><span class="line">tmpfs             179896       0    179896   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line"># 将容量结果以易读的容量格式显示出来</span><br><span class="line">[root@kuangshen &#x2F;]# df -h</span><br><span class="line">Filesystem     Size Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       869M     0 869M   0% &#x2F;dev</span><br><span class="line">tmpfs           879M 708K 878M   1% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs           879M 496K 878M   1% &#x2F;run</span><br><span class="line">tmpfs           879M     0 879M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;vda1       40G  6.3G   32G  17% &#x2F;</span><br><span class="line">tmpfs           176M     0 176M   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line"># 将系统内的所有特殊文件格式及名称都列出来</span><br><span class="line">[root@kuangshen &#x2F;]# df -aT</span><br><span class="line">Filesystem     Type       1K-blocks   Used Available Use% Mounted on</span><br><span class="line">sysfs         sysfs               0       0         0    - &#x2F;sys</span><br><span class="line">proc           proc                0       0         0    - &#x2F;proc</span><br><span class="line">devtmpfs       devtmpfs       889100       0    889100   0% &#x2F;dev</span><br><span class="line">securityfs     securityfs          0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;security</span><br><span class="line">tmpfs         tmpfs          899460     708    898752   1% &#x2F;dev&#x2F;shm</span><br><span class="line">devpts         devpts              0       0         0    - &#x2F;dev&#x2F;pts</span><br><span class="line">tmpfs         tmpfs          899460     496    898964   1% &#x2F;run</span><br><span class="line">tmpfs         tmpfs          899460       0    899460   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd</span><br><span class="line">pstore         pstore              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;pstore</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuset</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlb</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls,net_prio</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pids</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu,cpuacct</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devices</span><br><span class="line">cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event</span><br><span class="line">configfs       configfs            0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;config</span><br><span class="line">&#x2F;dev&#x2F;vda1     ext4         41152812 6586748  32662356  17% &#x2F;</span><br><span class="line">systemd-1      -                   -       -         -    - &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc</span><br><span class="line">mqueue         mqueue              0       0         0    - &#x2F;dev&#x2F;mqueue</span><br><span class="line">debugfs       debugfs             0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;debug</span><br><span class="line">hugetlbfs     hugetlbfs           0       0         0    - &#x2F;dev&#x2F;hugepages</span><br><span class="line">tmpfs         tmpfs          179896       0    179896   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line">binfmt_misc   binfmt_misc         0       0         0    - &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc</span><br><span class="line"># 将 &#x2F;etc 底下的可用的磁盘容量以易读的容量格式显示</span><br><span class="line"></span><br><span class="line">[root@kuangshen &#x2F;]# df -h &#x2F;etc</span><br><span class="line">Filesystem     Size Used Avail Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;vda1       40G  6.3G   32G  17% &#x2F;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>du</p>
</blockquote>
<p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span></span><br><span class="line">[root@kuangshen home]# du</span><br><span class="line">16./redis</span><br><span class="line">8./www/.oracle_jre_usage  # 包括隐藏文件的目录</span><br><span class="line">24./www</span><br><span class="line">48.                        # 这个目录(.)所占用的总量</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件的容量也列出来</span></span><br><span class="line">[root@kuangshen home]# du -a</span><br><span class="line">4./redis/.bash_profile</span><br><span class="line">4./redis/.bash_logout    </span><br><span class="line">....中间省略....</span><br><span class="line">4./kuangstudy.txt # 有文件的列表了</span><br><span class="line">48.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查根目录底下每个目录所占用的容量</span></span><br><span class="line">[root@kuangshen home]# du -sm /*</span><br><span class="line">0/bin</span><br><span class="line">146/boot</span><br><span class="line">.....中间省略....</span><br><span class="line">0/proc</span><br><span class="line">.....中间省略....</span><br><span class="line">1/tmp</span><br><span class="line">3026/usr  # 系统初期最大就是他了啦！因为很多用户文件都在这里面</span><br><span class="line">513/var</span><br><span class="line">2666/www</span><br></pre></td></tr></table></figure>
<p>通配符 * 来代表每个目录。</p>
<p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p>
<blockquote>
<p>磁盘挂载与卸除（Mac也行）</p>
</blockquote>
<p>==根文件系统之外的其他文件要想能够被访问==，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p>
<p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p>
<p>磁盘挂载语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将 &#x2F;dev&#x2F;hdc6 挂载到 &#x2F;mnt&#x2F;hdc6 上面！</span><br><span class="line">[root@www ~]# mkdir &#x2F;mnt&#x2F;hdc6</span><br><span class="line">[root@www ~]# mount &#x2F;dev&#x2F;hdc6 &#x2F;mnt&#x2F;hdc6</span><br><span class="line">[root@www ~]# df</span><br><span class="line">Filesystem           1K-blocks     Used Available Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;hdc6              1976312     42072   1833836   3% &#x2F;mnt&#x2F;hdc6</span><br></pre></td></tr></table></figure>
<p>磁盘卸载命令 umount 语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul>
<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>
<li>-n ：不升级 /etc/mtab 情况下卸除。</li>
</ul>
<p>卸载/dev/hdc6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@www ~]# umount &#x2F;dev&#x2F;hdc6</span><br></pre></td></tr></table></figure>


<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>对于我们开发人员来说，其实Linux更多偏向于使用即可</p>
<blockquote>
<p>什么是进程</p>
</blockquote>
<ol>
<li>在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号</li>
<li>每一个进程，都会有一个父进程</li>
<li>进程可以有两种存在方式：前台！后台运行</li>
<li>一般的服务都是后台运行的，基本的程序都是前台运行的</li>
</ol>
<blockquote>
<p>命令</p>
</blockquote>
<p><strong>ps</strong> 查看当前系统中正在执行的各种进程的信息</p>
<p>ps-xx :</p>
<ul>
<li>-a 显示当前终端运行的所有进程信息 (当前的进程一个)</li>
<li>-u 以用户的信息显示进程</li>
<li>-x 显示后台运行进程的参数</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ps -aux 查看所有的进程</span></span><br><span class="line"></span><br><span class="line">ps -aux|grep mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> | 在Linux中这个叫做管道符号 A｜B</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">grep 查找文件中符合条件的字符串！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>ps -ef: 可以产看到父进程的信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep mysql # 卡父进程我们一般可以通过目录树结构来查看</span><br><span class="line"></span><br><span class="line">pstree -pu</span><br><span class="line">		-p 显示父id</span><br><span class="line">		-u 显示用户组</span><br></pre></td></tr></table></figure>


<p>结束进程：杀掉进程，等价于Windows结束任务！</p>
<p>kill -9 进程的id</p>
<p>但是，如果我们平时写的一个java死循环了，可以用这个删除</p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>安装软件一般有三种方式：</p>
<ul>
<li>rpm (Jdk:在线发布一个SpringBoot的项目)</li>
<li>解压缩（tomcat，启动并可以通过外网来进行访问，发布网站）</li>
<li>yum在线安装（docker: 直接安装运行跑起来docker就可以）</li>
</ul>
<h3 id="jdk安装（rpm安装）"><a href="#jdk安装（rpm安装）" class="headerlink" title="jdk安装（rpm安装）"></a>jdk安装（rpm安装）</h3><p>1、rpm下载地址<a class="link"   href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" >http://www.oracle.com/technetwork/java/javase/downloads/index.html<i class="fas fa-external-link-alt"></i></a></p>
<p>2、如果有安装openjdk 则卸载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# java -version</span><br><span class="line">java version &quot;1.8.0_121&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查</span></span><br><span class="line">[root@kuangshen ~]# rpm -qa|grep jdk</span><br><span class="line">jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载 -e --nodeps 强制删除</span></span><br><span class="line">[root@kuangshen ~]# rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line">[root@kuangshen ~]# java -version</span><br><span class="line">-bash: /usr/bin/java: No such file or directory  # OK</span><br></pre></td></tr></table></figure>
<p>3、安装JDK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装java rpm</span><br><span class="line">[root@kuangshen kuangshen]# rpm -ivh jdk-8u221-linux-x64.rpm</span><br><span class="line"></span><br><span class="line"># 安装完成后配置环境变量 文件：&#x2F;etc&#x2F;profile</span><br><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_221-amd64</span><br><span class="line">CLASSPATH&#x3D;%JAVA_HOME%&#x2F;lib:%JAVA_HOME%&#x2F;jre&#x2F;lib</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre&#x2F;bin</span><br><span class="line">export PATH CLASSPATH JAVA_HOME</span><br><span class="line"># 保存退出</span><br><span class="line"></span><br><span class="line"># 让新增的环境变量生效！</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"># 测试 java -version</span><br><span class="line">[root@kuangshen java]# java -version</span><br><span class="line">java version &quot;1.8.0_221&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_221-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</span><br></pre></td></tr></table></figure>


<h3 id="Tomcat安装（解压缩安装）"><a href="#Tomcat安装（解压缩安装）" class="headerlink" title="Tomcat安装（解压缩安装）"></a>Tomcat安装（解压缩安装）</h3><p>1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！</p>
<p>2、将文件移动到/usr/tomcat/下，并解压！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@kuangshen kuangshen]# mv apache-tomcat-9.0.22.tar.gz &#x2F;usr</span><br><span class="line">[root@kuangshen kuangshen]# cd &#x2F;usr</span><br><span class="line">[root@kuangshen usr]# ls</span><br><span class="line">apache-tomcat-9.0.22.tar.gz</span><br><span class="line">[root@kuangshen usr]# tar -zxvf apache-tomcat-9.0.22.tar.gz   # 解压</span><br></pre></td></tr></table></figure>
<p>3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行：startup.sh --&gt;启动tomcat</span><br><span class="line"># 执行：shutdown.sh --&gt;关闭tomcat</span><br><span class="line">.&#x2F;startup.sh</span><br><span class="line">.&#x2F;shutdown.sh</span><br></pre></td></tr></table></figure>
<p>4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看firewall服务状态</span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"># 开启、重启、关闭、firewalld.service服务</span><br><span class="line"># 开启</span><br><span class="line">service firewalld start</span><br><span class="line"># 重启</span><br><span class="line">service firewalld restart</span><br><span class="line"># 关闭</span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"># 查看防火墙规则</span><br><span class="line">firewall-cmd --list-all    # 查看全部信息</span><br><span class="line">firewall-cmd --list-ports  # 只看端口信息</span><br><span class="line"></span><br><span class="line"># 开启端口</span><br><span class="line">开端口命令：firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone #作用域</span><br><span class="line">--add-port&#x3D;80&#x2F;tcp  #添加端口，格式为：端口&#x2F;通讯协议</span><br><span class="line">--permanent   #永久生效，没有此参数重启后失效</span><br></pre></td></tr></table></figure>


<h3 id="安装Docker（yum安装）"><a href="#安装Docker（yum安装）" class="headerlink" title="安装Docker（yum安装）"></a>安装Docker（yum安装）</h3><blockquote>
<p>基于 CentOS 7 安装</p>
</blockquote>
<ol>
<li><p>官网安装参考手册：<a class="link"   href="https://docs.docker.com/install/linux/docker-ce/centos/" >https://docs.docker.com/install/linux/docker-ce/centos/<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>确定你是CentOS7及以上版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@192 Desktop]# cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure></li>
<li><p>yum安装gcc相关（需要确保 虚拟机可以上外网 ）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li>
<li><p>卸载旧版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"># 官网版本</span><br><span class="line">yum remove docker \</span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-engine</span><br></pre></td></tr></table></figure></li>
<li><p>安装需要的软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li>
<li><p>设置stable镜像仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 错误</span><br><span class="line">yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line">## 报错</span><br><span class="line">[Errno 14] curl#35 - TCP connection reset by peer</span><br><span class="line">[Errno 12] curl#35 - Timeout</span><br><span class="line"></span><br><span class="line"># 正确推荐使用国内的</span><br><span class="line">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure></li>
<li><p>更新yum软件包索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li>
<li><p>安装Docker CE</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li>
<li><p>启动docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="宝塔面板安装"><a href="#宝塔面板安装" class="headerlink" title="宝塔面板安装"></a>宝塔面板安装</h3><p><a class="link"   href="https://www.bilibili.com/video/av91821322" >https://www.bilibili.com/video/av91821322<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Java web 入门到实战</title>
    <url>/2021/02/15/2021-02-15-Java-web-%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>web开发：</p>
<ul>
<li>web, 网页的意思</li>
<li>静态web<ul>
<li>html, css</li>
<li>提供给所有人看的数据始终不会发生变化！</li>
</ul>
</li>
<li>动态web<ul>
<li>提供给所有人看的数据始终会发生变化！每个人在不同的时间，不同的地点看到的信息各不相同</li>
<li>技术栈：Servlet/JSP, ASP, PHP</li>
</ul>
</li>
</ul>
<p>在java中，动态web资源开发的技术统称JavaWeb；</p>
<h3 id="web应用程序"><a href="#web应用程序" class="headerlink" title="web应用程序"></a>web应用程序</h3><p>Web应用程序：可以提供浏览器访问的程序</p>
<ul>
<li><p>a.html … 多个外部资源，这些web资源可以被外界所访问</p>
</li>
<li><p>你们能访问到任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上</p>
</li>
<li><p>URL</p>
</li>
<li><p>这个统一的web资源会被放到同一个文件夹下，web应用程序—&gt;Tomcat：服务器</p>
</li>
<li><p>一个web应用有多个部分组成（静态web，动态web）</p>
<ul>
<li><p>html，css，js</p>
</li>
<li><p>jsp，servlet</p>
</li>
<li><p>java程序</p>
</li>
<li><p>jar包</p>
</li>
<li><p>配置文件（Properties）</p>
</li>
</ul>
</li>
</ul>
<p>web应用程序编程完毕后，若想提供给外界进行访问：需要一个服务器来进行统一的管理</p>
<h3 id="静态web"><a href="#静态web" class="headerlink" title="静态web"></a>静态web</h3><ul>
<li>*.htm，*.html 这些都是网络的后缀，我们可以直接</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnw4rmk9l3j30so06mwfy.jpg" alt="image-20210222105555354"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>performance explanation</title>
    <url>/2021/01/29/performance_exp/</url>
    <content><![CDATA[<p>In this case, we read the saved model weights and conduct the test data performance evaluation. </p>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><ol>
<li>The results returned from the model were possibilities, which is numeric and continuous</li>
<li>The actual label is binary, either 1 or 0</li>
<li>It is meaningless to evaluate the performance with two different format data</li>
<li>Therefore, we need to set a threshold which specifies the possibilities higher than 0.5 as true and vice versa</li>
<li>After that, we could safely conduct the evaluation problem </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, f1_score, precision_score, recall_score, matthews_corrcoef</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score, average_precision_score</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> net_fun <span class="keyword">import</span> WSCNN, WSCNNLSTM, WeakRM, WeakRMLSTM</span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;CUDA_DEVICE_ORDER&quot;</span>] = <span class="string">&quot;PCI_BUS_ID&quot;</span>  <span class="comment"># see issue #152</span></span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;4&quot;</span></span><br><span class="line"></span><br><span class="line">tfk = tf.keras</span><br><span class="line">tfkl = tf.keras.layers</span><br><span class="line">tfkc = tf.keras.callbacks</span><br><span class="line"></span><br><span class="line">instance_len = <span class="number">40</span></span><br><span class="line">instance_stride = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">data_name = <span class="string">&#x27;HIV-1&#x27;</span></span><br><span class="line">model_name = <span class="string">&#x27;WeakRM&#x27;</span></span><br><span class="line"></span><br><span class="line">data_dir = <span class="string">&#x27;/home/yuxuan/FYP/Virus_init_codes/processed_data/&#x27;</span> + data_name + <span class="string">&#x27;/data_for_mil/&#x27;</span></span><br><span class="line">target_dir = data_dir + <span class="string">&#x27;cp_dir/&#x27;</span></span><br><span class="line">checkpoint_filepath = target_dir + model_name + <span class="string">&#x27;.h5&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;Load weights from:&#x27;</span>, checkpoint_filepath)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;loading data&#x27;</span>)</span><br><span class="line">itest_data = np.load(data_dir + <span class="string">&#x27;test_data.npy&#x27;</span>, allow_pickle=<span class="literal">True</span>)</span><br><span class="line">itest_label = np.load(data_dir + <span class="string">&#x27;test_label.npy&#x27;</span>, allow_pickle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">itest_dataset = tf.data.Dataset.from_generator(<span class="keyword">lambda</span>: itertools.zip_longest(itest_data, itest_label),</span><br><span class="line">                                               output_types=(tf.float32, tf.int32),</span><br><span class="line">                                               output_shapes=(tf.TensorShape([<span class="literal">None</span>, instance_len, <span class="number">4</span>]),</span><br><span class="line">                                                              tf.TensorShape([<span class="literal">None</span>])))</span><br><span class="line">itest_dataset = itest_dataset.batch(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">accuracy_scores = []</span><br><span class="line">f1_scores = []</span><br><span class="line">recall_scores = []</span><br><span class="line">precision_scores = []</span><br><span class="line">MCCs = []</span><br><span class="line">auROCs = []</span><br><span class="line">auPRCs = []</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;creating model&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(model_name, <span class="built_in">str</span>):</span><br><span class="line">    dispatcher = &#123;<span class="string">&#x27;WeakRM&#x27;</span>: WeakRM,</span><br><span class="line">                  <span class="string">&#x27;WeakRMLSTM&#x27;</span>: WeakRMLSTM&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model_funname = dispatcher[model_name]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid input&#x27;</span>)</span><br><span class="line"></span><br><span class="line">model = model_funname()</span><br><span class="line"></span><br><span class="line">model(itest_data[<span class="number">0</span>].reshape(<span class="number">1</span>, -<span class="number">1</span>, instance_len, <span class="number">4</span>).astype(np.float32))</span><br><span class="line">model.load_weights(checkpoint_filepath)</span><br><span class="line"></span><br><span class="line">predictions = []</span><br><span class="line"><span class="keyword">for</span> tdata <span class="keyword">in</span> itest_dataset:</span><br><span class="line">    pred, _ = model(tdata[<span class="number">0</span>], training=<span class="literal">False</span>)</span><br><span class="line">    predictions.append(pred.numpy())</span><br><span class="line"></span><br><span class="line">predictions = np.concatenate(predictions, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">accuracy_scores.append(accuracy_score(y_true=itest_label, y_pred=predictions &gt; <span class="number">0.5</span>))</span><br><span class="line">f1_scores.append(f1_score(y_true=itest_label, y_pred=predictions &gt; <span class="number">0.5</span>))</span><br><span class="line">recall_scores.append(recall_score(y_true=itest_label, y_pred=predictions &gt; <span class="number">0.5</span>))</span><br><span class="line">precision_scores.append(precision_score(y_true=itest_label, y_pred=predictions &gt; <span class="number">0.5</span>))</span><br><span class="line">MCCs.append(matthews_corrcoef(y_true=itest_label, y_pred=predictions &gt; <span class="number">0.5</span>))</span><br><span class="line">auROCs.append(roc_auc_score(y_true=itest_label, y_score=predictions))</span><br><span class="line">auPRCs.append(average_precision_score(y_true=itest_label, y_score=predictions))</span><br><span class="line"></span><br><span class="line">table = PrettyTable()</span><br><span class="line">column_names = [<span class="string">&#x27;Accuracy&#x27;</span>, <span class="string">&#x27;recall&#x27;</span>, <span class="string">&#x27;precision&#x27;</span>, <span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;MCC&#x27;</span>, <span class="string">&#x27;auROC&#x27;</span>, <span class="string">&#x27;auPRC&#x27;</span>]</span><br><span class="line">table.add_column(column_names[<span class="number">0</span>], np.<span class="built_in">round</span>(accuracy_scores, <span class="number">4</span>))</span><br><span class="line">table.add_column(column_names[<span class="number">1</span>], np.<span class="built_in">round</span>(recall_scores, <span class="number">4</span>))</span><br><span class="line">table.add_column(column_names[<span class="number">2</span>], np.<span class="built_in">round</span>(precision_scores, <span class="number">4</span>))</span><br><span class="line">table.add_column(column_names[<span class="number">3</span>], np.<span class="built_in">round</span>(f1_scores, <span class="number">4</span>))</span><br><span class="line">table.add_column(column_names[<span class="number">4</span>], np.<span class="built_in">round</span>(MCCs, <span class="number">4</span>))</span><br><span class="line">table.add_column(column_names[<span class="number">5</span>], np.<span class="built_in">round</span>(auROCs, <span class="number">4</span>))</span><br><span class="line">table.add_column(column_names[<span class="number">6</span>], np.<span class="built_in">round</span>(auPRCs, <span class="number">4</span>))</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line">results = np.array([accuracy_scores, recall_scores, precision_scores, f1_scores, MCCs, auROCs, auPRCs])</span><br><span class="line">np.savetxt(<span class="string">&#x27;/home/yuxuan/FYP/Virus_init_codes/results_matrix/&#123;&#125;.csv&#x27;</span>.<span class="built_in">format</span>(data_name), results,</span><br><span class="line">           delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">           fmt=<span class="string">&#x27;%.4f&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>FYP</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Multi-instance learning</tag>
      </tags>
  </entry>
  <entry>
    <title>m6A virus project related papers and notes</title>
    <url>/2021/02/21/m6a_virus/</url>
    <content><![CDATA[<h2 id="m6A-Atlas-1"><a href="#m6A-Atlas-1" class="headerlink" title="m6A-Atlas ^1"></a>m6A-Atlas <a href="%E6%9D%A5%E8%87%AA%E4%BA%8Ekunqi%E9%82%A3%E7%AF%87%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%87%E7%AB%A0">^1</a></h2><hr>
<h3 id="N6-methyladenosine-m6A"><a href="#N6-methyladenosine-m6A" class="headerlink" title="N6-methyladenosine (m6A):"></a>N6-methyladenosine (m6A):</h3><p>non-cap reversible marker present on eukaryotic messenger RNAs (mRNAs) and long non-coding RNAs (lncRNAs)</p>
<h3 id="Roles-amp-functions"><a href="#Roles-amp-functions" class="headerlink" title="Roles & functions"></a>Roles &amp; functions</h3><ul>
<li>virus infection (escaping from recognition by the RNA sensor)</li>
<li>stress </li>
<li>heat shock</li>
<li>DNA damage </li>
<li>regulates molecular functions such as RNA–protein interaction</li>
<li>RNA stability</li>
<li>translation efficiency</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210223092330.png" alt="image-20210126203157352"></p>
<h3 id="collection-of-virus-m6a-sites"><a href="#collection-of-virus-m6a-sites" class="headerlink" title="collection of virus m6a sites:"></a>collection of virus m6a sites:</h3><p>m6a sites located on viral transcripts were detected by exomePeak2</p>
<h3 id="How-to-quntify-the-m6a-methylation-levels"><a href="#How-to-quntify-the-m6a-methylation-levels" class="headerlink" title="How to quntify the m6a methylation levels:"></a>How to quntify the m6a methylation levels:</h3><p>fold enrichment of reads in the IP samples compared with the input control samples within the 200 bp window of a given m6A site. (related to peak-calling process that usually seeks genomic regions with fold enrichment of &gt;1 at a pre-defined siginificance level)</p>
<h3 id="Potential-involvement-of-individual-m6A-sites-in-pathogenesis"><a href="#Potential-involvement-of-individual-m6A-sites-in-pathogenesis" class="headerlink" title="Potential involvement of individual m6A sites in pathogenesis"></a>Potential involvement of individual m6A sites in pathogenesis</h3><p>Inspired by <strong>m6AVar **, the potential involvement of individual m6A sites in pathogenesis was inferred from disease associated genetic mutations that directly destroy the m6A forming motif **DRACH</strong>.(=elimination of an m6A site)</p>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results:"></a>Results:</h3><p>m6A sites on viral transcripts from 10 virus species during 8 infection stages, including, hMPV, KSHV, HCV, RSV, HIV-1, DENV,WNV, ZIKV,HCMVand YFV. Analysis revealed a total of 5388 genetic mutations, linked<br>m6A to pathogenesis, which can destroy the forming motif m6A DRACH of these reliable sites, potentially indirectly m6A linking function to 134 different types of disease</p>
<h2 id="GraphProt"><a href="#GraphProt" class="headerlink" title="GraphProt"></a>GraphProt</h2><h3 id="RBPs"><a href="#RBPs" class="headerlink" title="RBPs"></a>RBPs</h3><p>The gold standard for identifying RBP targets are experimental cross-linking immunoprecipitation-high-throughput sequencing (CLIP-seq) protocols</p>
<h3 id="Limitations-of-the-current-methods"><a href="#Limitations-of-the-current-methods" class="headerlink" title="Limitations of the current methods"></a>Limitations of the current methods</h3><ul>
<li>the data may contain many false positives due to inherent noise </li>
<li>a large number of binding sites remain unidentified (a high false negative rate)<ul>
<li> CLIP-seq is sensitive to expression levels and is both time and tissue dependent</li>
<li>limited mappability</li>
<li>mapping difficulties at splice sites lead to further false negatives, even on highly expressed mRNAs</li>
<li>The resulting data requires non-trivial peak detection to control for false positives. Peak detection leads to high-fidelity binding sites; however, it again increases the number of false negatives.</li>
</ul>
</li>
</ul>
<h2 id="Multi-instance-learning"><a href="#Multi-instance-learning" class="headerlink" title="Multi-instance learning"></a>Multi-instance learning</h2><p><a class="link" href="https://blog.csdn.net/weixin_37936515/article/details/104471652?ops_request_misc=&request_id=&biz_id=102&utm_term=Attention-based%20Deep%20Multiple%20&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-104471652.first_rank_v2_pc_rank_v29">大道至简—-多示例学习与注意力机制的巧妙结合（Attention-based deep multiple instance learning）中文笔记<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/weixin_41108334/article/details/83029582?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">机器学习：多示例学习MIL<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Definition："><a href="#Definition：" class="headerlink" title="Definition："></a>Definition：</h3><ol>
<li>Multi-instance learning (MIL) is a variation of supervised learning where a single class label is assigned to a bag of instance.</li>
<li>MIL deal with a bag of instances for which a single class label is assigned</li>
<li>A DNA sequence can be considered as positive bag if there is at least one instance containing TFBS; a negative bag: no any instance containing the TFBS</li>
</ol>
<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul>
<li>Learn a model that predicts a bag level </li>
<li>Discover key instances (instance that trigger the bag label)</li>
</ul>
<h3 id="This-paper"><a href="#This-paper" class="headerlink" title="This paper"></a>This paper</h3><p>(i) a transformation of instances to a low dimensional embedding<br>(ii) a permutation-invariant (symmetric) aggregation function</p>
<p> (iii) a final transformation to the bag probability</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210223092315.png" alt="image-20210127173142533"></p>
<p>Theroem 1: weights together with the embeddings are parts of the function</p>
<h3 id="In-details"><a href="#In-details" class="headerlink" title="In details:"></a>In details:</h3><ol>
<li>A transformation of instances using the function f</li>
<li>A combination of transformed instances using a symmetric function <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container> for pooling (MIL pooling)</li>
<li>A transformation of combined instances transformed by f using a function g</li>
<li>The expressive of the score function relies on the choice of classes of functions for f and g, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.115ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1819 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(469, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(858, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1430, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> is the final probability  </li>
</ol>
<h3 id="Two-approaches-in-MIL"><a href="#Two-approaches-in-MIL" class="headerlink" title="Two approaches in MIL"></a>Two approaches in MIL</h3><ol>
<li><p>Instance-level approach:</p>
<ul>
<li>f is an instance level classier that returns the instance of each instance</li>
<li>Individual scores are aggregated by pooling to obtain the final probability </li>
<li>Function g is a identity function (<em>no influence</em>)</li>
</ul>
</li>
<li><p><strong>Embedding-level approach:</strong>(preferable for its superior performance)</p>
<ul>
<li>Function f maps instances to a low-dimensional embedding</li>
<li>MIL pooling obtains a bag representation that is independent of the number of instances in the bag</li>
<li>The bag representation is further processed by a bag-level classifier to provide the final probability <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.115ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1819 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(469, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(858, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1430, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li><p><strong>reasons for method 2 preferred</strong>:</p>
<ol>
<li><p>Unkown instances, may be insufficiently trained </p>
</li>
<li><p>Determines <strong>a joint representation of a bag</strong> – not introduce additional bias to the bag-level classifier</p>
</li>
</ol>
</li>
</ol>
<p>==Noted that:== Modified embedding approach could find the key instance, which is a feature owned by instance-level approach </p>
<h3 id="MIL-pooling-layer"><a href="#MIL-pooling-layer" class="headerlink" title="MIL pooling layer"></a>MIL pooling layer</h3><ul>
<li>Aggregate either instance probability distribution vectors or instance features vectors into a bag feature vector (bridges MI data with conventional neural network)</li>
<li>Pooling was used to ensure the permutation-invariant</li>
<li>Differentiable </li>
</ul>
<h3 id="MIL-Pooling-method-selection"><a href="#MIL-Pooling-method-selection" class="headerlink" title="MIL Pooling method selection"></a>MIL Pooling method selection</h3><ol>
<li>Max </li>
<li>Mean </li>
<li>Noisy-and</li>
</ol>
<h3 id="Pooling-disadvantage"><a href="#Pooling-disadvantage" class="headerlink" title="Pooling disadvantage:"></a>Pooling disadvantage:</h3><ol>
<li>Pre-defined and not trainable</li>
<li>Not flexible and applicable in previously mentioned methods (instance-based or embedding-based)</li>
<li>Not interpretable</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210130092149331.3nylwupax1c0.png" alt="image-20210130092149331"></p>
<h3 id="Attention-mechanism"><a href="#Attention-mechanism" class="headerlink" title="Attention mechanism"></a>Attention mechanism</h3><ul>
<li><strong>A weighted average of instance</strong> (low-dimensional embeddings), where weights are determined by a neural network </li>
<li>Weights must sum to 1 to ensure the permutation invariance (exclude the influence of the bag size)</li>
</ul>
<p>Formula:<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="14.533ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 6423.5 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2221.6, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mn" transform="translate(576, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(979.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1424.2, 0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(2762.9, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3207.6, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container><br>H be a bag of K embeddings, the following MIL pooling were proposed</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex" xmlns="http://www.w3.org/2000/svg" width="12.106ex" height="6.784ex" role="img" focusable="false" viewBox="0 -1733 5351 2998.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(742.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(1798.6, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(407.7, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g></g><g data-mml-node="msub" transform="translate(3409.2, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="msub" transform="translate(4356.6, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container><br>where<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.073ex" xmlns="http://www.w3.org/2000/svg" width="30.562ex" height="6.583ex" role="img" focusable="false" viewBox="0 -1551.7 13508.2 2909.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(1225.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2281, 0)"><g data-mml-node="mrow" transform="translate(1244.6, 710)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1038, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1541, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1930, 0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(716, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(3193.8, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3554.8, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4083.8, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4683.8, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(5259.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5648.8, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="msub" transform="translate(6417.8, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7412.2, 0)"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mi" transform="translate(0, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7960, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8349, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -920)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1056, 477.1) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(2467.7, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2933.7, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(3505.7, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4008.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4397.7, 0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(716, 289) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(5661.5, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(6022.5, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6551.5, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7151.5, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(7727.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8116.5, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="msubsup" transform="translate(8885.5, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, 353.6) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(576, -293.8) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(10009.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10398.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="10987.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p>Hyperbolic tangent tanh() element-wise non-linearity to include both negative and positive values for proper gradient flow, allowing the model to discover the similarities/dissimilarities among the model</p>
<p>Element wise multiplication (对位相乘)</p>
<blockquote>
<p>Difference with traditional attention mechanisms: </p>
<ul>
<li>Traditional: instances are sequentially dependent</li>
<li>Here: all instances are independent </li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210223092729.ppm" alt="Commonly used activation functions: (a) Sigmoid, (b) Tanh, (c) ReLU,... |  Download Scientific Diagram"></p>
<h3 id="Gated-attention-mechanisms"><a href="#Gated-attention-mechanisms" class="headerlink" title="Gated attention mechanisms"></a>Gated attention mechanisms</h3><ul>
<li>Tanh()’s nonlinearity is not sufficient to learn complex relations. Range from [-1,1], which could limit the final expression of learned relations among instance</li>
<li>Add a new sigmoid function with element-wise multiplication </li>
<li>The gating mechanisms introduce a learnable non-linearity that potentially removes the troublesome linearity in tanh()</li>
</ul>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.073ex" xmlns="http://www.w3.org/2000/svg" width="46.033ex" height="6.731ex" role="img" focusable="false" viewBox="0 -1617.2 20346.5 2975.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(1225.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2281, 0)"><g data-mml-node="mrow" transform="translate(1244.6, 775.5)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1038, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1541, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1930, 0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(716, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(3193.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3582.8, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3943.8, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4472.8, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5072.8, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(5648.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6037.8, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="msub" transform="translate(6806.8, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7801.2, 0)"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mi" transform="translate(0, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8349, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8960.2, 0)"><path data-c="2297" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM582 471Q531 510 496 523Q446 542 381 542Q324 542 272 519T196 471L389 278L485 375L582 471ZM167 442Q95 362 95 250Q95 137 167 58L359 250L167 442ZM610 58Q682 138 682 250Q682 363 610 442L418 250L610 58ZM196 29Q209 16 230 2T295 -27T388 -42Q409 -42 429 -40T465 -33T496 -23T522 -11T544 1T561 13T574 22T582 29L388 222L196 29Z"></path></g><g data-mml-node="mi" transform="translate(9960.5, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(10429.5, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10774.5, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(11251.5, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12129.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12518.5, 0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="msubsup" transform="translate(13285.5, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(576, -307.7) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(14409.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14798.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(15187.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -920)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1056, 477.1) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(2467.7, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2933.7, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(3505.7, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4008.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4397.7, 0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(716, 289) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(5661.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6050.5, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(6411.5, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6940.5, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7540.5, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(8116.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8505.5, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="msubsup" transform="translate(9274.5, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, 353.6) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(576, -293.8) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(10398.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11009.5, 0)"><path data-c="2297" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM582 471Q531 510 496 523Q446 542 381 542Q324 542 272 519T196 471L389 278L485 375L582 471ZM167 442Q95 362 95 250Q95 137 167 58L359 250L167 442ZM610 58Q682 138 682 250Q682 363 610 442L418 250L610 58ZM196 29Q209 16 230 2T295 -27T388 -42Q409 -42 429 -40T465 -33T496 -23T522 -11T544 1T561 13T574 22T582 29L388 222L196 29Z"></path></g><g data-mml-node="mi" transform="translate(12009.7, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(12478.7, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12823.7, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(13300.7, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14178.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14567.7, 0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="msubsup" transform="translate(15334.7, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, 353.6) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(576, -293.8) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(16458.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(16847.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(17236.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="17825.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex" xmlns="http://www.w3.org/2000/svg" width="12.106ex" height="6.784ex" role="img" focusable="false" viewBox="0 -1733 5351 2998.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(742.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(1798.6, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(407.7, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g></g><g data-mml-node="msub" transform="translate(3409.2, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="msub" transform="translate(4356.6, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></p>
<p>Let’s compare with the softmax function, we could find that ak could simply be the multiplication of tanh()*sigma()</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210223092355.png" alt="image-20210127212141378">                </p>
<h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><ol>
<li>Flexibility:<ol>
<li> the pooling mechanisms allow to assign different weights to instances within a bag and hence the final representation of the bag could be highly informative for the bag-level classifier, could find the <strong>key instance</strong>. </li>
<li>Application of the attention-based MIL pooling with the transformation of function f and g makes the whole model <strong>differentiable</strong></li>
</ol>
</li>
<li><strong>interpretability</strong>:<ol>
<li>Y (bag level = 1), key instance <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="2.055ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 908.4 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container> should be 1</li>
<li>It bridges the instance-leave approach and the embedding-level approach.</li>
</ol>
</li>
</ol>
<h3 id="Difference-between-other-methods"><a href="#Difference-between-other-methods" class="headerlink" title="Difference between other methods"></a>Difference between other methods</h3><ul>
<li>we propose to replace widely used permutation-invariant operators such as the maximum operator max and the mean operator mean by <strong>a trainable weighted average</strong> where weights are <strong>given by a two-layered neural network.</strong></li>
<li>Two-layered neural networks corresponds to the <strong>attention mechanisms</strong></li>
<li>Attention weights could help to find the key instances</li>
</ul>
<h3 id="Problem-formulation"><a href="#Problem-formulation" class="headerlink" title="Problem formulation"></a>Problem formulation</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="36.425ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 16099.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1040.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2096.6, 0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mtable" transform="translate(500, 0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1778, 0)"><g data-mml-node="mtext"><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(278, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(584, 0)"></path><path data-c="A0" d="" transform="translate(890, 0)"></path></g><g data-mml-node="mrow" transform="translate(1140, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="mi" transform="translate(722, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="msub" transform="translate(1140.4, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(2326.6, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3382.4, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtext" transform="translate(5022.4, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(5300.4, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(5550.4, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6050.4, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(9106.4, 0)"><g data-mml-node="mtext"><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(500, 0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(889, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1445, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1889, 0)"></path><path data-c="77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z" transform="translate(2281, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(3003, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3281, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3675, 0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(4119, 0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(14003.4, 0)"></g></g></g></g></svg></mjx-container></p>
<p>MIL model must be <strong>permutation-invariant</strong>[^4]</p>
<p>&lt;==&gt;<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.365ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5907.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1823.6, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2701.6, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(3230.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4221, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(4610, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(5518.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>This kind of maximum over instance label could encounter two problems:</p>
<ol>
<li>Vanishing gradients <a class="link" href="https://zhuanlan.zhihu.com/p/33006526">梯度消失<i class="fas fa-external-link-alt"></i></a></li>
<li>Suitable only when an instance-level is used</li>
</ol>
<p>==&gt; bag label is distributed according to the Bernoulli distribution </p>
<h3 id="Results-1"><a href="#Results-1" class="headerlink" title="Results:"></a>Results:</h3><p>Comparison, but required further research</p>
<p>[^4]: <strong>permutation invariant</strong>:</p>
<p>In this context this refers to the fact that the model does not assume any spatial relationships between the features. E.g. for multilayer perceptron, you can permute the pixels and the performance would be the same. This is not the case for convolutional networks, which assume neighborhood relations. (Permutation: 打乱)</p>
<hr>
<h3 id="WSCNN"><a href="#WSCNN" class="headerlink" title="WSCNN"></a>WSCNN</h3><p>This paper propose a weakly-supervised convolutional neural network architecture (WSCNN), <strong>combining multiple-instance learning (MIL) with CNN, to further boost the performance of predicting protein-DNA binding</strong>. WSCNN first <strong>divides each DNA sequence into multiple overlapping subsequences (instances) with a sliding window, and then separately models each instance using CNN,</strong> and finally <strong>fuses the predicted scores</strong> of all instances in the same bag using four fusion methods, including <strong><em>Max</em>, <em>Average</em>, <em>Linear Regression</em>, and <em>Top-Bottom Instances</em>.</strong> </p>
<h3 id="Supervised-learning-model-limitation"><a href="#Supervised-learning-model-limitation" class="headerlink" title="Supervised learning model limitation"></a>Supervised learning model limitation</h3><ol>
<li>Poor ability to handle the large scale of sequence data </li>
<li>Poor generalization ability</li>
<li>Time-consuming</li>
<li>…</li>
</ol>
<h3 id="Image-classification-field"><a href="#Image-classification-field" class="headerlink" title="Image classification field"></a>Image classification field</h3><ul>
<li>Each image may contain multiple objects of the interest</li>
<li>MIL-based model first extract candidate regions (instances) with existing segmentation mechanisms</li>
<li>Separately model each instance with the existing deep CNN</li>
<li>Fuse the scores of all instances in the same bag using the frequent-used MAX method</li>
</ul>
<h2 id="MIL-sequence-field"><a href="#MIL-sequence-field" class="headerlink" title="MIL (sequence field)"></a>MIL (sequence field)</h2><p>TF-bind sequence may contain multiple TFBSs. </p>
<ul>
<li>Divide DNA sequences (<strong>with length l</strong>) into multiple overlapping subsequences (instances, <strong>with starting point shift s</strong>) with a sliding window (with length c).</li>
<li>All possible instances in the whole sequence are considered as a bag labeled positive or negative according to the binding signal value</li>
<li>The number of instance per bag is [(l-c)/s]+1, where c and s are two hyper-parameters</li>
<li>Each  instance is mapped to a feature vector representing k-mer approaches</li>
<li>Model all possible instances with the model </li>
<li>Fuse the predicted scores of all instance in the same bag using the previous stated methods</li>
</ul>
<h3 id="Why-not-directly-use-advanced-pooling-layers-to-combine-MIL-with-CNN"><a href="#Why-not-directly-use-advanced-pooling-layers-to-combine-MIL-with-CNN" class="headerlink" title="Why not directly use advanced pooling layers to combine MIL with CNN?"></a><strong>Why not directly use advanced pooling layers to combine MIL with CNN?</strong></h3><ul>
<li>A regular CNN would perform some kind of MIL</li>
<li>DNA sequence with limited length could not be guaranteed to contain enough TFBS, which may lead to little effect of using advanced pooling functions</li>
</ul>
<h3 id="Benefits-using-sliding-window-to-divide-the-sequence-into-multiple-instances"><a href="#Benefits-using-sliding-window-to-divide-the-sequence-into-multiple-instances" class="headerlink" title="Benefits using sliding window to divide the sequence into multiple instances:"></a>Benefits using sliding window to divide the sequence into multiple instances:</h3><ol>
<li>The weakly-supervised information are maintained</li>
<li>Enough instance containing TFBSs are generated</li>
<li>Implicitly taking into binding site location consideration</li>
</ol>
<h3 id="Future-improvements"><a href="#Future-improvements" class="headerlink" title="Future improvements"></a>Future improvements</h3><ol>
<li>One-hot encoding assumes all nucleotides in the binding sites are statistically independent</li>
<li>RNN could capture long-term dependency </li>
<li>Noisy-and pooling function achieved higher performance, other application specific pooling method could come out to conduct the further analysis</li>
</ol>
<hr>
<h3 id="WSCNNLSTM"><a href="#WSCNNLSTM" class="headerlink" title="WSCNNLSTM"></a>WSCNNLSTM</h3><ul>
<li>Add a LSTM network </li>
<li>Add a K-mer encoding method</li>
<li>Use <strong>noisy and</strong> to fuse the score</li>
</ul>
<p>Convolutional neural network (CNN) is a special version of article neural network which adopts a weight-sharing strategy to <strong>capture local patterns in data</strong> such as DNA sequences.</p>
<p>Recurrent neural network (RNN) is another variant of ANN <strong>where connections between neurons form a directed graph</strong>. Unlike CNN, RNN can use its <strong>internal state (memory) to exhibit dynamic temporal or spatial behavior</strong>. In the designed model, the <strong>convolution layer</strong> is used to <strong>capture motif features</strong>, while the recurrent layer is used to capture <strong>long-term dependencies</strong> between the motif features.</p>
<h3 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h3><ol>
<li>WSCNN mainly employed CNN to learn motif features from DNA sequences, and did not take into consideration the <strong>long-term dependencies between motif features.</strong> In the weakly supervised framework, therefore we add a <strong>bi-directional recurrent layer after the convolutional layer to capture the forward and backward long-term dependencies between motif features.</strong> </li>
<li>WSCNN attempted to use four fusion methods to fuse the predicted values of all instances in a bag, and then selected the best one of them as the final prediction. However, it is inconvenient for user to decide which one is better, so they have to try the four fusion methods one by one. Therefore we offer a better and more robust fusion method Noisy-and to replace them.</li>
</ol>
<h3 id="K-mer-encoding"><a href="#K-mer-encoding" class="headerlink" title="K-mer encoding:"></a>K-mer encoding:</h3><p>One-hot encoding ignores the high-order dependencies among nucleotides</p>
<p>2-mer encoding: take into consideration the dependencies between two adjacent nucleotides</p>
<h3 id="MIL-again"><a href="#MIL-again" class="headerlink" title="MIL again:"></a>MIL again:</h3><p>MIL is commonly based on an assumption that a bag is labeled as positive if there is at least one instance that contains TFBS, and is labeled as negative if there are no any instances that contain TFBS</p>
<p><strong>Max</strong> only focuses on the most informative instance and <strong>overlooks other instances that may contain useful information</strong></p>
<p><strong>Average</strong> and <strong>Linear</strong> <strong>Regression</strong> take advantage of <strong>all information</strong>, inevitably <strong>containing useless information</strong>, and <strong>Top-Bottom Instances</strong> needs to <strong>manually determine the number of the highest and lowest scoring instance</strong>s.Moreover, how to effectively take advantage of abundant positive instances is also a key point. Thus we adopt a better and more elegant fusion method, named Noisy-and, in this paper.</p>
<p><strong>Noisy-and</strong>, which is based on a different assumption that a bag is labeled as positive if the <strong>number of positive instances in the bag exceeds a threshold</strong>. </p>
<h3 id="Choice-between-sigmoid-and-softmax-function"><a href="#Choice-between-sigmoid-and-softmax-function" class="headerlink" title="Choice between sigmoid and softmax function:"></a>Choice between sigmoid and softmax function:</h3><p><a class="link" href="https://www.zhihu.com/question/295247085/answer/720755769">difference between sigmoid or softmax<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Binary</strong>: almost no difference but preferred sigmoid</p>
<p><strong>Multi-label</strong>: softmax, since it ensure all the possibilities sum to 1</p>
<h2 id="Review-for-the-deep-learning-in-bioinformatics-field"><a href="#Review-for-the-deep-learning-in-bioinformatics-field" class="headerlink" title="Review for the deep learning in bioinformatics field"></a>Review for the deep learning in bioinformatics field</h2><p>interrogate: 审问，质问</p>
<h4 id="predictions-explanation"><a href="#predictions-explanation" class="headerlink" title="predictions explanation:"></a>predictions explanation:</h4><p><strong>Difficultities</strong>: the parameters of a deep neural network are difficult to interpret because of their <strong>redundancy</strong> and <strong>nonlinear</strong> relationship with the output.</p>
<p><strong>filters</strong>: not learn complete motif. they assemble the filters, then they can learn the motifs.</p>
<p><strong>Feature importance scores：</strong></p>
<p>The quantification values of the contributions of features to a current model prediction. The simplest way to obtain this score is to perturb the feature value and measure the change in the model prediction: the larger the change found, the more important the feature is.</p>
<h4 id="Two-methods-for-explanation"><a href="#Two-methods-for-explanation" class="headerlink" title="Two methods for explanation"></a><strong>Two methods for explanation</strong></h4><p><strong>Perturbation-based approaches</strong> systematically perturb the input features and observe the change in the output</p>
<ul>
<li>high computational cost</li>
</ul>
<p><strong>Backpropagationq-based approach</strong></p>
<p>The simplest backpropagation-based importance scores are saliency maps (gradient absolute values) [^2]<br>and input-masked gradients (input*gradient) [^3]</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210223092406.png" alt="image-20210127125315308"></p>
<p>[^2]: <strong>Saliency maps</strong></p>
<p>Feature importance scores defined as the gradient absolute values of the mode output with respect to the model input.</p>
<p>[^3]: <strong>Input-masked gradients：</strong></p>
<p>Feature importance scores defined as the gradient of the model output with respect to the model input multiplied by the input values.</p>
<h3 id="Issues-for-previous-methods"><a href="#Issues-for-previous-methods" class="headerlink" title="Issues for previous methods:"></a>Issues for previous methods:</h3><ul>
<li>neuron saturation problems</li>
</ul>
<p>（two detected motifs, change one would not influnce the results, so the gradient and importance score would not be changed）</p>
<h3 id="Solutions-deeplift-amp-integrated-gradients"><a href="#Solutions-deeplift-amp-integrated-gradients" class="headerlink" title="Solutions: deeplift & integrated gradients"></a>Solutions: deeplift &amp; integrated gradients</h3><ul>
<li>compare the input feature with their reference value to avoid the saturation issue</li>
<li>DNA version: the <strong><em>dinucleotide-shuffled</em></strong> version of the original sequence</li>
<li>lack rigorous benchmark, suggest to use multiple methods and compare the performance </li>
</ul>
<p>Integrated gradients:</p>
<p>Pick some starting value, scale input up to linearly from reference to actual value, do gradient*<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 833 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g></g></g></svg></mjx-container>input at each step</p>
<ul>
<li>Because <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 833 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g></g></g></svg></mjx-container>input the same at each step, equivalent to  </li>
</ul>
<h3 id="Sequence-motif-discovery"><a href="#Sequence-motif-discovery" class="headerlink" title="Sequence motif discovery"></a>Sequence motif discovery</h3><p>Limitation: </p>
<ul>
<li>manulally inspect individual sequences</li>
<li>not to perform automated motif discovery</li>
</ul>
<blockquote>
<p> Average the importance score would not yield ideal performance since the motif position do not always locate at the same position</p>
</blockquote>
<blockquote>
<blockquote>
<p>derive motifs from sequence by aggregating sequences in the training set that strongly activated filters of the first convolutional layer / interpret filters directly as motifs </p>
</blockquote>
</blockquote>
<hr>
<h3 id="Tensorflow-tutorial-in-interpretability-integrated-gradients"><a href="#Tensorflow-tutorial-in-interpretability-integrated-gradients" class="headerlink" title="Tensorflow tutorial in interpretability (integrated_gradients)"></a>Tensorflow tutorial in interpretability (integrated_gradients)</h3><p><img src="https://www.tensorflow.org/tutorials/interpretability/integrated_gradients_files/output_kMdAKooulVRE_0.png" alt="png"></p>
<p><strong>left</strong>: Your model’s gradients for pixel <code>x</code> are positive between 0.0 and 0.8 but go to 0.0 between 0.8 and 1.0. Pixel <code>x</code> clearly has a significant impact on pushing your model toward 80% predicted probability on the true class. <em>Does it make sense that pixel <code>x</code>‘s importance is small or discontinuous?</em></p>
<p><strong>right</strong>: The intuition behind IG is to accumulate pixel <code>x</code>‘s local gradients and attribute its importance as a score for how much it adds or subtracts to your model’s overall output class probability. You can break down and compute IG in 3 parts:</p>
<ol>
<li>interpolate small steps along a straight line in the feature space between 0 (a baseline or starting point) and 1 (input pixel’s value)</li>
<li>compute gradients at each step between your model’s predictions with respect to each step</li>
<li>approximate the integral between your baseline and input by accumulating (cumulative average) these local gradients</li>
</ol>
<hr>
<p>Video tutorial</p>
<p><a class="link" href="https://www.youtube.com/watch?v=f_iAM0NPwnM&amp;t=452s">https://www.youtube.com/watch?v=f_iAM0NPwnM&amp;t=452s<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Deeplift"><a href="#Deeplift" class="headerlink" title="Deeplift"></a>Deeplift</h2><p><strong>Description:</strong> Deeplift compares the activation of each neuron to its ‘reference activation’ and assigns contribution scores according to the difference</p>
<p>The <strong>reference</strong> is the activation that the neuron has when the network is provided a ‘reference input’ (the reference input is determined according to what is appropriate for the task at hand, domain knowledge)</p>
<p>Deeplift considers the deviation from a neuron’s reference activity, making it capable of handling RNN memory units gated by activations that have vanishing gradients (eg:sigmoid, tanh)</p>
<p>==w.r.t. (with respect to)==</p>
<h3 id="Previous-works"><a href="#Previous-works" class="headerlink" title="Previous works"></a>Previous works</h3><ol>
<li>Perturbation based approach <ul>
<li>Saturation problems</li>
<li>Computational inefficiency </li>
</ul>
</li>
<li>Backpropagation-based approach<ul>
<li>When back propagating importance using gradients, the gradient coming into a ReLU during the backward pass is zero would out if the input to the ReLU during the forward pass is negative (<strong>statement</strong>)</li>
<li><strong>Guided Backpropagation:</strong><ul>
<li>Equivalent to computing gradients, with the caveat that any gradients that become negative during the backward pass are discarded at ReLus</li>
<li>Due to the zero-ing out of negative gradients, both guided back propagation and deconvolutional networks can fail to highlight inputs that contribute negatively to the output</li>
</ul>
</li>
<li>Still could not solve the saturation problem </li>
</ul>
</li>
<li>Layer wise relevance propagation and gradient<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container>input<ol>
<li>LRP: absent modifications to deal with numerical stability</li>
<li>The LRP runs for ReLU networks were equivalent within a scaling factor to an element wise product between the saliency maps and the input </li>
<li>Could not run on a FPU</li>
<li>Unable to solve the saturation problem and thresholding artifacts</li>
</ol>
</li>
<li>Integrated gradients<ul>
<li>In stead of computing the gradients at only the current value of the input, one can integrate the gradients as the inputs are scaled up from some starting value to their current value </li>
<li>Address the saturation and thresholding problems; but numerically obtaining high quality integrals adds computational overhead</li>
</ul>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210202104015130.1t2rptqnkzs0.png" alt="image-20210202104015130"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210202103937705.5kzb993koio.png" alt="image-20210202103937705"></p>
<p><strong>Why unique:</strong></p>
<ol>
<li>Frame the question of importance in terms of difference from a <strong>reference state</strong>, where the reference is chosen according to the problem at hand<ul>
<li>In contrast to most gradient based methods, using a difference-from-reference allows Deeplift to propagate an importance signal even in situations where the gradient is zero and avoids artifacts caused by discontinuities in the gradient</li>
<li>By optionally giving separate consideration to the effects of positive and negative contributions at nonlinearities, DeepLift can reveal dependencies missed by other approaches<ul>
<li>Deeplift scores are computed using a backpropagation-like algorithms, which could be obtained efficiently in a backward pass after a prediction has made</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li> What should I measure differences against?</li>
<li>Can study results with multiple different references</li>
<li>MNIST: all zeros</li>
<li>Genomics<ul>
<li>Frequencies of ACGT</li>
<li>Shuffled sequences: for each sequence, generate reference by shuffling, averaging the results over all the generated references</li>
<li>Deepbind (dishuffle) [^5]</li>
</ul>
</li>
</ul>
<p>Deeplift address the limitation of gradient-based approaches because the difference from the reference may be non-zero even when the gradient is zero.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/5-Activation-functions-in-comparison-Red-curves-stand-for-respectively-sigmoid.2xvk2hmizug0.png" alt="5-Activation-functions-in-comparison-Red-curves-stand-for-respectively-sigmoid"></p>
<p><strong>Current limitation of gradient-based approaches:</strong></p>
<ul>
<li>Activation function such as Relu have a gradient of zero when they are not firing, <strong>but</strong> a Relu does not fire still contains the information</li>
<li>Similarly, the popular activation function of sigmoid or tanh activation are widely utilized as gates in memory units of recurrent neural networks such as GRUs and LSTMs, <strong>but</strong> these activation have a near-zero gradient at high or low inputs even though such inputs can be very significant</li>
</ul>
<p>A sigmoid function calculation demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">x</span>):</span></span><br><span class="line">    e_x = math.exp(-x)</span><br><span class="line">    results = <span class="number">1</span>/(<span class="number">1</span>+e_x)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>


<h3 id="Equation-1-summation-to-delta"><a href="#Equation-1-summation-to-delta" class="headerlink" title="Equation 1: summation-to-delta"></a>Equation 1: summation-to-delta</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="15.632ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 6909.4 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msub" transform="translate(1610.7, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(1699, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(4659.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5715.4, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(6548.4, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></p>
<p><strong>t</strong>: target output neurons of interest</p>
<p><strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.207ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 975.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(572, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.207ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 975.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(572, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>.</strong>.. represent some neurons in some intermediate layer (layers that can necessary and sufficient to compute t)<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.73ex" height="1.912ex" role="img" focusable="false" viewBox="0 -833.9 764.6 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(361, 363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container>  represents the reference activation of t</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="11.031ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 4875.6 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1471.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2527.6, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3110.8, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(4111, 0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(361, 363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container> is the difference from reference</p>
<p>Deeplift contribution score:<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.598ex" xmlns="http://www.w3.org/2000/svg" width="6.27ex" height="2.193ex" role="img" focusable="false" viewBox="0 -705 2771.2 969.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(1699, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.598ex" xmlns="http://www.w3.org/2000/svg" width="6.27ex" height="2.193ex" role="img" focusable="false" viewBox="0 -705 2771.2 969.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(1699, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></g></svg></mjx-container> could be considered as the amount of difference-from-reference in t that is attributed or blamed on the difference-from-value of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.959ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 866 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></p>
<ul>
<li>When a neuron is well-behaved, the output is locally linear in its input</li>
</ul>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.598ex" xmlns="http://www.w3.org/2000/svg" width="6.27ex" height="2.193ex" role="img" focusable="false" viewBox="0 -705 2771.2 969.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(1699, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></g></svg></mjx-container> could be non-zero even when the derivate <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.034ex" xmlns="http://www.w3.org/2000/svg" width="4.118ex" height="3.07ex" role="img" focusable="false" viewBox="0 -899.6 1820.2 1356.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(398.5, 394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1086, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -345.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msub" transform="translate(1086, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><rect width="1580.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container> is zero</p>
<ul>
<li>Allow the neuron signaling meaningful information even in the regime where its gradient is zero</li>
<li>The difference-from-reference gives a continuous increase in the contribution score</li>
</ul>
<h3 id="Multipliers-and-the-Chain-Rule"><a href="#Multipliers-and-the-Chain-Rule" class="headerlink" title="Multipliers and the Chain Rule:"></a>Multipliers and the Chain Rule:</h3><p><strong>Multipliers:</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="17.376ex" height="4.701ex" role="img" focusable="false" viewBox="0 -1381 7680.1 2078"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(878, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="msub" transform="translate(1287.5, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3581.5, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(4637.3, 0)"><g data-mml-node="msub" transform="translate(220, 676)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1405, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(2238, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(818.9, -686)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="2802.8" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>the “hypothetical importance” behaves like an autocomplete of the sequence, giving</p>
<p>insight into what patterns the network was looking for at a given region</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="7.475ex" height="1.977ex" role="img" focusable="false" viewBox="0 -716 3303.7 873.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(878, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="msub" transform="translate(1287.5, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container> is the <strong>contribution</strong> of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.179ex" height="1.645ex" role="img" focusable="false" viewBox="0 -716 1405 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> to <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.701ex" height="1.645ex" role="img" focusable="false" viewBox="0 -716 1194 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> divided by <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.179ex" height="1.645ex" role="img" focusable="false" viewBox="0 -716 1405 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.124ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -483 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g></g></g></svg></mjx-container> The idea of the partial derivatives:</p>
<p>The partial derivative <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.649ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2497 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(294.6, 516.8) scale(0.707)"><g data-mml-node="mtext" fill="red" stroke="red"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(500, 0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1056, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1556, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1948, 0)"></path></g><g data-mml-node="mi" transform="translate(2337, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -370.3) scale(0.707)"><g data-mml-node="mtext" fill="red" stroke="red"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(500, 0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1056, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1556, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1948, 0)"></path></g><g data-mml-node="mi" transform="translate(2337, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="2257" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container> is the infinitesimal change in t caused by an infinitesimal change in x, divided by the infinitesimal change in x</p>
<p><strong>the multiplier is similar in spirit to a partial derisive, but over finite differences instead of infinitesimal ones</strong></p>
<p>=&gt; as mentioned, the multipliers are analogy to partial derivatives, which obviously satisfied the chain rule</p>
<p><strong>Chain rules for multipliers:</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.006ex" xmlns="http://www.w3.org/2000/svg" width="32.24ex" height="5.155ex" role="img" focusable="false" viewBox="0 -950 14250.1 2278.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(1711, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(2577, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(3993, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(5048.8, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="mi" transform="translate(576.3, -1084.4) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mi" transform="translate(6659.4, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7537.4, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(8370.4, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(9236.4, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="TeXAtom" transform="translate(833, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(10707.2, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(11585.2, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="TeXAtom" transform="translate(833, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(13056.1, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(13889.1, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container><br>Given the multipliers for each neuron to its immediate successors, we can compute the multipliers for any neuron to a given target neuron efficiently via backpropagation</p>
<h3 id="Define-the-reference"><a href="#Define-the-reference" class="headerlink" title="Define the reference:"></a>Define the reference:</h3><p>For the binary classification tasks on DNA sequence inputs (strings over the alphabet A,C,G,T)</p>
<ol>
<li><p>we obtained sensible results using either a reference input containing the expected frequencies of ACGT in the background</p>
</li>
<li><p>by averaging the results over multiple reference inputs for each sequence that are generated by shuffling each original sequence (dinucleotide-shuffling are mostly preferred)</p>
</li>
</ol>
<p>[^5]: why we used dinucleotide shuffling </p>
<h3 id="Why-dinucleotide-shuffling"><a href="#Why-dinucleotide-shuffling" class="headerlink" title="Why dinucleotide shuffling?"></a>Why dinucleotide shuffling?</h3><p>One undesirable aspect of <strong>using the frequencies of ACGT as the reference</strong> is that such a representation is <strong>not a one-hot encoding</strong> and thus <strong>never occurs in the training data.</strong> </p>
<p>Thus, the network may <strong>behave unexpectedly on the reference sequence</strong>. As an alternative, we can average results over several one-hot encoded sequences generated by <strong>shuffling the original sequence</strong>. The results are shown below. On real genomic data, a dinucleotide-preserving shuffle would be more appropriate than a random shuffle as <strong>CG dinucleotides are underrepresented in genomic sequence due to spontaneous deamination from C to T</strong></p>
<p><strong>CG suppression</strong> is a term for the phenomenon that CG dinucleotides are very uncommon in most portions of vertebrate genomes.</p>
<h3 id="Separate-positive-and-negative-contributions"><a href="#Separate-positive-and-negative-contributions" class="headerlink" title="Separate positive and negative contributions"></a>Separate positive and negative contributions</h3><ul>
<li>For each neuron y , the author would introduce either <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="4.351ex" height="2.218ex" role="img" focusable="false" viewBox="0 -775.2 1923.1 980.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msup" transform="translate(833, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(490, 363) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container> or <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="4.351ex" height="2.218ex" role="img" focusable="false" viewBox="0 -775.2 1923.1 980.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msup" transform="translate(833, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(490, 363) scale(0.707)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></g></svg></mjx-container> to represent the positive and negative components of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="2.993ex" height="2.084ex" role="img" focusable="false" viewBox="0 -716 1323 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></li>
</ul>
<p>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="17.478ex" height="2.331ex" role="img" focusable="false" viewBox="0 -825.2 7725.3 1030.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1600.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2656.6, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msup" transform="translate(3489.6, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(490, 413) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(4801.9, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5802.1, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msup" transform="translate(6635.1, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(490, 413) scale(0.707)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></g></svg></mjx-container></p>
<h3 id="Rules-for-assigning-contribution-scores-each-neuron-to-its-immediate-inputs"><a href="#Rules-for-assigning-contribution-scores-each-neuron-to-its-immediate-inputs" class="headerlink" title="Rules for assigning contribution scores (each neuron to its immediate inputs):"></a>Rules for assigning contribution scores (each neuron to its immediate inputs):</h3><ul>
<li>In conduction with the chain rule for multipliers, these rules can be used to find the contribution of any input to a target output via back propagation</li>
</ul>
<h4 id="Linear-rule-apples-to-dense-and-convolutional-layers"><a href="#Linear-rule-apples-to-dense-and-convolutional-layers" class="headerlink" title="Linear rule: (apples to dense and convolutional layers)"></a>Linear rule: (apples to dense and convolutional layers)</h4><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210202140631892.7l3udc2rpds0.png" alt="image-20210202140631892"></p>
<hr>
<h3 id="TF-Modisco"><a href="#TF-Modisco" class="headerlink" title="TF-Modisco"></a>TF-Modisco</h3><ul>
<li><p>Extract, align and cluster the regions of high importance into sequence motifs</p>
</li>
<li><p>Relie on the predictive model to highlight the important regions within the sequence via feature importance scores, which guide the motif discovery</p>
</li>
<li><p>The importance scores on the inputs are computed using information from all the neurons in the network</p>
</li>
</ul>
<h4 id="Input-to-TF-modisco"><a href="#Input-to-TF-modisco" class="headerlink" title="Input to TF-modisco:"></a>Input to TF-modisco:</h4><ul>
<li>Takes as its input per-base importance scores for every prediction task</li>
</ul>
<p>TF-MoDISco results were better if, in addition to <strong>using importance scores on the input sequence</strong>, we incorporated information about <strong>hypothetical importance if other unobserved bases were present</strong>.</p>
<p> <strong>“hypothetical importance”</strong> behaves like an autocomplete of the sequence, giving insight into what patterns the network was looking for at a given region</p>
<p><strong>Multipliers</strong> defined in the DeepLift are a good choice in the hypothetical importance<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="17.376ex" height="4.701ex" role="img" focusable="false" viewBox="0 -1381 7680.1 2078"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(878, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="msub" transform="translate(1287.5, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3581.5, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(4637.3, 0)"><g data-mml-node="msub" transform="translate(220, 676)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1405, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(2238, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(818.9, -686)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="2802.8" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.124ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -483 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g></g></g></svg></mjx-container> we use the multipliers on the current input, but substitute the difference-from-reference of the hypothetical value of the input</p>
<p>reference is set to 0 and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="7.475ex" height="1.977ex" role="img" focusable="false" viewBox="0 -716 3303.7 873.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(878, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="msub" transform="translate(1287.5, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container> is taken to be the gradient of t respect to x, then the formula reduces to the input*gradient</p>
<h4 id="TF-MoDISco-Phase-1-Metaclusters"><a href="#TF-MoDISco-Phase-1-Metaclusters" class="headerlink" title="TF-MoDISco, Phase 1: Metaclusters"></a><strong>TF-MoDISco, Phase 1: Metaclusters</strong></h4><p>identify segments of the input, termed “seqlets”, that have substantial contribution to one or more of the output tasks, and to then cluster these seqlets into ‘metaclusters (each have a distinct pattern of contribution to the various tasks)</p>
<hr>
]]></content>
      <categories>
        <category>FYP</category>
      </categories>
      <tags>
        <tag>RNA modification</tag>
        <tag>Multi-instance learning</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>BIO312</title>
    <url>/2021/03/02/2021-03-02-BIO312/</url>
    <content><![CDATA[<p>Courseworks requirements</p>
<p>Protocol</p>
<p>columns</p>
<p>Expected output</p>
<p>Which columns</p>
<p>Justification for choosing that column </p>
<p>Expected output? Diagrams</p>
<h3 id="Protein-seperation"><a href="#Protein-seperation" class="headerlink" title="Protein seperation"></a>Protein seperation</h3><ol>
<li><strong>SDS-PAGE:</strong> basis-molecular weight</li>
<li><strong>Isoelectric focusing:</strong> electric charge difference</li>
<li><strong>Chromatic methods-useful adjuncts to gel-based approaches</strong><ol>
<li>HPLC - high performance liquid chromatography </li>
<li>Thin-layer chromatography </li>
</ol>
</li>
<li><strong>2D gel electrophoresis</strong><ul>
<li>Powerful gel-based method commonly used to analyze complex samples</li>
<li>To characterize full range of proteins in the sample, not just a few specific proteins</li>
</ul>
</li>
</ol>
<h3 id="SDS-PAGE"><a href="#SDS-PAGE" class="headerlink" title="SDS-PAGE:"></a>SDS-PAGE:</h3><ul>
<li>Proteins are usually mixed with the detergent, SDS and a tracking dye to make the sample</li>
<li>SDS binds to the protein and gives it size-dependent negative charge and gives it size-dependent negative charge and consistent hydrodynamic properties</li>
</ul>
<h3 id="Isoelectric-point-pi"><a href="#Isoelectric-point-pi" class="headerlink" title="Isoelectric point (pi)"></a>Isoelectric point (pi)</h3><ul>
<li>ph at which molecule has net zero charge （determined using computer program for known sequence or empirically ）</li>
</ul>
<h3 id="Isoelectric-Focusing"><a href="#Isoelectric-Focusing" class="headerlink" title="Isoelectric Focusing"></a>Isoelectric Focusing</h3><p>Electrophoresis through polyacrylamide gel in which there is a pH gradient</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210302212707.png" alt="image-20210302212707320"></p>
<h3 id="2D-gel"><a href="#2D-gel" class="headerlink" title="2D gel"></a>2D gel</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210302212808.png" alt="image-20210302212808199"></p>
<h3 id="Western-Blot"><a href="#Western-Blot" class="headerlink" title="Western Blot"></a>Western Blot</h3><p>a.k.a: immunoblotting</p>
<ul>
<li>Proteins first electrophoreses by SDS-PAGE</li>
<li>Wet gel is placed against nitrocellulose</li>
<li>In electrophoretic chamber: </li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210302212907.png" alt="image-20210302212906975"></p>
<blockquote>
<p>Ammonium sulfate precipitation is one of the most commonly used methods for protein purification from a solution. In solution, proteins form hydrogen bonds with water molecules through their exposed polar and ionic groups. When high concentrations of small, highly charged ions such as ammonium sulfate are added, these groups compete with the proteins to bind to the water molecules. This removes the water molecules from the protein and decreases its solubility, resulting in precipitation. Critical factors that affect the concentration at which a particular protein will precipitate include: the number and position of polar groups, molecular weight of the protein, pH of the solution, and temperature at which the precipitation is performed. The concentration at which antibodies precipitate varies among species; most rabbit antibodies precipitate with a 40% saturated solution, whereas mouse antibodies require 45-50% saturation.</p>
</blockquote>
<blockquote>
<p><strong>Protocol</strong></p>
<ol>
<li>Allow serum or ascitic fluid to thaw, determine total volume, and centrifuge at 3000g for 30 minutes.</li>
<li>Transfer sample to a beaker containing a stir bar and place on a magnetic stirrer.</li>
<li>While the sample is stirring, slowly add saturated ammonium sulfate to bring the final concentration to 50% saturation.<ol>
<li>Volume of ammonium sulfate needed is equal to the volume of sample.</li>
<li>Adding the ammonium sulfate very slowly ensures that local concentration around the site of addition does not exceed the desired salt concentration.</li>
</ol>
</li>
<li>Once the total volume of ammonium sulfate is added, move beaker to 4°C for 6 hours or overnight.</li>
<li>Transfer to conical tube and centrifuge the precipitate at 3000g for 30 minutes.</li>
<li>Carefully remove and discard supernatant. Invert conical tube and drain well. For serum or ascites, resuspend pellet in 30%-50% of the starting volume in 1XPBS. For monoclonal antibody tissue culture supernatants, resuspend pellet in 10% of the starting volume in 1X PBS.</li>
<li>Transfer antibody solution to dialysis tubing and dialyze versus three changes of 1XPBS/0.08% Sodium Azide. Be sure to allow enough space for expansion of the antibody solution during dialysis. Normally twice the re-suspended volume is sufficient.</li>
<li>Remove antibody solution from the tubing and centrifuge to remove any remaining debris.</li>
<li>Determine the concentration and store at -80°C for long-term storage.</li>
</ol>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210302213429.png" alt="image-20210302213429785"></p>
<h3 id="Protein-identification"><a href="#Protein-identification" class="headerlink" title="Protein identification"></a>Protein identification</h3><h4 id="Edman-degradation"><a href="#Edman-degradation" class="headerlink" title="Edman degradation"></a>Edman degradation</h4><p>Sequence aa in a peptide. </p>
<p>Amino-terminal residue is <strong>labeled</strong> and cleaved from the pipetted <strong>without disrupting the peptide bonds</strong> between other amino acid residues</p>
<h4 id="Mass-Spectrometry"><a href="#Mass-Spectrometry" class="headerlink" title="Mass Spectrometry:"></a>Mass Spectrometry:</h4><p>Analytical techniques that measures the mass-to-charge ratio of charged particles, mass spectrometry is used for determining <strong>masses</strong> of particles and the <strong>elemental composition of a sample</strong> of molecules as well as for <strong>elucidating the chemical structure of molecules</strong> such as peptide</p>
<h3 id="Protein-sequencing"><a href="#Protein-sequencing" class="headerlink" title="Protein sequencing"></a>Protein sequencing</h3><h4 id="Sanger-sequence-protein-identification"><a href="#Sanger-sequence-protein-identification" class="headerlink" title="Sanger sequence (protein identification)"></a>Sanger sequence (protein identification)</h4><h3 id="Cleavage-of-polypeptides-for-analysis"><a href="#Cleavage-of-polypeptides-for-analysis" class="headerlink" title="Cleavage of polypeptides for analysis"></a>Cleavage of polypeptides for analysis</h3><ol>
<li>Strong acid - not sequence specific</li>
<li>Sequence-specific proteolytic enzymes (proteases)</li>
<li>Sequence-specific chemical cleavage (<strong>cyanogen</strong> bromide cleavage at <strong>methonine residues</strong>)</li>
</ol>
<p>Only used in the mutant protein that is not in the databases </p>
<p>FPLC: </p>
<p>HPLC: high pressure </p>
<hr>
<h2 id="CW1"><a href="#CW1" class="headerlink" title="CW1"></a>CW1</h2><p>How would you design a purification regime, step-by-step, to isolate the mutant enzyme X from the liver of mouse “Y”?  Explain the rationale of your purification scheme. [<strong>60 marks</strong>] </p>
<p><strong>Answer</strong>:</p>
<p><code>step1:</code>  Since the provided raw sample is from the liver of mouse “Y”, which means the liver need to be smashed into the liquid format</p>
<p><code>step2:</code> The smashed liver liquid are then processed in a high speed blender, breaking out the cell membranes and releasing the inside cell components.</p>
<p><code>step3:</code>Owing to the fact that our target is to isolate the mutant enzyme, we need to utilize some filter papers to roughly filter out those target contents. </p>
<p><code>step4: </code>Ammonium Sulfate precipitation method can be used to partially purify the mixture. According to the protocols, we need to slowly add saturated ammonium sulfate to bring the final concentration to 50% saturation, which means the total amount of ammonium sulfate should equal with the sample amount. Therefore, the ammonium sulfate should add into the samples gradually, in this case, the ideal percentage should be 10%, 20%…50%. But owing to the different condition, some bias may exist, therefore, 5 columens should be prepared to hold the precipitates under different ammonium sulfate percentage, each columns should be clearly labeled for convenience. Adding the ammonium sulfate very slowly ensures that local concentration around the site of addition does not exceed the desired salt concentration. The insoluble aggregates would be our products. </p>
<p><code>Rational of step4</code>: The whole mechanisms behind this approach is the electrolyte-nonelectrolyte interaction.  In solution, proteins form hydrogen bonds with water molecules through their exposed polar and ionic groups. When high concentrations of small, highly charged ions such as ammonium sulfate are added, these groups compete with the proteins to bind to the water molecules. This removes the water molecules from the protein and decreases its solubility, resulting in precipitation. Critical factors that affect the concentration at which a particular protein will precipitate include: the number and position of polar groups, molecular weight of the protein, pH of the solution, and temperature at which the precipitation is performed.</p>
<p><code>step5:</code> the isolated 5 samples are resuspended in the buffer to be active and soluble again. As suggested in the problems that the presence of enzyme X can be detected with radioassay by the capture of the released 14CO2. In this case, five samples are feed into substrates respectively and the sample whose generated CO2 can be detected by radioassay could be considered as the sample enzyme x. We denoted this sample as sample A. </p>
<p><code>step6:</code>SDS-PAGE should be incorporated to test the sample A’s purity</p>
<p><code>Rational of step6:</code>SDS-PAGE is an analytical technique to separate proteins based on their molecular weight. In SDS-PAGE, the use of sodium dodecyl sulfate (SDS, also known as sodium lauryl sulfate) and polyacrylamide gel largely eliminates the influence of the structure and charge, and proteins are separated solely based on polypeptide chain length. Therefore, it could be used to figure out the samples’ purity.</p>
<p><code>step7</code>:  Dialysis technique should be included to perform purification  for samples containing macromolecules, in this case, enzymes. Some unnecessary salts in the previous steps could be removed.</p>
<p><code>Rational of step7     </code>Dialysis is a separation technique that facilitates the removal of small, unwanted compounds from macromolecules in solution by selective and passive diffusion through a semi-permeable membrane. </p>
<p><code>step8</code>: ion exchange chromatography should be utilized on sample A in the following step. Owing to the fact we have no idea about the pI (isoelectric point) of the protein, we need to include both anion and cation exchanger. In other words, the samples need to conduct the experiments twice.</p>
<p>We should note that the tightly bound ones would be washed away by the high concentrated sodium chloride, the eluted samples should be collected by different tubes</p>
<p>SDS-PAGE should be conducted to figure out the inside components.</p>
<p><code>Rational of step8:</code></p>
<p>The net surface charge of proteins varies according to the surrounding pH. The pH at which a protein has no net charge is called isoelectric point (pI). Above its isoelectric point (pI), a protein will bind to a positively charged anion exchanger. Below its pI, a protein will bind to a negatively charged cation exchanger.</p>
<p>Proteins bind as they are loaded onto a column at low ionic strength. The conditions are then altered so that bound substances are desorbed differentially. Elution is usually performed by increasing salt concentration or changing pH in a gradient. Sodium chloride is usually considered as a suitable candidate to elute the bond ones gradually. By adjusting different concentration sodium chloride solution, we could obtain different protein samples. </p>
<p><code>Step9</code> Repeat the step in step5 and denoted the target sample as sample B.</p>
<p><code>step10:</code> Hydrophobic Interaction Chromatography (HIC) would be utilized on sample B to purify the enzyme X.</p>
<p><code>Rational of step10</code>: it could separate the protein based on the hydrophobicity. In this type of chromatography, hydrophobic groups such as phenyl, octyl, or butyl, are attached to the stationary column. Proteins that pass through the column that have hydrophobic amino acid side chains on their surfaces are able to interact with and bind to the hydrophobic groups on the column. Finally, buffer need to be used to elute the rest proteins.</p>
<p><code>step11</code>: Similarly,  repeat the step in step5 &amp; step6, and denoted the target sample as sample C </p>
<p><code>step12</code>: Gel filtration chromatography should also be included on sample C to filter out the proteins based on their molecules weight. The technique is ideal for the final polishing steps in a purification when sample volumes have been reduced.</p>
<p><code>Rational of step12</code> : The gel filtration chromatography is based on the molecular size and the hydrodynamic volume of the components. The molecules are separated by the differential exclusion or inclusion of solutes as they pass through the stationary phase containing heteroporous cross-linked polymeric gel or beads. Different permeation rates of the solute molecules cause them to sift in the interior of the gel particles. A column of the porous matrix is in equilibrium with the mobile phase for separation of the molecules. Large molecules are entirely excluded from the pores and come first in the effluent. Smaller molecules get distributed between the mobile phase and the outside of the sieve. Then, they pass through the column at a slower rate and appear later in the effluent.</p>
<p><code>step13 </code>: Similarly,  repeat the step in step5 &amp; step6, and denoted the target sample as sample D</p>
<p>Based on the previous 13 steps, we could successfully isolate the mutant enzyme X from the liver of mouse “Y”. For the protein identification, you could turn to 2D gel electrophoresis and mass spectrometry for more details. </p>
<p><code>step14:</code>2D Gel Electrophoresis can be used to characterize the proteins in the remaining samples. </p>
<p><code>Rational behind step14:</code> two dimensional gel electrophoresis could separate proteins based on pI in 1st dimension and operate proteins based on molecular weight in 2nd dimensions</p>
<p><code>step15</code>: Search the online databases, hoping to find the similar results.</p>
<hr>
<p>Your partially purified sample exhibits very strong enzyme X activity in 14C assay but your SDS-PAGE looks like the example shown in the figure below: </p>
<p>What strategies would you use to identify enzyme X from the mixture? Explain how you would carry out the experiment and the reasons of your strategies. [<strong>40 marks</strong>] </p>
<p><strong>Answer:</strong></p>
<p>As learnt from the lecture, there are two widely used methods in protein identification, Edman Degradation and Mass spectrometry.</p>
<p>Edman degradation is the process of purifying protein by sequentially removing one residue at a time from the amino end of a peptide. Phenyl isothiocyanate is added to create a phenylthiocarbamoyl derivative with the N-terminal to remove only one residue at a time. The N-terminal is then cleaved under less harsh acidic conditions, creating a cyclic compound of phenylthiohydantoin PTH-amino acid. This does not damage the protein and leaves two constituents of the peptide.</p>
<p>At the first step, the proteins need to be broken down to peptide fragments by the strong acid which could ensure their terminal would be blocked and cannot be sequenced. High pressure liquid chromatography (HPLC) would be employed to separate the peptides. The amino acid sequencing are then followed to conduct sequence alignment to match the known sequences in the database to identify the protein.</p>
<p>The second choice would be the mass spectrometry. Mass spectrometry measures the mass-to-charge ratio of charged particles, mass spectrometry is used for determining masses of particles and the elemental composition of a sample of molecule as well as for elucidating the chemical structure of molecules such as peptides. </p>
<p>As can be seen from the figure that, four bands, suggesting four proteins, have been got. With either Edman degradation or mass spectrometry, we could utilize the approaches like BLAST to align the sequence stored in database. Since enzyme X in this case still could not be determined, we could use the “process of elimination” to identify the other three proteins.</p>
]]></content>
      <categories>
        <category>Biology</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>biotechnology presentation</title>
    <url>/2021/03/10/2021-03-10-biotechnology-presentation/</url>
    <content><![CDATA[<ol>
<li>Give an introduction to enable the audience to follow the rest of your presentation</li>
<li>Explain the purpose (<strong>scientific question</strong>) of the research in the paper.</li>
<li>Briefly highlight one or two key <strong>approaches</strong>.</li>
<li>Explain the <strong>key findings</strong> of the paper</li>
<li>Discuss the ethical issues involved</li>
</ol>
<p>==Maximum 20 pages==</p>
<ul>
<li><p>Find and digest information about a <strong>biotechnological</strong>/ <strong>ethical</strong> issue </p>
</li>
<li><p><strong>Form an opinion</strong> on the biotechnological / ethical issue and be able to provide arguments to defend your stance</p>
</li>
<li><p><strong>Explain</strong> the technology and illustrate your opinion in a 10’ presentation </p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210310210817.png" alt="image-20210310210811681"></p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Genetic diseases of blood cells are prime candidates for treatment through ex vivo gene editing of CD34+ hematopoietic stem/progenitor cells (HSPCs)</p>
<p><strong>Mechanisms:</strong></p>
<p>SCD is caused by a single-nucleotide polymorphism (SNP) in the seventh codon of the gene for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container>-globin (HBB), one of two globins that make up the major adult form of hemoglobin</p>
<h3 id="Existing-treatment"><a href="#Existing-treatment" class="headerlink" title="Existing treatment"></a>Existing treatment</h3><p><strong>RBDs are produced from the bone marrow and hematopoietic stem cell</strong></p>
<p><strong>RBCs are produced from repopulating hematopoietic stem cells (HSCs) in the bone marrow (BM),</strong> and allogeneic hematopoietic cell transplantation (HCT) from an unaffected human lymphocyte antigen (HLA).matched donor is currently the only lasting cure for SCD</p>
<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems:"></a>Problems:</h4><ul>
<li>Difficulty in identifying donors</li>
<li>Toxicity of the transplant regimen </li>
<li>Graft-versus-host disease</li>
</ul>
<h3 id="What-they-did"><a href="#What-they-did" class="headerlink" title="What they did"></a>What they did</h3><p>hematopoietic stem/progenitor cells (HSPCs)</p>
<p>We <strong>optimize</strong> design and delivery parameters of a <strong>ribonucleo protein (RNP) complex comprising Cas9  protein</strong> and <strong>unmodified single guide RNA</strong>, together with a single-stranded DNA <strong>oligonucleotide donor (ssODN),</strong> to enable efficient replacement of the SCD mutation in human HSPC</p>
<p>ex vivo treated human HSPCs maintain SCD gene edits throughout ==16 weeks== at a level likely to have clinical benefit.</p>
<p>During gene editing, a targeted nuclease creates a double-strand break (DSB) that can be repaired by one of two mechanisms: </p>
<p><strong>error-prone non-homologous end joining (NHEJ)</strong> that results in ==genomic insertions and deletions (indels)== not specific.</p>
<p> ==templated homology-directed repair== (HDR) to precisely insert, delete, or replace a genomic sequence</p>
<p>The recent development of CRISPR-Cas9, a programmable RNA-guided DNA endonuclease, has ignited an explosion of interest in gene editing to cure many genetic disorders, including SCD.Guided by a single guide RNA (sgRNA), the Cas9 nuclease can be programmed to cut a target locus within the genome, allowing rapid iteration and optimization not possible with other gene editing approaches </p>
<h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><ol>
<li><p>an erythroleukemia cell line to explore a panel of Cas9 RNPs that cut near the SCD mutation </p>
</li>
<li><p>RNPs to develop ex vivo editing methods in human HSPCs, achieving up to 33% sequence replacement</p>
</li>
<li><p>We demonstrate efficient correction of the sickle mutation in SCD HSPCs, with corresponding production of WT adult hemoglobin (HbA) RNA and protein in edited, differentiated erythroblasts.</p>
</li>
<li><p>After the edited human HSPCs are engrafted in immunocompromised mice, sequence replacement at the SCD locus is retained 4 months after engraftment at levels likely to have clinical benefit.</p>
</li>
</ol>
<h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><ul>
<li>We chose to use inexpensive, commercially available ssODNs and co-delivered these with Cas9 RNP by electroporation. Under this condition, quickly iterate combinations of sgRNA, HDR donor, and editing conditions.</li>
<li>Two key restrictions when designing sgRNAs and ssODNs for HDR experiments: <ul>
<li>the distance between the sgRNA recognition site and the mutation</li>
<li>the ability to silently ablate the sgRNA protospacer adjacent motif (PAM).<ul>
<li>ensures that Cas9 cannot recut corrected alleles, thus preventing the introduction of indels into the corrected allele</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Find the most active sgRNAs compatible with SCD editing</p>
<p>we identified targets in the first exon of theHBB gene and tested six of them for which the PAM could be silently mutated (G3, G5, G10, G11,G17, and G18) and one for which it could not (G7) (Fig. 1A)</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210312164613.png" alt="image-20210312164612985"></p>
<p>Editing the SCDSNP in K562 cells. (A) Schematic depicting the experimental approach to editing in K562 cells. A panel of 10 sgRNAs that cut within 100 base pairs (bp) of the SCD SNP was selected. A WT-to-SCD edit was programmed by an ssDNA template (T1) bearing silent PAM mutations for the sgRNAs, which also introduces an sfc I restriction site.</p>
<p>T7 endonuclease 1 assay depicting indel formation in pools of cells edited by candidate RNPs.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210312165638.png" alt="image-20210312165637965"></p>
<p>(C) Editing of candidate sgRNAs detected by Sfc I digestion. G5, G10, and a truncated variant, trG10, efficiently edit in K562 cells. </p>
<p>(D) Gene modification of select sgRNAs and templates at the SCD SNP, assessed by NGS. See fig. S1 for definitions of donors T1 and T2. Data are the average of three biological replicates, and error bars indicate SD.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210312165941.png" alt="image-20210312165941781"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210312200352.png" alt="image-20210312200352097"></p>
<p>FigA: (CD45+) Substantial numbers of hematopoietic cells were detectable in BM of all injected mice at 16 weeks</p>
<p>Genotyping of edited HSPCs was performed by NGS immediately after editing and before injection (Fig. 4B) and from mice at weeks 8 (blood) and 16 (BM and spleen脾脏) (Fig. 4, C and D). The input populations had 55 ± 19% indel alleles and 11.8 ± 3.7%HDR alleles (mean ± SD) (Fig. 4B).</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210313103011.png" alt="image-20210313103011191"></p>
<p>To selectively interrogate editing in viable cells, we used NGS to assay HSPCs cultured under erythroid expansion conditions for 7 days after editing (erythroidexpanded), along with edited HSPCs cultured for only 2 days (unexpanded).</p>
<p>We observed appreciable initial levels of editing at the sickle SNP inHSPCs, with HDR rates between 6 and 11% (Fig. 2, A and B). After 5 days of erythroid expansion, HDR rates increased, with up to 33% editing at both high and low doses of RNP (150 and 75 pmol, respectively)</p>
<p>Total editing (%HDR + %NHEJ) in expanded HSPCs was between 66 and 72%, indicating good delivery of the trG10 RNP to HSPCs. In general, higher editing was accompanied by some reduction in viability, as measured by fewer cells remaining after treatment, particularly at a high, 150 pmol dose of RNP</p>
<hr>
<p>NGS analysis revealed consistently high levels of indel alleles after 16 weeks</p>
<p>After 14 days of growth, 96 edited clones were individually genotyped by multiplexed NGS (Table 1). In this experiment, 21% of alleles were HDR. However, these alleles were spread among 32% of the cells. This increased prevalence of edited cells relative to edited alleles is predicted by the independent assortment of alleles within a population (although we observed that homozygous genotypeswere still overrepresented relative to a prediction based on random assortment)</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210313094143.png" alt="image-20210313094143326"></p>
<p>In this model, edited human stem cells must engraft in the mouse and persist over several months for them to be observed in subsequent experiments</p>
<p>After 16weeks, progenitor cells should be lost from the system, and human cells in the BM should be derived from long-term repopulating stem cells within the initial HSPC population</p>
<h2 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h2><ul>
<li>Unlike gene therapy using integrating viral vectors, wherein regulation of the introduced gene may be compromised and endogenous genes may be disrupted, gene editing corrects the disease mutation <strong>at the endogenous locus</strong></li>
<li>No need to introduce a nonnative selection marker</li>
<li>edits do not typically confer a selective advantage in the target cell compartment, as is the case for correction of the HBB sickle mutation in BM stem cells</li>
</ul>
<p>We used K562 cells to iterate combinations of Cas9 RNPs and ssODNs that edit the HBB gene and then applied these reagents to human HSPCs. </p>
<p>These reagents efficiently induce HDR-mediated editing of the SCD mutation in HSPCs <strong>with minimal genic off-target activity.</strong></p>
<p>we found no apparent decrease in off-target activity compared to the full-length guide, possibly due to the extremely high homology between the on- and off-target sites. RNP delivery has been associated with reduced off-target effects</p>
<p>this modality could allow efficient editing of disease mutations in HSPCs using full-length unmodified sgRNAs such as G10</p>
<p>To reduce off-target activity, we tested several recently characterized high-fidelity Cas9 variants as RNPs, but chose to pursue WT Cas9 due to their reduced on-target activity</p>
<p>the co-delivered RNP/ssODN approach described here is nonviral, modular, and readily optimized</p>
<p>However, HDR was still diminished relative to the input CD34+ populations. Reductions in HDR frequency during long-term engraftment have been observed previously and remain a major impediment to bringingHDR-based therapies to the clinic (14, 15, 21). It may be thatHDR-editedHSCs do not engraft as well as unedited cells, that theHDRdonors are themselves toxic, or that HSCs are intrinsically more difficult to edit than other CD34+ cells</p>
<p>Corrected SCD HSPCs produced greatly reduced sickle and increased WT hemoglobin protein and b-globin mRNA</p>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h2><ol>
<li>it is possible that the allelic correction frequency we observed in the HSPC population will ameliorate but not eliminate the clinical expression of SCD. </li>
<li>it is still an intensive procedure, requiring myeloablative conditioning, which can have serious side effects.</li>
<li>clinical translation of an HSCT-based therapy is not feasible in developing countries, where SCD is most prevalent. We anticipate that further developments will address these remaining issues</li>
</ol>
<p>Ethical problems</p>
<ul>
<li>But a capability for making precise changes to the human genome raises all kinds of difficult questions about how far we should go with it</li>
<li>Should genome engineering be restricted to the avoidance of genetic disease, or might it be justified for genetic enhancement</li>
<li>How can we distinguish one from the other</li>
<li>Where are the limits on the possible or permissible – giving us infrared vision, say, or tolerance to extreme cold, or the ability to photosynthesise?</li>
<li> Should we use Crispr on the human germline, so that modifications are inherited by future generations?</li>
</ul>
<p>The last issue has become particularly explosive since the revelation that Crispr was used in 2018 by Chinese biologist He Jiankui to modify twin embryos used for IVF, resulting in the birth of two girls allegedly containing alleles that would confer protection from infection by HIV. It wasn’t just that He bypassed ethical regulations, nor even that he chose to use germline editing for pre-emptive protection. It was also that he did the job rather poorly and without any clear evidence that the procedure was safe.</p>
<hr>
<ul>
<li><p>inheritable modifications</p>
</li>
<li><p>it is not necessarily as accurate as it is sometimes portrayed</p>
</li>
<li><p>lead to off-target modifications, the health consequences of which are unknown and unpredictable</p>
</li>
</ul>
<hr>
<ul>
<li><p>worldwide legislation should be prepared</p>
</li>
<li><p>CRISPR-Cas9 should be allowed for use in the creation of human disease models, and in understanding the development and molecular mechanisms of diseases</p>
</li>
<li><p>Should be prohibitive for the purposes of eugenics or enhancement.</p>
</li>
<li><p>Heredity problems</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Biology</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令行快捷键</title>
    <url>/2021/03/13/2021-03-13-Linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Ctrl+a: 跳到本行的行首，<br>Ctrl+e: 则跳到页尾。<br>Ctrl+u: 删除当前光标前面的文字<br>ctrl+k: 删除当前光标后面的文字<br>Ctrl+w 和 Alt+d: 对于当前的单词进行删除操作，w删除光标前面的单词的字符，d则删除后面的字符<br>Alt+Backsapce: 删除当前光标后面的单词，</p>
<hr>
<p>如果删除错误，使用Ctrl+y进行恢复Ctrl+L进行清屏操作</p>
<p>ctrl+a:光标移到行首。<br>ctrl+b:光标左移一个字母<br>ctrl+c:杀死当前进程。<br>ctrl+d:退出当前 Shell。<br>ctrl+e:光标移到行尾。<br>ctrl+h:删除光标前一个字符，同 backspace 键相同。<br>ctrl+k:清除光标后至行尾的内容。<br>ctrl+l:清屏，相当于clear。<br>ctrl+r:搜索之前打过的命令。会有一个提示，根据你输入的关键字进行搜索bash的history<br>ctrl+u: 清除光标前至行首间的所有内容。<br>ctrl+w: 移除光标前的一个单词<br>ctrl+t: 交换光标位置前的两个字符<br>ctrl+y: 粘贴或者恢复上次的删除<br>ctrl+d: 删除光标所在字母;注意和backspace以及ctrl+h的区别，这2个是删除光标前的字符<br>ctrl+f: 光标右移<br>ctrl+z : 把当前进程转到后台运行，使用’ fg ‘命令恢复。比如top -d1 然后ctrl+z ，到后台，然后fg,重新恢复<br>esc组合<br>esc+d: 删除光标后的一个词<br>esc+f: 往右跳一个词<br>esc+b: 往左跳一个词<br>esc+t: 交换光标位置前的两个单词。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C#下Visual Studio 中相关的文件识别及其用途</title>
    <url>/2021/03/18/2021-03-18-Visual-Studio-%E4%B8%AD%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%86%E5%88%AB%E5%8F%8A%E5%85%B6%E7%94%A8%E9%80%94/</url>
    <content><![CDATA[<p>​        <strong>sln</strong>：解决方案文件，主要包括工程项目组织结构、位置、工程编译环境配置等信息，具体感兴趣的可以去<a class="link"   href="http://blog.csdn.net/beijiguangyong/article/details/6460586%E4%BA%86%E8%A7%A3%EF%BC%9B%E5%85%B6%E8%AE%B0%E5%BD%95%E7%9A%84%E4%BF%A1%E6%81%AF%E4%B8%8D%E7%AE%97%E5%A4%9A%EF%BC%9B" >http://blog.csdn.net/beijiguangyong/article/details/6460586了解；其记录的信息不算多；<i class="fas fa-external-link-alt"></i></a><br>　　<strong>ncb</strong>：(no compile browser)VC++自动创建的信息跟踪文件，可以删除，重新打开解决方案后会自动再次创建，此文件一般比较大；<br>　　<strong>suo</strong>：储存了用户界面的自定义配置，包括布局、断点和项目最后编译的而又没有关掉的文件等，以便下一次你打开Visual Studio可以恢复这些设置，一般为隐藏文件；<br>　　<strong>sdf</strong>：解决方案工程信息数据库文件，此文件同ncb文件，都比较大，也可以删除，重新打开解决方案后会自动创建，主要提供提供的智能感知、代码恢复等信息；<br>　　<strong>ipch</strong>：主要保存预编译的头文件和智能提示信息用的，也可以删除，重新打开解决方案后会自动创建；<br>　　<strong>VC.db</strong>：SQLite3格式的文件，里面应是项目相关的文件信息，同ncb、sdf文件，一般比较大可删除，重新打开解决方案后会自动创建；<br>　　<strong>VC.VC.opendb</strong>：此文件在项目打开的时候创建，关闭的时候自动删除，目前作用未知；<br>　　<strong>vcproj</strong>、<strong>vcxproj</strong>：项目工程文件，里面包含的该工程的工具集、工程编译、链接、调试等相关的配置；不同VS IDE的项目转化，可以通过修改此文件实现，低版本转高版本IDE，则直接打开即可，而高版本转到低版本需要修改工程文件，另外版本间转化可能会出现某些API使用等限制，可能需要修改、替换；vcproj与vcxproj内容、结构还是有所差异，转化时需要修改的地方比较多，如果修改的地方比较多，可以重新建立工程将相应文件添加进去，修改工程属性也可；<br>　　<strong>vcxproj.user</strong>：不同用户有不同的本地用户配置，主要是一些窗体布局、位置等，与项目具体内容一般无关，可删除；<br>　　<strong>filters</strong>：一般为虚拟目录，及项目工程解决方案视图下分类过滤器目录，一般不要删除，否则可能导致所有文件杂糅在一起；<br>　　<strong>ReadMe.txt</strong>：里面主要是一些工程创建时向导产生的各个文件描述信息；<br>　　<strong>targetver.h</strong>：主要定义程序运行的环境，如限制程序、定制版本，如WINVER、_WIN32_WINNT、_WIN32_WINDOWS、_WIN32_IE等宏定义，此外有的版本还包括SDKDDKVer.h或WinSDKVer.h平台版本控制；<br>　　<strong>stdafx.h</strong>：包含targetver.h，可定义或声明一些公用函数、宏、结构、需要的头文件等信息，因各个cpp一般会包含引用stdafx.h，故以此实现控制各个cpp文件中可能用到的宏控制等以及预编译；<br>　　<strong>stdafx.cpp</strong>：很少做其他的用途，一般只是#include “stdafx.h”，已生成pch预编译头，当然用户也可以根据需要做其他的功能实现等，采用预编译头文件方式,从而可以加速编译过程；<br>　　<strong>rc/rc2</strong>：资源文件，应用程序中用到的所有的资源，其中rc文件中的资源可以直接在VC集成环境中以可视化的方法进行编辑和修改，rc2则可根据需要只能手动修改，一般使用的时候可根据需要在rc文件中包含rc2文件；<br>　　<strong>rc2</strong>文件可以单独独立提出来，供不同工程项目rc文件include使用而不用每个工程都去创建相同的rc2文件内容，不同项目工程应有自己的rc文件，事实上rc文件中还可以包含其他的rc文件；<br>　　<strong>aps</strong>：主要记录资源信息, aps可以删除,进入程序,重新打开解决方案后会自动生成；<br>　　<strong>ico</strong>：应用程序的图标资源文件；<br>　　<strong>dllmain.cpp</strong>：DLL应用程序的入口点，这里边可以做一些库第一次加载、卸载，以及新线程加载该库时执行的相关的工作，比如通信socket、某些全局变量、共享资源、挂钩等管理；<br>　　<strong>def</strong>：一般是用作动态库导出文件，里面主要包含导出库名、描述、导出的各个函数；若不使用export导出函数或类，可采用def的方式也比较简单，而且还可以导出相同函数地址的不同得名称，其可防止导出函数重命名，以供其他编程语言或工具使用；<br>　　<strong>props/vsprops</strong>：工程属性表文件，后者为vs2008的，前者为vs2010及以后版本的，其主要包含工程属性配置相关，可以单独提取出来供不同工程项目公共使用；<br>　　<strong>pdb</strong>：调试的符号文件，用于保存调试的信息供VS IDE调试使用；<br>　　<strong>ilk</strong>：增量链接期间产生的临时文件，若取消生成，则可能导致编译链接比较慢；<br>　　<strong>obj</strong>：<strong>c</strong>、<strong>cpp</strong>编译后的二进制目标文件，内部包含程序相对地址，在链接阶段加入link与相关lib等链接，可生产exe文件；<br>　　<strong>log</strong>：主要记录编译过程中的输出信息、日志；<br>　　<strong>exe</strong>：编译、链接后产生的可执行文件，当然也可以是库，exe相对obj来说，前者提供的是绝对地址，而后者只是提供相好地址；<br>　　<strong>lib</strong>：生成的静态库文件或者动态库dll的引入库文件；<br>　　<strong>dll</strong>：生成的动态库dll；<br>　　<strong>exp</strong>：生成动态库dll时的临时导出库，主要用在多个库相应引用链接时，供IDE使用；一般客户或开发人员不会使用到该文件；<br>　　<strong>manifest</strong>：VS提供的程序部署、清单文件，内部定义了程序运行时的依赖关系、依赖的文件库，如CRT、MFC库名称和版本等信息；</p>
<p>　　重要文件说明：</p>
<p>　　<strong>pdb</strong>：调试的符号文件，程序数据库 (PDB) 文件保存着调试和项目状态信息，使用这些信息可以对程序的调试配置；具体可以参见另外一篇文章《Microsoft Visual Studio PDB文件相关事宜》。<br>　　<strong>obj</strong>：c、cpp编译后的二进制目标文件，一般提供给IDE链接用的，当然也可以将其发给客户或开发人员使用并提供h头文件，不过这样的做法很少，一般给用户的是编译后的dll或exe；<br>　　<strong>lib</strong>：分为静态库文件和动态库dll的引入库文件，前者供其他模块或程序静态链接，后者只是提供方便的隐式链接而不是调用LoadLibrary和频繁的GetProcessAddress；<br>　　<strong>dll</strong>：动态库文件，供客户或其他开发人员使用，一般附加h头文件，或者某些还提供lib引入库或def文件；def获取到lib可参见另外一篇文章《通过dll或def文件提取lib导入库文件》介绍使用说明；<br>　　<strong>manifest</strong>：VS提供的程序部署、清单文件，在早些时候编译的Debug或Release版本的程序时需要提供该清单文件，不过可以通过配置工程属性实现程序的内嵌该清单文件，此外还可以根据需要提供额外的其他清单文件；具体的使用、注意事项可以参见另外一篇文章《Microsoft Visual Studio 开发的C++程序软件发布相关事宜》；<br>　　<strong>props</strong>/<strong>vsprops</strong>：工程属性表文件，具体可参见另外一篇文章《Microsoft Visual Studio 工程属性表props/vsprops创建与使用》；</p>
]]></content>
      <categories>
        <category>IDEs</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>Visual Studio</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC 模式</title>
    <url>/2021/03/23/2021-03-23-MVC-%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>作者：颜群<br>链接：<a class="link" href="https://zhuanlan.zhihu.com/p/101038664">https://zhuanlan.zhihu.com/p/101038664<i class="fas fa-external-link-alt"></i></a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>MV模式和三层架构几乎是Java开发者每天都要接触的最基础、也是最核心的架构知识了。但总有人将二者分不清楚，希望本文能够帮助到你。</p>
<h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a><strong>MVC模式</strong></h3><p><strong>MVC模式</strong>是软件工程中常见的一种软件架构模式，该模式把软件系统（项目）分为三个基本部分：<strong>模型（Model）、视图（View）和控制器（Controller）。</strong></p>
<p>使用MVC模式有很多优势，例如:简化后期对项目的修改、扩展等维护操作；使项目的某一部分变得可以重复利用；使项目的结构更加直观。</p>
<p>具体来讲，MVC模式可以将项目划分为模型（M）、视图（V）和控制器（C）三个部分，并赋予各个部分不同的功能，方便开发人员进行分组。</p>
<p><strong>（1）视图（View）：</strong>负责界面的显示，以及与用户的交互功能，例如表单、网页等。</p>
<p><strong>（2）控制器（Controller）：</strong>可以理解为一个分发器，用来决定对于视图发来的请求，需要用哪一个模型来处理，以及处理完后需要跳回到哪一个视图。即用来连接视图和模型。</p>
<p>实际开发中，通常用控制器对客户端的请求数据进行封装（如将form表单发来的若干个表单字段值，封装到一个实体对象中），然后调用某一个模型来处理此请求，最后再转发请求（或重定向）到视图（或另一个控制器）。</p>
<p><strong>（3）模型（Model）：</strong>模型持有所有的数据、状态和程序逻辑。模型接受视图数据的请求，并返回最终的处理结果。</p>
<p>实际开发中，通常用封装数据的JavaBean和封装业务的JavaBean来实现模型层。</p>
<p>MVC模式的流程如下：浏览器通过视图向控制器发出请求，控制器接收到请求之后通过选择模型进行处理，处理完请求以后再转发到视图，进行视图界面的渲染并做出最终响应，如图所示。</p>
<p>在MVC模式中，视图View可以用JSP/HTML/CSS实现，模型Model可以用JavaBean实现，而控制器Control就可以用Servlet来实现。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210323133804.jpg" alt="img"></p>
<h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a><strong>三层架构</strong></h3><p><strong>“三层”是指表示层（USL，User Show Layer）、业务逻辑层（BLL，Business Logic Layer）、数据访问层（DAL，Data Access Layer）</strong>，各层的位置如图所示。三层中使用的数据，是通过实体类（封装数据的JavaBean）来传递的。实体类一般放在entity包下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210323133804.jpg" alt="img"></p>
<h3 id="1．数据访问层（DAL）"><a href="#1．数据访问层（DAL）" class="headerlink" title="1．数据访问层（DAL）"></a><strong>1．数据访问层（DAL）</strong></h3><p>数据访问层也称为持久层，位于三层中的最下层，用于对数据进行处理。该层中的方法一般都是“原子性”的，即每个方法都不可再分。比如，可以在DAL层中实现数据的增删改查操作，而增、删、改、查四个操作是非常基本的功能，都是不能再拆分的。</p>
<p>在程序中，DAL一般写在dao包中，包里面的类名也是以“Dao”结尾，如StudentDao.java、DepartmentDao.java、NewsDao.java等；换句话说，在程序中，DAL是由dao包中的多个“类名Dao.java”组成。每个“类名Dao.java”类，就包含着对该“类名”的所有对象的数据操作，如StudentDao.java中包含对Student对象的增、删、改、查等数据操作，DepartmentDao.java中包含对Department对象的增、删、改、查等数据操作。</p>
<h3 id="2．业务逻辑层（BLL）"><a href="#2．业务逻辑层（BLL）" class="headerlink" title="2．业务逻辑层（BLL）"></a><strong>2．业务逻辑层（BLL）</strong></h3><p>位于三层中的中间层（DAL与USL中间），起到了数据交换中承上启下的作用，用于对业务逻辑的封装。BLL的设计对于一个支持可扩展的架构尤为关键，因为它扮演了两个不同的角色。对于DAL而言，它是调用者；对于USL而言，它是被调用者。依赖与被依赖的关系都纠结在BLL上。</p>
<p>使用上，就是对DAL中的方法进行“组装”。比如，该层也可以实现对Student对象的增删改查，但与DAL不同的是，BLL中的增、删、改、查不再是 “原子性”的功能，而是包含了一定的业务逻辑。比如该层中的“删”不再像DAL中那样仅仅实现“删”，而是在“删”之前要进行业务逻辑的判断：先查找该学生是否存在（即先执行DAL层的“查”），如果存在才会真正地“删”（再执行DAL层的“删”），如果该学生不存在则应该提示错误信息。即BLL中的“删”，应该是“带逻辑的删”（即先“查”后“删”），也就是对DAL中的“查”和“删”两个方法进行了“组装”。</p>
<p>在程序中，BLL一般写在service包（或biz包）中，包里面的类名也是以“Service（或Biz）”结尾，如StudentService.java、DepartmentService.java、NewsService等。换句话说，在程序中，BLL是由service包中的多个“类名Service.java”组成。每个“类名Service.java”类，就包含着对该“类名”的对象的业务操作，如StudentService.java中包含对Student对象的“带逻辑的删”、“带逻辑的增”等业务逻辑操作，DepartmentService.java中包含对所有Department对象的“带逻辑的删”、“带逻辑的增”等业务逻辑操作。</p>
<h3 id="3．表示层（USL）"><a href="#3．表示层（USL）" class="headerlink" title="3．表示层（USL）"></a><strong>3．表示层（USL）</strong></h3><p>位于三层中的最上层，用于显示数据和接收用户输入的数据，为用户提供一种交互式操作的界面。USL又分为“USL前台代码”和“USL后台代码”，其中“USL前台代码”是指用户能直接访问到的界面，一般是程序的外观（如html文件、JSP文件等），类似于MVC模式中的“视图”；“USL后台代码”是指用来调用业务逻辑层的JAVA代码（如Servlet），类似于MVC模式中的“控制器”。表示层前台代码一般放在WebContent目录下，而表示层后台代码目前放在servlet包下。</p>
<p>MVC模式与三层架构的关系如图所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210323133804.jpg" alt="img"></p>
<p>MVC模式和三层架构，是分别从两个不同的角度去设计的，但目的都是“解耦，分层，代码复用等”。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL where 1 = 1 用法</title>
    <url>/2021/03/24/2021-03-24-SQL-where-1-=-1-%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="sql-where-1-1-规范代码"><a href="#sql-where-1-1-规范代码" class="headerlink" title="sql where 1=1 规范代码"></a>sql where 1=1 规范代码</h1><h3 id="在讲解这个问题的时候，首先来看一个例子。"><a href="#在讲解这个问题的时候，首先来看一个例子。" class="headerlink" title="在讲解这个问题的时候，首先来看一个例子。"></a>在讲解这个问题的时候，首先来看一个例子。</h3><p>看一下这两个句子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这两个 句子执行结果是一样一样的。而sql注入就是利用了这个原理 来进行破坏。比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1000&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果允许用户输入的话，那么这个句子就成了：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这样的话，这个句子就是恒成立的了。</p>
<ul>
<li><p>上述1=1 的使用，会影响预先指定的查询结果，使得本来要查询的数据 失效。</p>
</li>
<li><p>where 1=1 这种写法 虽然给程序开发人员带来不便，还要避免sql注入的问题。      </p>
</li>
<li><p>但 “1=1” 这种写法 也会给程序编写增加了方便。</p>
</li>
</ul>
<h2 id="1-1-可以很方便的规范语句"><a href="#1-1-可以很方便的规范语句" class="headerlink" title="1=1 可以很方便的规范语句"></a>1=1 可以很方便的规范语句</h2><p>对于组合查询的来说，因为查询比较模糊，而查询的where条件的个数也不确定。<br>一般这样的sql语句进行查询的时候：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sql.append(<span class="string">&quot;select * from User&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (whereUser.getID()!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    sql.append(<span class="string">&quot; where ID=@id&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (whereUser.getName()!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    sql.append(<span class="string">&quot; and Name=@name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (whereUser.getAddress()!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    sql.append(<span class="string">&quot; and Phone=@phone&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上述这种写法，逻辑上感觉没有问题。但是如果whereUser里面的id为空。那么最后拼接出来得到的语句会成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">and</span> Name<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span> <span class="keyword">and</span> Phone<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这条语句 没有where关键字，肯定会报错的。但是如果说，既然条件个数未知，那么把where关键字放到 if外面去</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sql.append(<span class="string">&quot;select * from User&quot;</span>);</span><br><span class="line">sql.append(<span class="string">&quot;where&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (whereUser.getID()!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    sql.append(<span class="string">&quot; ID=@id&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (whereUser.getName()!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    sql.append(<span class="string">&quot; and Name=@name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (whereUser.getAddress()!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    sql.append(<span class="string">&quot; and Phone=@phone&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样写的话，如果三个条件都为空。则这是一条不带查询条件的查询。那么最后这条语句会被解析成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span>;</span><br></pre></td></tr></table></figure>
<p>   这条语句，空有where关键字 没有条件，照样会报错的。</p>
<p>   对于解决上述这种未知的问题，只能进行各种情况的判断进行拼接。当然可以用“where 1=1”进行代码的规范：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">sql.append(&quot;select * from User where 1=1 &quot;);</span><br><span class="line">if (whereUser.getID()!=&quot;&quot;) &#123;</span><br><span class="line">    sql.append(&quot; and ID=@id&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (whereUser.getName()!=&quot;&quot;) &#123;</span><br><span class="line">    sql.append(&quot; and Name=@name&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (whereUser.getAddress()!=&quot;&quot;) &#123;</span><br><span class="line">    sql.append(&quot; and Phone=@phone&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上述的这种写法，无论是否有条件 都是可以成立的。</p>
<p>无条件的的时候：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>有条件的时候:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> id<span class="operator">=</span><span class="string">&#x27;XX&#x27;</span> ……;</span><br></pre></td></tr></table></figure>
<p>​       这样写的代码，会比 分情况判断的代码 更规范。对于以上的写法，并不是唯一的。也可以使 where ‘a’=’a’ 、’a’&lt;&gt;’b’等。</p>
<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a class="link"   href="https://blog.csdn.net/zc474235918/article/details/50544484" >https://blog.csdn.net/zc474235918/article/details/50544484<i class="fas fa-external-link-alt"></i></a><br>————————————————<br>版权声明：本文为CSDN博主「赵崇」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a class="link"   href="https://blog.csdn.net/zc474235918/article/details/50544484" >https://blog.csdn.net/zc474235918/article/details/50544484<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Databases</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 笔记</title>
    <url>/2021/03/17/2021-03-17-HTML-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="HTML-一些面试知识点"><a href="#HTML-一些面试知识点" class="headerlink" title="HTML 一些面试知识点"></a>HTML 一些面试知识点</h2><h3 id="HTML-中-href、src-区别"><a href="#HTML-中-href、src-区别" class="headerlink" title="HTML 中 href、src 区别"></a><strong>HTML 中 href、src 区别</strong></h3><p>href 是 Hypertext Reference 的缩写，表示超文本引用。用来建立当前元素和文档之间的链接。常用的有：link、a。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"reset.css"</span> <span class="attr">rel</span>=<span class="string">”stylesheet“/</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器会识别该文档为 css 文档，并行下载该文档，并且不会停止对当前文档的处理。这也是建议使用 link，而不采用 @import 加载 css 的原因。 src 是 source 的缩写，src 的内容是页面必不可少的一部分，是引入。src 指向的内容会嵌入到文档中当前标签所在的位置。常用的有：img、script、iframe。例如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当浏览器解析到该元素时，会暂停浏览器的渲染，直到该资源加载完毕。这也是将js脚本放在底部而不是头部得原因。</p>
<p>简而言之，src 用于替换当前元素；href 用于在当前文档和引用资源之间建立联系。</p>
<h3 id="记录一下-html-相对路径的写法："><a href="#记录一下-html-相对路径的写法：" class="headerlink" title="记录一下 html 相对路径的写法："></a><strong>记录一下 html 相对路径的写法：</strong></h3><ul>
<li> **./**：代表文件所在的目录（可以省略不写）如果写成image/background就相当于是在html文件下找image文件夹，当然是找不到的</li>
<li> **../**：代表文件所在的父级目录</li>
<li> **../../**：代表文件所在的父级目录的父级目录</li>
<li> **/**：代表文件所在的根目录</li>
</ul>
<h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><ol>
<li><p>一些标签的使用，切记所有标签都需要闭合，不管是单体标签还是成对标签。（尽管目前浏览器是识别有些标签不闭合的情况，但是取的最好的保证兼容性，使用闭合）</p>
</li>
<li><p>标签写法要用小写字母（有些版本对大小写可认为相同，而xhtml中强制使用小写）</p>
</li>
</ol>
<h2 id="初识HTML"><a href="#初识HTML" class="headerlink" title="初识HTML"></a>初识HTML</h2><p>Hyper Tex Markup Language (超文本标记语言)</p>
<p>HTML5 + CSS3</p>
<h3 id="W3C-标准包括"><a href="#W3C-标准包括" class="headerlink" title="W3C 标准包括"></a>W3C 标准包括</h3><ul>
<li><strong>结构</strong>话标准语言（HTML,XML）</li>
<li><strong>表现</strong>标准语言 （CSS）</li>
<li><strong>行为</strong>标准（DOM,ECMAscript）</li>
</ul>
<h3 id="HTML-的基本结构"><a href="#HTML-的基本结构" class="headerlink" title="HTML 的基本结构"></a>HTML 的基本结构</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325131323.png" alt="image-20210325131317927"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DOCTYPE：告诉浏览器，我们使用什么规范--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--head 代表网页的头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    meta 描述性标签，他用来描述我们网站的一些信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    meta 一般用来做SEO--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"狂神说java"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"这里学java"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    title网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--body代表网页主题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位…</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210413090314.jpg" alt="img"></p>
<h2 id="meta标签的组成"><a href="#meta标签的组成" class="headerlink" title="meta标签的组成"></a>meta标签的组成</h2><p><code>meta</code>标签共有两个属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. http-equiv属性</span><br><span class="line">2. name属性</span><br></pre></td></tr></table></figure>
<p>不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。</p>
<h3 id="http-equiv属性"><a href="#http-equiv属性" class="headerlink" title="http-equiv属性"></a><strong>http-equiv属性</strong></h3><p><code>http-equiv</code>顾名思义，相当于<code>http</code>的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为<code>content</code>，<code>content</code>中的内容其实就是各个参数的变量值。<br><code>meta</code>标签的<code>http-equiv</code>属性语法格式是：<br><code>＜meta http-equiv=”参数” content=”参数变量值”＞</code><br>其中<code>http-equiv</code>属性主要有以下几种参数：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Set-Cookie”</span> <span class="attr">content</span>=<span class="string">”cookievalue</span>=<span class="string">xxx;</span> <span class="attr">expires</span>=<span class="string">Friday,12-Jan-2001</span> <span class="attr">18:18:18</span> <span class="attr">GMT</span>; <span class="attr">path</span>=<span class="string">/”</span>&gt;</span>:如果网页过期，那么存盘的cookie将被删除。必须使用GMT的时间格式。</span><br><span class="line">2.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'expires'</span> <span class="attr">content</span>=<span class="string">'时间'</span> &gt;</span>：用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</span><br><span class="line">3.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Refresh”</span> <span class="attr">content</span>=<span class="string">”5;URL”</span>&gt;</span>：告诉浏览器在【数字】秒后跳转到【一个网址】</span><br><span class="line">4.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”content-Type”</span> <span class="attr">content</span>=<span class="string">”text/html;</span> <span class="attr">charset</span>=<span class="string">utf-8″</span>&gt;</span>：设定页面使用的字符集。</span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">”utf-8″</span>&gt;</span>：在HTML5中设定字符集的简写写法。</span><br><span class="line">5.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Pragma”</span> <span class="attr">content</span>=<span class="string">”no-cache”</span>&gt;</span>：禁止浏览器从本地计算机的缓存中访问页面内容。访问者将无法脱机浏览。</span><br><span class="line">6.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Window-target”</span> <span class="attr">content</span>=<span class="string">”_top”</span>&gt;</span>：用来防止别人在iframe(框架)里调用自己的页面，这也算是一个非常实用的属性。</span><br><span class="line">7.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'X-UA-Compatible'</span> <span class="attr">content</span>=<span class="string">'IE=edge,chrome=1'</span>&gt;</span> :强制浏览器按照特定的版本标准进行渲染。但不支持IE7及以下版本。如果是ie浏览器就用最新的ie渲染，如果是双核浏览器就用chrome内核。</span><br></pre></td></tr></table></figure>
<h3 id="name属性"><a href="#name属性" class="headerlink" title="name属性\"></a><strong><em>name属性\</em></strong></h3><p>主要用于描述网页，与之对应的属性值为<code>content</code>，<code>content</code>中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。<br><code>meat</code>标签的<code>name</code>属性语法格式是：<br><code>＜meta name=”参数” content=”具体的参数值”＞</code><br>其中<code>name</code>属性主要有以下几种参数：<br>name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。<br>meat标签的name属性语法格式是：＜meta name=”参数” content=”具体的参数值”＞ 。<br>其中name属性主要有以下几种参数：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">device-width,</span> <span class="attr">initial-scale</span>=<span class="string">1,</span> <span class="attr">maximum-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span>&gt;</span>：在移动设备浏览器上，禁用缩放（zooming）功能，用户只能滚动屏幕。</span><br><span class="line">2.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”description”</span> <span class="attr">content</span>=<span class="string">””</span>&gt;</span>：告诉搜索引擎，当前页面的主要内容是xxx。</span><br><span class="line">3.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”keywords”</span> <span class="attr">content</span>=<span class="string">””</span>&gt;</span>：告诉搜索引擎，当前页面的关键字。</span><br><span class="line">4.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”author”</span> <span class="attr">content</span>=<span class="string">””</span>&gt;</span>：告诉搜索引擎，标注网站作者是谁。</span><br><span class="line">5.<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”copyright”</span> <span class="attr">content</span>=<span class="string">””</span>&gt;</span>：标注网站的版权信息。</span><br></pre></td></tr></table></figure>
<h3 id="meta中name标签的功能"><a href="#meta中name标签的功能" class="headerlink" title="meta中name标签的功能"></a><strong>meta中name标签的功能</strong></h3><p>１、帮助主页被各大搜索引擎登录<br><code>meta</code>标签的一个很重要的功能就是设置关键字，来帮助你的主页被各大搜索引擎登录，提高网站的访问量。<br>在这个功能中，最重要的就是对<code>Keywords</code>和<code>description</code>的设置。因为按照搜索引擎的工作原理,搜索引擎首先派出机器人自动检索页面中的<code>keywords</code>和<code>decription</code>，并将其加 入到自己的数据库，然后再根据关键词的密度将网站排序。<br>因此，我们必须设置好关键字，来提高页面的搜索点击率。下面我们来举一个例子供大家参考：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”keywords”</span> <span class="attr">content</span>=<span class="string">”网页,网页制作,网页特效,建站指南,教程下载,动画制作,网页教学，网页素材，视频教程，技术论坛，免费空间，免费域名”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”description”</span> <span class="attr">content</span>=<span class="string">”网页教学网,专业的网页教学网站”＞</span></span></span><br></pre></td></tr></table></figure>
<p>设置好这些关键字后，搜索引擎将会自动把这些关键字添加到数据库中，并根据这些关键字的密度来进行合适的排序</p>
<p>作者：缺月楼<br>链接：<a class="link" href="https://www.jianshu.com/p/179ddc16ef55">https://www.jianshu.com/p/179ddc16ef55<i class="fas fa-external-link-alt"></i></a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="网页的基本标签"><a href="#网页的基本标签" class="headerlink" title="网页的基本标签"></a>网页的基本标签</h2><ul>
<li>标题标签</li>
<li>段落标签</li>
<li>换行标签</li>
<li>水平线标签</li>
<li>字体样式标签</li>
<li>注释和特殊符号</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一级标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快  跑得快<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行标签，是自闭合的,紧凑的和段落标签不同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--粗体和斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字体样式标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">粗体：i love you</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>i low you <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>i love you <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空         格</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 版权所有</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">特殊符号记忆</span></span><br><span class="line"><span class="comment">&amp;+</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210413083825.png" alt="image-20210325133103244"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图像标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--image 地址学习</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">src:图片地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">相对路径 (推荐)</span></span><br><span class="line"><span class="comment">绝对路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">../ 代表上一级的目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">alt: 图片名字，必须填写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"1303"</span> <span class="attr">height</span>=<span class="string">"1695"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="超链接标签及其应用"><a href="#超链接标签及其应用" class="headerlink" title="超链接标签及其应用"></a>超链接标签及其应用</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325142300.png" alt="image-20210325133833095"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span> <span class="attr">name</span>=<span class="string">"顶部"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- a 标签</span></span><br><span class="line"><span class="comment">href: 必须要填，表示需要跳转到哪一个界面</span></span><br><span class="line"><span class="comment">target:表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">    _blank 在新的标签中打开</span></span><br><span class="line"><span class="comment">    _self  在自己的网页中打开</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span><span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>点击我转到页面一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span><span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>点击我转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图拍呢超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo01.html"</span>&gt;</span>点击我转到页面一</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">"model"</span> <span class="attr">title</span>=<span class="string">"鼠标悬停名字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1. 需要一个锚标记</span></span><br><span class="line"><span class="comment">2. 跳转到标记！</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"down"</span>&gt;</span>down<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 功能性链接</span></span><br><span class="line"><span class="comment">邮件链接: mailto</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:yuxuan.wu17@gmail.com"</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h2><p>块元素</p>
<pre><code>- 无论内容多少，该元素独占一行
- （p, h1-h6）</code></pre>
<p>行内元素</p>
<ul>
<li>内容撑开宽度，左右都是行内元素的可以排在一行</li>
<li>(a.strong, em … )</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表的分类</p>
<ul>
<li>无序列表</li>
<li>有序列表</li>
<li>定义列表</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表</span></span><br><span class="line"><span class="comment">应用范围：试卷，问答</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--无序列表</span></span><br><span class="line"><span class="comment">应用范围：导航，侧边栏</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">公司网站底部</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>位置<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>新疆<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>苏州<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><h3 id="为什么使用表格"><a href="#为什么使用表格" class="headerlink" title="为什么使用表格"></a>为什么使用表格</h3><ul>
<li>简单通用</li>
<li>结构稳定</li>
</ul>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul>
<li>单元格</li>
<li>行</li>
<li>列</li>
<li>跨行</li>
<li>跨列</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格table</span></span><br><span class="line"><span class="comment">行 tr rows</span></span><br><span class="line"><span class="comment">列 td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        colspan 跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="音频和视频"><a href="#音频和视频" class="headerlink" title="音频和视频"></a>音频和视频</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"../resources/video/..mp4"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>src ： 资源路径</p>
<p>controls: 控制条</p>
<p>autoplay：自动播放</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"../resources/video/..mp3"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325145652.png" alt="image-20210325145652858"></p>
<h2 id="iframe-内联框架"><a href="#iframe-内联框架" class="headerlink" title="iframe 内联框架"></a>iframe 内联框架</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iframe<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;iframe src="//player.bilibili.com/player.html?aid=55631961&amp;bvid=BV1x4411V75C&amp;cid=97257627&amp;page=10" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/iframe&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--iframe 内联框架</span></span><br><span class="line"><span class="comment">src: 地址</span></span><br><span class="line"><span class="comment">w-h: 宽度高度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;iframe src="https://www.baidu.com" name="hello" frameborder="0" width="1000px" height="800px"&gt;&lt;/iframe&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"1000px"</span> <span class="attr">height</span>=<span class="string">"800px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;a href="demo01.html" target="hello"&gt;点击跳转&lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://yuxuanwu17.github.io"</span> <span class="attr">target</span>=<span class="string">"hello"</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="表单语法"><a href="#表单语法" class="headerlink" title="表单语法"></a>表单语法</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325152634.png" alt="image-20210325152633929"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action : 表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method: post , get 提交方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">get 方式提交：我们可以在url中看到我们提交的信息，不安全，但是高效</span></span><br><span class="line"><span class="comment">post: 比较安全，可以传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo01.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;form action="demo01.html" method="get"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本输入框： input type="text"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--密码框： input type="password"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="表单元素格式"><a href="#表单元素格式" class="headerlink" title="表单元素格式"></a>表单元素格式</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325155116.png" alt="image-20210325155116189"></p>
<h2 id="表单的应用"><a href="#表单的应用" class="headerlink" title="表单的应用"></a>表单的应用</h2><ul>
<li>隐藏域 (hidden) – 用来传递默认值</li>
<li>只读 （readonly）</li>
<li>禁用 (disabled)</li>
</ul>
<h2 id="表单的初级验证"><a href="#表单的初级验证" class="headerlink" title="表单的初级验证"></a>表单的初级验证</h2><h3 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h3><ul>
<li>placeholder 提示</li>
<li>required 非空判断</li>
<li>pattern 正则表达式</li>
</ul>
<h2 id="构建的网页"><a href="#构建的网页" class="headerlink" title="构建的网页"></a>构建的网页</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action : 表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method: post , get 提交方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">get 方式提交：我们可以在url中看到我们提交的信息，不安全，但是高效</span></span><br><span class="line"><span class="comment">post: 比较安全，可以传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;form action="demo01.html" method="post"&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo01.html"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文本输入框： input type="text"</span></span><br><span class="line"><span class="comment">value="吴宇轩" 默认初始值</span></span><br><span class="line"><span class="comment">maxlength="8" 最长能写几个字符</span></span><br><span class="line"><span class="comment">size="30"     文本框的长度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"吴宇轩"</span> <span class="attr">maxlength</span>=<span class="string">"8"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--密码框： input type="password"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单选框标签</span></span><br><span class="line"><span class="comment">    input type = "radio"</span></span><br><span class="line"><span class="comment">    value: 单选框的值</span></span><br><span class="line"><span class="comment">    name：表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"boy"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span>/&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">name</span>=<span class="string">"sex"</span>/&gt;</span>女</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">    input type = "checkbox"</span></span><br><span class="line"><span class="comment">    name 最好写成一样，否则到时候在程序里面不太好reference</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span><span class="attr">value</span>=<span class="string">"sleep"</span><span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span><span class="attr">value</span>=<span class="string">"code"</span><span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">checked</span>&gt;</span>敲代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span><span class="attr">value</span>=<span class="string">"chat"</span><span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>聊天</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span><span class="attr">value</span>=<span class="string">"game"</span><span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--按钮标签</span></span><br><span class="line"><span class="comment">input type="button" 普通按钮</span></span><br><span class="line"><span class="comment">input type="image"  图像按钮</span></span><br><span class="line"><span class="comment">input type="submit" 提交按钮</span></span><br><span class="line"><span class="comment">input type="reset"  重置按钮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span><span class="attr">name</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"点击"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;input type="image"src="../resources/image/1.jpeg"&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    下拉框：</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"列表名称"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"China"</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"us"</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"swidden"</span><span class="attr">selected</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"India"</span>&gt;</span>印度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    文本域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"textarea"</span> <span class="attr">cols</span>=<span class="string">"50"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    文件域</span></span><br><span class="line"><span class="comment">        input type="file"name="files"</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span><span class="attr">name</span>=<span class="string">"files"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"上传"</span><span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    邮箱验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 邮箱：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span><span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    url验证--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> URL：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span><span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    数字的验证--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 商品数量：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span><span class="attr">name</span>=<span class="string">"num"</span><span class="attr">max</span>=<span class="string">"10"</span> <span class="attr">step</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--滑块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>滑块：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span><span class="attr">name</span>=<span class="string">"voice"</span><span class="attr">min</span>=<span class="string">"0"</span><span class="attr">max</span>=<span class="string">"100"</span><span class="attr">step</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    搜索框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span><span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"mark"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    增强鼠标可用域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mark"</span>&gt;</span>你点我试试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式验证</span></span><br><span class="line"><span class="comment">https://www.jb51.net/tools/regex.htm</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>自定义邮箱</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span><span class="attr">name</span>=<span class="string">"diymail"</span><span class="attr">pattern</span>=<span class="string">"/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空表单"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="HTML总结"><a href="#HTML总结" class="headerlink" title="HTML总结"></a>HTML总结</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325164501.png" alt="image-20210325164435771"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325164544.png" alt="image-20210325164544331"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210325164614.png" alt="image-20210325164614117"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式 笔记</title>
    <url>/2021/03/26/2021-03-26-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="正则表达式大全"><a href="#正则表达式大全" class="headerlink" title="正则表达式大全"></a>正则表达式大全</h2><p>\  Used to drop the special meaning of character following it (discussed below)</p>
<p>[] Represent a character class</p>
<p>^  Matches the beginning</p>
<p>$  Matches the end</p>
<p>.  Matches any character except newline</p>
<p>?  Matches zero or one occurrence.</p>
<p>|  Means OR (Matches with any of the characters separated by it.</p>
<p>*  Any number of occurrences (including 0 occurrences)</p>
<p>+  One or more occurrences</p>
<p>{} Indicate number of occurrences of a preceding RE </p>
<p>  to match.</p>
<p>() Enclose a group of REs</p>
<p>\d  Matches any decimal digit, this is equivalent to the set class [0-9].</p>
<p>\D  Matches any non-digit character.</p>
<p>\s  Matches any whitespace character.</p>
<p>\S  Matches any non-whitespace character</p>
<p>\w  Matches any alphanumeric character, this is equivalent to the class [a-zA-Z0-9_].</p>
<p>\W  Matches any non-alphanumeric character. </p>
<ul>
<li>字符和.字符搭配可以匹配所有的字符. 匹配所有字符</li>
<li>任何对象都可以被用来在if或者是while条件中检测真假。</li>
</ul>
<p>下面展示的是大多数内置的对象被认为是false的情形：</p>
<p>constants defined to be false: None, False</p>
<p>zero of any numeric type: 0, 0.0, 0j, Decimal(0), Fraction(0,1)</p>
<p>empty sequences and collections: ‘’,(),[],{}, set(), range(0)</p>
<p><strong>注意r里面的转义符号\这才是，巨坑</strong></p>
<p><a class="link"   href="https://www.jianshu.com/p/d56afe14835b" >https://www.jianshu.com/p/d56afe14835b<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Beanstalkd 笔记</title>
    <url>/2021/03/26/2021-03-26-Beanstalkd-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、-Beanstalkd-是什么"><a href="#一、-Beanstalkd-是什么" class="headerlink" title="一、  Beanstalkd 是什么"></a>一、  Beanstalkd 是什么</h2><p>Beanstalkd，一个高性能、轻量级的分布式内存队列系统，后台异步执行</p>
<h2 id="二、-Beanstalkd-特性"><a href="#二、-Beanstalkd-特性" class="headerlink" title="二、  Beanstalkd 特性"></a>二、  Beanstalkd 特性</h2><ol>
<li><h4 id="优先级（priority）"><a href="#优先级（priority）" class="headerlink" title="优先级（priority）"></a>优先级（priority）</h4></li>
</ol>
<p>注：优先级就意味 支持任务插队（数字越小，优先级越高，0的优先级最高）</p>
<ol start="2">
<li><h4 id="延迟（delay）"><a href="#延迟（delay）" class="headerlink" title="延迟（delay）"></a>延迟（delay）</h4></li>
</ol>
<p>注：延迟意味着可以定义任务什么时间才开始被消费，也就实现了定时任务（比如为了增加网站活跃性，增加定时评论，定时点赞功能）</p>
<ol start="3">
<li><h4 id="持久化（persistent-data）"><a href="#持久化（persistent-data）" class="headerlink" title="持久化（persistent data）"></a>持久化（persistent data）</h4></li>
</ol>
<p>注：Beanstalkd 支持定时将文件刷到日志文件里，即使beanstalkd宕机，重启之后仍然可以找回文件</p>
<ol start="4">
<li><h4 id="预留（buried）"><a href="#预留（buried）" class="headerlink" title="预留（buried）"></a>预留（buried）</h4></li>
</ol>
<p>注：Beanstalkd支持把一个任务设置为预留，这样，消费者就无法取出这个任务了，等合适的时机再把这个任务拿出来消费</p>
<ol start="5">
<li><h4 id="任务超时重发（time-to-run）"><a href="#任务超时重发（time-to-run）" class="headerlink" title="任务超时重发（time-to-run）"></a>任务超时重发（time-to-run）</h4></li>
</ol>
<p>注：消费者必须在指定的时间内处理完这个任务，否则就认为消费者处理失败，任务会被重新放到队列，等待消费</p>
<ol start="6">
<li><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4></li>
</ol>
<p>注：beanstalkd 的分布式，需要通过客户端自己实现。即，比如你有10台消息队列服务器，此时，你需要全部部署上beanstalkd，并且自己编写分布式的中间代码</p>
<h2 id="三、-管道（tube）与任务（job）"><a href="#三、-管道（tube）与任务（job）" class="headerlink" title="三、 管道（tube）与任务（job）"></a>三、 管道（tube）与任务（job）</h2><p>注：生产者生产任务，并根据业务需求将任务放到不同管道中，比如和注册有关的任务放到注册管道中，和订单有关的放到订单管道中</p>
<p>注：任务从进入管道到离开管道一共有5个状态（ready，delayed，reserved，buried，delete）</p>
<p>生产者-&gt; 管道（tube）-&gt;任务（job）-&gt; 消费者</p>
<p>Job: 一个需要异步处理的任务，需要放在一个tube中</p>
<p>tube：一个有名字的队列，用来存储同一类型的job，可以创建多个管道</p>
<p>producer: job 的生产者</p>
<p>consumer：job的消费者</p>
<p>简单流程：由producer产生的一个任务job, 并且将job推进到一个tube中，然后投consumer从tube中取出执行</p>
<h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><ol>
<li>生产者将任务放到管道中，任务的状态可以是ready（表示任务已经准备好，随时可以被消费者读取），也可以是delayed（任务在被生产者放入管道时，设置了延迟，比如设置了5s延迟，意味着5s之后，这个任务才会变成ready状态，才可以被消费者读取）</li>
<li>消费者消费任务（消费者将处于ready状态的任务读出来后，被读取处理的任务状态变为reserved）</li>
<li>消费者处理完任务后，任务的状态可能是delete（删除，处理成功），可能是buried（预留，意味着先把任务放一边，等待条件成熟还要用），可能是ready，也可能是delayed，需要根据具体业务场景自己进行判断定义</li>
</ol>
<h2 id="四、Beanstalkd-消息队列"><a href="#四、Beanstalkd-消息队列" class="headerlink" title="四、Beanstalkd 消息队列"></a>四、Beanstalkd 消息队列</h2><p>Beanstalked是一个轻量级的 高性能的分布式内存队列</p>
<pre><code>常用的队列服务 RabbitMQ、kafka

队列的特性是：先进先出

队里的应用场景
    1、异步处理(最重要): 比如说注册时对与注册成功之后可以立即返回注册成功页面，之后将客户的端口监听队列 达到异步的效果 提高整体的响应速度
    2、系统解耦
    3、定时任务：对于新上线的产品，可以运用beanstalkd来做马甲，增添定时的内容发表及点赞

运行模式：生产者与消费者 

Beanstalked特性：
        1.优先级(priority)插队、
        2.延迟(delay)定时任务或指定时间之后才可以读取队列
        3.持久化(persistent data)-》通过beanlog日志文件存储信息
        4.预留(buried)可以将某个数据设置成预留 等到时机成熟时再拿出
        5.任务超时重发(time-to-run)消费者必须在指定的时间之内处理完这个业务 否则就人物消费者处理失败了

Beanstalked的核心元素：    
        1.tube(管道)：就好比排队的通道 beanstalked可以创建多个管道 进而可以定义不同管道的应用场景 和 特性。
        2.job（任务）

Beanstalked的任务状态：
    小结：任务在进入管道到离开管道一共有五个状态


   put            reserve               delete
  -----&gt; [READY] ---------&gt; [RESERVED] --------&gt; *poof*



Here is a picture with more possibilities:



   put with delay               release with delay
  ----------------&gt; [DELAYED] &lt;------------.
                        |                   |
                        | (time passes)     |
                        |                   |
   put                  v     reserve       |       delete
  -----------------&gt; [READY] ---------&gt; [RESERVED] --------&gt; *poof*
                       ^  ^                |  |
                       |   \  release      |  |
                       |    `-------------&#39;   |
                       |                      |
                       | kick                 |
                       |                      |
                       |       bury           |
                    [BURIED] &lt;---------------&#39;
                       |
                       |  delete
                        `--------&gt; *poof*


    释义：
        ready      是准备好了随时可以给消费者读取
        delayed 是延迟的 在放入管道时就有延时的秒数
        delete    是删除
        buried    是预留 待条件成熟之后再次使用 再次ready</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Job Lifecycle</span><br><span class="line">-------------</span><br><span class="line"></span><br><span class="line">A job in beanstalk gets created by a client with the &quot;put&quot; command. During its life it can be in one of four states: &quot;ready&quot;, &quot;reserved&quot;, &quot;delayed&quot;, or &quot;buried&quot;.</span><br><span class="line"></span><br><span class="line">After the put command, a job typically starts out ready. It waits in the ready queue until a worker comes along and runs the &quot;reserve&quot; command. If this job is next in the queue, it will be reserved for the worker. The worker</span><br><span class="line">will execute the job; when it is finished the worker will send a &quot;delete&quot;</span><br><span class="line">command to delete the job.</span><br><span class="line"></span><br><span class="line">Here is a picture of the typical job lifecycle:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   put            reserve               delete</span><br><span class="line">  -----&gt; [READY] ---------&gt; [RESERVED] --------&gt; *poof*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Here is a picture with more possibilities:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   put with delay               release with delay</span><br><span class="line">  ----------------&gt; [DELAYED] &lt;------------.</span><br><span class="line">                        |                   |</span><br><span class="line">                        | (time passes)     |</span><br><span class="line">                        |                   |</span><br><span class="line">   put                  v     reserve       |       delete</span><br><span class="line">  -----------------&gt; [READY] ---------&gt; [RESERVED] --------&gt; *poof*</span><br><span class="line">                       ^  ^                |  |</span><br><span class="line">                       |   \  release      |  |</span><br><span class="line">                       |    &#96;-------------&#39;   |</span><br><span class="line">                       |                      |</span><br><span class="line">                       | kick                 |</span><br><span class="line">                       |                      |</span><br><span class="line">                       |       bury           |</span><br><span class="line">                    [BURIED] &lt;---------------&#39;</span><br><span class="line">                       |</span><br><span class="line">                       |  delete</span><br><span class="line">                        &#96;--------&gt; *poof*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The system has one or more tubes. Each tube consists of a ready queue and a</span><br><span class="line">delay queue. Each job spends its entire life in one tube. Consumers can show</span><br><span class="line">interest in tubes by sending the &quot;watch&quot; command; they can show disinterest by</span><br><span class="line">sending the &quot;ignore&quot; command. This set of interesting tubes is said to be a</span><br><span class="line">consumer&#39;s &quot;watch list&quot;. When a client reserves a job, it may come from any of</span><br><span class="line">the tubes in its watch list.</span><br><span class="line"></span><br><span class="line">When a client connects, its watch list is initially just the tube named</span><br><span class="line">&quot;default&quot;. If it submits jobs without having sent a &quot;use&quot; command, they will</span><br><span class="line">live in the tube named &quot;default&quot;.</span><br><span class="line"></span><br><span class="line">Tubes are created on demand whenever they are referenced. If a tube is empty</span><br><span class="line">(that is, it contains no ready, delayed, or buried jobs) and no client refers</span><br><span class="line">to it, it will be deleted.</span><br></pre></td></tr></table></figure>


<p>具体示意图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210326113318.png" alt="img"></p>
<h2 id="五、-Beanstalkd-的安装"><a href="#五、-Beanstalkd-的安装" class="headerlink" title="五、 Beanstalkd 的安装"></a>五、 Beanstalkd 的安装</h2><h3 id="MAC-安装"><a href="#MAC-安装" class="headerlink" title="MAC 安装"></a>MAC 安装</h3><p>可以直接去官方文档上查看，因为我使用的是阿里云centos，git clone不下来，建议用其他方式</p>
<p><a class="link"   href="https://beanstalkd.github.io/" >https://beanstalkd.github.io<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install beanstalkd</span><br><span class="line">brew install composer</span><br></pre></td></tr></table></figure>
<p>Once Composer is installed, this one-liner will install and configure the beanstalk_console monitor (replace <code>path/to/install</code> to your desired install location):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project ptrofimov/beanstalk_console -s dev /Users/yuxuan/beanskalkd</span><br></pre></td></tr></table></figure>


<p>We’ll also create a helper <code>run.sh</code> script inside the <code>path/to/install</code> directory. This script prepares your dev environment by restarting Beanstalkd, launching a local PHP server with the monitor, and finally opening a new tab on Chrome pointing to it (<code>127.0.0.1:8005</code>).</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CD into the script<span class="string">&#x27;s actual directory</span></span></span><br><span class="line">DIR=&quot;$( cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )&quot; &gt;/dev/null &amp;&amp; pwd )&quot;</span><br><span class="line">cd $&#123;DIR&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Restart the core Beanstalkd service</span></span><br><span class="line">brew services restart beanstalkd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Launch a new Chrome window pointing to the console</span></span><br><span class="line">open -a &quot;Google Chrome&quot; &quot;http://127.0.0.1:8005&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start the <span class="built_in">local</span> PHP server with the beanstalk_console</span></span><br><span class="line">php -S 127.0.0.1:8005 -t public</span><br></pre></td></tr></table></figure>


<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>linux 安装 beanstalkd 并不难。<br>我们知道，linux 自定义安装（编译安装），一般经历这么几步：</p>
<ul>
<li>wget （或者压缩包已经在目录下了）</li>
<li>tar 解压</li>
<li>make &amp;&amp; make install</li>
</ul>
<p>那么，我们只需要下载你需要的版本的 beanstalkd 压缩包到，再解压，再编译安装，就行了。</p>
<p>这里，记录一下我安装的过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/beanstalkd/beanstalkd/archive/v1.10.zip</span><br><span class="line">tar xzvf beanstalkd-1.10.zip</span><br><span class="line"><span class="built_in">cd</span> beanstalkd-1.10</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">beanstalkd -v</span><br></pre></td></tr></table></figure>
<p>最后一个命令执行之后如果能够反馈给你 beanstalkd 的版本号，说明安装成功了，接下来就是启动 beanstalkd 的服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beanstalkd -l 0.0.0.0 -p 11300 -b /<span class="built_in">log</span>/beanstalkd/binlog -F</span><br></pre></td></tr></table></figure>
<p><strong>-l 指绑定的 ip ，默认为 127.0.0.1</strong><br><strong>-p 指绑定的端口，默认端口 11300</strong><br>-b 指开启 binlog 进行持久化，用于断电后恢复数据<br>-F 不把内存文件写入磁盘</p>
<p>更多的选项，可以通过 beanstalkd -h 查看</p>
<blockquote>
<p>当然，你还可以直接使用 yum 或者 apt-get 来安装，更加方便。</p>
</blockquote>
<p><strong>如果重复运行 beanstalkd -l -p 的命令，可以让 beanstalkd 同时监听多个 ip 和端口。</strong></p>
<p>默认情况下，我们的 beanstalkd 没有开启 binlog 的功能，且绑定的 ip 为 127.0.0.1 ，网上有很多文章说，如果安装 web 控制台的时候，无法连接 beanstalkd ，就把 127.0.0.1 改成 0.0.0.0 ，这是不对的。<br>这个 ip 是指 beanstalkd 监听（允许连接）的客户端，比如你的客户端 ip 为 155.22.98.28 ，此时，你设置 -l 为该 ip ， 则，该 ip 可以访问 beanstalkd 的服务器。<br>如果改成 0.0.0.0 ，指不限制，那么，你的 beanstalkd 服务器就非常危险，任何 ip 都能访问进来。<br>这里，必须要知道一下，为什么改成 0.0.0.0 就可以访问了。<br>你可能需要根据你的部署架构来综合分析，如何设置这个 ip ，并理清你的内外网、物理机、虚拟机，这样才能设置最合理的 ip 。<br>另外，在部署环境里，如果非要设置 0.0.0.0 （均衡负载的情况下可能有多个客户端连接过来），此时，就需要通过网络环境上的 ip 白名单、端口等方式来过滤。</p>
<blockquote>
<p>总的来讲，beanstalkd 的服务器没有一个账号密码体系，只有监听 ip 的方式，来鉴别它是否处理你的指令。所以，它非常纯洁，如果我们需要最大程度上控制安全，最好让 beanstalkd server 只允许本机访问，而外部则访问位于本机上的 client ，由 client 进行安全校验和连接 beanstalkd server 。</p>
</blockquote>
<h2 id="六、beanstalkd-使用（PHP）"><a href="#六、beanstalkd-使用（PHP）" class="headerlink" title="六、beanstalkd 使用（PHP）"></a>六、beanstalkd 使用（PHP）</h2><h3 id="阿里云使用"><a href="#阿里云使用" class="headerlink" title="阿里云使用"></a>阿里云使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看端口号是否被占用</span></span><br><span class="line">ps aux | grep bean</span><br></pre></td></tr></table></figure>
<h3 id="Pheanstalk"><a href="#Pheanstalk" class="headerlink" title="Pheanstalk"></a>Pheanstalk</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pheanstalk</span> = <span class="keyword">require</span> <span class="string">&#x27;beanstalkd.php&#x27;</span>;</span><br><span class="line"><span class="comment">//print_r($pheanstalk-&gt;listTubes());</span></span><br><span class="line"><span class="comment">//print_r($pheanstalk-&gt;stats());</span></span><br><span class="line"><span class="comment">//print_r($pheanstalk-&gt;statsTube(&#x27;default&#x27;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useTube</span></span><br><span class="line"><span class="comment">//$pheanstalk-&gt;useTube(&#x27;newUsers&#x27;)-&gt;put(&#x27;test&#x27;);</span></span><br><span class="line"><span class="comment">//print_r($pheanstalk-&gt;statsTube(&#x27;newUsers&#x27;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// statsJob</span></span><br><span class="line"><span class="comment">//$job = $pheanstalk-&gt;watch(&#x27;newUsers&#x27;)-&gt;reserve();</span></span><br><span class="line"><span class="comment">//$stats = $pheanstalk-&gt;statsJob($job);</span></span><br><span class="line"><span class="comment">//print_r($stats);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// peek</span></span><br><span class="line"><span class="comment">//$job = $pheanstalk-&gt;peek(1);</span></span><br><span class="line"><span class="comment">//$stats = $pheanstalk-&gt;statsJob($job);</span></span><br><span class="line"><span class="comment">//print_r($stats);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//优先级</span></span><br><span class="line"><span class="comment">//$pheanstalk-&gt;putInTube(&#x27;newUsers&#x27;, 6666);</span></span><br><span class="line"><span class="comment">//$tube = $pheanstalk-&gt;useTube(&#x27;newUsers&#x27;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//$tube -&gt; put(&#x27;member_1024&#x27;);</span></span><br><span class="line"><span class="comment">//$tube-&gt;put(&#x27;member_4&#x27;, 4);</span></span><br><span class="line"><span class="comment">//$tube-&gt;put(&#x27;member_3&#x27;, 3);</span></span><br><span class="line"><span class="comment">//$tube-&gt;put(&#x27;member_1000&#x27;, 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$job</span> = <span class="variable">$pheanstalk</span>-&gt;watch(<span class="string">&#x27;newUsers&#x27;</span>)-&gt;reserve();</span><br><span class="line">print_r(<span class="variable">$job</span>);</span><br><span class="line"><span class="variable">$pheanstalk</span>-&gt;delete(<span class="variable">$job</span>);</span><br></pre></td></tr></table></figure>


<h2 id="七、什么是消息队列"><a href="#七、什么是消息队列" class="headerlink" title="七、什么是消息队列"></a>七、什么是消息队列</h2><p>以下主要搬运下面这个链接的消息，请去原文观看</p>
<p><a class="link"   href="https://www.kancloud.cn/vson/php-message-queue/885553" >https://www.kancloud.cn/vson/php-message-queue/885553<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="几个名词"><a href="#几个名词" class="headerlink" title="几个名词"></a>几个名词</h4><ul>
<li>消息<br>消息（ Message ），在计算机底层，是一种数据传输单位。</li>
<li>队列<br>队列（ Queue ），一种数据结构，具有先进先出、有先后顺序的特性。</li>
<li>消息队列<br>消息队列（ Message Queue , MQ ），一种<strong>队列结构</strong>的存储中间件，即，它本身是一个存储容器，而内部数据的存放结构是队列。</li>
<li>生产者<br>生产者（ Producer ），它生成消息，并将消息存入消息队列中。</li>
<li>消费者<br>消费者（ Consumer ），它从消息队列中取出消息，进行处理，处理完成之后，该消息从队列中删除。<strong>有些地方也会叫做订阅者。</strong></li>
</ul>
<h2 id="八、消息队列的应用场景"><a href="#八、消息队列的应用场景" class="headerlink" title="八、消息队列的应用场景"></a>八、消息队列的应用场景</h2><h4 id="数据冗余"><a href="#数据冗余" class="headerlink" title="数据冗余"></a>数据冗余</h4><p>我们可能在看到“冗余”这个词的时候，觉得他是个贬义词。<br>但实际上，一定程度的冗余，会让我们的数据更加安全。<br>比如，数据库备份，就是一种数据冗余，mysql读写分离，亦是通过日志和轮询实现数据冗余。<br><strong>这样，当我们某一份数据出现问题时，我们还有第二份数据，数据就更加安全。</strong><br>那么，消息队列如何提供冗余功能呢？</p>
<blockquote>
<p>常见的消息队列系统，会将数据保存在内存中，以提高数据读写效率。既然数据在内存中，就可能出现丢失的情况，所以，它们又提供持久化的功能，保证在队列系统崩溃后，数据仍然存在。<br>另外，消息队列内的每一条消息，都必然存在 reserved 和 deleted 两个状态，只有当消费者给队列系统发送处理成功的信号时，消息才会从队列中删除，并不会因为消息已接收，就删除消息。</p>
</blockquote>
<p>可以说，消息队列，也是增对数据库层的一道输入向缓存，对数据有冗余作用。即，当有数据需要进入数据库，会先经过消息队列，再进入数据库。</p>
<h4 id="解耦合"><a href="#解耦合" class="headerlink" title="解耦合"></a>解耦合</h4><p>我们知道软件工程讲究<strong>高内聚低耦合</strong>，所以我们会想许多办法来控制耦合度，即解耦。<br>消息队列，也是一种解耦的方案。<br>按照普通流程，<strong>消费代码</strong>可能会直接跟在<strong>生产代码</strong>后面，那么，生产和消费就成了彼此的上下文，甚至连变量、作用域等都会有依赖，此时，你若对生产代码的某个变量进行修改，你必须仔细检查消费代码是否也使用了这个变量。</p>
<blockquote>
<p>通过消息队列，我们将生产代码和消费代码拆分开来，它们不再互相依赖彼此的具体实现，只依赖于消息队列中<strong>消息的结构</strong>。只要消息结构不变，生产代码和消费代码如何修改，都不会影响到彼此。</p>
</blockquote>
<p>这一点，我们可以联想到上一章《什么是消息队列？》中的下单功能辅助理解。</p>
<h4 id="异步能力"><a href="#异步能力" class="headerlink" title="异步能力"></a>异步能力</h4><p>有人说，<strong>高性能离不开异步，异步离不开队列</strong>。<br>一定意义上来说，这句话是很有道理的。<br>异步，它让每一个调用都能及时返回，提升响应速度。队列，保证了异步调用的处理不会丢失。这句话中的“处理”一词，指处理工作，是个名词。</p>
<blockquote>
<p>我们知道，异步，它先返回的是调用动作是否成功的结果，而具体调用执行的逻辑和结果，并不在这里返回，而是以通知（回调）的形式进行。队列，是确保每一个调用的处理都会被执行数据结构。</p>
</blockquote>
<p>这一点，我们可以在之后消息队列的实践中，体会到。<br>消息队列，能够让在架构上提供异步能力（注意，是架构上，而非代码层面如函数调用的异步能力）。<br>关于这个异步能力，还是可以参考上一章《什么是消息队列？》中的下单功能，</p>
<h4 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h4><p>当架构中加入消息队列，生产者和消费者就比较容易扩展。<br>仍然以下单功能举例，如果生产者和消费者的代码耦合在一起，互相严重依赖，当我们想对生产者产生内容进行不同的处理（消费）时，则需要在原有的源码中进行扩展，这对原有代码产生伤害，便不必说扩展性了。</p>
<blockquote>
<p>但如果以消息队列将生产者和消费者进行解耦，则，我们只需要添加订阅消息的消费者程序即可，新的消费者对旧消费者没有任何伤害，它依旧依赖于消息队列，只需要确保它能收到消息即可。</p>
</blockquote>
<h4 id="顺序保证"><a href="#顺序保证" class="headerlink" title="顺序保证"></a>顺序保证</h4><p>队列本身具备“先进先出”的特性，消息队列是一种队列结构的中间件，则，消费者会根据消息进入的先后顺序，进行先后处理。<br><strong>其本身就能解决顺序问题</strong></p>
<h4 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h4><p>在某些高并发的场景下，流量突然激增，比如秒杀。<br>此时，数据库的压力很大，而数据库的读写处理能力普遍低于内存式的消息队列。<br>此时，可以将消息临时存储于消息队列中，减少数据库的压力，然后再由消费者按数据库能够接受的频率去读取消息，进行处理，因为数据库只在秒杀那一刻压力很大，平时会清闲一些。<br><strong>这就是将山峰削掉，填补山谷</strong></p>
<h2 id="九、消息队列的注意事项"><a href="#九、消息队列的注意事项" class="headerlink" title="九、消息队列的注意事项"></a>九、消息队列的注意事项</h2><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>最简单的架构可能只有 PHP+MYSQL ，此时，复杂度是低的。<br>我们遇到问题，需要考虑的可能性也会较少，需要检查的部件也比较少。<br>而当我们开始使用消息队列，我们自然而然需要考虑到消息队列的相关信息，复杂度，自然提升了。<br>当然，这可能无法避免。</p>
<blockquote>
<p>比如，生活中，我们使用电风扇，可以吹到凉风。但如果我们还需要制热，就会购买空调。电风扇若是坏了，我们或许能自己修回去，但若是空调坏了，我们可能需要有一定专业知识，才能修理。这就是复杂度。</p>
</blockquote>
<p><strong>当能力变强的同时，复杂度也会提升，这一点通常无法避免，除非，我们找到更多的方案，再分析方案间的利弊，最后决策</strong></p>
<h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p>因为生产者和消费者都依赖于消息队列，比如订单系统使用了消息队列，那么，我们需要考虑到消息队列的可用性，消息队列一旦崩溃，订单系统便不能正常运转，而任何依赖于订单系统的功能，也将无法提供服务。</p>
<blockquote>
<p>虽然，消息队列出现崩溃的概率相对较低，但在选型初期和设计架构的时候，还是要充分考虑，并尽可能设计好预备方案。</p>
</blockquote>
<p>一般而言，常见的消息队列系统，会通过分布式来提高可用性。</p>
<h3 id="消息可靠性"><a href="#消息可靠性" class="headerlink" title="消息可靠性"></a>消息可靠性</h3><p>在消息队列使用过程中，我们可能会遇到这种情况：</p>
<ul>
<li><p>生产者将消息发出，但消息队列没有接收到<br>这很可能是网络原因，比如，生产者发出消息，但由于网络或者消息队列方面的一些原因，最终，消息没有被存入指定的队列中，此时，可能引起消息丢失。</p>
<blockquote>
<p>一般我们会要求消息队列返回一个确认信息，告诉生产者，消息放好了。如果，生产者迟迟未能接收到确认信息，则再次发送消息。以此来保证消息不被丢失。</p>
</blockquote>
</li>
<li><p>消息队列崩溃或服务器宕机，内存清空，数据丢失<br>当遇到这种情况，会导致其存储在内存中的数据丢失，消息的可靠性就得不到保证。</p>
<blockquote>
<p>一般我们会通过持久化来保证消息不丢失，不同的消息队列系统，持久化的方式未必一样，具体的使用，将会在后面章节详细介绍。</p>
</blockquote>
</li>
<li><p>消费者崩溃，无法正确处理消息<br>还有一种情况，当消费者从消息队列中读取出消息，消息状态变成了 reserved 或者，干脆直接在队列中被删除，而此时，消费者却在执行后面的程序时崩溃了，导致业务流程没有顺利执行，但消息已经被取出。<br><strong>这也是一种数据丢失的现象。</strong></p>
<blockquote>
<p>一般此时，也需要消费者与消息队列之间建立反馈机制，一定要当在消费者处理完消息之后，给消息队列发送明确的删除指令，才能删除消息。<br>另外消息队列这边，可以建立 TTR（ time-to-run , 超时重发）机制，如果队列中处于 reserved 状态的消息过了一定时间还未被删除，可以将之丢回 ready 状态，继续被消费者读取</p>
</blockquote>
</li>
</ul>
<h3 id="顺序消费"><a href="#顺序消费" class="headerlink" title="顺序消费"></a>顺序消费</h3><p><strong>首先，顺序消费和顺序保证，是两回事</strong><br>顺序保证是指同类型的消息被消费的先后顺序，而顺序消费，是指，当一个消息，需要被多个消费者按一定顺序先后消费。<br>例如，当消息队列中存放一个订单信息时，我们有以下消费者：</p>
<ul>
<li>发短信</li>
<li>发邮件</li>
<li>发 APP 推送</li>
</ul>
<p>而我们必须先发短信、再发邮件、再发 APP 推送，不可提前，不可押后。<br>这就是一种顺序消费的场景。<br>一般来讲，有两种比较常见的解决方案：</p>
<ul>
<li><p>合并消费者<br>这种方式一般不推荐，但前期实现起来复杂度较低。<br>它意味着将多个消费者合并为一个消费者，再顺序执行。<br>虽然可以实现逻辑，但本身却降低了可扩展性，提高了耦合，这对未来维护项目而言，会增加隐性成本。</p>
</li>
<li><p>控制消费状态</p>
<p>还有一种方案，我们在生产者中放入短信消息，当短信消息被处理完后，在消费者中往邮件队列放入消息，以此类推。</p>
<blockquote>
<p>但这也会引起问题，比如，当我们将短信—&gt;邮件—&gt;推送串联好，但我们又要在短信和邮件之间，插入一个新的消费者，此时，我们除了要新增消费者以外，还需要修改短信消费者。<br><strong>这种设计就像是一个链表，头是生产者，指向短信，短信指向邮件，此时中间插入一个，需要将短信原本指向邮件的指针，指向新的消费者，而新的消费者则指向邮件。</strong></p>
</blockquote>
</li>
</ul>
<h3 id="消息重复"><a href="#消息重复" class="headerlink" title="消息重复"></a>消息重复</h3><p>前面有说过，为了保证消息可靠性，我们可能会让生产者重复发送消息（当迟迟没有收到消息队列反馈的时候）。<br>但是，这种情况，大多数时候是由网络不稳定引起的。<br>也就是说，虽然消息队列的反馈，可能迟到，但并不代表，消息已经丢失了。<br>此时，生产者再次往消息队列发送消息，则消息队列可能会收到两条重复的消息。</p>
<blockquote>
<p>这里举个例子：比如消费者需要为用户余额加 5 元钱，如果消息重复，就有可能为用户加上好几个 5 元。</p>
</blockquote>
<p>我们一般通过保证消费者被重复执行的幂等性来避免消息重复带来的问题。<br><strong>幂等性指：多次进行同样的操作，执行结果都一致</strong><br>比如，你输入的数据在不变的情况下，你的算法应保证处理结果是一致的，特别是在业务逻辑上。<br>为什么要通过保证消费者的幂等性来避免消息重复？<br>因为我们无法保证，网络不出现拥堵，不出现故障。<br>所以，我们无法保证，生产者不重复往队列中写入消息。<br>因此，比较好的方案，是在消费者上面进行控制。<br><strong>比如，幂等性能够保证，同样一条消息，尽管被消费者读取多次，但在现实中产生的影响，却只有一次。</strong><br>至于如此保证幂等性，会是一个比较复杂的问题，我们需要根据项目的实际情况和实际架构，进行具体的设计。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>因为消息队列赋予了异步能力，所以，当我们生产者在调用的时候，并非业务逻辑已经成功执行完。<br>比如，我们在生产者中调用发短信，实际上，短信并未发出去，只是将要发短信的任务存储到队列中，等到被执行。<br>那么，此时给调用返回的结果，只是调用的结果，并不等于发送成功。<br><strong>所以，我们无法以调用结果来判定业务处理结果。</strong><br>这个就是暂时不一致性。<br>这个结果，暂时的，与你所知的不一致。<br>但，它最终会一致，也就是说，最终，消息队列内的每一条消息都会被取出来消费。<br>这个就是最终一致性</p>
<h2 id="十、beanstalkd-协议翻译"><a href="#十、beanstalkd-协议翻译" class="headerlink" title="十、beanstalkd 协议翻译"></a>十、beanstalkd 协议翻译</h2><h3 id="协议描述"><a href="#协议描述" class="headerlink" title="协议描述"></a>协议描述</h3><p>beanstalkd 协议 运行在 TCP 层上，并采用了 ASCII 编码。</p>
<p>大致工作流程为：开启客户端连接、发送命令和数据、等待响应、关闭连接。<br>对于每一个连接而言，服务器会按照接收到指令的顺序一一执行这些指令，并且按照同样的顺序，发送响应。<br>在本协议中，所有涉及到的整数，都是指十进制，且为非负，除非另有说明。</p>
<h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><p><strong>只支持 ASCII 字符进行命名</strong></p>
<p>其支持的字符有：</p>
<ul>
<li>字母（ A-Z、a-z ）</li>
<li>数字（ 0-9 ）</li>
<li>小短横（ - ）</li>
<li>加号（ + ）</li>
<li>正斜杠（ / ）</li>
<li>英文封号（ ; ）</li>
<li>英文点号（ . ）</li>
<li>美元符（ $ ）</li>
<li>英文下划线（ _ ）</li>
<li>英文左右小括号（ “(“ 和 “)” ）</li>
</ul>
<blockquote>
<p>注意：命名不可以 - 作为开头，当遇到空格或换行时，会视作命名结束。每个命名的长度，至少为 1+ 个字符。</p>
</blockquote>
<h3 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h3><table>
<thead>
<tr>
<th align="left">错误类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>OUT_OF_MEMORY\r\n</em></td>
<td align="left">服务器内存不够分配了，可能需要过一会再尝试</td>
</tr>
<tr>
<td align="left"><em>INTERNAL_ERROR\r\n</em></td>
<td align="left">这说明服务器，也就是 beanstalkd 内部出现了 bug ，理论上不应该出现这个错误，如果出现了，请将这个 bug 提交到 google group</td>
</tr>
<tr>
<td align="left"><em>BAD_FORMAT\r\n</em></td>
<td align="left">发送的命令格式错误。比如，命令行不是以 \r\n 结尾，又或者在该传入数值的地方传入了非数值，也可能参数数量错误等一切命令格式有误的可能性。</td>
</tr>
<tr>
<td align="left"><em>UNKMOWM_COMMAND\r\n</em></td>
<td align="left">使用了未定义的命令（找不到这个命令），此时可能要检查是否拼写有错</td>
</tr>
</tbody></table>
<h3 id="Job-生命周期"><a href="#Job-生命周期" class="headerlink" title="Job 生命周期"></a>Job 生命周期</h3><p>一个 Job 由 put 命令创建，在它的生命周期以内，它必将处于以下四种状态中的一种：「ready」、「reserved」、「delayed」、「buried」<br>当使用完 put 命令，Job 一般从 「ready」 开始，它会在「ready」队列中等待，直到有「reserved」命令过来，当接收成功之后，则将该 Job 放入到 「reserved」 队列。接着，当进程处理完这个 Job 之后，则会发送一个「delete」命令，将这个 Job 从 beanstalkd 中删除。</p>
<table>
<thead>
<tr>
<th align="left">状态</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>ready</em></td>
<td align="left">被放入 Tube 之后等待被接收和处理</td>
</tr>
<tr>
<td align="left"><em>reserved</em></td>
<td align="left">当 Job 被 reserve 命令接收，Job 会进入这个状态，它代表被接收，但还没有得到其他反馈</td>
</tr>
<tr>
<td align="left"><em>delayed</em></td>
<td align="left">延迟状态，等时间到了会变成 ready 状态</td>
</tr>
<tr>
<td align="left"><em>buried</em></td>
<td align="left">预留状态，一般当消费者处理失败时，会将它设置为预留</td>
</tr>
</tbody></table>
<p>图示 Job 生命周期：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> put            reserve               delete</span><br><span class="line">-----&gt; [READY] ---------&gt; [RESERVED] --------&gt; *poof*</span><br></pre></td></tr></table></figure>
<p>当然，它也可能经历更复杂的演化，如下图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> put with delay               release with delay</span><br><span class="line">----------------&gt; [DELAYED] &lt;------------.</span><br><span class="line">                      |                   |</span><br><span class="line">               kick   | (time passes)     |</span><br><span class="line">                      |                   |</span><br><span class="line"> put                  v     reserve       |       delete</span><br><span class="line">-----------------&gt; [READY] ---------&gt; [RESERVED] --------&gt; *poof*</span><br><span class="line">                     ^  ^                |  |</span><br><span class="line">                     |   \  release      |  |</span><br><span class="line">                     |    &#96;-------------&#39;   |</span><br><span class="line">                     |                      |</span><br><span class="line">                     | kick                 |</span><br><span class="line">                     |                      |</span><br><span class="line">                     |       bury           |</span><br><span class="line">                  [BURIED] &lt;---------------&#39;</span><br><span class="line">                     |</span><br><span class="line">                     |  delete</span><br><span class="line">                      &#96;--------&gt; *poof*</span><br></pre></td></tr></table></figure>


<h3 id="Tubes"><a href="#Tubes" class="headerlink" title="Tubes"></a>Tubes</h3><p>一个 beanstalkd 服务允许拥有多个 Tube ，每一个 Tube 包含两个队列： ready queue 和 delay queue 。<br>每个 Job 都必然会存在于某个 Tube 之下。<br>可以通过 watch 指令关注某个 Tube ，也可以通过 ignore 命令取消关注。<br>当你使用 watch list 命令时，它会返回你所关注的 tubes 。<br>当消费者开始接收 Job 的时候，Job 一般来自 watch 了的 Tube。<br>当一个客户端连接进来，watch list 最初只有一个名为 default 的 tube 。如果当存入 Job 时没有使用 use 命令指定 tube ，这个 Job 就会被放入到 default tube 中。<br>Tubes 会在你使用到它的时候创建，如果 Tube 变空了（没有 ready Job ，没有 delayed Job ， 没有 buried Job），且没有客户端连接指向它，它就会被删掉。</p>
<h3 id="生产者命令"><a href="#生产者命令" class="headerlink" title="生产者命令"></a>生产者命令</h3><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>此命令用于向队列中插入 job ，命令格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">put &lt;pri&gt; &lt;delay&gt; &lt;ttr&gt; &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<p><em>它默认会将 job 插入到当前所 use 的 tube ， 这点可以参考下面的 use命令</em></p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>pri</em></td>
<td align="left">这是一个整型数值，代表着这个 job 的优先级，数值越小，排队排在越前面，优先级最高为 0 ，最后面为 4294967295</td>
</tr>
<tr>
<td align="left"><em>delay</em></td>
<td align="left">这也是一个整型数值，是一个秒数，指多少秒之后将这个 job 放入到 ready queue 中，在那之前，这个 job 都将处于 delayed 状态</td>
</tr>
<tr>
<td align="left"><em>ttr</em></td>
<td align="left">这也是一个整型数值，是一个描述，指一个 job 被允许处理的最大时间，这个时间从 job 被 reserve 起开始计算，超过时间还未被 delete 、 release 、 bury ，则服务器会自动释放这个 job，并重新插入到 ready queue 中。此数值最小支持 1 ，如果传的是 0 ，则服务器会默认将它变成 1</td>
</tr>
<tr>
<td align="left"><em>bytes</em></td>
<td align="left">这是一个数值，用于指明这个 job body 的大小，不包含「\r\n」这两个字符。这个值必须小于 beanstalkd 配置的 max-job-size ， 单位是 bytes</td>
</tr>
<tr>
<td align="left"><em>data</em></td>
<td align="left">这是 job body ，上一行的 bytes 就是由此行除却「\r\n」计算得出的。</td>
</tr>
</tbody></table>
<p>当成功发送 put 命令后，客户端要等待响应，响应结果可能是如下几个：</p>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>INSERTED \r\n</em></td>
<td align="left">插入成功，id 是一个 interger ，标识新插入的 job</td>
</tr>
<tr>
<td align="left"><em>BURIED \r\n</em></td>
<td align="left">如果服务器因为增加优先级队列而内存不足时会返回这个结果，id 是一个 interger ，标识新插入的 job</td>
</tr>
<tr>
<td align="left"><em>EXPECTED_CRLF\r\n</em></td>
<td align="left">job body 必须以「\r\n」结尾，这两个字节不用计入上一行的 bytes 计算中</td>
</tr>
<tr>
<td align="left"><em>JOB_TOO_BIG\r\n</em></td>
<td align="left">job body 超出了 max-job-size 的限制</td>
</tr>
<tr>
<td align="left"><em>DRAINING\r\n</em></td>
<td align="left">目标服务器不再接收新的请求，需要尝试其他服务器，或断开连接之后晚点再重新尝试</td>
</tr>
</tbody></table>
<h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><p>此命令为 Producer 提供，当发送此命令之后，后续的 put 命令，就会把 job 全部放入到此 use 命令指定的 tube 中。如果没有通过 use 指定 tube ， 则会默认将 job 放入到 default tube 中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use &lt;tube&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>tube</em></td>
<td align="left">一个最大不超过 200 bytes 的名称，它指定一个 tube ，如果这个 tube 不存在，则会自动创建</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>USING \r\n</em></td>
<td align="left">是接下来开始使用的 tube</td>
</tr>
</tbody></table>
<h3 id="消费者命令"><a href="#消费者命令" class="headerlink" title="消费者命令"></a>消费者命令</h3><p>从 queue 中消费 job 会使用以下命令：</p>
<ul>
<li>reserve</li>
<li>delete</li>
<li>release</li>
<li>bury</li>
</ul>
<h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reserve\r\n</span><br></pre></td></tr></table></figure>
<p>另外，你还能指定接收的超时时间，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reserve-with-timeout &lt;seconds&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>这个命令将会返回一个新的、reserved 状态的 job<br>如果没有可用的 job 能被接收，则 beanstalkd 一直等到出现一个可接收的 job 之后再返回。<br>一旦一个 job 被客户端接收，客户端要在 ttr 指定的时间限定内处理 job ，否则，超时的话，服务器会将 job 重新放回 ready queue 中。<br>可以在 stats-job 命令的 response 中找到 ttr 的值和已经使用掉的时间。<br>如果处于 ready 状态的 job 不止一个，beanstalkd 将会选择一个 priority 最小的 job，如果 priority 相等，则会选择一个最先 put 的 job 。</p>
<blockquote>
<p>题外话：这里我怀疑 beanstalkd 的协议有一处写错了，原文为 Within each priority, it will choose the one that was reserved first. 我认为应该将 reserved 改为 put 。</p>
</blockquote>
<p>如果指定的 timeout seconds 是 0 ，这将导致服务器立即返回 TIME_OUT 的响应（也有可能立即返回一个 job ，这取决于服务器的响应速度以及是否存在可接收的 job ）</p>
<p>为 timeout 设置一个合理的 seconds ，可以限制客户端阻塞等待接收 job 的时间。</p>
<table>
<thead>
<tr>
<th align="left">失败响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>DEADLINE_SOON\r\n</em></td>
<td align="left">ttr 的最后一秒，被服务器设定为安全界限，在此期间，该客户端不会接收到另外一个 job 。比如：客户端在安全界限时间里发送了一条 reserve 命令，或者，当一条 reserve 命令在等待反馈时，安全界限时间正好到期，这时候，都将得到一个 DEADLINE_SOON\r\n 的响应</td>
</tr>
<tr>
<td align="left"><em>TIMED_OUT\r\n</em></td>
<td align="left">当使用 reserve-with-timeout 命令，超过时间还未接收到 job ，又或者客户端连接已经关闭，此时会返回此值</td>
</tr>
</tbody></table>
<p><strong>成功响应：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RESERVED &lt;id&gt; &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job 的 id ，一个整型值，在这个 beanstalkd 服务器中具备<strong>全局唯一性</strong></td>
</tr>
<tr>
<td align="left">bytes</td>
<td align="left">表示 job data 的大小，不包含结束符 \r\n</td>
</tr>
<tr>
<td align="left">data</td>
<td align="left">job data , 之前 put 时放入的 job data ，原模原样返回</td>
</tr>
</tbody></table>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>delete 命令用于从服务器完全删除一个 job ， 这一般用于客户端成功处理 job 之后。<br>客户端可以删除 reserved 的 job ， 使 job 进入准备状态 ， 延迟 job ，预留 job 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete &lt;id&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job 的 id</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>DELETED\r\n</em></td>
<td align="left">删除成功</td>
</tr>
<tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">找不到这个 job ，或者这个 job 并非这台 client 接收的、或是 job 处于 ready 、 buried 状态。这很可能发生在 ttr 时间到了之后才发送 delete 命令的情况下。</td>
</tr>
</tbody></table>
<h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p>此命令可以把 reserved job 放回 ready 队列中，同时 job 的状态也会回到 ready ，release 之后，这个 job 可以被任何其他的客户端接收。<br>一般这个命令用在消费者处理 job 失败的情况下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">release &lt;id&gt; &lt;pri&gt; &lt;delay&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job id</td>
</tr>
<tr>
<td align="left">pri</td>
<td align="left">interger ，指定一个新的优先级，数值越小，越早被接收</td>
</tr>
<tr>
<td align="left">delay</td>
<td align="left">interger ，指定一个新的延迟，如果设置了预留值，则 job 的状态会是 delayed ，直到延迟时间到期</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>RELEASED\r\n</em></td>
<td align="left">处理成功</td>
</tr>
<tr>
<td align="left"><em>BURIED\r\n</em></td>
<td align="left">因为新增优先级队列数据结构而导致内存溢出</td>
</tr>
<tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">没有找到这个 job 或 此 job 不是当前客户端接收的</td>
</tr>
</tbody></table>
<h3 id="bury"><a href="#bury" class="headerlink" title="bury"></a>bury</h3><p>这个命令可以将一个 job 操作为 buried 状态。<br>buried job 被存放在一个 FIFO （first input first out ，先进先出）的链表中，它不会被服务器再次操作，除非有客户端对它发起了 kick 命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bury &lt;id&gt; &lt;pri&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job id</td>
</tr>
<tr>
<td align="left">pri</td>
<td align="left">优先级，一个整型数字，越小的越先被接收</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>BURIED\r\n</em></td>
<td align="left">操作成功</td>
</tr>
<tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">找不到 job 或该 job 不是被当前客户端所接收</td>
</tr>
</tbody></table>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>此命令能让当前消费者得到更多的执行 job 的时间。<br>比如，ttr 是用于避免消费者崩溃而导致 job 丢失，但同样也会误伤一批执行时间过长的消费者，实际上消费者没有崩溃，但执行时间已经超出了 ttr ，此时，通过 touch 命令，可以让客户端得到更多的处理时间，不先触发 ttr 机制。<br>当然，使用了 touch 命令，只是延长了 ttr 的时间，ttr 的机制仍然存在。<br>通过这个命令，消费者可以定期告诉服务器，当前处理程序仍处于活跃状态。<br><strong>此命令不受 DEADLINE_SOON影响</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch &lt;id&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job id</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>TOUCHED\r\n</em></td>
<td align="left">操作成功</td>
</tr>
<tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">没有找到这个 job 或者 该 job 不是这个客户端接收的</td>
</tr>
</tbody></table>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>watch 命令会往 watch list 中添加一个 tube ，消费者通过 reserve ，可以接收到 watch list 中任何一个 tube 传来的 job 。一个新的连接，watch list 中默认存在一个 default tube 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch &lt;tube&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tube</td>
<td align="left">200 bytes 以内的字符串，代表着 tube 的名字，如果该 tube 不存在，则会自动创建</td>
</tr>
</tbody></table>
<p>返回响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WATCHING &lt;count&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>conut 是一个数值，指当前 watch list 中有多少 tube 。</p>
<h3 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h3><p>此命令用于从 watch list 中移除一个 tube ，移除之后，该消费者不再接收被移除的 tube 内的 job 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ignore &lt;tube&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tube</td>
<td align="left">200 bytes 以内的字符串，代表着 tube 的名字，如果该 tube 不存在，则会自动创建</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">失败响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>NOT_IGNORED\r\n</em></td>
<td align="left">如果当前 watch list 中只存在最后一个 tube，则会返回这个响应</td>
</tr>
</tbody></table>
<p>成功响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WATCHING &lt;count&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>conut 是一个数值，指当前 watch list 中有多少 tube 。</p>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h3 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h3><p>用于客户端检查 job ，此命令有四种形态，除了第一个操作以外，其它操作都只针对于当前的 tube 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">peek &lt;id&gt;\r\n 根据 id 返回一个 job</span><br><span class="line">peek-ready\r\n 返回下一个 ready job</span><br><span class="line">peek-delayed\r\n 返回下一个剩余延迟时间最短的 delayed job</span><br><span class="line">peek-buried\r\n 返回下一个 buried job</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">失败响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">找不到 job 或没有该状态的 job</td>
</tr>
</tbody></table>
<p>成功响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FOUND &lt;id&gt; &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>其中，id 为 job 的 id ，bytes 指 data 的大小（不包含 \r\n ），data 是 job 的具体内容</p>
<h3 id="kick"><a href="#kick" class="headerlink" title="kick"></a>kick</h3><p>此命令只适用于当前指定的 tube 。<br>此命令能将 job 状态改成 ready ， 它需要传入一个数字，用于指定需要修改多少个 job 。<br>比如，你传入 10 ，则会将队列中十个 buried 或 delayed 状态的 job ，修改为 ready 。<br>如果，指定的队列中存在 buried job ，则只会修改 buried job，否则，就修改 delayed job 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kick &lt;bound&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bound</td>
<td align="left">指定要 kick 多少 job</td>
</tr>
</tbody></table>
<p>响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KICKED &lt;count&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>count 表示该操作成功修改了几个 job 。</p>
<h3 id="kick-job"><a href="#kick-job" class="headerlink" title="kick-job"></a>kick-job</h3><p>这是一个 kick 扩展命令，用于将单独的一个 job 修改为 ready 。它需要传入一个 job id 。<br>如果传入的 job id 所代表的 job 在当前 tube 中存在，并且该 job 的状态处于 buried 或 delayed ，则会将这个 job 设置为 ready ，并仍然在当前 tube 中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kick-job &lt;id&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job id</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">job 不存在或不处于可 kick 的状态，另外，这也可能发生在内部错误上</td>
</tr>
<tr>
<td align="left"><em>KICKED\r\n</em></td>
<td align="left">操作成功</td>
</tr>
</tbody></table>
<h3 id="stats-job"><a href="#stats-job" class="headerlink" title="stats-job"></a>stats-job</h3><p>此命令用于查看一个 job 的统计信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stats-job &lt;id&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job id</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">错误响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">job 不存在</td>
</tr>
</tbody></table>
<p>成功响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OK &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>bytes 指后面 data 的大小，data 则是该 job 的统计信息，是一个 YAML 格式的文本。<br>data 包含以下 key ：</p>
<table>
<thead>
<tr>
<th align="left">key</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">job id</td>
</tr>
<tr>
<td align="left">tube</td>
<td align="left">此 job 所在的 tube</td>
</tr>
<tr>
<td align="left">state</td>
<td align="left">job 的状态</td>
</tr>
<tr>
<td align="left">pri</td>
<td align="left">job 的优先级</td>
</tr>
<tr>
<td align="left">age</td>
<td align="left">job 在队列中存在的时间，是一个秒数</td>
</tr>
<tr>
<td align="left">time-left</td>
<td align="left">此 job 距离被放入 ready queue 的剩余秒数，这个时间到达之后，此 job j就会被放入到 ready 队列。此参数只在 job 状态为 reserved 和 delayed 时有意义，当状态为 reserved 时，此参数代表 job 的超时剩余秒数，即 ttr</td>
</tr>
<tr>
<td align="left">file</td>
<td align="left">此 job 的 binlog 序号，如果未开启 binlog ，则此值为 0</td>
</tr>
<tr>
<td align="left">reserved</td>
<td align="left">此 job 被 reserve 的次数</td>
</tr>
<tr>
<td align="left">timeouts</td>
<td align="left">此 job 的超时次数</td>
</tr>
<tr>
<td align="left">releases</td>
<td align="left">此 job 被 released 的次数</td>
</tr>
<tr>
<td align="left">buries</td>
<td align="left">此 job 被 bury 的次数</td>
</tr>
<tr>
<td align="left">kicks</td>
<td align="left">被 kicked的次数</td>
</tr>
</tbody></table>
<h3 id="stats-tube"><a href="#stats-tube" class="headerlink" title="stats-tube"></a>stats-tube</h3><p>此命令返回 tube 的统计信息，如果这个 tube 存在的话。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats-tube &lt;tube&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tube</td>
<td align="left">传入 tube 的名称</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">失败响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">不存在这个 tube</td>
</tr>
</tbody></table>
<p>成功响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OK &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>bytes 是指 data 的大小，不包含 「\r\n」。<br>data 是一个 YAML 格式的文本，它包含了你想要的 tube 的统计信息</p>
<p>下面是 data 的 key ：</p>
<table>
<thead>
<tr>
<th align="left">key</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name</td>
<td align="left">tube 的 name</td>
</tr>
<tr>
<td align="left">current-jobs-urgent</td>
<td align="left">这个 tube 中，优先级小于 1024 的 ready job 数量</td>
</tr>
<tr>
<td align="left">current-jobs-ready</td>
<td align="left">这个 tube 中的 ready job 数量</td>
</tr>
<tr>
<td align="left">current-jobs-reserved</td>
<td align="left">这个 tube 中被 reserve 的 job 数量，不论它是被哪个消费者接收的</td>
</tr>
<tr>
<td align="left">current-jobs-delayed</td>
<td align="left">这个 tube 中处于 delayed 状态的 job 数量</td>
</tr>
<tr>
<td align="left">current-jobs-buried</td>
<td align="left">这个 tube 中处于 buried 状态的 job 数量</td>
</tr>
<tr>
<td align="left">total-jobs</td>
<td align="left">此 tube 一共创建过几个 job</td>
</tr>
<tr>
<td align="left">current-using</td>
<td align="left">指向此 tube 的连接数量</td>
</tr>
<tr>
<td align="left">current-waiting</td>
<td align="left">指向此 tube 并且处于接收等待状态、但还未接收到 job 的连接数量</td>
</tr>
<tr>
<td align="left">current-watching</td>
<td align="left">watch 了此 tube 的连接数量</td>
</tr>
<tr>
<td align="left">pause</td>
<td align="left">此 tube 停止服务的秒数</td>
</tr>
<tr>
<td align="left">cmd-delete</td>
<td align="left">此 tube 累计执行了几次 delete</td>
</tr>
<tr>
<td align="left">cmd-pause-tube</td>
<td align="left">此 tube 累计执行了几次 pause-tube</td>
</tr>
<tr>
<td align="left">cmd-time-left</td>
<td align="left">此 tube 几秒之后提供服务</td>
</tr>
</tbody></table>
<h3 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h3><p>此命令返回整个服务器系统的统计信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats\r\n</span><br></pre></td></tr></table></figure>
<p>成功响应：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OK &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>bytes 是指 data 的大小，但不包括 「\r\n」。<br>data 是一个 YAML 文本，包含了如下 key ：</p>
<table>
<thead>
<tr>
<th align="left">key</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">current-jobs-urgent</td>
<td align="left">优先级小于 1024 的 ready job 数量</td>
</tr>
<tr>
<td align="left">current-jobs-ready</td>
<td align="left">ready job 的数量</td>
</tr>
<tr>
<td align="left">current-jobs-reserved</td>
<td align="left">被接受的 job 数量，不区分客户端（消费者）</td>
</tr>
<tr>
<td align="left">current-jobs-delayed</td>
<td align="left">delayed job 的数量</td>
</tr>
<tr>
<td align="left">current-jobs-buried</td>
<td align="left">buried job 的数量</td>
</tr>
<tr>
<td align="left">cmd-put</td>
<td align="left">累积执行 put 的次数</td>
</tr>
<tr>
<td align="left">cmd-peek</td>
<td align="left">累积执行 peek 的次数</td>
</tr>
<tr>
<td align="left">cmd-peek-ready</td>
<td align="left">累积执行 peek-ready 的次数</td>
</tr>
<tr>
<td align="left">cmd-peek-delayed</td>
<td align="left">累积执行 peek-delayed 的次数</td>
</tr>
<tr>
<td align="left">cmd-peek-buried</td>
<td align="left">累积执行 peek-buried 的次数</td>
</tr>
<tr>
<td align="left">cmd-reserve</td>
<td align="left">累积执行 cmd-reserve 的次数</td>
</tr>
<tr>
<td align="left">cmd-use</td>
<td align="left">累积执行 use 的次数</td>
</tr>
<tr>
<td align="left">cmd-watch</td>
<td align="left">累积执行 watch 的次数</td>
</tr>
<tr>
<td align="left">cmd-ignore</td>
<td align="left">累积执行 ignore 的次数</td>
</tr>
<tr>
<td align="left">cmd-delete</td>
<td align="left">累积执行 delete 的次数</td>
</tr>
<tr>
<td align="left">cmd-release</td>
<td align="left">累积执行 release 的次数</td>
</tr>
<tr>
<td align="left">cmd-bury</td>
<td align="left">累积执行 bury 的次数</td>
</tr>
<tr>
<td align="left">cmd-kick</td>
<td align="left">累积执行 kick 的次数</td>
</tr>
<tr>
<td align="left">cmd-stats</td>
<td align="left">累积执行 stats 的次数</td>
</tr>
<tr>
<td align="left">cmd-stats-job</td>
<td align="left">累积执行 stats-job 的次数</td>
</tr>
<tr>
<td align="left">cmd-stats-tube</td>
<td align="left">累积执行 stats-tube 的次数</td>
</tr>
<tr>
<td align="left">cmd-list-tubes</td>
<td align="left">累积执行 list-tubes 的次数</td>
</tr>
<tr>
<td align="left">cmd-list-tube-used</td>
<td align="left">累积执行 list-tube-used 的次数</td>
</tr>
<tr>
<td align="left">cmd-list-tubes-watched</td>
<td align="left">累积执行 list-tubes-watched 的次数</td>
</tr>
<tr>
<td align="left">cmd-pause-tube</td>
<td align="left">累积执行 pause-tube 的次数</td>
</tr>
<tr>
<td align="left">job-timeouts</td>
<td align="left">累积 timeout 的 job 总数</td>
</tr>
<tr>
<td align="left">total-jobs</td>
<td align="left">累积创建了几个 job</td>
</tr>
<tr>
<td align="left">max-job-size</td>
<td align="left">最大允许的 job 字节数</td>
</tr>
<tr>
<td align="left">current-tubes</td>
<td align="left">当前有几个 tube</td>
</tr>
<tr>
<td align="left">current-connections</td>
<td align="left">当前有几个连接</td>
</tr>
<tr>
<td align="left">current-producers</td>
<td align="left">当前有几个至少发出过一条 put 指令的连接</td>
</tr>
<tr>
<td align="left">current-workers</td>
<td align="left">当前有几个至少发出过一条 reserve 指令的连接</td>
</tr>
<tr>
<td align="left">current-waiting</td>
<td align="left">当前有几个至少发出过一条 reserve 指令但还未接收到 response 的连接</td>
</tr>
<tr>
<td align="left">total-connections</td>
<td align="left">累积有过几个连接</td>
</tr>
<tr>
<td align="left">pid</td>
<td align="left">服务器的进程 id</td>
</tr>
<tr>
<td align="left">version</td>
<td align="left">当前服务器的版本</td>
</tr>
<tr>
<td align="left">rusage-utime</td>
<td align="left">进程占用用户 cpu 的时间，分别有「秒」和「微秒」的单位</td>
</tr>
<tr>
<td align="left">rusage-stime</td>
<td align="left">进程占用系统 cpu 的时间，分别有「秒」和「微秒」的单位</td>
</tr>
<tr>
<td align="left">uptime</td>
<td align="left">此进程已运行的秒数</td>
</tr>
<tr>
<td align="left">binlog-oldest-index</td>
<td align="left">最早存储的 job binlog 索引号</td>
</tr>
<tr>
<td align="left">binlog-current-index</td>
<td align="left">当前的 job binlog 索引号，新的 binlog 会从这里开始写入，如果未开启 binlog ，此值为 0</td>
</tr>
<tr>
<td align="left">binlog-max-size</td>
<td align="left">每个 binlog 文件允许分配的最大容量，单位 bytes</td>
</tr>
<tr>
<td align="left">binlog-record-written</td>
<td align="left">写入 binlog 的累积次数</td>
</tr>
<tr>
<td align="left">binlog-records-migrated</td>
<td align="left">以压缩形式写入 binlog 的累积次数</td>
</tr>
<tr>
<td align="left">id</td>
<td align="left">一个随机字符串，用于标记这个进程，在 beanstalkd 开启时生成</td>
</tr>
<tr>
<td align="left">hostname</td>
<td align="left">主机名，由 uname 决定</td>
</tr>
</tbody></table>
<blockquote>
<p>上面这些 key 的信息，自从 beanstalkd 启动以来就开始累积，如果重启，就会重新累积。另外，这些数据不存放在 binlog 中</p>
</blockquote>
<h3 id="list-tubes"><a href="#list-tubes" class="headerlink" title="list-tubes"></a>list-tubes</h3><p>此命令返回所有存在的 tube 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list-tubes\r\n</span><br></pre></td></tr></table></figure>
<p>成功响应：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OK &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>bytes 是指 data 的大小，不包含「\r\n」。<br>data 返回一个 YAML 字符串，里面包含了 tube 的列表。</p>
<h3 id="list-tube-used"><a href="#list-tube-used" class="headerlink" title="list-tube-used"></a>list-tube-used</h3><p>此命令返回当前所 use 的 tube 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list-tube-used\r\n</span><br></pre></td></tr></table></figure>
<p>成功响应：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USING &lt;tube&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>tube 是指当前 use 的 tube 名字。</p>
<h3 id="list-tubes-watched"><a href="#list-tubes-watched" class="headerlink" title="list-tubes-watched"></a>list-tubes-watched</h3><p>此命令用于查看当前客户端 watch-list 中的 tube 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list-tubes-watched\r\n</span><br></pre></td></tr></table></figure>
<p>成功响应：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OK &lt;bytes&gt;\r\n</span><br><span class="line">&lt;data&gt;\r\n</span><br></pre></td></tr></table></figure>
<p>bytes 是指 data 的大小，不包含「\r\n」。<br>data 是一个包含了 tube list 的 YAML 字符串。</p>
<h3 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h3><p>此命令用于关闭当前连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">quit\r\n</span><br></pre></td></tr></table></figure>
<h3 id="pause-tube"><a href="#pause-tube" class="headerlink" title="pause-tube"></a>pause-tube</h3><p>此命令为某个 tube 指定一个时间，在这个时间内，此 tube 内的 job 将不会被 reserve 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pause-tube &lt;tbe-name&gt; &lt;delay&gt;\r\n</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tube</td>
<td align="left">tube 的名字</td>
</tr>
<tr>
<td align="left">delay</td>
<td align="left">指定一个秒数</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">响应</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>PAUSED\r\n</em></td>
<td align="left">操作成功</td>
</tr>
<tr>
<td align="left"><em>NOT_FOUND\r\n</em></td>
<td align="left">没有这个 tube</td>
</tr>
</tbody></table>
<h2 id="十、Beanstalkd-关键命令表格"><a href="#十、Beanstalkd-关键命令表格" class="headerlink" title="十、Beanstalkd 关键命令表格"></a>十、Beanstalkd 关键命令表格</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">put</td>
<td align="left">在队列中生成 job</td>
</tr>
<tr>
<td align="left">use</td>
<td align="left">用于生产者指定后续要存放 job 的 tube</td>
</tr>
<tr>
<td align="left">reserve</td>
<td align="left">用于消费者从队列中预定一个 job （接收 job），此命令会阻塞控制台，直到接收到 job</td>
</tr>
<tr>
<td align="left">reserve-with-timeout</td>
<td align="left">接收 job ，附带超时时间，超过时间未接收到 job 就结束了</td>
</tr>
<tr>
<td align="left">delete</td>
<td align="left">删除一个 job</td>
</tr>
<tr>
<td align="left">release</td>
<td align="left">将一个 reserved job 放回 ready 队列</td>
</tr>
<tr>
<td align="left">bury</td>
<td align="left">将一个 job 操作为 buried</td>
</tr>
<tr>
<td align="left">touch</td>
<td align="left">延长一个 job 的 ttr</td>
</tr>
<tr>
<td align="left">watch</td>
<td align="left">将一个 tube 加入到 watch list ，只有加入到 watch list 的 tube 才会被 reserve 命令接收到 job</td>
</tr>
<tr>
<td align="left">ignore</td>
<td align="left">从 watch list 中移除 tube</td>
</tr>
<tr>
<td align="left">peek</td>
<td align="left">根据 id 返回一个 job ，纯返回，不会修改 job 的状态</td>
</tr>
<tr>
<td align="left">peek-ready</td>
<td align="left">返回当前 tube 的一个 ready job</td>
</tr>
<tr>
<td align="left">peek-delayed</td>
<td align="left">从当前 tube 中返回一个剩余延迟时间最短的 delayed job</td>
</tr>
<tr>
<td align="left">peek-buried</td>
<td align="left">从当前 tube 中返回下一个 buried job</td>
</tr>
<tr>
<td align="left">kick</td>
<td align="left">一次性修改多个非 ready 的 job 到 ready 状态，其中会先处理 buried 再处理 delayed</td>
</tr>
<tr>
<td align="left">kick-job</td>
<td align="left">将指定的 job 调整为 ready 状态，调整后仍在原 tube 内</td>
</tr>
<tr>
<td align="left">stats-job</td>
<td align="left">查看某 job 的统计信息</td>
</tr>
<tr>
<td align="left">stats-tube</td>
<td align="left">查看某 tube 的统计信息</td>
</tr>
<tr>
<td align="left">stats</td>
<td align="left">查看 beanstalkd 的统计信息</td>
</tr>
<tr>
<td align="left">list-tubes</td>
<td align="left">返回当前存在的所有 tube</td>
</tr>
<tr>
<td align="left">list-tube-used</td>
<td align="left">查看当前 use 的 tube</td>
</tr>
<tr>
<td align="left">list-tubes-watched</td>
<td align="left">查看当前 watch list 中的 tube</td>
</tr>
<tr>
<td align="left">quit</td>
<td align="left">关闭当前连接</td>
</tr>
<tr>
<td align="left">pause-tube</td>
<td align="left">暂停 tube ，暂停后，tube 内的 job 不会再被接收</td>
</tr>
</tbody></table>
<h2 id="十一、Pheanstalk-协议解析"><a href="#十一、Pheanstalk-协议解析" class="headerlink" title="十一、Pheanstalk 协议解析"></a>十一、Pheanstalk 协议解析</h2><h3 id="PheanstalkInterface"><a href="#PheanstalkInterface" class="headerlink" title="PheanstalkInterface"></a>PheanstalkInterface</h3><p>这是一个连接实例的接口。<br>它定义了一个 beanstalkd 连接必须拥有的方法。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><table>
<thead>
<tr>
<th align="left">常量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>DEFAULT_PORT = 11300</em></td>
<td align="left">默认连接端口号</td>
</tr>
<tr>
<td align="left"><em>DEFAULT_DELAY = 0</em></td>
<td align="left">默认延迟秒数，0 为不延迟</td>
</tr>
<tr>
<td align="left"><em>DEFAULT_PRIORITY = 1024</em></td>
<td align="left">默认优先级，0 为最高优先级</td>
</tr>
<tr>
<td align="left"><em>DEFAULT_TTR = 60</em></td>
<td align="left">默认 TTR 60秒</td>
</tr>
<tr>
<td align="left"><em>DEFAULT_TUBE = ‘default’</em></td>
<td align="left">默认 tube</td>
</tr>
</tbody></table>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bury</td>
<td align="left">put 一个 buried job ，只有在 kick 后才能被 reserve</td>
</tr>
<tr>
<td align="left">delete</td>
<td align="left">永久删除一个 job</td>
</tr>
<tr>
<td align="left">ignore</td>
<td align="left">从 watchlist 中移除一个 tube</td>
</tr>
<tr>
<td align="left">kick</td>
<td align="left">移动指定数量的 buried 或 delayed job 到 ready 对列中，有buried 会先处理 buried</td>
</tr>
<tr>
<td align="left">kickJob</td>
<td align="left">将单个 job 移动到 ready 队列中，移动后仍处于该 tube</td>
</tr>
<tr>
<td align="left">listTubes</td>
<td align="left">当前 server 的所有 tube</td>
</tr>
<tr>
<td align="left">listTubesWatched</td>
<td align="left">查看当前 watchlist，可通过传入 true 还是 false ，来要求是从服务器获取，还是从缓存获取</td>
</tr>
<tr>
<td align="left">listTubeUsed</td>
<td align="left">当前 use 的 tube ，传入 true ， 则从服务器请求，传入 false ，则使用上一次的结果（缓存）</td>
</tr>
<tr>
<td align="left">pauseTube</td>
<td align="left">暂时不让 tube 内的 job 被 reserve</td>
</tr>
<tr>
<td align="left">resumeTube</td>
<td align="left">恢复被暂停的 Tube</td>
</tr>
<tr>
<td align="left">peek</td>
<td align="left">查看一个 job ，不论它处于什么 tube</td>
</tr>
<tr>
<td align="left">peekReady</td>
<td align="left">查看 ready 队列中下一个可被 reserve 的 job （当前 tube 中）</td>
</tr>
<tr>
<td align="left">peekDelayed</td>
<td align="left">查看 delayed 队列中下一个即将进入 ready 的 job （当前 tube 中）</td>
</tr>
<tr>
<td align="left">peekBuried</td>
<td align="left">查看下一个 buried job （当前 job 中）</td>
</tr>
<tr>
<td align="left">put</td>
<td align="left">放入一个 job</td>
</tr>
<tr>
<td align="left">release</td>
<td align="left">把一个 reserved job 重新放回 ready 队列</td>
</tr>
<tr>
<td align="left">reserve</td>
<td align="left">从当前 watchlist 中锁定一个 job （接收一个 job）</td>
</tr>
<tr>
<td align="left">reserveWithTimeout</td>
<td align="left">有超时时间的 reserve</td>
</tr>
<tr>
<td align="left">statsJob</td>
<td align="left">查看一个 job 的统计信息</td>
</tr>
<tr>
<td align="left">statsTube</td>
<td align="left">查看一个 tube 的统计信息</td>
</tr>
<tr>
<td align="left">stats</td>
<td align="left">查看 server 的统计信息</td>
</tr>
<tr>
<td align="left">touch</td>
<td align="left">为 job 延长一次 ttr</td>
</tr>
<tr>
<td align="left">useTube</td>
<td align="left">use 一个 tube ，用于接着 put job</td>
</tr>
<tr>
<td align="left">watch</td>
<td align="left">把一个 tube 加入到 watchlist</td>
</tr>
<tr>
<td align="left">watchOnly</td>
<td align="left">往 watchlist 中加入一个 tube ，并 ignore 其他所有 tube</td>
</tr>
</tbody></table>
<h3 id="JobIdInterface"><a href="#JobIdInterface" class="headerlink" title="JobIdInterface"></a>JobIdInterface</h3><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getId</td>
<td align="left">获得 Job 的 id</td>
</tr>
</tbody></table>
<h3 id="CommandInterface"><a href="#CommandInterface" class="headerlink" title="CommandInterface"></a>CommandInterface</h3><p>pheanstalk 的设计中，每个 beanstalkd 命令都以一个类的形式呈现，想要向 beanstalkd server 发送命令，需要通过实例化各 command 类来实现。</p>
<p>CommandInterface 接口，是所有 command 类最抽象的形态，我们观察 pheanstalk 的源码，可以发现，AbstractCommand 抽象类实现了这个接口。</p>
<p>而 AbstractCommand 又会被 TubeCommand 、JobCommand 类继承，再往下，还会有具体的命令 command 类继承 Tube 和 Job command 类。</p>
<blockquote>
<p>由此，我们也可以看出 pheanstalk 在代码设计上的思路：从 CommandInterface ，到 AbstractCommand ，再到 TubeCommand、JobCommand ， 再到具体的命令 command ，它们便是一个典型的从抽象到具体的过程。</p>
</blockquote>
<p><strong>在此，我们可以再回去看看 beanstalkd 的协议，熟悉各种命令和用途，结合 pheanstalk 对 command 的封装过程，以提升我们在面向对象上的设计能力。</strong></p>
<p>要求每一个 command 类都必须实现以下几个方法，且拥有以下几个常量。</p>
<h4 id="常量-1"><a href="#常量-1" class="headerlink" title="常量"></a>常量</h4><p>CommandInterface 的常量格式为 COMMAND_* ，如 COMMAND_PUT 、 COMMAND_USE 。<br>它分别定义了一系列 beanstalkd 的命令。<br><strong>之所以把 put 、 use 等命令，以常量的形式存储，是为了将「具体命令」和「具体业务逻辑」剥离，并将「具体命令」放在最高级抽象的接口中。</strong><br>这样，如果 beanstalkd 更新后更改了某些命令，如，将 put 改成 put1 ，我们的 pheanstalk 只需要更新 CommandInterface 即可，而其它「相对具体」的代码中，使用的是 CommandInterface 的常量，不会受到影响。<br>这是利用接口解耦的思路。<br>而这里的常量，一般用于组装要发送到 beanstalkd server 的命令行字符串。</p>
<h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getCommandLine</td>
<td align="left">获取当前命令行的字符串形式，会返回即将发送给 beanstalkd server 的命令行字符串形式，但不包括 CRLF ，即 \r\n</td>
</tr>
<tr>
<td align="left">hasData</td>
<td align="left">此命令是否存在 data</td>
</tr>
<tr>
<td align="left">getData</td>
<td align="left">返回此命令的 data 数据</td>
</tr>
<tr>
<td align="left">getDataLength</td>
<td align="left">返回此命令 data 的 bytes</td>
</tr>
<tr>
<td align="left">getResponseParser</td>
<td align="left">返回 ResponseParser 实例</td>
</tr>
</tbody></table>
<h3 id="ResponseInterface"><a href="#ResponseInterface" class="headerlink" title="ResponseInterface"></a>ResponseInterface</h3><p>这个接口，定义了一个 beanstalkd 返回实例该有的常量和方法。</p>
<h4 id="常量-2"><a href="#常量-2" class="headerlink" title="常量"></a>常量</h4><p>此接口下的所有常量，都以 RESPONSE_ 作为前缀，分别定义了 beanstalkd 可能返回的响应前缀，即响应中大写的那一部分。（可以回头参考下 beanstalkd 的协议）<br>这里的常量，也是用于组装 beantalkd 返回的命令行字符串。</p>
<h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getResponseName</td>
<td align="left">获取 response 的名字，一般指此 response 是哪个命令的</td>
</tr>
</tbody></table>
<h3 id="ResponseParserInterface"><a href="#ResponseParserInterface" class="headerlink" title="ResponseParserInterface"></a>ResponseParserInterface</h3><h4 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">parseResponse</td>
<td align="left">将 beanstalkd 返回的命令行字符串，解析为 Response Object</td>
</tr>
</tbody></table>
<h3 id="SocketFactoryInterface"><a href="#SocketFactoryInterface" class="headerlink" title="SocketFactoryInterface"></a>SocketFactoryInterface</h3><h4 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">create</td>
<td align="left">返回一个 socket 连接</td>
</tr>
</tbody></table>
<h3 id="SocketInterface"><a href="#SocketInterface" class="headerlink" title="SocketInterface"></a>SocketInterface</h3><p>此接口定义了 Socket 类所必须存在的操作，Socket 类主要处理和 beastalkd 通信相关事项。</p>
<h4 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">write</td>
<td align="left">向 socket 写入数据</td>
</tr>
<tr>
<td align="left">read</td>
<td align="left">从 socket 读取指定字节量的数据</td>
</tr>
<tr>
<td align="left">getLine</td>
<td align="left">获取下一行</td>
</tr>
<tr>
<td align="left">disconnect</td>
<td align="left">关闭 socket 连接</td>
</tr>
</tbody></table>
<h2 id="十二、Pheanstalk-使用手册"><a href="#十二、Pheanstalk-使用手册" class="headerlink" title="十二、Pheanstalk 使用手册"></a>十二、Pheanstalk 使用手册</h2><p>在过了一遍 contracts 之后，我们可以发现，pheanstalk 最接近用户层（开发者）的接口，就是 PheanstalkInterface 。<br>那么，使用手册，我们也通过解读 PheanstalkInterface 的具体实现 Pheanstalk 类来撰写。</p>
<h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;vendor/autoload.php&quot;</span>;</span><br><span class="line"><span class="variable">$conn</span> = \Pheanstalk\Pheanstalk::create(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">11300</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>上面的 create 方法，第一个参数必填，需要传入目标 beanstalkd 服务器的 ip ，前提是，对于 beanstalkd server 而言，你的 ip （可能是内网，也可能是外网，也可能是本机），必须在它的监听列表中。<br>第二个参数是端口，可不填，默认为 11300 ，当然你可以修改。<br>第三个参数是连接超时时间，可不填，默认为 10 ，表示 10 秒之后还未连接成功就超时了。</p>
<p><strong>要注意的是：此 create 方法只是返回一个配置好的 pheanstalk 实例，但并非是一个连接好的实例。</strong><br>如何理解呢？<br>从实现上， pheanstalk 的流程是等到有指令了，也就是有 dispatch 指令后，才建立一个 socket 连接，而它与 beanstalkd 通信的底层，用的也是 socket 。<br>所以，如果你只写了 create 方法，并不能看出是否能够连接成功。<br>你还需要发送一个指令才能知道是否能够连接成功。<br>一旦发送过指令之后，Pheanstalk-&gt;connection-&gt;socket 就会指向一个 socket 资源。</p>
<h3 id="关闭、重连"><a href="#关闭、重连" class="headerlink" title="关闭、重连"></a>关闭、重连</h3><p>虽然，我们能看到 Pheanstalkd 类中，有 reconnect 方法，还有 $this-&gt;connection 的属性。<br>然而它们的访问权限是 private 。<br>这告诉我们，关闭和重连，不需要我们手动操作。<br>我们可以看到，这两个方法，只有在 pheanstalk 向 beanstalkd 发送指令时，会用到。<br><strong>因为 PHP 使用 socket 连接时，socket 是有生命周期的，超出一定时间 socket 就会失效，此时，Pheanstalk 的 dispatch 方法就会自动重连。</strong><br>我们知道，pheanstalk 的底层通信基于 php 的 socket ，那么，必然具备 socket 的特性，再深入的内容，可以参考 php 手册中的 socket 部分。</p>
<h3 id="生产者操作"><a href="#生产者操作" class="headerlink" title="生产者操作"></a>生产者操作</h3><h4 id="选择-tube"><a href="#选择-tube" class="headerlink" title="选择 tube"></a>选择 tube</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;useTube(<span class="string">&#x27;myTube&#x27;</span>); <span class="comment">// 会返回 this ，因此支持链式操作</span></span><br></pre></td></tr></table></figure>
<h4 id="put-job"><a href="#put-job" class="headerlink" title="put job"></a>put job</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$job</span> = <span class="variable">$conn</span>-&gt;put(<span class="string">&#x27;this is my first job !&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>这里传入的字符串，就是放到 beanstalkd 中 job 的 body<br>当然，关于 priority 、 delay 、 ttr 这些参数你可以在 body 后面传入，具体可参考方法接口。<br>put 会返回一个 Job 实例，如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Pheanstalk\Job <span class="keyword">Object</span></span><br><span class="line">(</span><br><span class="line">    [id:Pheanstalk\Job:<span class="keyword">private</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [data:Pheanstalk\Job:<span class="keyword">private</span>] =&gt; this is my first job !</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$job</span> = <span class="variable">$conn</span>-&gt;useTube(<span class="string">&#x27;myTube&#x27;</span>)-&gt;put(<span class="string">&#x27;this is my 2nd job !&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="默认-Tube"><a href="#默认-Tube" class="headerlink" title="默认 Tube"></a>默认 Tube</h4><p>我们知道，默认的 Tube 是 default ，如果我们不使用 useTube 的话，put 的 job 就会在 default tube 中。</p>
<h3 id="消费者操作"><a href="#消费者操作" class="headerlink" title="消费者操作"></a>消费者操作</h3><h4 id="接收-job"><a href="#接收-job" class="headerlink" title="接收 job"></a>接收 job</h4><h4 id="reserve-1"><a href="#reserve-1" class="headerlink" title="reserve"></a>reserve</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$job</span> = <span class="variable">$conn</span>-&gt;reserve(); <span class="comment">// 默认情况会接收 default tube 的 job</span></span><br><span class="line">print_r(<span class="variable">$job</span>); <span class="comment">// 如果 reserve 没能得到 job ，就会一直阻塞在上面</span></span><br></pre></td></tr></table></figure>
<p>上面返回的一定是 Job 实例。</p>
<h4 id="reserveWithTimeOut"><a href="#reserveWithTimeOut" class="headerlink" title="reserveWithTimeOut"></a>reserveWithTimeOut</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$job2</span> = <span class="variable">$conn</span>-&gt;reserveWithTimeout(<span class="number">10</span>);  <span class="comment">// 阻塞接收，10秒之后超时，就不再接收了</span></span><br><span class="line">    print_r(<span class="variable">$job2</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$job2</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;超时了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 job ...</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (\Pheanstalk\<span class="built_in">Exception</span>\DeadlineSoonException <span class="variable">$e</span>) &#123;</span><br><span class="line">    print_r(<span class="string">&#x27;deadline soon&#x27;</span> . <span class="variable">$e</span>-&gt;getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    print_r(<span class="variable">$e</span>-&gt;getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：这个方法，超时的话会返回 null ，成功的话，会返回一个 Job 实例。<br>还有，上面代码片段中有一行 sleep ，这一行的作用，是做一个小实验。<br>当，job 被成功返回过来，但没有 sleep 这一行，你会发现，你连续运行两次该代码，返回的 job 是同一个。<br>理论上，我们应该接收到下一个 job ，因为这个 job 被接收了之后，状态就变成 reserved 而不再是 ready 。<br>那如何来测试 job 是否真的变成 reserved 了呢？<br>这就是 sleep 的用处，步骤如下：</p>
<ul>
<li>先往你的 beanstalkd 加入两个 job</li>
<li>再在两个 cli 窗口运行两次含 sleep 的消费者代码</li>
</ul>
<p>你会发现这个情况，如下图：<br><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329094725.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329094725.png" alt="img"><br>它们分别接收了两个 job 。</p>
<blockquote>
<p>这里不要用 web 测试，用 cli 才能更直观地看到效果。</p>
</blockquote>
<p>这个现象，也很好理解：</p>
<ul>
<li>reserve 成功之后，你的 php 进程还在于 beanstalkd 保持着 socket 连接，此连接不销毁，beanstalkd 都会为你冻结此 job 。</li>
<li>一旦 php 进程销毁（执行结束），beanstalkd 没有接收到其他对 job 的操作，自然就回到 ready 队列中了</li>
</ul>
<h3 id="删除-job"><a href="#删除-job" class="headerlink" title="删除 job"></a>删除 job</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;delete(<span class="variable">$job2</span>);</span><br></pre></td></tr></table></figure>
<p>这个方法没有返回值，但如果出错的话，会抛出异常。<br>一般在 job 被消费者处理完毕之后才调用 delete 方法。</p>
<h3 id="释放-reserved-job"><a href="#释放-reserved-job" class="headerlink" title="释放 reserved job"></a>释放 reserved job</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;release(<span class="variable">$job</span>,<span class="variable">$priority</span>,<span class="variable">$delay</span>);</span><br></pre></td></tr></table></figure>
<p>此方法没有返回值，如果出错会抛出异常。<br>此方法可以将 reserved job 重新放回 ready 队列中，一般在消费者逻辑处理失败后，才使用这个方法。</p>
<h3 id="预留"><a href="#预留" class="headerlink" title="预留"></a>预留</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;bury(<span class="variable">$job</span>,<span class="variable">$priority</span>);</span><br></pre></td></tr></table></figure>
<p>此方法没有返回值，如果出错会抛出异常。<br>此方法可以将一个 job 操作为 buried 状态，比如当你的消费者接收到这个 job 时，对 job 进行了一系列检查，经检查，发现这个 job 还不能被消费，此时可以将 job 操作为 buried ，直到有客户端对这个 job 发送了 kick 指令，才会被再次 reserve 。</p>
<h3 id="延迟-ttr"><a href="#延迟-ttr" class="headerlink" title="延迟 ttr"></a>延迟 ttr</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;touch(<span class="variable">$job</span>);</span><br></pre></td></tr></table></figure>
<p>此方法没有返回值，如果出错会抛出异常。</p>
<h3 id="添加监听的管道"><a href="#添加监听的管道" class="headerlink" title="添加监听的管道"></a>添加监听的管道</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;watch(<span class="string">&#x27;test&#x27;</span>)-&gt;watch(<span class="string">&#x27;sms&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>此方法返回 $conn 本身，可链式操作，每次运行，都会为 watch list 添加一个 tube 。</p>
<h4 id="删除监听的管道"><a href="#删除监听的管道" class="headerlink" title="删除监听的管道"></a>删除监听的管道</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;ignore(<span class="string">&#x27;email&#x27;</span>)-&gt;ignore(<span class="string">&#x27;sms&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>此方法返回 $conn 本身，可链式操作，每次运行，都会从 watch list 中移除一个 tube 。</p>
<blockquote>
<p>默认，watch list 中会有一个 default ，所以，当你执行 watch 时，default 仍然在 watch list 中。</p>
</blockquote>
<h3 id="仅监听一个管道"><a href="#仅监听一个管道" class="headerlink" title="仅监听一个管道"></a>仅监听一个管道</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;watchOnly(<span class="string">&#x27;sms&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>此方法返回 $conn 本身，可链式操作。<br>通过此快捷方法，可以一次性移除 watch list 中所有的 tube ，除了此方法传入的 tube 以外。</p>
<h3 id="其他命令-1"><a href="#其他命令-1" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="单纯获取-job"><a href="#单纯获取-job" class="headerlink" title="单纯获取 job"></a>单纯获取 job</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;peek(<span class="keyword">new</span> \Pheanstalk\Job(<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>)); <span class="comment">// 根据 id 获取 job ，id 在 beanstalkd 是唯一的，不论处于什么 tube</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;useTube(<span class="string">&#x27;order&#x27;</span>)-&gt;peekReady(); <span class="comment">// 从 order tube 中获取排在最前面的 job（这个顺序，同 reserve 的顺序）</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;peekDelayed(); <span class="comment">// 从 default tube 中获取（最）即将变成 ready 的 delayed job</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;peekBuried(); <span class="comment">// 返回下一个 buried job</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 peekReady 、 peekDelayed 、 peekBuried 虽然在译文解释中，提到「下一个」，但它并非是一个指针，当你调用一起 peekReady ，下一次再调用 peekReady 就自动将指针移动到「下一个」。<strong>如果你不手动将当前得到的 Job 操作为其他状态，或者延长延迟时间等，你多次调用 peek 命令，他将返回同一个 Job。</strong></p>
</blockquote>
<h3 id="批量操作-job-为-ready"><a href="#批量操作-job-为-ready" class="headerlink" title="批量操作 job 为 ready"></a>批量操作 job 为 ready</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;useTube(<span class="string">&#x27;order&#x27;</span>);</span><br><span class="line"><span class="variable">$kicked</span> = <span class="variable">$conn</span>-&gt;kick(<span class="number">10</span>);</span><br><span class="line">print_r(<span class="variable">$kicked</span>);</span><br></pre></td></tr></table></figure>
<p>上面的代码片段，是针对 order tube 操作 10 条 buried 或 delayed 为 ready 。<br>具体可以看 beanstalkd 译文中的 kick 命令。</p>
<h3 id="操作指定-job-为-ready"><a href="#操作指定-job-为-ready" class="headerlink" title="操作指定 job 为 ready"></a>操作指定 job 为 ready</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;useTube(<span class="string">&#x27;sms&#x27;</span>)-&gt;kickJob(<span class="variable">$job</span>);</span><br></pre></td></tr></table></figure>
<p>此方法没有返回值。</p>
<h3 id="获取-job-的统计信息"><a href="#获取-job-的统计信息" class="headerlink" title="获取 job 的统计信息"></a>获取 job 的统计信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$job</span> = <span class="variable">$conn</span>-&gt;reserve();</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;statsJob(<span class="variable">$job</span>);</span><br><span class="line">print_r(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>此方法返回一个 ArrayResponse 实例，具体字段意义，需参考 beanstalkd 译文。<br>$res 如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Pheanstalk\Response\ArrayResponse <span class="keyword">Object</span></span><br><span class="line">(</span><br><span class="line">    [name:Pheanstalk\Response\ArrayResponse:<span class="keyword">private</span>] =&gt; OK</span><br><span class="line">    [storage:<span class="built_in">ArrayObject</span>:<span class="keyword">private</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">2</span></span><br><span class="line">            [tube] =&gt; <span class="keyword">default</span></span><br><span class="line">            [state] =&gt; reserved</span><br><span class="line">            [pri] =&gt; <span class="number">1</span></span><br><span class="line">            [age] =&gt; <span class="number">92865</span></span><br><span class="line">            [delay] =&gt; <span class="number">0</span></span><br><span class="line">            [ttr] =&gt; <span class="number">60</span></span><br><span class="line">            [time-left] =&gt; <span class="number">59</span></span><br><span class="line">            [file] =&gt; <span class="number">0</span></span><br><span class="line">            [reserves] =&gt; <span class="number">8</span></span><br><span class="line">            [timeouts] =&gt; <span class="number">0</span></span><br><span class="line">            [releases] =&gt; <span class="number">0</span></span><br><span class="line">            [buries] =&gt; <span class="number">0</span></span><br><span class="line">            [kicks] =&gt; <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="获取-tube-统计信息"><a href="#获取-tube-统计信息" class="headerlink" title="获取 tube 统计信息"></a>获取 tube 统计信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;statsTube(<span class="string">&#x27;default&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>此方法返回一个 ArrayResponse 实例，具体字段意义，需参考 beanstalkd 译文。<br>$res 如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Pheanstalk\Response\ArrayResponse <span class="keyword">Object</span></span><br><span class="line">(</span><br><span class="line">    [name:Pheanstalk\Response\ArrayResponse:<span class="keyword">private</span>] =&gt; OK</span><br><span class="line">    [storage:<span class="built_in">ArrayObject</span>:<span class="keyword">private</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [name] =&gt; <span class="keyword">default</span></span><br><span class="line">            [current-jobs-urgent] =&gt; <span class="number">1</span></span><br><span class="line">            [current-jobs-ready] =&gt; <span class="number">2</span></span><br><span class="line">            [current-jobs-reserved] =&gt; <span class="number">0</span></span><br><span class="line">            [current-jobs-delayed] =&gt; <span class="number">0</span></span><br><span class="line">            [current-jobs-buried] =&gt; <span class="number">0</span></span><br><span class="line">            [total-jobs] =&gt; <span class="number">2</span></span><br><span class="line">            [current-using] =&gt; <span class="number">1</span></span><br><span class="line">            [current-watching] =&gt; <span class="number">1</span></span><br><span class="line">            [current-waiting] =&gt; <span class="number">0</span></span><br><span class="line">            [cmd-delete] =&gt; <span class="number">0</span></span><br><span class="line">            [cmd-pause-tube] =&gt; <span class="number">0</span></span><br><span class="line">            [pause] =&gt; <span class="number">0</span></span><br><span class="line">            [pause-time-left] =&gt; <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="获取-beanstalkd-服务器统计信息"><a href="#获取-beanstalkd-服务器统计信息" class="headerlink" title="获取 beanstalkd 服务器统计信息"></a>获取 beanstalkd 服务器统计信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;stats();</span><br><span class="line">print_r(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>此方法返回一个 ArrayResponse 实例，具体字段意义，需参考 beanstalkd 译文。<br>$res 如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Pheanstalk\Response\ArrayResponse <span class="keyword">Object</span></span><br><span class="line">(</span><br><span class="line">    [name:Pheanstalk\Response\ArrayResponse:<span class="keyword">private</span>] =&gt; OK</span><br><span class="line">    [storage:<span class="built_in">ArrayObject</span>:<span class="keyword">private</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [current-jobs-urgent] =&gt; <span class="number">1</span></span><br><span class="line">            [current-jobs-ready] =&gt; <span class="number">2</span></span><br><span class="line">            [current-jobs-reserved] =&gt; <span class="number">0</span></span><br><span class="line">            [current-jobs-delayed] =&gt; <span class="number">0</span></span><br><span class="line">            [current-jobs-buried] =&gt; <span class="number">0</span></span><br><span class="line">            [cmd-put] =&gt; <span class="number">2</span></span><br><span class="line">            [cmd-peek] =&gt; <span class="number">10</span></span><br><span class="line">            [cmd-peek-ready] =&gt; <span class="number">11</span></span><br><span class="line">            [cmd-peek-delayed] =&gt; <span class="number">10</span></span><br><span class="line">            [cmd-peek-buried] =&gt; <span class="number">10</span></span><br><span class="line">            [cmd-reserve] =&gt; <span class="number">2</span></span><br><span class="line">            [cmd-reserve-with-timeout] =&gt; <span class="number">16</span></span><br><span class="line">            [cmd-delete] =&gt; <span class="number">0</span></span><br><span class="line">            [cmd-release] =&gt; <span class="number">0</span></span><br><span class="line">            [cmd-<span class="keyword">use</span>] =&gt; 7</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">watch</span>] =&gt; 4</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">ignore</span>] =&gt; 4</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">bury</span>] =&gt; 0</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">kick</span>] =&gt; 4</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">touch</span>] =&gt; 0</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">stats</span>] =&gt; 1</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">stats</span>-<span class="title">job</span>] =&gt; 1</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">stats</span>-<span class="title">tube</span>] =&gt; 1</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">list</span>-<span class="title">tubes</span>] =&gt; 0</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">list</span>-<span class="title">tube</span>-<span class="title">used</span>] =&gt; 0</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">list</span>-<span class="title">tubes</span>-<span class="title">watched</span>] =&gt; 0</span><br><span class="line">            [<span class="title">cmd</span>-<span class="title">pause</span>-<span class="title">tube</span>] =&gt; 0</span><br><span class="line">            [<span class="title">job</span>-<span class="title">timeouts</span>] =&gt; 0</span><br><span class="line">            [<span class="title">total</span>-<span class="title">jobs</span>] =&gt; 2</span><br><span class="line">            [<span class="title">max</span>-<span class="title">job</span>-<span class="title">size</span>] =&gt; 65535</span><br><span class="line">            [<span class="title">current</span>-<span class="title">tubes</span>] =&gt; 1</span><br><span class="line">            [<span class="title">current</span>-<span class="title">connections</span>] =&gt; 1</span><br><span class="line">            [<span class="title">current</span>-<span class="title">producers</span>] =&gt; 0</span><br><span class="line">            [<span class="title">current</span>-<span class="title">workers</span>] =&gt; 0</span><br><span class="line">            [<span class="title">current</span>-<span class="title">waiting</span>] =&gt; 0</span><br><span class="line">            [<span class="title">total</span>-<span class="title">connections</span>] =&gt; 37</span><br><span class="line">            [<span class="title">pid</span>] =&gt; 1</span><br><span class="line">            [<span class="title">version</span>] =&gt; 1.10</span><br><span class="line">            [<span class="title">rusage</span>-<span class="title">utime</span>] =&gt; 0.020000</span><br><span class="line">            [<span class="title">rusage</span>-<span class="title">stime</span>] =&gt; 0.030000</span><br><span class="line">            [<span class="title">uptime</span>] =&gt; 96714</span><br><span class="line">            [<span class="title">binlog</span>-<span class="title">oldest</span>-<span class="title">index</span>] =&gt; 0</span><br><span class="line">            [<span class="title">binlog</span>-<span class="title">current</span>-<span class="title">index</span>] =&gt; 0</span><br><span class="line">            [<span class="title">binlog</span>-<span class="title">records</span>-<span class="title">migrated</span>] =&gt; 0</span><br><span class="line">            [<span class="title">binlog</span>-<span class="title">records</span>-<span class="title">written</span>] =&gt; 0</span><br><span class="line">            [<span class="title">binlog</span>-<span class="title">max</span>-<span class="title">size</span>] =&gt; 10485760</span><br><span class="line">            [<span class="title">id</span>] =&gt; <span class="title">a1e58a6bbd4c3b8b</span></span><br><span class="line">            [<span class="title">hostname</span>] =&gt; 91<span class="title">db88742cda</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="查看当前-tube-列表"><a href="#查看当前-tube-列表" class="headerlink" title="查看当前 tube 列表"></a>查看当前 tube 列表</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;listTubes();</span><br><span class="line">print_r(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>此方法将返回一个数组，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; default</span><br><span class="line">    [1] &#x3D;&gt; myTube</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="查看当前-use-的-tube-列表"><a href="#查看当前-use-的-tube-列表" class="headerlink" title="查看当前 use 的 tube 列表"></a>查看当前 use 的 tube 列表</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;listTubeUsed();</span><br><span class="line">print_r(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>此方法返回一个字符串，为当前 used 的 tube 名。<br>注意，同一时间，只有一个 tube 会被 used 。</p>
<h3 id="查看当前-watch-list"><a href="#查看当前-watch-list" class="headerlink" title="查看当前 watch list"></a>查看当前 watch list</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;listTubesWatched();</span><br><span class="line">print_r(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>此方法将返回一个数组，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; default</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="冻结-tube"><a href="#冻结-tube" class="headerlink" title="冻结 tube"></a>冻结 tube</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;pauseTube(<span class="string">&#x27;default&#x27;</span>,<span class="number">90</span>);</span><br></pre></td></tr></table></figure>
<p>此方法没有返回值，会将 tube 冻结 90 秒，冻结期间，消费者无法 reserve job ，如果 tube 冻结后，有客户端发送了 reserve 指令，则会阻塞，直到冻结结束，或 reserve time out 。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>Beanstalkd</tag>
      </tags>
  </entry>
  <entry>
    <title>RNAseq demo &amp; notes</title>
    <url>/2021/03/26/2021-03-26-RNAseq-demo-&amp;-notes/</url>
    <content><![CDATA[<h2 id="RNAseq"><a href="#RNAseq" class="headerlink" title="RNAseq"></a>RNAseq</h2><p>RNA-seq (RNA-sequencing) is a technique that can examine the quantity and sequences of RNA in a sample using next generation sequencing (NGS). It analyzes the transcriptome of gene expression patterns encoded within our RNA. </p>
<h2 id="What-are-the-applications-of-RNA-seq"><a href="#What-are-the-applications-of-RNA-seq" class="headerlink" title="What are the applications of RNA-seq?"></a>What are the applications of RNA-seq?</h2><p>RNA-seq lets us investigate and discover the transcriptome, the total cellular content of RNAs including mRNA, rRNA and tRNA. Understanding the transcriptome is key if we are to connect the information on our genome with its functional protein expression. </p>
<p>RNA-seq can tell us which genes are turned on in a cell, what their level of expression is, and at what times they are activated or shut off. This allows scientists to more deeply understand the biology of a cell and assess changes that may indicate disease. Some of the most popular techniques that use RNA-seq are transcriptional profiling, SNP identification, RNA editing and differential gene expression analysis.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210331171555.png" alt="RNA-seq Short Reads"></p>
<blockquote>
<p>Figure1: RNA-seq data uses uses short reads of mRNA which is free of intronic non-coding DNA. These reads must then be aligned back to the reference genome. </p>
</blockquote>
<p>This can give researchers vital information about the function of genes. For example, the transcriptome can highlight all the tissues in which a gene of unknown function is expressed, which might indicate what its role is. It also captures information about alternative splicing events (Figure 1), which produce different transcripts from one single gene sequence. These events would not be picked up by DNA sequencing. It can also identify post-transcriptional modifications that occur during mRNA processing such as polyadenylation and 5’ capping</p>
<h2 id="How-does-RNA-seq-work"><a href="#How-does-RNA-seq-work" class="headerlink" title="How does RNA-seq work?"></a>How does RNA-seq work?</h2><p>Early RNA-seq techniques used Sanger sequencing technology, a technique that although innovative at the time, was also low-throughput, costly, and inaccurate. It is only recently, with the advent and proliferation of NGS technology, have we been able to fully take advantage of RNA-seq’s potential</p>
<p>The first step in the technique involves converting the population of RNA to be sequenced into cDNA fragments (a cDNA library). This allows the RNA to be put into an NGS workflow. Adapters are then added to each end of the fragments. These adapters contain functional elements which permit sequencing; for example, the amplification element and the primary sequencing site. The cDNA library is then analyzed by NGS, producing short sequences which correspond to either one or both ends of the fragment. The depth to which the library is sequenced varies depending on techniques which the output data will be used for. The sequencing often follows either single-read or paired-end sequencing methods. Single-read sequencing is a cheaper and faster technique (for reference, about 1% of the cost of Sanger sequencing) that sequences the cDNA from just one end, whilst paired-end methods sequence from both ends, and are therefore more expensive and time-consuming5,6.             </p>
<p>A further choice must be made between strand-specific and non-strand-specific protocols. The former method means the information about which DNA strand was transcribed is retained. The value of extra information obtained from strand-specific protocols make them the favorable option.</p>
<p>These reads, of which there will be many millions by the end of the workflow, can then be aligned to a genome of reference and assembled to produce an RNA sequence map that spans the transcriptome7.</p>
<p>The whole pipeline</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210403092100.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210403092928.jpg" alt="聊聊转录组测序——2.数据分析与解读（上）"></p>
<h2 id="CHIP-mechanisms"><a href="#CHIP-mechanisms" class="headerlink" title="CHIP mechanisms"></a>CHIP mechanisms</h2><ul>
<li><p><strong>C</strong>hromatin <strong>I</strong>mmuno<strong>P</strong>recipitation <strong>Seq</strong>uencing (ChIP-Seq)</p>
</li>
<li><p>An approach to ==detect specific DNA regions/sequences associated with a protein of interest, <em>in vivo</em>.==</p>
</li>
<li><p>Became a powerful tool to analyze protein/DNA interactions, furthermore to detect any signal/modification associated with DNA/Chromatin.</p>
</li>
</ul>
<p>• Protein-DNA interactions</p>
<p>• Chromatin States</p>
<p>• Transcriptional regulation</p>
<p>• DNA modifications (MeDIP)</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210326233148.png" alt="image-20210326233143439"></p>
<h3 id="ChIP"><a href="#ChIP" class="headerlink" title="ChIP"></a>ChIP</h3><p>•DNA and associated proteins on chromatin in living cells or tissues are crosslinked (this step is omitted in Native ChIP).</p>
<p>•The DNA-protein complexes (chromatin-protein) are then sheared into ~500 bp DNA fragments by sonication or nuclease digestion.</p>
<p>•Cross-linked DNA fragments associated with the protein(s) of interest are selectively immunoprecipitated from the cell debris using an appropriate protein-specific antibody.</p>
<p>•The associated DNA fragments are purified and their sequence is determined. Enrichment of specific DNA sequences represents regions on the genome that the protein of interest is associated with in vivo.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210326233303.png" alt="image-20210326233303656"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210327085932.png" alt="image-20210327085931977"></p>
<hr>
<h2 id="NGS-flow-chart-amp-details"><a href="#NGS-flow-chart-amp-details" class="headerlink" title="NGS flow chart &amp; details"></a>NGS flow chart &amp; details</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329113524.png" alt="image-20210329113524383"></p>
<h3 id="FASTQ-format"><a href="#FASTQ-format" class="headerlink" title="FASTQ format"></a>FASTQ format</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329113608.png" alt="image-20210329113608444"></p>
<h3 id="SAM-format"><a href="#SAM-format" class="headerlink" title="SAM format:"></a>SAM format:</h3><ul>
<li><strong>SAM</strong> stands for Sequence Alignment/Map format. It is a TAB-delimited text format consisting of a header section, which is optional, and an alignment section.</li>
<li>Details: <a class="link"   href="https://samtools.github.io/hts-specs/SAMv1.pdf" >https://<i class="fas fa-external-link-alt"></i></a><a class="link"   href="https://samtools.github.io/hts-specs/SAMv1.pdf" >samtools.github.io/hts-specs/SAMv1.pdf<i class="fas fa-external-link-alt"></i></a> </li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329113732.png" alt="image-20210329113732323"></p>
<h3 id="NGS-reads-Alignment"><a href="#NGS-reads-Alignment" class="headerlink" title="NGS reads Alignment"></a>NGS reads Alignment</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329113822.png" alt="image-20210329113822691"></p>
<h3 id="Fasta-format"><a href="#Fasta-format" class="headerlink" title="Fasta format"></a>Fasta format</h3><ul>
<li><a class="link"   href="https://en.wikipedia.org/wiki/FASTA" >https://<i class="fas fa-external-link-alt"></i></a><a class="link"   href="https://en.wikipedia.org/wiki/FASTA" >en.wikipedia.org/wiki/FASTA<i class="fas fa-external-link-alt"></i></a></li>
<li>The first line in a FASTA file starts either with a “&gt;” (greater-than) symbol</li>
<li>Following the initial line (used for a unique description of the sequence) is the actual sequence itself in standard one-letter code. </li>
</ul>
<h3 id="TDF-format"><a href="#TDF-format" class="headerlink" title="TDF format"></a>TDF format</h3><ul>
<li>A tiled data file (TDF) file (.tdf) is a binary file that contains data that has been preprocessed for faster display in IGV. There are other alternative formats, including wig, bigwig, etc.</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329114133.png" alt="image-20210329114133206"></p>
<h3 id="FASTAQC-NGS-Data-Quality"><a href="#FASTAQC-NGS-Data-Quality" class="headerlink" title="FASTAQC- NGS Data Quality"></a>FASTAQC- NGS Data Quality</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210329114513.png" alt="image-20210329114513821"></p>
<h3 id="如何阅读fastqc"><a href="#如何阅读fastqc" class="headerlink" title="如何阅读fastqc"></a>如何阅读fastqc</h3><p>非常详细</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/20731723" >https://zhuanlan.zhihu.com/p/20731723<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210331144050.png" alt="image-20210331144050385"></p>
<p>Two main problems we need to pay attention to:</p>
<ul>
<li>Base quality </li>
<li>Adaptor </li>
</ul>
<h3 id="Data-format"><a href="#Data-format" class="headerlink" title="Data format:"></a>Data format:</h3><ul>
<li><p>SRA: Sequencing data (compressed format)</p>
</li>
<li><p>FASTQ: Sequencing data</p>
</li>
<li><p>SAM: Aligned sequencing data </p>
</li>
<li><p>BAM: Aligned sequencing data (compressed format)</p>
</li>
<li><p>TDF: (Aligned) Tag density file for visualization of BAM</p>
</li>
<li><p>GTF: Gene annotation</p>
</li>
<li><p>BED: range format (chr1, 210-350). It can be used to store gene annotation, sequencing read alignment information, TF binding site information, etc.</p>
</li>
</ul>
<hr>
<h2 id="Key-Info-bash"><a href="#Key-Info-bash" class="headerlink" title="Key_Info.bash"></a><strong>Key_Info.bash</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Project #2</span></span><br><span class="line"><span class="comment"># BIO405</span></span><br><span class="line"><span class="comment"># 2021-03-15 </span></span><br><span class="line"><span class="comment"># Bash Script</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S1. make your working directory ##################################</span></span><br><span class="line"><span class="comment"># connect to the Linux server</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># check where you are</span></span><br><span class="line">ls <span class="comment"># see what do you have</span></span><br><span class="line">mkdir ~/P2 <span class="comment"># make a folder for this project under your home directory ~</span></span><br><span class="line"><span class="comment"># &quot;~&quot; means your home directory on the linux server</span></span><br><span class="line">ls ~ <span class="comment"># to check whether you have the P2 folder generated under your home directory</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># S2. download one fastq data</span></span><br><span class="line"><span class="comment"># Alternative 1: https://www.ncbi.nlm.nih.gov/Traces/study/?acc=PRJNA486780&amp;o=acc_s%3Aa (used example)</span></span><br><span class="line"><span class="comment"># Alternative 2: https://www.ncbi.nlm.nih.gov/Traces/study/?acc=PRJNA403831&amp;o=acc_s%3Aa</span></span><br><span class="line"><span class="comment"># Most RNAseq datasets were deposited into GEO: https://www.ncbi.nlm.nih.gov/geo/</span></span><br><span class="line"><span class="comment"># try to find a dataset YOU are interested in. Download process can be done in parallel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download the fastq file</span></span><br><span class="line">mkdir ~/P2/fastq</span><br><span class="line">(nohup fastq-dump --split-3 -v SRR7721730 -O ~/P2/fastq &gt; ~/P2/sra/730.out)&amp;</span><br><span class="line">ls -l ~/P2/fastq <span class="comment"># check what you have now</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Explanations</span></span><br><span class="line"><span class="comment"># (nohup)&amp;: means run the command in background mode</span></span><br><span class="line"><span class="comment"># --splite-3: if datas are paired-end, they will be divided into two files</span></span><br><span class="line"><span class="comment"># SRRxxxxxx: the sample number in GEO</span></span><br><span class="line"><span class="comment"># -O: where to save the downloaded sample</span></span><br><span class="line"><span class="comment"># &gt; ~/P2/fastq/730.out: where to save the messages received while downloading the file</span></span><br><span class="line"></span><br><span class="line">ls -l ~/P2/fastq <span class="comment"># check what you have now</span></span><br></pre></td></tr></table></figure>


<h3 id="Download-the-fastq-file"><a href="#Download-the-fastq-file" class="headerlink" title="Download the fastq file"></a>Download the fastq file</h3><p><strong>Explanations</strong></p>
<ul>
<li>(nohup)&amp;: means run the command in background mode</li>
<li>–splite-3: if datas are paired-end, they will be divided into two files</li>
<li>SRRxxxxxx: the sample number in GEO</li>
<li> -O: where to save the downloaded sample</li>
<li>&gt; ~/P2/fastq/730.out: where to save the messages received while downloading the file</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># S3. Top</span></span><br><span class="line">htop -u <span class="string">&quot;<span class="variable">$USER</span>&quot;</span> <span class="comment"># check the load of the server and the tasks you are running, if you see too many tasks are running, you should not submit additional jobs. </span></span><br><span class="line">q <span class="comment"># to quit from htop command</span></span><br><span class="line">killall -u <span class="string">&quot;<span class="variable">$USER</span>&quot;</span> <span class="comment"># to terminate all your running jobs </span></span><br></pre></td></tr></table></figure>




<h3 id="Quality-control"><a href="#Quality-control" class="headerlink" title="Quality control"></a>Quality control</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># S4. quality control ####################################</span></span><br><span class="line">mkdir ~/P2/fastqc_report</span><br><span class="line">fastqc -o ~/P2/fastqc_report -f fastq ~/P2/fastq/SRR7721730_1.fastq ~/P2/fastq/SRR7721730_2.fastq</span><br><span class="line"><span class="comment"># for paired end of data, you have to check the data quality of both reads</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># you could check the html file in the Rstudio </span></span><br></pre></td></tr></table></figure>


<h3 id="Obtain-the-index-for-alignment"><a href="#Obtain-the-index-for-alignment" class="headerlink" title="Obtain the index for alignment"></a>Obtain the index for alignment</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># S6. get the whole genome fasta</span></span><br><span class="line">mkdir ~/P2/index</span><br><span class="line"><span class="comment"># it takes a long time to download this genome annotation pacakge, so I have downloaded everything for you.</span></span><br><span class="line"><span class="comment"># all the genome annotation (human, mouse, etc) is available from: http://10.7.88.74/MyWeb/Genomes</span></span><br><span class="line">wget -O ~/P2/index/hg38.fa http://10.7.88.74/MyWeb/Genomes/hg38/genome.fa <span class="comment"># download genome</span></span><br><span class="line">wget -O ~/P2/index/hg38.gtf http://10.7.88.74/MyWeb/Genomes/hg38/genes.gtf <span class="comment"># download annotation</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S7. get the index, needed for alignment </span></span><br><span class="line"><span class="comment"># hisat2-build hg38.fa hg38 </span></span><br><span class="line"><span class="comment"># build index, take a very long time</span></span><br><span class="line"><span class="comment"># with the assistance of index, we could increase the speed of query data</span></span><br><span class="line">(nohup hisat2-build ~/P2/index/hg38.fa ~/P2/index/hg38 &gt; ~/P2/index/index_message.out)&amp; <span class="comment"># let us do it in background mode</span></span><br><span class="line">ls -l ~/P2/index/ <span class="comment"># the index files are very larger</span></span><br></pre></td></tr></table></figure>


<h3 id="tophat-alignment"><a href="#tophat-alignment" class="headerlink" title="tophat alignment"></a>tophat alignment</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># S8. Align the fastq files to genome with tophat</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">mkdir ~/P2/bam <span class="comment"># make a folder to store aligned bam files</span></span><br><span class="line"></span><br><span class="line">(nohup hisat2 -x ~/P2/index/hg38 -1 ~/P2/fastq/SRR7721730_1.fastq -2 ~/P2/fastq/SRR7721730_2.fastq -S ~/P2/bam/SRR7721730.sam &gt; ~/P2/bam/hisat_730.out)&amp;</span><br><span class="line">head ~/P2/bam/SRR7721730/730.out <span class="comment"># check the summary result of alignment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># covert to bam file to save space</span></span><br><span class="line">(nohup samtools view -S ~/P3/bam/SRR7721730.sam -b &gt; ~/P3/bam/SRR7721730.bam)&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort alignment</span></span><br><span class="line">(nohup samtools sort ~/P3/bam/SRR7721730.bam -o ~/P3/bam/SRR7721730_sorted.bam)&amp; <span class="comment"># sort alignment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index all the bam files, which is required for visualization in IGV</span></span><br><span class="line">(nohup samtools index ~/P3/bam/SRR7721730_sorted.bam)&amp; <span class="comment"># a file with the same name and ended with &quot;.bai&quot; is generated. This is the index of a BAM file.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="TDF-file-for-visualization-of-bam-files"><a href="#TDF-file-for-visualization-of-bam-files" class="headerlink" title="TDF file for visualization of bam files"></a>TDF file for visualization of bam files</h3><ul>
<li>IGV browser, downloading it when required </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> S9. prepare TDF file <span class="keyword">for</span> visualization of bam files</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> download the chromesome size file</span></span><br><span class="line">wget -O ~/P2/tdf/hg38.chrom.sizes http://10.7.88.74/MyWeb/Genomes/chrom.sizes/hg38.chrom.sizes # use a different genome size file if necessary</span><br><span class="line">mkdir ~/P2/tdf</span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P2/bam/SRR7721730_sorted.bam ~/P2/tdf/SRR7721730.tdf ~/P2/tdf/hg38.chrom.sizes &gt; ~/P2/tdf/igv_730.out)&amp;</span><br><span class="line">ls ~/P2/tdf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> S10. genome browser</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> download IGV browser: http://software.broadinstitute.org/software/igv/download</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use IGV to visualize the TDF files</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use IGV to visualize the BAM files (with the .bai index file)</span></span><br></pre></td></tr></table></figure>


<ul>
<li>use IGV to visualize the TDF files</li>
<li>use IGV to visualize the BAM files (with the .bai index file)</li>
</ul>
<hr>
<h2 id="RNAseq-data-analysis"><a href="#RNAseq-data-analysis" class="headerlink" title="RNAseq data analysis"></a>RNAseq data analysis</h2><h3 id="Data-preparation"><a href="#Data-preparation" class="headerlink" title="Data preparation"></a>Data preparation</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RNAseq data analysis</span></span><br><span class="line"><span class="comment"># BIO316</span></span><br><span class="line"><span class="comment"># 2021-03-15</span></span><br><span class="line"><span class="comment"># Bash script</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S1. make your working directory ##################################</span></span><br><span class="line"><span class="comment"># connect to the Linux server</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment"># go to your home directory</span></span><br><span class="line">mkdir P3 <span class="comment"># or use whatever name you prefer</span></span><br><span class="line">ls <span class="comment"># check whether you have the new folder for project 3</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># check your current working directory</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># S2. download the raw data in sra format ####################################</span></span><br><span class="line"><span class="comment"># Data from: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE53794</span></span><br><span class="line">mkdir ~/P3/fastq <span class="comment"># make a new directory to store raw sequencing data in SRA format</span></span><br><span class="line">ls ~/P3/fastq <span class="comment"># nothing is inside</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># S3 download all the data in parellel</span></span><br><span class="line">(nohup fastq-dump --split-3 SRR1068226 -O ~/P3/fastq &gt; ~/P3/fastq/226.out)&amp;</span><br><span class="line">(nohup fastq-dump --split-3 SRR1068227 -O ~/P3/fastq &gt; ~/P3/fastq/227.out)&amp;</span><br><span class="line">(nohup fastq-dump --split-3 SRR1068228 -O ~/P3/fastq &gt; ~/P3/fastq/228.out)&amp;</span><br><span class="line">(nohup fastq-dump --split-3 SRR1068229 -O ~/P3/fastq &gt; ~/P3/fastq/229.out)&amp;</span><br><span class="line">(nohup fastq-dump --split-3 SRR1068230 -O ~/P3/fastq &gt; ~/P3/fastq/230.out)&amp;</span><br><span class="line">(nohup fastq-dump --split-3 SRR1068231 -O ~/P3/fastq &gt; ~/P3/fastq/231.out)&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># the structure of this command is: (nohup command_to_be_executed &gt; text_log_file.out)&amp;</span></span><br><span class="line"><span class="comment">## --splite-3 for mate-pairs: biological reads satisfying dumping conditions are placed in files *_1.fastq and *_2.fastq.</span></span><br><span class="line"><span class="comment">## If only one biological read is present it is placed in *.fastq Biological reads and above are ignored.</span></span><br><span class="line"><span class="comment">## If the data is single-end, it will not save as two files.</span></span><br></pre></td></tr></table></figure>


<h3 id="Syntax-explanation"><a href="#Syntax-explanation" class="headerlink" title="Syntax explanation"></a>Syntax explanation</h3><ul>
<li>the structure of this command is: ==(nohup command_to_be_executed &gt; text_log_file.out)&amp;==</li>
<li>==–splite-3 for mate-pairs: biological reads satisfying dumping conditions are placed in files *_1.fastq and *_2.fastq.==</li>
<li>If only one biological read is present it is placed in *.fastq Biological reads and above are ignored.</li>
<li>If the data is single-end, it will not save as two files.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top <span class="comment"># check the download process</span></span><br><span class="line">ps -u j <span class="comment"># check you on-going processes, replace &quot;j&quot; with your own user ID &quot;y18u1&quot;</span></span><br><span class="line">ls ~/P3/fastq <span class="comment"># check downloaded fastq files</span></span><br><span class="line">cat ~/P3/fastq/226.out <span class="comment"># check whether there is any error during the data downloading</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S4. quality control ####################################</span></span><br><span class="line">mkdir ~/P3/report</span><br><span class="line">fastqc -o ~/P3/report -f fastq ~/P3/fastq/SRR1068226.fastq ~/P3/fastq/SRR1068227.fastq\</span><br><span class="line"> ~/P3/fastq/SRR1068228.fastq ~/P3/fastq/SRR1068229.fastq ~/P3/fastq/SRR1068230.fastq ~/P3/fastq/SRR1068231.fastq</span><br><span class="line"><span class="comment"># notice, &quot;\&quot; indicates the line is not over yet, continue in the next line. It is equivalent to the following:</span></span><br><span class="line"><span class="comment"># this is different from R, in which you can change the line after any meaningful unit.</span></span><br><span class="line">ls ~/P3/report <span class="comment"># check the generated fastqc reports, see whether everything is OK.</span></span><br><span class="line"><span class="comment"># you may have to trim the data if necessary</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S5. copy the mouse genome information</span></span><br><span class="line">mkdir ~/P3/index</span><br><span class="line"><span class="comment"># it takes a long time to download this genome annotation pacakge, so I have downloaded everything for you.</span></span><br><span class="line"><span class="comment"># all the genome annotation (human, mouse, etc) is available from: http://10.7.88.74/MyWeb/Genomes</span></span><br><span class="line">wget -O ~/P3/index/mm9.fa http://10.7.88.74/MyWeb/Genomes/mm9/genome.fa</span><br><span class="line">wget -O ~/P3/index/mm9.gtf http://10.7.88.74/MyWeb/Genomes/mm9/genes.gtf</span><br><span class="line"></span><br><span class="line"><span class="comment"># S7. Build index, needed for alignment </span></span><br><span class="line">(nohup hisat2-build ~/P3/index/mm9.fa ~/P3/index/mm9 &gt; ~/P3/index/build_index.out)&amp; <span class="comment"># build index, take a very long time</span></span><br><span class="line">top <span class="comment"># check the progress</span></span><br><span class="line">cat ~/P3/index/build_index.out <span class="comment"># check the notifications</span></span><br><span class="line">ls -l ~/P3/index/ <span class="comment"># check the index. the index files are very larger </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S8. Align the fastq files to genome with tophat</span></span><br><span class="line">mkdir ~/P3/bam <span class="comment"># make a folder to store aligned bam files</span></span><br><span class="line">(nohup hisat2 -x ~/P3/index/mm9 -U ~/P3/fastq/SRR1068226.fastq -S ~/P3/bam/SRR1068226.sam &gt; ~/P3/bam/226.out)&amp;</span><br><span class="line">(nohup hisat2 -x ~/P3/index/mm9 -U ~/P3/fastq/SRR1068227.fastq -S ~/P3/bam/SRR1068227.sam &gt; ~/P3/bam/227.out)&amp;</span><br><span class="line">(nohup hisat2 -x ~/P3/index/mm9 -U ~/P3/fastq/SRR1068228.fastq -S ~/P3/bam/SRR1068228.sam &gt; ~/P3/bam/228.out)&amp;</span><br><span class="line">(nohup hisat2 -x ~/P3/index/mm9 -U ~/P3/fastq/SRR1068229.fastq -S ~/P3/bam/SRR1068229.sam &gt; ~/P3/bam/229.out)&amp;</span><br><span class="line">(nohup hisat2 -x ~/P3/index/mm9 -U ~/P3/fastq/SRR1068230.fastq -S ~/P3/bam/SRR1068230.sam &gt; ~/P3/bam/230.out)&amp;</span><br><span class="line">(nohup hisat2 -x ~/P3/index/mm9 -U ~/P3/fastq/SRR1068231.fastq -S ~/P3/bam/SRR1068231.sam &gt; ~/P3/bam/231.out)&amp;</span><br><span class="line"><span class="comment"># for paired-end data, you can use below command</span></span><br><span class="line">(nohup hisat2 -x ~/P2/index/hg38 -1 ~/P2/fastq/SRR7721730_1.fastq -2 ~/P2/fastq/SRR7721730_2.fastq -S ~/P3/bam/SRR7721730.sam&gt; ~/P2/bam/hisat_730.out)&amp;</span><br><span class="line">top <span class="comment"># check the progress of all tasks</span></span><br><span class="line">cat ~/P3/bam/226.out <span class="comment"># check the alignment efficiency</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conver to bam</span></span><br><span class="line">(nohup samtools view -S ~/P3/bam/SRR1068226.sam -b &gt; ~/P3/bam/SRR1068226.bam)&amp; <span class="comment"># covert to bam file to save space</span></span><br><span class="line">(nohup samtools view -S ~/P3/bam/SRR1068227.sam -b &gt; ~/P3/bam/SRR1068227.bam)&amp; <span class="comment"># covert to bam file to save space</span></span><br><span class="line">(nohup samtools view -S ~/P3/bam/SRR1068228.sam -b &gt; ~/P3/bam/SRR1068228.bam)&amp; <span class="comment"># covert to bam file to save space</span></span><br><span class="line">(nohup samtools view -S ~/P3/bam/SRR1068229.sam -b &gt; ~/P3/bam/SRR1068229.bam)&amp; <span class="comment"># covert to bam file to save space</span></span><br><span class="line">(nohup samtools view -S ~/P3/bam/SRR1068230.sam -b &gt; ~/P3/bam/SRR1068230.bam)&amp; <span class="comment"># covert to bam file to save space</span></span><br><span class="line">(nohup samtools view -S ~/P3/bam/SRR1068231.sam -b &gt; ~/P3/bam/SRR1068231.bam)&amp; <span class="comment"># covert to bam file to save space</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort alignment</span></span><br><span class="line">(nohup samtools sort ~/P3/bam/SRR1068226.bam -o ~/P3/bam/SRR1068226_sorted.bam)&amp; <span class="comment"># sort alignment</span></span><br><span class="line">(nohup samtools sort ~/P3/bam/SRR1068227.bam -o ~/P3/bam/SRR1068227_sorted.bam)&amp; <span class="comment"># sort alignment</span></span><br><span class="line">(nohup samtools sort ~/P3/bam/SRR1068228.bam -o ~/P3/bam/SRR1068228_sorted.bam)&amp; <span class="comment"># sort alignment</span></span><br><span class="line">(nohup samtools sort ~/P3/bam/SRR1068229.bam -o ~/P3/bam/SRR1068229_sorted.bam)&amp; <span class="comment"># sort alignment</span></span><br><span class="line">(nohup samtools sort ~/P3/bam/SRR1068230.bam -o ~/P3/bam/SRR1068230_sorted.bam)&amp; <span class="comment"># sort alignment</span></span><br><span class="line">(nohup samtools sort ~/P3/bam/SRR1068231.bam -o ~/P3/bam/SRR1068231_sorted.bam)&amp; <span class="comment"># sort alignment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index alignment</span></span><br><span class="line">(nohup samtools index ~/P3/bam/SRR1068226_sorted.bam)&amp; <span class="comment"># a file with the same name and ended with &quot;.bai&quot; is generated. This is the index of a BAM file.</span></span><br><span class="line">(nohup samtools index ~/P3/bam/SRR1068227_sorted.bam)&amp; <span class="comment"># a file with the same name and ended with &quot;.bai&quot; is generated. This is the index of a BAM file.</span></span><br><span class="line">(nohup samtools index ~/P3/bam/SRR1068228_sorted.bam)&amp; <span class="comment"># a file with the same name and ended with &quot;.bai&quot; is generated. This is the index of a BAM file.</span></span><br><span class="line">(nohup samtools index ~/P3/bam/SRR1068229_sorted.bam)&amp; <span class="comment"># a file with the same name and ended with &quot;.bai&quot; is generated. This is the index of a BAM file.</span></span><br><span class="line">(nohup samtools index ~/P3/bam/SRR1068230_sorted.bam)&amp; <span class="comment"># a file with the same name and ended with &quot;.bai&quot; is generated. This is the index of a BAM file.</span></span><br><span class="line">(nohup samtools index ~/P3/bam/SRR1068231_sorted.bam)&amp; <span class="comment"># a file with the same name and ended with &quot;.bai&quot; is generated. This is the index of a BAM file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S9. find transcribed regions of a single sample</span></span><br><span class="line">mkdir ~/P3/gtf</span><br><span class="line">(nohup cufflinks ~/P3/bam/SRR1068226_sorted.bam -o ~/P3/gtf/SRR1068226 &gt; ~/P3/gtf/cufflinks.out)&amp; <span class="comment"># reference-based transcriptome reconstruction</span></span><br><span class="line">head ~/P3/gtf/SRR1068226/transcripts.gtf</span><br><span class="line">cufflinks --<span class="built_in">help</span> <span class="comment"># check how to do reference-based transcriptome assembly</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S10. visualization of bam files</span></span><br><span class="line"><span class="comment"># we use mm9 here, you may check the folder /home/jmeng/App/Genomes/chrom.sizes for other genome assembly numbers, such as, hg19 and mm10.</span></span><br><span class="line">mkdir ~/P3/tdf</span><br><span class="line">wget -O ~/P3/tdf/mm9.chrom.sizes http://10.7.88.74/MyWeb/Genomes/chrom.sizes/mm9.chrom.sizes  <span class="comment"># use a different genome size file if necessary</span></span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P3/bam/SRR1068226_sorted.bam ~/P3/tdf/SRR1068226.tdf ~/P3/tdf/mm9.chrom.sizes)&amp;</span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P3/bam/SRR1068226_sorted.bam ~/P3/tdf/SRR1068227.tdf ~/P3/tdf/mm9.chrom.sizes)&amp;</span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P3/bam/SRR1068226_sorted.bam ~/P3/tdf/SRR1068228.tdf ~/P3/tdf/mm9.chrom.sizes)&amp;</span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P3/bam/SRR1068226_sorted.bam ~/P3/tdf/SRR1068229.tdf ~/P3/tdf/mm9.chrom.sizes)&amp;</span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P3/bam/SRR1068226_sorted.bam ~/P3/tdf/SRR1068230.tdf ~/P3/tdf/mm9.chrom.sizes)&amp;</span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P3/bam/SRR1068226_sorted.bam ~/P3/tdf/SRR1068231.tdf ~/P3/tdf/mm9.chrom.sizes)&amp;</span><br><span class="line">ls tdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># use IGV to visualize the TDF files</span></span><br><span class="line"><span class="comment"># compare /P3/tdf/SRR1068226.tdf with the gtf </span></span><br><span class="line"><span class="comment"># file generated ~/P3/gtf/SRR1068226/transcripts.gtf and with reference</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S11. differential analysis with cuffdiff</span></span><br><span class="line"><span class="comment"># copy the gene annotation file mm9.gtf to the same directory, or you may provide a full path</span></span><br><span class="line"><span class="comment"># gene annotation GTF of mm9 and hg38 are available at directory: /home/j/BIO405/Genomes, choose the one you need:   </span></span><br><span class="line">mkdir ~/P3/DGE </span><br><span class="line">(nohup cuffdiff -o ~/P3/DGE -p 2 -L WT,CI994\</span><br><span class="line"> -b ~/P3/index/mm9.fa -u ~/P3/index/mm9.gtf\</span><br><span class="line"> ~/P3/bam/SRR1068226_sorted.bam,~/P3/bam/SRR1068227_sorted.bam,~/P3/bam/SRR1068228_sorted.bam\</span><br><span class="line"> ~/P3/bam/SRR1068229_sorted.bam,~/P3/bam/SRR1068230_sorted.bam,~/P3/bam/SRR1068231_sorted.bam\</span><br><span class="line"> &gt;  ~/P3/DGE/cuffdiff.out)&amp;</span><br><span class="line"><span class="comment"># the above step will take a long time, so let us do it in background mode</span></span><br><span class="line"></span><br><span class="line">ps -u <span class="variable">$USER</span></span><br><span class="line">ls ~/P3/DGE</span><br><span class="line">head ~/P3/DGE/cuffdiff.out</span><br><span class="line">head ~/P3/DGE/gene_exp.diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use &quot;Cuffdiff&quot; to conduct differential expression analysis</span></span><br><span class="line"><span class="comment"># please check the meaning of &quot;-p 4&quot;, &quot;-L WT,CI994&quot;, &quot;-b ~/P3/index/mm9.fa&quot;, &quot;-u&quot; with the following command</span></span><br><span class="line">cuffdiff --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># check the files generated in output folder DGE specified by &quot;-o ~/P3/DGE&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Chipseq-MACS2-bash"><a href="#Chipseq-MACS2-bash" class="headerlink" title="Chipseq_MACS2.bash"></a>Chipseq_MACS2.bash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># S1. MACS2 peak calling from ChIP-seq data</span></span><br><span class="line"><span class="comment"># Download ChIPseq data</span></span><br><span class="line">mkdir ~/P4</span><br><span class="line">mkdir ~/P4/fastq</span><br><span class="line">mkdir ~/P4/index</span><br><span class="line">mkdir ~/P4/report</span><br><span class="line">mkdir ~/P4/bam</span><br><span class="line">mkdir ~/P4/tdf</span><br><span class="line">mkdir ~/P4/macs</span><br><span class="line"></span><br><span class="line"><span class="comment"># download the data from GEO</span></span><br><span class="line"><span class="comment"># please use the data of your interests in the assignment</span></span><br><span class="line"><span class="comment"># it is better to find a data set related to your master thesis</span></span><br><span class="line">(nohup fastq-dump SRR568477 -O ~/P4/fastq &gt; ~/P4/fastq/477.out)&amp;</span><br><span class="line">(nohup fastq-dump SRR1768320 -O ~/P4/fastq &gt; ~/P4/fastq/320.out)&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># please note that</span></span><br><span class="line"><span class="comment"># if the sample use pair-end sequencing, if you should use &quot;fastq-dump --split-files ...&quot; and will get two fastq files.</span></span><br><span class="line"><span class="comment"># if the reads quality of your data is weird, it might because you have two reads cancatenated together.</span></span><br><span class="line"><span class="comment"># more reads are no pair-end, it means you will see &quot;--split-files&quot; more often in the future.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check the data quality</span></span><br><span class="line">(nohup fastqc -o ~/P4/report -f fastq ~/P4/fastq/SRR568477.fastq &gt; ~/P4/report/fastqc_477.out)&amp; <span class="comment"># quality control</span></span><br><span class="line">(nohup fastqc -o ~/P4/report -f fastq ~/P4/fastq/SRR1768320.fastq &gt; ~/P4/report/fastqc_320.out)&amp; <span class="comment"># quality control</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download the genome and annotation file</span></span><br><span class="line"><span class="comment"># it takes a long time to do that, so I have downloaded everything for you.</span></span><br><span class="line"><span class="comment"># all the genome annotation (human, mouse, etc) is available from: http://10.7.88.74/MyWeb/Genomes</span></span><br><span class="line">wget -O ~/P4/index/mm10.fa http://10.7.88.74/MyWeb/Genomes/mm10/genome.fa <span class="comment"># download the genome</span></span><br><span class="line">wget -O ~/P4/index/mm10.gtf http://10.7.88.74/MyWeb/Genomes/mm10/genes.gtf <span class="comment"># download the annotation</span></span><br><span class="line"><span class="comment"># If you need to work on other species, then you will have to find them from other places.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># you should usually go through the following</span></span><br><span class="line"><span class="comment"># build index, needed for alignment </span></span><br><span class="line">(nohup hisat2-build ~/P4/index/mm10.fa ~/P4/index/mm10 &gt; ~/P3/index/build_index.out)&amp; <span class="comment"># build index, take a very long time</span></span><br><span class="line">top <span class="comment"># check the progress</span></span><br><span class="line">ps -u <span class="variable">$USER</span> <span class="comment"># check your on-going processes</span></span><br><span class="line">cat ~/P4/index/build_index.out <span class="comment"># check the notifications</span></span><br><span class="line">ls -l ~/P4/index/ <span class="comment"># check the index. the index files are very larger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alignment</span></span><br><span class="line">(nohup hisat2 -x ~/P4/index/mm10 -U ~/P4/fastq/SRR568477.fastq -S ~/P4/bam/SRR568477.sam &gt; ~/P4/bam/align_SRR568477.log)&amp; <span class="comment"># do alignment in background</span></span><br><span class="line">(nohup hisat2 -x ~/P4/index/mm10 -U ~/P4/fastq/SRR1768320.fastq -S ~/P4/bam/SRR1768320.sam &gt; ~/P4/bam/align_SRR1768320.log)&amp; <span class="comment"># do alignment in background</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert SAM to BAM</span></span><br><span class="line">(nohup samtools view -bS ~/P4/bam/SRR568477.sam -o ~/P4/bam/SRR568477.bam)&amp; <span class="comment"># convert sam to bam file</span></span><br><span class="line">(nohup samtools view -bS ~/P4/bam/SRR1768320.sam -o ~/P4/bam/SRR1768320.bam)&amp; <span class="comment"># convert sam to bam file</span></span><br><span class="line">ls -l ~/P4/bam/ <span class="comment"># check the size of files. BAM is a lot smaller than SAM</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort the alignments, which is needed for many tools</span></span><br><span class="line">(nohup samtools sort ~/P4/bam/SRR568477.bam -o ~/P4/bam/SRR568477_sorted.bam &gt; ~/P4/bam/sort_SRR568477.out)&amp; <span class="comment"># sort alignment by coordinates</span></span><br><span class="line">(nohup samtools sort ~/P4/bam/SRR1768320.bam  -o ~/P4/bam/SRR1768320_sorted.bam &gt; ~/P4/bam/sort_SRR1768320.out)&amp; <span class="comment"># sort alignment by coordinates</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># visualization</span></span><br><span class="line">wget -O ~/P4/tdf/mm10.chrom.sizes http://10.7.88.74/MyWeb/Genomes/chrom.sizes/mm10.chrom.sizes <span class="comment"># use a different genome size file if necessary</span></span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P4/bam/SRR568477_sorted.bam\</span><br><span class="line"> ~/P4/tdf/SRR568477.tdf ~/P4/tdf/mm10.chrom.sizes &gt; ~/P4/tdf/tdf_SRR568477.out)&amp; <span class="comment"># generated tdf </span></span><br><span class="line">(nohup igvtools count -z 5 -w 10 -e 0 ~/P4/bam/SRR1768320_sorted.bam\</span><br><span class="line"> ~/P4/tdf/SRR1768320.tdf ~/P4/tdf/mm10.chrom.sizes &gt; ~/P4/tdf/tdf_SRR1768320.out)&amp; <span class="comment"># generated tdf </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># peak calling</span></span><br><span class="line">(nohup macs2 callpeak -t ~/P4/bam/SRR568477_sorted.bam -c ~/P4/bam/SRR1768320_sorted.bam --outdir ~/P4/macs -n H3K4me3 -g mm -f BAM -q 0.01 &gt; ~/P4/macs/callpeak.out)&amp; <span class="comment"># peak calling</span></span><br><span class="line"><span class="comment"># load the .BED file in IGV</span></span><br><span class="line"><span class="comment"># compare the peaks called with tdf file and gene annotation information in IGV</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># motif finding</span></span><br><span class="line">(nohup bedtools getfasta -<span class="keyword">fi</span> ~/P4/index/mm10.fa -bed ~/P4/macs/H3K4me3_peaks.narrowPeak -fo ~/P4/macs/H3K4me3_region.fa &gt; ~/P4/macs/findmotif.out)&amp; <span class="comment"># extract sequence</span></span><br><span class="line"><span class="comment"># extract the sequence for motif finding: https://meme-suite.org/meme/tools/streme  </span></span><br><span class="line"><span class="comment"># if the file H3K4me3_region.fa is too large, you may use the first 10000 lines</span></span><br><span class="line"><span class="comment"># head -n 10000 ~/P4/macs/H3K4me3_region.fa &gt; ~/P4/macs/H3K4me3_region_top_10000.fa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### A little advanced bash programming.</span></span><br><span class="line"><span class="comment"># This part is not related to the ChIPseq data analysis practical session</span></span><br><span class="line"><span class="comment"># Use &quot;Ctrl + c&quot; to terminate a running job</span></span><br><span class="line"><span class="comment"># You can run tasks in the background. If the tasks are running the background, you can log out and leave with the tasks still running on the server.</span></span><br></pre></td></tr></table></figure>


<h2 id="Sequence-data-analysis"><a href="#Sequence-data-analysis" class="headerlink" title="Sequence data analysis"></a>Sequence data analysis</h2><p>- Determination of binding sites from the sequence data is a challenge. Conceptually, genomic regions with an increased number of sequencing reads (tags) compared to control is considered to be a TFBS</p>
<p>- Statistical filtering criteria is used to determine if these putative sites represent true binding sites.</p>
<p> - After statistical analysis of binding sites a further analysis of data is required. These may include analysis of   location of binding, relative to transcription factor binding sites or potential nearby target genes. </p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210331160224.png" alt="image-20210331160224048"></p>
<h2 id="cuffdiff-doc"><a href="#cuffdiff-doc" class="headerlink" title="cuffdiff doc"></a>cuffdiff doc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cuffdiff v2.2.1 ()</span><br><span class="line">-----------------------------</span><br><span class="line">Usage:   cuffdiff [options] &lt;transcripts.gtf&gt; &lt;sample1_hits.sam&gt; &lt;sample2_hits.sam&gt; [... sampleN_hits.sam]</span><br><span class="line">   Supply replicate SAMs as comma separated lists <span class="keyword">for</span> each condition: sample1_rep1.sam,sample1_rep2.sam,...sample1_repM.sam</span><br><span class="line">General Options:</span><br><span class="line">  -o/--output-dir              write all output files to this directory              [ default:     ./ ]</span><br><span class="line">  -L/--labels                  comma-separated list of condition labels</span><br><span class="line">  --FDR                        False discovery rate used <span class="keyword">in</span> testing                  [ default:   0.05 ]</span><br><span class="line">  -M/--mask-file               ignore all alignment within transcripts <span class="keyword">in</span> this file  [ default:   NULL ]</span><br><span class="line">  -C/--contrast-file           Perform the constrasts specified <span class="keyword">in</span> this file         [ default:   NULL ]</span><br><span class="line">  -b/--frag-bias-correct       use bias correction - reference fasta required        [ default:   NULL ]</span><br><span class="line">  -u/--multi-read-correct      use <span class="string">&#x27;rescue method&#x27;</span> <span class="keyword">for</span> multi-reads                   [ default:  FALSE ]</span><br><span class="line">  -p/--num-threads             number of threads used during quantification          [ default:      1 ]</span><br><span class="line">  --no-diff                    Don<span class="string">&#x27;t generate differential analysis files            [ default:  FALSE ]</span></span><br><span class="line"><span class="string">  --no-js-tests                Don&#x27;</span>t perform isoform switching tests                 [ default:  FALSE ]</span><br><span class="line">  -T/--time-series             treat samples as a time-series                        [ default:  FALSE ]</span><br><span class="line">  --library-type               Library prep used <span class="keyword">for</span> input reads                     [ default:  below ]</span><br><span class="line">  --dispersion-method          Method used to estimate dispersion models             [ default:  below ]</span><br><span class="line">  --library-norm-method        Method used to normalize library sizes                [ default:  below ]</span><br><span class="line"></span><br><span class="line">Advanced Options:</span><br><span class="line">  -m/--frag-len-mean           average fragment length (unpaired reads only)         [ default:    200 ]</span><br><span class="line">  -s/--frag-len-std-dev        fragment length std deviation (unpaired reads only)   [ default:     80 ]</span><br><span class="line">  -c/--min-alignment-count     minimum number of alignments <span class="keyword">in</span> a locus <span class="keyword">for</span> testing   [ default:   10 ]</span><br><span class="line">  --max-mle-iterations         maximum iterations allowed <span class="keyword">for</span> MLE calculation        [ default:   5000 ]</span><br><span class="line">  --compatible-hits-norm       count hits compatible with reference RNAs only        [ default:   TRUE ]</span><br><span class="line">  --total-hits-norm            count all hits <span class="keyword">for</span> normalization                      [ default:  FALSE ]</span><br><span class="line">  -v/--verbose                 log-friendly verbose processing (no progress bar)     [ default:  FALSE ]</span><br><span class="line">  -q/--quiet                   log-friendly quiet processing (no progress bar)       [ default:  FALSE ]</span><br><span class="line">  --seed                       value of random number generator seed                 [ default:      0 ]</span><br><span class="line">  --no-update-check            <span class="keyword">do</span> not contact server to check <span class="keyword">for</span> update availability[ default:  FALSE ]</span><br><span class="line">  --emit-count-tables          <span class="built_in">print</span> count tables used to fit overdispersion         [    DEPRECATED   ]</span><br><span class="line">  --max-bundle-frags           maximum fragments allowed <span class="keyword">in</span> a bundle before skipping [ default: 500000 ]</span><br><span class="line">  --num-frag-count-draws       Number of fragment generation samples                 [ default:    100 ]</span><br><span class="line">  --num-frag-assign-draws      Number of fragment assignment samples per generation  [ default:     50 ]</span><br><span class="line">  --max-frag-multihits         Maximum number of alignments allowed per fragment     [ default: unlim  ]</span><br><span class="line">  --min-outlier-p              Min replicate p value to admit <span class="keyword">for</span> testing            [    DEPRECATED   ]</span><br><span class="line">  --min-reps-for-js-test       Replicates needed <span class="keyword">for</span> relative isoform <span class="built_in">shift</span> testing  [ default:      3 ]</span><br><span class="line">  --no-effective-length-correction   No effective length correction                  [ default:  FALSE ]</span><br><span class="line">  --no-length-correction       No length correction                                  [ default:  FALSE ]</span><br><span class="line">  -N/--upper-quartile-norm     Deprecated, use --library-norm-method                 [    DEPRECATED   ]</span><br><span class="line">  --geometric-norm             Deprecated, use --library-norm-method                 [    DEPRECATED   ]</span><br><span class="line">  --raw-mapped-norm            Deprecated, use --library-norm-method                 [    DEPRECATED   ]</span><br><span class="line">  --poisson-dispersion         Deprecated, use --dispersion-method                   [    DEPRECATED   ]</span><br><span class="line"></span><br><span class="line">Debugging use only:</span><br><span class="line">  --read-skip-fraction         Skip a random subset of reads this size               [ default:    0.0 ]</span><br><span class="line">  --no-read-pairs              Break all <span class="built_in">read</span> pairs                                  [ default:  FALSE ]</span><br><span class="line">  --trim-read-length           Trim reads to be this long (keep 5<span class="string">&#x27; end)              [ default:   none ]</span></span><br><span class="line"><span class="string">  --no-scv-correction          Disable SCV correction                                [ default:  FALSE ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Supported library types:</span></span><br><span class="line"><span class="string">	ff-firststrand</span></span><br><span class="line"><span class="string">	ff-secondstrand</span></span><br><span class="line"><span class="string">	ff-unstranded</span></span><br><span class="line"><span class="string">	fr-firststrand</span></span><br><span class="line"><span class="string">	fr-secondstrand</span></span><br><span class="line"><span class="string">	fr-unstranded (default)</span></span><br><span class="line"><span class="string">	transfrags</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Supported dispersion methods:</span></span><br><span class="line"><span class="string">	blind</span></span><br><span class="line"><span class="string">	per-condition</span></span><br><span class="line"><span class="string">	poisson</span></span><br><span class="line"><span class="string">	pooled (default)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Supported library normalization methods:</span></span><br><span class="line"><span class="string">	classic-fpkm</span></span><br><span class="line"><span class="string">	geometric (default)</span></span><br><span class="line"><span class="string">	geometric</span></span><br><span class="line"><span class="string">	quartile</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>


<h3 id="cuffdiff-生成的文件"><a href="#cuffdiff-生成的文件" class="headerlink" title="cuffdiff 生成的文件"></a>cuffdiff 生成的文件</h3><p>==FPKM: isoform水平上的丰度, Fragments Per Kilobase of exon model per Million mapped fragments;==</p>
<p>产生了一大堆文件，大致分为以下几类</p>
<p>本次分析有3个样本每个样本两个重复，共6个文件</p>
<p><strong>FPKM trcking files 计算的每个样本的FPKM值</strong></p>
<p>其中又分为如下四种，下面的类似</p>
<table>
<thead>
<tr>
<th>isoforms.fpkm_tracking</th>
<th>Transcript FPKMs</th>
</tr>
</thead>
<tbody><tr>
<td>genes.fpkm_tracking</td>
<td>Gene FPKMs. 因为一个基因可以有多个转录本，所以gene FPKM值是具有相同基因id的转录本的Fpkm值的总和</td>
</tr>
<tr>
<td>cds.fpkm_tracking</td>
<td>Coding sequence FPKMs. 具有相同蛋白id转录本fpkm值的总和</td>
</tr>
<tr>
<td>tss_groups.fpkm_tracking</td>
<td>Primary transcript FPKMs. 具有相同转录起始位点的转录本FPKM值的总和</td>
</tr>
</tbody></table>
<h4 id="Differential-splicing-tests-splicing-diff"><a href="#Differential-splicing-tests-splicing-diff" class="headerlink" title="Differential splicing tests - splicing.diff"></a><strong>Differential splicing tests - splicing.diff</strong></h4><p><strong>对每个转录前体产生的可变剪接变体的数目</strong></p>
<h4 id="Differential-coding-output-cds-diff"><a href="#Differential-coding-output-cds-diff" class="headerlink" title="Differential coding output - cds.diff"></a><strong>Differential coding output - cds.diff</strong></h4><p> 在这个文件中只记录了能产生多个CDS的基因的差异表达数</p>
<h4 id="Differential-promoter-use-promoters-diff"><a href="#Differential-promoter-use-promoters-diff" class="headerlink" title="Differential promoter use - promoters.diff"></a><strong>Differential promoter use - promoters.diff</strong></h4><p><strong>在这个文件中只记录了能产生不同转录前体（i.e. muti-promoter genes）的基因的差异表达</strong></p>
<h4 id="Read-group-info-read-groups-info"><a href="#Read-group-info-read-groups-info" class="headerlink" title="Read group info - read_groups.info"></a><strong>Read group info - read_groups.info</strong></h4><p><strong>记录了样本重复之间计算定量的一些信息</strong></p>
<h2 id="cufflinks-doc"><a href="#cufflinks-doc" class="headerlink" title="cufflinks doc"></a>cufflinks doc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cufflinks: unrecognized option <span class="string">&#x27;--help&#x27;</span></span><br><span class="line">cufflinks v2.2.1</span><br><span class="line">linked against Boost version 106501</span><br><span class="line">-----------------------------</span><br><span class="line">Usage:   cufflinks [options] &lt;hits.sam&gt;</span><br><span class="line">General Options:</span><br><span class="line">  -o/--output-dir              write all output files to this directory              [ default:     ./ ]</span><br><span class="line">  -p/--num-threads             number of threads used during analysis                [ default:      1 ]</span><br><span class="line">  --seed                       value of random number generator seed                 [ default:      0 ]</span><br><span class="line">  -G/--GTF                     quantitate against reference transcript annotations                      </span><br><span class="line">  -g/--GTF-guide               use reference transcript annotation to guide assembly 提供GFF文件，以此来指导转录子组装(RABT assembly)。此时，输出结果会包含reference transcripts和novel genes and isforms。                    </span><br><span class="line">  -M/--mask-file               ignore all alignment within transcripts <span class="keyword">in</span> this file                     </span><br><span class="line">  -b/--frag-bias-correct       use bias correction - reference fasta required        [ default:   NULL ]</span><br><span class="line">  -u/--multi-read-correct      use <span class="string">&#x27;rescue method&#x27;</span> <span class="keyword">for</span> multi-reads (more accurate)   [ default:  FALSE ]</span><br><span class="line">  --library-type               library prep used <span class="keyword">for</span> input reads                     [ default:  below ]</span><br><span class="line">  --library-norm-method        Method used to normalize library sizes                [ default:  below ]</span><br><span class="line"></span><br><span class="line">Advanced Abundance Estimation Options:</span><br><span class="line">  -m/--frag-len-mean           average fragment length (unpaired reads only)         [ default:    200 ]</span><br><span class="line">  -s/--frag-len-std-dev        fragment length std deviation (unpaired reads only)   [ default:     80 ]</span><br><span class="line">  --max-mle-iterations         maximum iterations allowed <span class="keyword">for</span> MLE calculation        [ default:   5000 ]</span><br><span class="line">  --compatible-hits-norm       count hits compatible with reference RNAs only        [ default:  FALSE ]</span><br><span class="line">  --total-hits-norm            count all hits <span class="keyword">for</span> normalization                      [ default:  TRUE  ]</span><br><span class="line">  --num-frag-count-draws       Number of fragment generation samples                 [ default:    100 ]</span><br><span class="line">  --num-frag-assign-draws      Number of fragment assignment samples per generation  [ default:     50 ]</span><br><span class="line">  --max-frag-multihits         Maximum number of alignments allowed per fragment     [ default: unlim  ]</span><br><span class="line">  --no-effective-length-correction   No effective length correction                  [ default:  FALSE ]</span><br><span class="line">  --no-length-correction       No length correction                                  [ default:  FALSE ]</span><br><span class="line">  -N/--upper-quartile-norm     Deprecated, use --library-norm-method                 [    DEPRECATED   ]</span><br><span class="line">  --raw-mapped-norm            Deprecated, use --library-norm-method                 [    DEPRECATED   ]</span><br><span class="line"></span><br><span class="line">Advanced Assembly Options:</span><br><span class="line">  -L/--label                   assembled transcripts have this ID prefix             [ default:   CUFF ]</span><br><span class="line">  -F/--min-isoform-fraction    suppress transcripts below this abundance level       [ default:   0.10 ]</span><br><span class="line">  -j/--pre-mrna-fraction       suppress intra-intronic transcripts below this level  [ default:   0.15 ]</span><br><span class="line">  -I/--max-intron-length       ignore alignments with gaps longer than this          [ default: 300000 ]</span><br><span class="line">  -a/--junc-alpha              alpha <span class="keyword">for</span> junction binomial <span class="built_in">test</span> filter               [ default:  0.001 ]</span><br><span class="line">  -A/--small-anchor-fraction   percent <span class="built_in">read</span> overhang taken as <span class="string">&#x27;suspiciously small&#x27;</span>   [ default:   0.09 ]</span><br><span class="line">  --min-frags-per-transfrag    minimum number of fragments needed <span class="keyword">for</span> new transfrags [ default:     10 ]</span><br><span class="line">  --overhang-tolerance         number of terminal exon bp to tolerate <span class="keyword">in</span> introns     [ default:      8 ]</span><br><span class="line">  --max-bundle-length          maximum genomic length allowed <span class="keyword">for</span> a given bundle     [ default:3500000 ]</span><br><span class="line">  --max-bundle-frags           maximum fragments allowed <span class="keyword">in</span> a bundle before skipping [ default: 500000 ]</span><br><span class="line">  --min-intron-length          minimum intron size allowed <span class="keyword">in</span> genome                 [ default:     50 ]</span><br><span class="line">  --trim-3-avgcov-thresh       minimum avg coverage required to attempt 3<span class="string">&#x27; trimming  [ default:     10 ]</span></span><br><span class="line"><span class="string">  --trim-3-dropoff-frac        fraction of avg coverage below which to trim 3&#x27;</span> end   [ default:    0.1 ]</span><br><span class="line">  --max-multiread-fraction     maximum fraction of allowed multireads per transcript [ default:   0.75 ]</span><br><span class="line">  --overlap-radius             maximum gap size to fill between transfrags (<span class="keyword">in</span> bp)   [ default:     50 ]</span><br><span class="line"></span><br><span class="line">Advanced Reference Annotation Guided Assembly Options:</span><br><span class="line">  --no-faux-reads              <span class="built_in">disable</span> tiling by faux reads                          [ default:  FALSE ]</span><br><span class="line">  --3-overhang-tolerance       overhang allowed on 3<span class="string">&#x27; end when merging with reference[ default:    600 ]</span></span><br><span class="line"><span class="string">  --intron-overhang-tolerance  overhang allowed inside reference intron when merging [ default:     30 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Advanced Program Behavior Options:</span></span><br><span class="line"><span class="string">  -v/--verbose                 log-friendly verbose processing (no progress bar)     [ default:  FALSE ]</span></span><br><span class="line"><span class="string">  -q/--quiet                   log-friendly quiet processing (no progress bar)       [ default:  FALSE ]</span></span><br><span class="line"><span class="string">  --no-update-check            do not contact server to check for update availability[ default:  FALSE ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Supported library types:</span></span><br><span class="line"><span class="string">	ff-firststrand</span></span><br><span class="line"><span class="string">	ff-secondstrand</span></span><br><span class="line"><span class="string">	ff-unstranded</span></span><br><span class="line"><span class="string">	fr-firststrand</span></span><br><span class="line"><span class="string">	fr-secondstrand</span></span><br><span class="line"><span class="string">	fr-unstranded (default)</span></span><br><span class="line"><span class="string">	transfrags</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Supported library normalization methods:</span></span><br><span class="line"><span class="string">	classic-fpkm</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>


<h3 id="Cufflinks的使用"><a href="#Cufflinks的使用" class="headerlink" title="Cufflinks的使用"></a>Cufflinks的使用</h3><h4 id="1-Cufflinks简介"><a href="#1-Cufflinks简介" class="headerlink" title="1. Cufflinks简介"></a>1. Cufflinks简介</h4><p>Cufflinks程序主要根据Tophat的比对结果，依托或不依托于参考基因组的GTF注释文件，计算出(各个gene的)isoform的FPKM值，并给出trascripts.gtf注释结果(组装出转录组)。</p>
<p>注意：</p>
<ol>
<li><p>fragment的长度的估测，若为pair-end测序，则cufflinks自己会有一套算法，算出结果。若为single-end测序，则cufflinks默认的是高斯分布，或者你自己提供相关的参数设置。</p>
</li>
<li><p>cufflinks计算multi-mapped reads，一般a read map到10个位置，则每个位置记为10%。a read mapping to 10 positions will count as 10% of a read at each position.</p>
</li>
<li><p>一般不推荐用cufflinks拼接细菌的转录组，推荐 Glimmer。但是，若有注释文件，可以用cufflinks和cuffdiff来检测基因的表达和差异性。</p>
</li>
<li><p>cufflinks/cuffdiff不能计算出exon或splicing event的FPKM</p>
</li>
<li><p>cuffdiff处理时间序列data：采用参数-t</p>
</li>
<li><p>当你使用cufflinks时，在最后出现了99%，然后一直不动。因为cuffdiff需要更多的CPU来处理一些匹配很多reads的loci。而这些位点一般要等其他位点全部解决了后，才由cuffdiff来处理。可以用参数-M来提供相关的文件，过滤掉rRNA或者线粒体RNA。</p>
</li>
<li><p>当使用cufflinks或cuffdiff出现了“crash with a ‘bad_alloc’ error”，cuffdiff和cufflinks运行了很长时间才结束————这表明计算机拼接一个高表达的基因或定量分析一个高表达的基因，运行的内存使用玩尽了！解决方法：修改选项“-max-bundle-frags”，可以先尝试500000，若错误依旧在，可以继续下调！</p>
</li>
<li><p>cuffdiff报道的结果里面所有的基因和转录本的FPKM=0，这表明GTF中的染色体名字和BAM里的名字不匹配。</p>
</li>
<li><p>cuffdiff和cufflinks的缺点：存在一定的假基因和转录本（原因：测序深度，测序质量，测序样本的测序次数，以及注释的错误）</p>
</li>
<li><p>large fold change表达量不代表数据的明显性（这些基因的isform多或这些基因测序测到的少，整体较低的表达）。cuffdiff中明显表达倍数改变的基因，存在不确定性。</p>
</li>
<li><p>通过cufflinks产生的结果中transcript.gtf文件中cuff标识的转录本就是新的转录本。相应的，其他模块输出中CUFF标识代表着新的转录本。</p>
</li>
<li><p>若出现了如下错误：</p>
</li>
</ol>
<blockquote>
<p>You are using Cufflinks v2.2.1, which is the most recent release.<br>open: No such file or directory<br>File 30 doesn’t appear to be a valid BAM file, trying SAM…<br>Error: cannot open alignment file 30 for reading<br>这表明，你的参数有问题。例如“–min-intron-length”,你设置为了：“-min-intron-length”</p>
</blockquote>
<h3 id="Cufflinks输出结果"><a href="#Cufflinks输出结果" class="headerlink" title="Cufflinks输出结果"></a>Cufflinks输出结果</h3><ul>
<li>cufflinks的输入文件是sam或bam格式。并且sam或bam格式的文件必须排好序。（The SAM file supplied to Cufflinks must be sorted by reference position.）</li>
<li>Tophat的输出结果sam或bam已经排好了序。针对其他的未排序的sam或bam文件采用如下排序方式：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort -k 3,3 -k 4,4n hits.sam &gt; hits.sam.sorted</span><br></pre></td></tr></table></figure>


<ol>
<li><h4 id="transcripts-gtf"><a href="#transcripts-gtf" class="headerlink" title="transcripts.gtf"></a>transcripts.gtf</h4></li>
</ol>
<p>该文件包含Cufflinks的组装结果isoforms。前7列为标准的GTF格式，最后一列为attributes。其每一列的意义：<br>列数   列的名称  例子         描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1     序列名    chrX        染色体或contig名;</span><br><span class="line">2     来源      Cufflinks   产生该文件的程序名； </span><br><span class="line">3     类型      exon        记录的类型，一般是transcript或exon;</span><br><span class="line">4     起始      1           1-base的值; </span><br><span class="line">5     结束      1000        结束位置;</span><br><span class="line">6     得分      1000        ;</span><br><span class="line">7     链        +          Cufflinks猜测isoform来自参考序列的那一条链，一般是&#39;+&#39;,&#39;-&#39;或&#39;.&#39;;  </span><br><span class="line">8     frame    .           Cufflinks不去预测起始或终止密码子框的位置; </span><br><span class="line">9     attributes  ...      详见下</span><br><span class="line">每一个GTF记录包含如下attributes：</span><br><span class="line"></span><br><span class="line">gene_id          CUFF.1      Cufflinks的gene id;</span><br><span class="line">transcript_id    CUFF.1.1  Cufflinks的转录子 id;</span><br><span class="line">FPKM           101.267   isoform水平上的丰度, Fragments Per Kilobase of exon model per Million mapped fragments; </span><br><span class="line">frac           0.7647    保留着的一项，忽略即可，以后可能会取消这个; </span><br><span class="line">conf_lo        0.07      isoform丰度的95%置信区间的下边界，即 下边界值 &#x3D; FPKM * ( 1.0 - conf_lo );</span><br><span class="line">conf_hi        0.1102    isoform丰度的95%置信区间的上边界，即 上边界值 &#x3D; FPKM * ( 1.0 + conf_hi );</span><br><span class="line">cov            100.765   计算整个transcript上read的覆盖度; </span><br><span class="line">full_read_support   yes  当使用 RABT assembly 时，该选项报告所有的introns和exons是否完全被reads所覆盖</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h4 id="isoforms-fpkm-tracking"><a href="#isoforms-fpkm-tracking" class="headerlink" title="isoforms.fpkm_tracking"></a>isoforms.fpkm_tracking</h4></li>
</ol>
<p>isoforms(可以理解为gene的各个外显子)的fpkm计算结果</p>
<ol start="3">
<li><h4 id="genes-fpkm-tracking"><a href="#genes-fpkm-tracking" class="headerlink" title="genes.fpkm_tracking"></a>genes.fpkm_tracking</h4></li>
</ol>
<p>gene的fpkm计算结果</p>
<p>在R里面接着处理：</p>
<p><a class="link"   href="https://www.jianshu.com/p/47b5ea646932" >https://www.jianshu.com/p/47b5ea646932<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="igv-tools"><a href="#igv-tools" class="headerlink" title="igv tools"></a>igv tools</h2><h4 id="什么是IGV"><a href="#什么是IGV" class="headerlink" title="什么是IGV"></a>什么是IGV</h4><p>它是一款本地的探索基因组数据的可视化浏览器，有多个系统版本，支持多种不同类型的输入格式，包括芯片测序、二代测序、基因组注释文件等。推荐使用BAM与SAM格式，主要格式见下表</p>
<p>GTF 文件可以直接拖入igv中进行可视化</p>
<table>
<thead>
<tr>
<th>数据来源</th>
<th>文件格式</th>
</tr>
</thead>
<tbody><tr>
<td>序列比对</td>
<td>SAM/BAM</td>
</tr>
<tr>
<td>显示覆盖率</td>
<td>TDF</td>
</tr>
<tr>
<td>拷贝数</td>
<td>SNP、CN</td>
</tr>
<tr>
<td>基因表达</td>
<td>GCT、RES</td>
</tr>
<tr>
<td>基因注释</td>
<td>GFF3/GTF、BED</td>
</tr>
<tr>
<td>突变数据</td>
<td>MUT</td>
</tr>
<tr>
<td>追踪参考基因组覆盖度、测序深度（UCSC）</td>
<td>WIG、BW</td>
</tr>
</tbody></table>
<p><strong>这里推荐生信星球，所有和生物信息相关，测序相关的都可以在这里找到</strong></p>
<p><a class="link"   href="https://www.jieandze1314.com/" >https://www.jieandze1314.com/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.jieandze1314.com/post/cnposts/3/" >https://www.jieandze1314.com/post/cnposts/3/<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Bioinformatics</category>
      </categories>
      <tags>
        <tag>RNA modification</tag>
        <tag>notes</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 笔记</title>
    <url>/2021/03/30/2021-03-30-CSS3-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><p>如何学习</p>
<ol>
<li>CSS是什么</li>
<li>CSS怎么用（快速入门）</li>
<li><strong>CSS选择器（重点+难点）</strong></li>
<li>美化网页（文字，阴影，超链接，列表，渐变）</li>
<li>盒子模型</li>
<li>浮动，定位</li>
<li>网页动画（特效）</li>
</ol>
<p>门户网站，模版之家，源码之家</p>
<h3 id="什么是CSS-1"><a href="#什么是CSS-1" class="headerlink" title="什么是CSS"></a>什么是CSS</h3><p>Cascading Style Sheet 层叠及联样式表</p>
<p>CSS：表现（美化网页）</p>
<p>字体：颜色，边距，高度，宽度，背景图片，网页定位，浮动…</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210330102200.png" alt="image-20210330102154737"></p>
<h3 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h3><p>CSS1.0</p>
<p>CSS2.0          DIV (块)+CSS，HTML与CSS结构分离的思想，网页变得简单，SEO</p>
<p>CSS2.1          浮动，定位</p>
<p>CSS3.0          圆角，阴影，动画，浏览器兼容性～</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210330104005.png" alt="image-20210330104005676"></p>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>style </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    规范 &lt;style 可以编写CSS代码&gt;，每一个声明最好使用分号结尾</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">            选择器&#123;</span></span><br><span class="line"><span class="comment">            声明1；</span></span><br><span class="line"><span class="comment">            声明2；</span></span><br><span class="line"><span class="comment">            声明3；</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>建议使用这种方式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210330110032.png" alt="image-20210330110032737"></p>
<p>css的优势：</p>
<ol>
<li>内容和表现分离</li>
<li>网页结构表现统一，可以实现复用</li>
<li>样式十分的丰富</li>
<li>建议使用独立于html的css文件</li>
<li>利于SEO，容易被搜索引擎收录</li>
</ol>
<h3 id="CSS的三种导入样式"><a href="#CSS的三种导入样式" class="headerlink" title="CSS的三种导入样式"></a>CSS的三种导入样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    内部样式,优先级低于行内样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外部样式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;style&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        h1&#123;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            color: green;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/style&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--优先级：看似行内样式&gt;内部样式&gt;外部样式，</span></span><br><span class="line"><span class="comment">实际上是就近原则</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--行内样式:在标签元素中，编写一个style属性，编写样式即可--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;h1 style=&quot;color: red&quot;&gt;Hello&lt;/h1&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>拓展：外部样式两种写法 （不需要严格掌握）</p>
<ul>
<li>链接式：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>导入式：</li>
<li>@import是css2.1特有的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入样式--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">   <span class="keyword">@import</span> url(<span class="string">&quot;css/style.css&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>link 和 import语法结构不同，前者&lt;link&gt; 是html标签，只能放入html源代码中使用，后者可以看作CSS样式，作用是引用CSS样式功能，import在html使用的时候需要&lt;style type=”text/css”&gt;标签，同时可以直接@import url(css文件地址)</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>作用：选择页面上的某一个或者某一类的元素</p>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ol>
<li>类选择器：选择一类标签 标签.{}</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*类选择器的格式* .class的名称&#123;&#125;/</span><br><span class="line">        好处，可以多个标签归类，是同一个class</span><br><span class="line">        可以复用</span><br><span class="line">        */</span><br><span class="line"><span class="css">        <span class="selector-class">.yuxuan</span> &#123;</span></span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.loner</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;yuxuan&quot;</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;loner&quot;</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;yuxuan&quot;</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;yuxuan&quot;</span>&gt;</span> p 段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>标签选择器 class：选择所有class属性一直的标签，跨标签 .类名</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line"><span class="css">            <span class="comment">/*标签选择器，会选择到页面上所有的这个标签的元素*/</span></span></span><br><span class="line">            color: red;</span><br><span class="line">            background: wheat;</span><br><span class="line">            border-radius: 24px;</span><br><span class="line">        &#125;</span><br><span class="line">        p&#123;</span><br><span class="line">            font-size: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>听我说<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>ID 选择器：全局唯一 #id名{}</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /* id 选择器: id 必须保证全局唯一</span><br><span class="line"><span class="css">        <span class="selector-id">#id</span>名称&#123;&#125;</span></span><br><span class="line">        不遵循就近原则，固定的</span><br><span class="line">        ID选择器&gt;class 选择器&gt;标签选择器</span><br><span class="line">        */</span><br><span class="line"><span class="css">        <span class="selector-id">#yuxuan</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.style1</span>&#123;</span></span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;style1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;yuxuan&quot;</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;style1&quot;</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;style1&quot;</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>优先级: id &gt; class &gt; 标签</p>
<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210330143342.png" alt="image-20210330143336352"></p>
<p>分类</p>
<ol>
<li>后代选择器：在某个元素的后面  爷爷-爸爸-你</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    后代选择器*/</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>子选择器，一代，儿子</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    子选择器*/</span></span><br><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>相邻兄弟选择器</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    相邻兄弟选择器 只有一个，相邻对下延伸*/</span></span><br><span class="line"><span class="selector-class">.active</span> +<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>通用选择器</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    通用兄弟选择器，当前选中的元素向下的所有元素*/</span></span><br><span class="line"><span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>伪类： 条件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">ul的第一个子元素</span></span><br><span class="line"><span class="comment">ul的最后一个子元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: coral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选中p1: 定位到父元素，选择当前的第一个元素</span></span><br><span class="line"><span class="comment">选择当前p元素的父级元素，选中父级元素的第一个,并且是当前元素才生效！，顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选中氟元素下的p元素的第二个， 类型*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标移动到该区域才显示的属性*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    避免使用class 和id选择器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">        ul的第一个子元素</span><br><span class="line">        ul的最后一个子元素</span><br><span class="line">         */</span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line">            background: coral;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    /*    选中p1: 定位到父元素，选择当前的第一个元素</span><br><span class="line">    选择当前p元素的父级元素，选中父级元素的第一个,并且是当前元素才生效！，顺序</span><br><span class="line">    */</span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*选中氟元素下的p元素的第二个， 类型*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span></span><br><span class="line">            background: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 鼠标移动到该区域才显示的属性*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*a:hover&#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    background: black;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;h1&gt;h1&lt;/h1&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;a href=&quot;&quot;&gt;31231&lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210330152453.png" alt="image-20210330152453350"></p>
<h3 id="属性选择器（常用）"><a href="#属性选择器（常用）" class="headerlink" title="属性选择器（常用）"></a>属性选择器（常用）</h3><p>id+class的结合～</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.demo</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: blue;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: gainsboro;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            margin-right: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">font</span>: <span class="selector-tag">bold</span> 20<span class="selector-tag">px</span>/50<span class="selector-tag">px</span> <span class="selector-tag">Arial</span>; <span class="comment">/*20px 字体大小，50px 行高*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    /*    属性名. 属性名=属性值 （可以使用正则表达式）</span><br><span class="line">            = 绝对等于</span><br><span class="line">            *= 包含这个元素</span><br><span class="line">            ^= 以这个开头</span><br><span class="line">            $= 以这个结尾</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/*    存在id属性的元素a[]&#123;&#125;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    a[id]&#123;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*        background: yellow;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    &#125;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/*    找到id=first的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    a[id=first]&#123;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*        background: green;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    &#125;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/*    class 中有links的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    a[class*=&quot;links&quot;]&#123;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*        background: yellow;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    &#125;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/*    选中href以http开头的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    a[href^=http]&#123;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*        background: yellow;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*    &#125;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/*    选中href以pdf结尾的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href$=pdf]</span>&#123;</span></span><br><span class="line">            background: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item first&quot;</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://yuxuan&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item active&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;test&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/a.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/abc.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;adcd.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item last&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210330155751.png" alt="image-20210330155751399"></p>
<p>正则表达式的通配符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;</span><br><span class="line">*&#x3D;</span><br><span class="line">^&#x3D;</span><br><span class="line">$&#x3D;</span><br></pre></td></tr></table></figure>


<h2 id="美化网页元素"><a href="#美化网页元素" class="headerlink" title="美化网页元素"></a>美化网页元素</h2><h3 id="为什么要美化网页"><a href="#为什么要美化网页" class="headerlink" title="为什么要美化网页"></a>为什么要美化网页</h3><ol>
<li>有效的传递页面的信息</li>
<li>美化网页，页面漂亮，才能吸引用户</li>
<li>凸显页面的主题</li>
<li>提高用户的体验</li>
</ol>
<p><code>span标签：重点要突出的字，使用span标签套起来</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#title1</span>&#123;</span></span><br><span class="line">            font-size: 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">欢迎学习 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;title1&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">font-family:    字体</span></span><br><span class="line"><span class="comment">font-size:      字体大小</span></span><br><span class="line"><span class="comment">font-weight:    字体粗细</span></span><br><span class="line"><span class="comment">color:          颜色</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  body&#123;</span><br><span class="line">    font-family: 微软雅黑,&#x27;Tahoma&#x27;;</span><br><span class="line">    color: brown;</span><br><span class="line">  &#125;</span><br><span class="line">  h1&#123;</span><br><span class="line">    font-size: 50px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.p1</span>&#123;</span></span><br><span class="line">    font-weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ol>
<li>颜色 color rib /rgba </li>
<li><strong>文本的对齐方式 text-align = center</strong></li>
<li><strong>首行缩进 text-indent:2em</strong></li>
<li><strong>行高 line-heigh:</strong> 单行文字，上下剧中！ Line-height =height </li>
<li>装饰 text_decoration</li>
<li>文本图片水平对齐：vertical-line middle</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    颜色：</span></span><br><span class="line"><span class="comment">        单词</span></span><br><span class="line"><span class="comment">        RGB 0～F</span></span><br><span class="line"><span class="comment">        RGBA A:0~1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        text-align： 排版 居中</span></span><br><span class="line"><span class="comment">        text-indent: 2em; 段落首行缩进</span></span><br><span class="line"><span class="comment">        行高，和 块的高度一致就可以上下居中</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            body&#123;</span><br><span class="line">                font-family: 微软雅黑,&#x27;Tahoma&#x27;;</span><br><span class="line">                color: brown;</span><br><span class="line">            &#125;</span><br><span class="line">            h1&#123;</span><br><span class="line">                color: rgba(0,255,255,0.9);</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.p1</span>&#123;</span></span><br><span class="line">                font-weight: bold;</span><br><span class="line">                text-indent: 2em;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.p3</span>&#123;</span></span><br><span class="line">                background: blue;</span><br><span class="line">                height: 300px;</span><br><span class="line">                line-height: 300px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/*下划线*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.l1</span>&#123;</span></span><br><span class="line">                text-decoration: underline;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/*中划线*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.l2</span>&#123;</span></span><br><span class="line">                text-decoration: line-through;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/*上划线*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.l3</span>&#123;</span></span><br><span class="line">                text-decoration: overline;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/* 超链接去下划线*/</span></span></span><br><span class="line">            a&#123;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">            img,span&#123;</span><br><span class="line">                vertical-align: middle;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>123331232131231232112312312312312312321312213<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;l1&quot;</span>&gt;</span>1232131<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;l2&quot;</span>&gt;</span>1232131<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;l3&quot;</span>&gt;</span>1232131<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字义编辑<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>跬（kuǐ）：半步，古时称人行走, 举足一次为跬, 举足两次为步, 故半步叫“跬”故不积跬步，无以至千里；不积小流，无以成江海故不积跬步，无以至千里；不积小流，无以成江海故不积跬步，无以至千里；不积小流，无以成江海故不积跬步，无以至千里；不积小流，无以成江海故不积跬步，无以至千里；不积小流，无以成江海 。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>故不积跬步，无以至千里；不积小流，无以成江海。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>Download any RNAseq datasets for an experiment. You can use your own data or find one of interest from NCBI GEO (https://www.ncbi.nlm.nih.gov/geo/ ). You must identify a dataset comparing at least two conditions (you may use the example shown in class), and align these to the appropriate reference genome. Perform basic data quality assessment using FastQC or other software, trim data if necessary. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/nba.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">asddsfsdfdsfs</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure>


<h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><p><img src="/Users/yuxuan/Library/Application%20Support/typora-user-images/image-20210403163521830.png" alt="image-20210403163521830"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* text-shadow ： 阴影颜色，水平便宜，垂直便宜，阴影半径*/</span></span><br><span class="line"><span class="selector-id">#price</span>&#123;</span><br><span class="line">  <span class="comment">/*text-shadow: wheat 10px 10px 10px;*/</span></span><br><span class="line">  <span class="attribute">text-shadow</span>: wheat <span class="number">10px</span> <span class="number">0px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="超链接伪类"><a href="#超链接伪类" class="headerlink" title="超链接伪类"></a>超链接伪类</h3><p>正常情况下a, a:hover </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*默认的颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标悬浮的颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标按住未释放的颜色（只需要记住这个）*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ul li*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">none 去掉原点</span></span><br><span class="line"><span class="comment">circle：空心圆</span></span><br><span class="line"><span class="comment">decimal： 有序列表</span></span><br><span class="line"><span class="comment">square: 正方形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>完整的css代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ul li*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">none 去掉原点</span></span><br><span class="line"><span class="comment">circle：空心圆</span></span><br><span class="line"><span class="comment">decimal： 有序列表</span></span><br><span class="line"><span class="comment">square: 正方形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>背景颜色</p>
<p>背景图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 700px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(&quot;<span class="selector-tag">images</span>/<span class="selector-tag">nba</span><span class="selector-class">.jpg</span>&quot;);</span></span><br><span class="line"><span class="css">        <span class="comment">/*    默认是全部平铺的*/</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line">            background-repeat: repeat-x;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line">            background-repeat: repeat-y;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-id">#4158D0</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(25<span class="selector-tag">deg</span>, <span class="selector-id">#4158D0</span> 0%, <span class="selector-id">#C850C0</span> 46%, <span class="selector-id">#FFCC70</span> 100%);</span><br></pre></td></tr></table></figure>




<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="什么是盒子模型"><a href="#什么是盒子模型" class="headerlink" title="什么是盒子模型"></a>什么是盒子模型</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407105945.png" alt="image-20210407105919544"></p>
<p>margin：外边距</p>
<p>padding: 内边距</p>
<p>border：边框</p>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><ol>
<li>边框的粗细</li>
<li>边框的样式</li>
<li>边框的颜色</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">title</span>&gt;<span class="selector-tag">Title</span>&lt;/<span class="selector-tag">title</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="comment">/*body总有一个默认的外边距，margin:0*/</span></span><br><span class="line">        <span class="comment">/*建议在一开始就对全局设置好*/</span></span><br><span class="line">        <span class="comment">/*h1,ul,li,body&#123;*/</span></span><br><span class="line">        <span class="comment">/*    margin: 0;*/</span></span><br><span class="line">        <span class="comment">/*    padding: 0;*/</span></span><br><span class="line">        <span class="comment">/*    text-decoration: none;*/</span></span><br><span class="line">        <span class="comment">/*&#125;*/</span></span><br><span class="line">        <span class="comment">/*border:粗细，样式，颜色*/</span></span><br><span class="line">        <span class="selector-id">#box</span>&#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">h2</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#3cdba6</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">color</span>: white;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">form</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#3cdba6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#77ff00</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/<span class="selector-tag">style</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">head</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;会员登陆&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;form action=&quot;#&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span>&gt;用户名：&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span>&gt;密码：&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span>&gt;邮箱：&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">form</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>


<h3 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    外边距的妙用：居中元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*body总有一个默认的外边距，margin:0*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line">         width: 300px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line"><span class="css">            <span class="comment">/*注意顺序是上右下左，顺时针方向*/</span></span></span><br><span class="line">            </span><br><span class="line">            margin: 0 auto ;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        h2&#123;</span><br><span class="line">            font-size: 16px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3cdba6</span>;</span></span><br><span class="line">            line-height: 30px;</span><br><span class="line">            color: white;</span><br><span class="line">            margin-top: 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        form&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#3cdba6</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        input&#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>会员登陆<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>盒子的计算方式：你这个元素到底多大？</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407115200.png" alt="image-20210407105919544"></p>
<p>margin+border+padding + 内容宽度 （合理的规范）</p>
<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>4个角</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border: 10px solid red ;</span><br><span class="line"><span class="css">    <span class="comment">/*border-radius: 40px 20px 10px 5px;*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h3 id="阴影-1"><a href="#阴影-1" class="headerlink" title="阴影"></a>阴影</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    margin: 0 auto; 居中</span></span><br><span class="line"><span class="comment">要求：块元素，块元素有固定的宽度--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border: 10px solid red ;</span><br><span class="line">            box-shadow: 10px 10px 1px yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h3 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407133503.png" alt="image-20210407133503289"></p>
<p>块级元素：独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1-h6 p div 					列表...</span><br></pre></td></tr></table></figure>


<p>行内元素：不独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">span a img strong... </span><br></pre></td></tr></table></figure>


<p>行内元素可以被包含在块级元素中，反之则不可以</p>
<h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    block 块元素</span></span><br><span class="line"><span class="comment">        inline 行内元素</span></span><br><span class="line"><span class="comment">        inline-block 是块元素，但是可以内联，在一行</span></span><br><span class="line"><span class="comment">        none</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line"></span><br><span class="line">            height: 100px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个也是一种实现行内元素排列的方式，但是我们很多情况下都使用float</p>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ol>
<li>左右浮动</li>
</ol>
<h3 id="父级元素边框塌陷的问题"><a href="#父级元素边框塌陷的问题" class="headerlink" title="父级元素边框塌陷的问题"></a>父级元素边框塌陷的问题</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">clear</span>: <span class="selector-tag">right</span>; 右侧不允许有自由浮动的元素</span><br><span class="line"><span class="selector-tag">clear</span>: <span class="selector-tag">left</span>; 	左侧不允许有自由浮动的元素</span><br><span class="line"><span class="selector-tag">clear</span>: <span class="selector-tag">both</span>; 	两侧不允许有自由浮动的元素</span><br></pre></td></tr></table></figure>


<p>解决方案：</p>
<ol>
<li>增加父级元素的高度～</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">1px</span> <span class="number">#000</span> solid</span><br><span class="line">	height: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>增加一个空的div标签，清除浮动</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>overflow <ol>
<li>在父级元素中增加一个overflow: hidden;</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/up.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        下午两点整：注射新冠疫苗第一针。胳膊有点痛。</span><br><span class="line"></span><br><span class="line">        下午两点半：留观室观察半小时，除胳膊痛无其他反应。</span><br><span class="line"></span><br><span class="line">        傍晚时分： 觉得有点腰酸背痛，当时不以为意以为是工作久坐的缘故。</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="4">
<li>父类添加一个伪类：after</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>: <span class="selector-tag">after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>小结：</p>
<ol>
<li><p>浮动元素后面添加空div</p>
<p>简单，代码中尽量避免空的div</p>
</li>
<li><p>设置父元素的高度</p>
<p>简单，父元素假设又了固定的高度，就会被限制</p>
</li>
<li><p>overflow</p>
<p>简单，下拉的一些场景避免使用</p>
</li>
<li><p>父类添加一个伪类：after（推荐）</p>
<p>写法稍微复杂一点，但是没有副作用，推荐使用</p>
</li>
</ol>
<h3 id="对比（display-amp-float）"><a href="#对比（display-amp-float）" class="headerlink" title="对比（display&amp;float）"></a>对比（display&amp;float）</h3><ul>
<li><p>display</p>
<p>方向无法控制</p>
</li>
<li><p>float</p>
<p>浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷的问题</p>
</li>
</ul>
<p>相同点： 让元素排在一类</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    相对定位</span></span><br><span class="line"><span class="comment">        相对于自己原来的位置进行偏移</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        body&#123;</span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&#123;</span><br><span class="line">            margin: 10px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            line-height: 25px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3cdba6</span>;</span></span><br><span class="line">            border: 1px dashed gainsboro;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>; <span class="comment">/*相对定位*/</span></span></span><br><span class="line">            top: -20px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3cdb99</span>;</span></span><br><span class="line">            border: 1px dashed red;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>; <span class="comment">/*相对定位*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span>: 20<span class="selector-tag">px</span>; <span class="comment">/*向右，因为是相对位置*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3cdb22</span>;</span></span><br><span class="line">            border: 1px dashed yellow;</span><br><span class="line">            position: relative;</span><br><span class="line">            bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>相对定位：position: relative</p>
<p>相对于原来的位置，进行指定的偏移，相对定位的话，它任然在标准文档流中，原来的位置会被保留</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">top</span>: <span class="selector-tag">-20px</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 20<span class="selector-tag">px</span>; <span class="comment">/*向右，因为是相对位置*/</span></span><br><span class="line"><span class="selector-tag">bottom</span>: <span class="selector-tag">-20px</span>;</span><br><span class="line"><span class="selector-tag">right</span><span class="selector-pseudo">:20px</span></span><br></pre></td></tr></table></figure>


<p><strong>练习</strong></p>
<p>效果图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407150727.png" alt="image-20210407150726985"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            border: 2px solid red;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            background: pink;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: white;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a2</span>,<span class="selector-class">.a4</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            left: 200px;</span><br><span class="line">            top: -100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a5</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            left: 100px;</span><br><span class="line">            top: -300px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a3&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a4&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a5&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>定位：基于xxx定位，上下左右</p>
<ol>
<li>没有父级元素定位的前提下，相对于浏览器定位</li>
<li>假设父级元素存在定位，我们通常会相对于父级元素进行偏移</li>
<li>在父级元素范围内移动</li>
</ol>
<p>相对于父级或者浏览器的位置，进行指定的偏移，绝对定位的话，他不在标准文档流中，原来的位置不会被保留</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    相对定位</span></span><br><span class="line"><span class="comment">        相对于自己原来的位置进行偏移</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        body&#123;</span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&#123;</span><br><span class="line">            margin: 10px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            line-height: 25px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line">            padding: 0;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3cdba6</span>;</span></span><br><span class="line">            border: 1px dashed gainsboro;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: -20px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3cdb99</span>;</span></span><br><span class="line">            border: 1px dashed red;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>; <span class="comment">/*相对定位*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span>: 20<span class="selector-tag">px</span>; <span class="comment">/*向右，因为是相对位置*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3cdb22</span>;</span></span><br><span class="line">            border: 1px dashed yellow;</span><br><span class="line">            position: relative;</span><br><span class="line">            bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="固定定位（fixed）"><a href="#固定定位（fixed）" class="headerlink" title="固定定位（fixed）"></a>固定定位（fixed）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            height: 1000px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;<span class="comment">/*绝对定位：相对于浏览器*/</span></span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;<span class="comment">/*固定定位：fixed，死死留在网页上*/</span></span></span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            position: fixed;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>图层的概念</p>
<p>Z-index： 默认是0，最高无限</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*父级元素相对定位*/</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>,<span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">204px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>&#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">opacity</span>: 0.5; <span class="comment">/*背景透明度*/</span></span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407163059.png" alt="image-20210407163059702"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407163145.png" alt="image-20210407163144785"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407163225.png" alt="image-20210407163224901"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407163331.png" alt="image-20210407163331265"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210407163354.png" alt="image-20210407163354628"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 笔记</title>
    <url>/2021/04/07/2021-04-07-JavaScript-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JavaScript 是一门世界上最流行的脚本语言</p>
<p>Java、JavaScript</p>
<p>==一个合格的后端人员，必须精通javascript==</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h3><ol>
<li>内部标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//...</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>外部引入</li>
</ol>
<p>abs.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;abs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>测试代码</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    script 标签内，写javascript代码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        alert(&#x27;hello world&#x27;);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    外部引入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注意：script必须成对出现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/first_js.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里也可以存放--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="基本语法入门"><a href="#基本语法入门" class="headerlink" title="基本语法入门"></a>基本语法入门</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 定义变量 变量类型 变量名 = 变量值</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> score =<span class="number">71</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> name = <span class="string">&quot;yuxuan&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 条件控制</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(score&gt;<span class="number">60</span>&amp;&amp;score&lt;<span class="number">70</span>)&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;60-70&quot;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">70</span>&amp;&amp;score&lt;<span class="number">80</span>)&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;70-80&quot;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;other&quot;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log 打印变量，相当于在浏览器打印变量 == 类似sout</span></span></span><br><span class="line"></span><br><span class="line">      /*</span><br><span class="line">        asdasd</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>浏览器必备调整须知</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210408130340.png" alt="image-20210408130340788"></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数值，文本，图形，音频，视频…</p>
<p>==变量==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a </span><br></pre></td></tr></table></figure>


<p>==number==</p>
<p>js不区分小数和整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span> <span class="comment">//	整数123</span></span><br><span class="line"><span class="number">123.1</span>	 <span class="comment">// 浮点数123.1</span></span><br><span class="line"><span class="number">1.123e3</span> <span class="comment">// 科学计数法</span></span><br><span class="line">-<span class="number">99</span> <span class="comment">//负数</span></span><br><span class="line"><span class="literal">NaN</span> <span class="comment">// not a number</span></span><br><span class="line"><span class="literal">Infinity</span> <span class="comment">// 表示无限大</span></span><br></pre></td></tr></table></figure>


<p>==字符串==</p>
<p>‘abc’ “abc “</p>
<p>==布尔值==</p>
<p>true，false</p>
<p>==逻辑运算==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp; </span><br><span class="line">  </span><br><span class="line">||</span><br><span class="line">  </span><br><span class="line">! </span><br></pre></td></tr></table></figure>


<p>==比较运算符==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=</span><br><span class="line">== 等于（类型不一样，值一样，也会判断为<span class="literal">true</span>, e.g. “<span class="number">1</span>”=<span class="number">1</span> 为<span class="literal">true</span>）</span><br><span class="line">=== 绝对等于 （类型一样，值一样，结果为<span class="literal">true</span>）</span><br></pre></td></tr></table></figure>


<p>这是一个JS的缺陷，简直不要使用==的比较</p>
<p>须知：</p>
<ul>
<li>NaN==NaN， 这个与所有的数值都不相等，包括自己</li>
<li>只能通过isNaN(NaN)来判断这个数是不是NaN</li>
</ul>
<p>==浮点数问题==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>)) <span class="comment">// 计算机不支持无限大的数，会有精度的损失</span></span><br></pre></td></tr></table></figure>
<p>尽量避免使用浮点数进行运算，因为存在精度问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.00000001) // 计算机不支持无限大的数，会有精度的损失</span><br></pre></td></tr></table></figure>


<p>==null和undefined==</p>
<ul>
<li>Null 空</li>
<li>Undefined 未定义</li>
</ul>
<p>==数组==</p>
<p>Java的数值必须是一系列相同类型的变量，JS中并不要求这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保证代码的可读性，尽量使用[]</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>, <span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>取数组下标：如果越界了，就会undefined</p>
<p>==对象==</p>
<p>对象是大括号，数组是中括号</p>
<p>每个属性之间使用逗号隔开，最后一个不需要添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person person = new Person(1,2,3,4)</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  name: <span class="string">&quot;yuxuan&quot;</span>,</span><br><span class="line">  age: <span class="number">3</span>,</span><br><span class="line">  tags: [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取对象的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.name</span><br><span class="line">&gt;<span class="string">&quot;yuxuan&quot;</span></span><br><span class="line">person.age</span><br><span class="line">&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>


<h3 id="严格检查格式"><a href="#严格检查格式" class="headerlink" title="严格检查格式"></a>严格检查格式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        前提：IDEA需要设置支持ES6的语法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        必须写在JavaScript的第一行</span></span><br><span class="line"><span class="comment">        &#x27;use strict&#x27;; 严格检查模式，防止Javascript导致产生的一些问题</span></span><br><span class="line"><span class="comment">        局部变量建议都使用let去定义～</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 全局变量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ES6 let</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol>
<li>正常的字符串我们使用’’ 和“ ”包裹</li>
<li>注意转义字符</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#39;</span><br><span class="line">\n</span><br><span class="line">\t</span><br><span class="line">\u4e2d unicode字符</span><br><span class="line">\x41	 Ascll 字符</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>多行字符串编写</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// 反引号</span></span><br><span class="line"><span class="keyword">var</span> msg =<span class="string">`</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">牛</span></span><br></pre></td></tr></table></figure>


<ol start="4">
<li>模版字符串</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;yuxuan&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> msg =<span class="string">`你好呀 <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(msg)</span><br></pre></td></tr></table></figure>


<ol start="5">
<li>字符串长度</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.length </span><br></pre></td></tr></table></figure>


<ol start="6">
<li>字符串的可变性，不可变</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(student[<span class="number">0</span>])</span><br><span class="line">&gt; s</span><br><span class="line">&lt; <span class="literal">undefined</span></span><br><span class="line">student[<span class="number">0</span>] = <span class="number">1</span> </span><br><span class="line">&gt; <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(student)</span><br><span class="line">&gt; student</span><br><span class="line">&lt; <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>


<ol start="7">
<li>大小写转换</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，这里是方法，不是属性了</span></span><br><span class="line"></span><br><span class="line">student.toUpperCase()</span><br><span class="line">student.toLowerCase()</span><br></pre></td></tr></table></figure>


<ol start="8">
<li>获取索引</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">student.indexOf(<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure>


<ol start="9">
<li>substring</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[)</span><br><span class="line">student.substring(<span class="number">1</span>) <span class="comment">// 从第一个字符串截取到最后一个字符串</span></span><br><span class="line">student.substring(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure>


<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>Array 可以包含人意的数据类型</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]; <span class="comment">// 通过下标取值和赋值</span></span><br><span class="line">arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure>


<ol>
<li>长度</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.length()</span><br></pre></td></tr></table></figure>


<p>注意：假如给arr.length 赋值，数据大小就会发生变化～ 如果赋值过小，元素就会丢失</p>
<ol start="2">
<li>indexOf，通过元素获得下标索引</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.indexOf(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>注意：字符串的“1”和1是不同的</p>
<ol start="3">
<li><strong>slice()  截取Array的一部分，返回一个新数组, 类似于String中的substring</strong></li>
</ol>
<ol start="4">
<li>push() , pop()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push: 压入到尾部</span><br><span class="line">pop: 弹出尾部的一个元素</span><br></pre></td></tr></table></figure>


<ol start="5">
<li><strong>unshift(), shift(), 头部</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unshift: 压入到头部</span><br><span class="line">shift: 弹出头部的一个元素</span><br></pre></td></tr></table></figure>


<ol start="6">
<li>排序 sort() </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr</span><br><span class="line">&gt;(<span class="number">3</span>) [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;A&quot;</span>]</span><br><span class="line">arr.sort()</span><br><span class="line">&gt;(<span class="number">3</span>) [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]</span><br></pre></td></tr></table></figure>


<ol start="7">
<li>元素反转</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>) [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line">(<span class="number">3</span>) [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>]</span><br></pre></td></tr></table></figure>


<ol start="8">
<li><strong>concat()</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>) [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>]</span><br><span class="line">arr.concat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">6</span>) [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">arr</span><br><span class="line">(<span class="number">3</span>) [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>注意：concat() 并没有修改数组，只是会返回一个新的数组</p>
<ol start="9">
<li>连接符号join</li>
</ol>
<p>打印拼接数组，使用特定的字符串链接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>) [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>]</span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="string">&quot;C-B-A&quot;</span></span><br></pre></td></tr></table></figure>


<ol start="10">
<li>多维数组</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>]]</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>


<p>数组：存储数据（如何存，如何取，方法都可以自己实现！）</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>若干个键值对</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">  属性名: 属性值,	</span><br><span class="line">  属性名: 属性值,</span><br><span class="line">  属性名: 属性值,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">            name: <span class="string">&quot;yuxuan&quot;</span>,</span><br><span class="line">            age:<span class="number">3</span>,</span><br><span class="line">            email: <span class="string">&quot;123213@qq.com&quot;</span>,</span><br><span class="line">            score:<span class="number">0</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<p>JS中的对象,{…}表示一个对象，键值对描述属性 xxxx: xxxx 多个属性之间使用逗号隔开，最后一个属性不加逗号！</p>
<p>JavaScript 中的所有键都是字符串，值是任意对象</p>
<ol>
<li>对象赋值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.name=<span class="string">&quot;yuxuanwu&quot;</span></span><br><span class="line"><span class="string">&quot;yuxuanwu&quot;</span></span><br><span class="line">person.name</span><br><span class="line"><span class="string">&quot;yuxuanwu&quot;</span></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>使用一个不存在的对象属性，不会报错！ undefined</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.hah</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>动态的删减属性，通过delete删除对象的属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">person</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>动态的添加，直接给新的属性添加值即可</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.haha = <span class="string">&quot;haha&quot;</span></span><br><span class="line"><span class="string">&quot;haha&quot;</span></span><br><span class="line">person</span><br></pre></td></tr></table></figure>


<ol start="5">
<li>判断属性值是否在这个对象中！ Xxx in xxx!</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>


<ol start="6">
<li>判断一个属性是否是这个对象自身拥有的 <em>hasOwnProperty</em></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>if 判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">3</span>)&#123; <span class="comment">// 第一个判断</span></span><br><span class="line">  alert(<span class="string">&quot;haha&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (age&lt;<span class="number">5</span>)&#123; <span class="comment">//第二个判断</span></span><br><span class="line">  alert(<span class="string">&quot;md&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">//否则。。</span></span><br><span class="line">  alert(<span class="string">&quot;kuwa~&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>while 循环,避免程序死循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (age&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    age = age+<span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>for循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>forEach 循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">324</span>,<span class="number">12312</span>,<span class="number">245</span>,<span class="number">21</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p>数组循环(for…in)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">324</span>,<span class="number">12312</span>,<span class="number">245</span>,<span class="number">21</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> age)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(age[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>数组循环（for…of）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Map-和-Set"><a href="#Map-和-Set" class="headerlink" title="Map 和 Set"></a>Map 和 Set</h3><blockquote>
<p>ES6的新特性</p>
</blockquote>
<p>Map:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 Map 和python字典类似</span></span><br><span class="line"><span class="comment">// 学生的成绩，学生的名字</span></span><br><span class="line"><span class="comment">// var names = [&quot;tom&quot;, &quot;haha&quot;, &quot;jack&quot;];</span></span><br><span class="line"><span class="comment">// var score = [100, 90, 80];</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">90</span>],[<span class="string">&#x27;haha&#x27;</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">&#x27;tom&#x27;</span>) <span class="comment">// 通过key来获得value</span></span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span>,<span class="number">123456</span>) <span class="comment">// 新增或者修改</span></span><br><span class="line">map.delete(<span class="string">&quot;tom&quot;</span>) <span class="comment">//删除</span></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure>


<p>Set: 无序不重复的集合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">set.add(<span class="number">2</span>); <span class="comment">// 添加</span></span><br><span class="line">set.delete(<span class="number">1</span>); <span class="comment">//删除</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">3</span>)); <span class="comment">// 是否包含某个元素</span></span><br></pre></td></tr></table></figure>


<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>遍历map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">90</span>],[<span class="string">&#x27;haha&#x27;</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>遍历set</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>方法：对象（属性，方法）</p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>java 里面的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 返回值类型 方法名()&#123;</span><br><span class="line">		<span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>定义方式一</p>
</blockquote>
<p>绝对值函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦执行return代表方法结束，返回结果！</p>
<p>如果没有执行return，函数执行完也会返回结果，结果就是undefined</p>
<blockquote>
<p>定义方式二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>function(x){…}这是一个匿名函数，但是可以吧结果给abs,通过abs可以调用函数</p>
<p>方式一和方式二等价</p>
<blockquote>
<p>调用函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abs(<span class="number">10</span>) <span class="comment">//10 </span></span><br><span class="line">abs(-<span class="number">10</span>) <span class="comment">//10 </span></span><br></pre></td></tr></table></figure>
<p>参数问题：javascript 可以传递任意参数，也可以不传递参数</p>
<p>参数进来是否存在的问题？</p>
<p>假设不存在参数，如何规避？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 手动跑出异常</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x!==<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;Not a number&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>arguments</p>
</blockquote>
<p><code>arguments</code>是一个免费赠送的关键字</p>
<p>代表，传递进来的所有参数，是一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;x&gt;&quot;</span> + x);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>问题：arguments包含所有的参数，我们有时候想使用多余的参数来进行操作。需要排除已有的参数</p>
<blockquote>
<p>rest  </p>
</blockquote>
<p>以前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>ES6 引入的新特性，获取除了已经定义的参数之外的所有参数~ …</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a=&gt;&quot;</span> + a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;b=&gt;&quot;</span> + b);</span><br><span class="line">  <span class="built_in">console</span>.log(rest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>在JavaScript中，var的定义变量实际是有作用域的</p>
<p>假设在函数体中声明，则在函数体外不可以使用～（闭包可以实现，但是难）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">  x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = x + <span class="number">2</span> <span class="comment">//Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>


<p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">  x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">  x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>内部函数可以访问外部函数的成员，反之则不行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部函数可以访问外部成员函数，反之则不行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设，内部函数变量和外部函数的变量，重名！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;inner&#x27;</span> + x); <span class="comment">// inner</span></span><br><span class="line">    &#125;</span><br><span class="line">    qj2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;outer&#x27;</span> + x); <span class="comment">// outer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qj()</span><br></pre></td></tr></table></figure>


<p>假设在JavaScript中函数查找变量从自身函数开始～</p>
<p>由“内”向“外”查找。 假设外部存在这个同名的函数变量，则内部函数的变量会屏蔽外部的变量</p>
<blockquote>
<p>提升变量的作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&#x27;x&#x27;</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：xundefined</p>
<p>说明：JS执行引擎，自动提升了y的声明，但不会提升变量y 的赋值；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&#x27;x&#x27;</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个是在JavaScript建立之初就存在的特性，所以养成规范，所有的变量定义都放在函数的头部，便于代码的维护</p>
<p>Js引擎会先定义所有的全局变量，然后按照顺序赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>,</span><br><span class="line">      y = x + <span class="number">1</span>,</span><br><span class="line">      z, i, a; <span class="comment">// undefined</span></span><br><span class="line">  <span class="comment">//之后随意使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>全局函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br></pre></td></tr></table></figure>


<p>全局对象 window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;xxxx&#x27;</span>;</span><br><span class="line">alert(x);</span><br><span class="line">alert(<span class="built_in">window</span>.x) <span class="comment">// 默认所有的全局变量，都会自动绑定在windows的对象下</span></span><br></pre></td></tr></table></figure>
<p>alert（）这个函数本身也是一个<code>window</code>的变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;xxxx&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.alert(x);</span><br><span class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert;</span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发现alert() 失效了</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复</span></span><br><span class="line"><span class="built_in">window</span>.alert = old_alert();</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>
<p>javascript 实际上只有一个全局作用域，任何变量（函数也可以视为变量）假如没有在函数的作用域范围内找到，就会向外查找，如果在全局作用域都没有找到，报错 <code>ReferenceError</code></p>
<blockquote>
<p>规范</p>
</blockquote>
<p>由于我们所有的全局变量都会绑定到我们的window上。如果不同的js文件，使用了相同的全局变量，冲突-&gt;如何能够减少冲突</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> kuangApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line">kuangApp.name = <span class="string">&#x27;kuangshen&#x27;</span>;</span><br><span class="line">kuangApp.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题～</p>
<p>jQuery</p>
<blockquote>
<p>局部作用域 let</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="number">1</span>); <span class="comment">// 问题？ i 出了这个作用域还可以使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6 let 关键字，解决局部作用域冲突问题！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="number">1</span>); <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建议使用<code>let</code>关键字去定义局部作用域的变量</p>
<blockquote>
<p>常量 const</p>
</blockquote>
<p>在ES6之前，我们定义常量：只有用全部大些字母命名的变量就是常量；建议不要修改这样的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>; <span class="comment">// 只读变量，不可更改</span></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">&#x27;123 // TypeError</span></span><br></pre></td></tr></table></figure>


<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p>定义方法</p>
</blockquote>
<p>方法就是把函数放在对象的里面，对象只有两个属性：属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    name: <span class="string">&#x27;qingjiang&#x27;</span>,</span><br><span class="line">    birth:<span class="string">&#x27;2020&#x27;</span>,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 今年-出生的年</span></span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="built_in">this</span>.birth</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">kuangshen.name</span><br><span class="line"><span class="comment">// 方法,一定要带（）</span></span><br><span class="line">kuangshen.age() </span><br></pre></td></tr></table></figure>
<p>this. 代表什么？拆开上面的代码块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="built_in">this</span>.birth</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    name: <span class="string">&#x27;qingjiang&#x27;</span>,</span><br><span class="line">    birth:<span class="string">&#x27;2020&#x27;</span>,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// kuangshen.age() ok</span></span><br><span class="line"><span class="comment">// getAge() NaN window 对象</span></span><br></pre></td></tr></table></figure>
<p>this是无法指向的，是默认指向调用他的那个对象</p>
<blockquote>
<p>apply</p>
</blockquote>
<p>在js中可以控制this的指向</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="built_in">this</span>.birth</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    name: <span class="string">&#x27;qingjiang&#x27;</span>,</span><br><span class="line">    birth:<span class="string">&#x27;2020&#x27;</span>,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// kuangshen.age() ok</span></span><br><span class="line"><span class="comment">// getAge() NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里在console里输入，直接运行会报错</span></span><br><span class="line">getAge().apply(kuangshen, []); <span class="comment">// this 只想了kuangshen这个对象，参数为空</span></span><br></pre></td></tr></table></figure>


<h2 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h2><blockquote>
<p>标准对象 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span></span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.abs</span><br><span class="line"><span class="string">&quot;function&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line"><span class="string">&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><strong>基本使用</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//Sun Apr 11 2021 10:07:57 GMT+0800 (中国标准时间)</span></span><br><span class="line">now.getFullYear(); <span class="comment">// 年</span></span><br><span class="line">now.getMonth(); <span class="comment">// 月 0——11</span></span><br><span class="line">now.getDate();<span class="comment">// 日</span></span><br><span class="line">now.getDay();<span class="comment">// 星期几</span></span><br><span class="line">now.getHours(); <span class="comment">// 时</span></span><br><span class="line">now.getMinutes() <span class="comment">//分</span></span><br><span class="line">now.getSeconds() <span class="comment">//秒</span></span><br><span class="line">now.getTime(); <span class="comment">// 时间戳 全世界统一 1970 1.1 0:00:00 毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(now.getTime())) <span class="comment">// console.log(new Date(now.getTime())) == console.log(new Date())</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>转换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>(now.getTime())</span><br><span class="line">Sun Apr <span class="number">11</span> <span class="number">2021</span> <span class="number">10</span>:<span class="number">18</span>:<span class="number">28</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line"></span><br><span class="line">now.toLocaleDateString()</span><br><span class="line"><span class="string">&quot;2021/4/11&quot;</span></span><br><span class="line"></span><br><span class="line">now.toGMTString()</span><br><span class="line"><span class="string">&quot;Sun, 11 Apr 2021 02:18:28 GMT&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><blockquote>
<p>json 是什么</p>
</blockquote>
<p>早期，所有数据传输习惯使用XML文件</p>
<ul>
<li>json 是一种轻量级的数据交换格式</li>
<li>简洁和清晰的<strong>层次结构</strong>使得JSON成为理想的数据交换语言</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并且有效的提升网络的传输效率</li>
</ul>
<p>在javascript中一切皆为对象、任何js支持的类型都可以用json来表示number, String…</p>
<p>格式：</p>
<ul>
<li>对象都用{}</li>
<li>数组都用[]</li>
<li>所有的键值对 都是使用key:value</li>
</ul>
<p>JSON字符串和JS对象的转换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">&quot;yuxuan&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    sex: <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转化为json字符串 &#123;&quot;name&quot;:&quot;yuxuan&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;male&quot;&#125;</span></span><br><span class="line"><span class="keyword">var</span> json_user = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// json 字符串转化为对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;yuxuan&quot;,&quot;age&quot;: 3,&quot;sex&quot;: &quot;male&quot;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>外面双，里面单，里面单外面双</p>
<p>很多人搞不清楚JSON和JS对象的区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">&#x27;hello&#x27;</span>, <span class="attr">b</span>:<span class="string">&#x27;hellob&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;, &quot;b&quot;:&quot;hellob&quot;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><ul>
<li>原生的js写法，xhr异步请求</li>
<li>jQuery 封装好的方法 $(“#name”).ajax(“”)</li>
<li>axios 请求</li>
</ul>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><p>JavaScript，Java，c#。。。JavaScript有些区别</p>
<p>类：模版</p>
<p>对象：具体的实例</p>
<p>在JavaScript中需要转换一下思维</p>
<blockquote>
<p>原型对象：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">&quot;yuxuan&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    sex: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&quot; run....&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型对象</span></span><br><span class="line">xiaoming.__proto__ = user;</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.run())</span><br></pre></td></tr></table></figure>


<blockquote>
<p>class 继承</p>
</blockquote>
<p><code>class</code>关键字，是在ES6引入的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 之后 ============</span></span><br><span class="line"><span class="comment">// 定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.name)</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.hello())</span><br></pre></td></tr></table></figure>
<p>2、继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 之后 ============</span></span><br><span class="line"><span class="comment">// 定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudents</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,grade</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;I am a primary student&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> PrimaryStudents(<span class="string">&#x27;xiaohong&#x27;</span>,<span class="string">&#x27;100&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>本质：查看对象原型</p>
<blockquote>
<p>原型链</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210411114538.png" alt="image-20210411114538259"></p>
<h2 id="操作BOM对象（重点）"><a href="#操作BOM对象（重点）" class="headerlink" title="操作BOM对象（重点）"></a>操作BOM对象（重点）</h2><blockquote>
<p>浏览器介绍</p>
</blockquote>
<p>Javascript 和浏览器的关系？</p>
<p>JavaScript诞生就是为了能够他在浏览器中运行</p>
<p>BOM：浏览器对象模型</p>
<ul>
<li>IE 6~11</li>
<li>Chrome</li>
<li>Safari </li>
<li>FireFox</li>
</ul>
<p>三方</p>
<ul>
<li>QQ浏览器</li>
<li>360浏览器</li>
</ul>
<blockquote>
<p>window</p>
</blockquote>
<p>window代表浏览器窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight</span><br><span class="line"><span class="number">766</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth</span><br><span class="line"><span class="number">393</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight</span><br><span class="line"><span class="number">877</span></span><br><span class="line"><span class="built_in">window</span>.outerWidth</span><br><span class="line"><span class="number">958</span></span><br><span class="line"><span class="comment">// 大家可以调整浏览器窗口试试...</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>Navigator（不建议使用）</p>
</blockquote>
<p>Navigator, 封装了浏览器的信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.appName</span><br><span class="line"><span class="string">&quot;Netscape&quot;</span></span><br><span class="line">navigator.appVersion</span><br><span class="line"><span class="string">&quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36&quot;</span></span><br><span class="line">navigator.userAgent</span><br><span class="line"><span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36&quot;</span></span><br><span class="line">navigator.platform</span><br><span class="line"><span class="string">&quot;MacIntel&quot;</span></span><br></pre></td></tr></table></figure>
<p>大多数的时候，我们不会使用<code>navigator</code>对象，因为会被人为修改！</p>
<p>不建议使用这些属性来判断和编写代码</p>
<blockquote>
<p>screen </p>
</blockquote>
<p>代表屏幕尺寸</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1440</span></span><br><span class="line">screen.height</span><br><span class="line"><span class="number">900</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>location (重要)</p>
</blockquote>
<p>location 代表当前页面的URL信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">host: <span class="string">&quot;new-tab-page&quot;</span></span><br><span class="line">href: <span class="string">&quot;chrome://new-tab-page/&quot;</span></span><br><span class="line">protocol: <span class="string">&quot;chrome:&quot;</span></span><br><span class="line">reload: ƒ reload() <span class="comment">// 刷新网页</span></span><br><span class="line"><span class="comment">// 设置新的地址</span></span><br><span class="line">location.assign(<span class="string">&quot;https://yuxuanwu17.github.io/&quot;</span>)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>Document （内容）</p>
</blockquote>
<p>document 代表当前的页面，HTML DOM文档树</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title</span><br><span class="line"><span class="string">&quot;百度一下，你就知道&quot;</span></span><br></pre></td></tr></table></figure>


<p>获取具体的文档树节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;dl id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;dt&gt;Java&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;JavaSE&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;JavaEE&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>


<p>获取cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br><span class="line"><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<p>劫持cookie的原理</p>
<p><a class="link"   href="http://www.taobao.com/" >www.taobao.com<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;aa.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--恶意人员：获取你的cookie上传到他的服务器--&gt;</span><br></pre></td></tr></table></figure>


<p>服务器端可以设置cookie：httpOnly </p>
<blockquote>
<p>history</p>
</blockquote>
<p>History 代表浏览器的历史记录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.back() <span class="comment">// 后退</span></span><br><span class="line"></span><br><span class="line">history.forward() <span class="comment">//前进</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="操作DOM对象（重点）"><a href="#操作DOM对象（重点）" class="headerlink" title="操作DOM对象（重点）"></a>操作DOM对象（重点）</h2><p>DOM：文档对象模型</p>
<blockquote>
<p>核心</p>
</blockquote>
<p>浏览器网页是一个DOM树形结构！</p>
<ul>
<li>更新：更新DOM节点</li>
<li>遍历DOM节点：得到DOM节点</li>
<li>删除：删除一个DOM节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<p>要操作一个DOM节点，就必须要获得这个DOM节点</p>
<blockquote>
<p>获得DOM节点</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对应css选择器</span></span><br><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;father&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> children = father.children; <span class="comment">// 获取父节点下的所有子节点</span></span><br></pre></td></tr></table></figure>
<p>这是原生代码，之后我们尽量都是使用jQuery</p>
<blockquote>
<p>更新节点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> id1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id1&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>操作文本</p>
<ul>
<li><code>id1.innerText=&quot;123&quot;</code>修改文本的值</li>
<li><code>id1.innerHTML = &#39;&lt;strong&gt;123&lt;/strong&gt;&#39;</code>可以解析HTML文本标签</li>
</ul>
<p>操作JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.style.color = <span class="string">&#x27;red&#x27;</span>; <span class="comment">// 属性使用字符串包裹</span></span><br><span class="line">id1.style.fontSize=<span class="string">&#x27;20px&#x27;</span>; <span class="comment">// 驼峰命名</span></span><br><span class="line">id1.style.padding = <span class="string">&#x27;2em&#x27;</span>;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>删除节点</p>
</blockquote>
<p>删除节点的步骤：先获取父节点，在通过父节点删除自己</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> self = <span class="built_in">document</span>.getElementByID(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> father = p1.parentElement;</span></span><br><span class="line">  father.removeChild(p1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 删除是一个动态的过程</span></span></span><br><span class="line">father.removeChild(father.children[0])</span><br><span class="line">father.removeChild(father.children[1])</span><br><span class="line">father.removeChild(father.children[2])</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：删除多个节点的时候，children是在时刻变化的，删除节点的时候一定要注意！</p>
<blockquote>
<p>插入节点</p>
</blockquote>
<p>我们获得了某个DOM节点，假设这个DOM节点是空的，我们通过innerHTML 就可以增加一个元素了，但是这个DOM节点已经存在元素了，我们就不能这么干了，会产生覆盖</p>
<p>追加操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span></span><br><span class="line">    JavaScript</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210412104659.png" alt="image-20210412104659016"></p>
<blockquote>
<p>创建一个新的标签，实现插入</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>); <span class="comment">// 已经存在的节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 通过js创造一个新的节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>) <span class="comment">// 创建一个新的p标签</span></span></span><br><span class="line"><span class="javascript">  newP.id = <span class="string">&#x27;newP&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  newP.innerText = <span class="string">&#x27;Hello world&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// list.appendChild(newP)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建一个标签节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myScript = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  myScript.setAttribute(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;text/javascript&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 可以创建一个Style标签</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myStyle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>); <span class="comment">// 创建了一个空的style标签</span></span></span><br><span class="line"><span class="javascript">  myStyle.setAttribute(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;text/css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  myStyle.innerHTML = <span class="string">&#x27;body&#123;background-color:chartreuse&#125;&#x27;</span>; <span class="comment">//设置标签的内容</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].appendChild(myStyle)</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="操作表单（验证）"><a href="#操作表单（验证）" class="headerlink" title="操作表单（验证）"></a>操作表单（验证）</h2><blockquote>
<p>表单是什么 form DOM树</p>
</blockquote>
<ul>
<li>文本框 text</li>
<li>下拉框 &lt;select&gt;</li>
<li>单选框 radio</li>
<li>多选框 checkbox</li>
<li>隐藏域 hidden</li>
<li>密码框 password</li>
<li>…</li>
</ul>
<p>表单的目的：提交信息</p>
<blockquote>
<p>获得要提交的信息</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    多选框的值，就是定义好的value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span> 女</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_man = <span class="built_in">document</span>.getElementById(<span class="string">&quot;boy&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_female = <span class="built_in">document</span>.getElementById(<span class="string">&quot;girl&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 得到输入的值</span></span></span><br><span class="line">    input_text.value</span><br><span class="line"><span class="javascript">    <span class="comment">// 修改输入的值</span></span></span><br><span class="line"><span class="javascript">    input_text.value = <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 对于单选框，多选框等等固定的值,input_male 只能取到当前的值</span></span></span><br><span class="line"><span class="javascript">    input_man.checked; <span class="comment">// 查看返回的结果是否是true，如果是true，则被选中～</span></span></span><br><span class="line"><span class="javascript">    input_female.checked = <span class="literal">true</span>; <span class="comment">// 赋值</span></span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>提交表单（MD5加密算法）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单提交事件</span></span><br><span class="line"><span class="comment">onsubmit = 绑定一个提交检测的函数，true和false</span></span><br><span class="line"><span class="comment">将这个结果返回给表单，使用onsubmit</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    绑定事件 onclick 被点击--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;aaa()&quot;</span>&gt;</span> 提交 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;password&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(username.value);</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(password.value);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// password.value = &#x27;12312&#x27;;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 可以用MD5 算法来进行加密</span></span></span><br><span class="line">        password.value = md5(password.value)</span><br><span class="line"><span class="javascript">        <span class="comment">// password.value = &#x27;*****&#x27;;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(password.value)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>Javascript </p>
<p>jQuery库，里面存在大量的Javascript函数</p>
<p>公式：<code>$(选择器).事件</code></p>
<blockquote>
<p>获取jQuery</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    CDN 下载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">公式： $(selector).action()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// document.getElementById(&#x27;test-jquery&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//选择器就是css的选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hello jquery&#x27;</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>选择器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生js，选择器少，麻烦不好记</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="built_in">document</span>.getElementById()</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery css 中的选择器他全部能用</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).click() <span class="comment">// 标签选择器</span></span><br><span class="line">$(<span class="string">&#x27;#id1&#x27;</span>).click() <span class="comment">// id选择器</span></span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).click() <span class="comment">//class选择器</span></span><br></pre></td></tr></table></figure>


<p>文档可以在此查看：<a class="link"   href="https://jquery.cuishifeng.cn/" >https://jquery.cuishifeng.cn<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>事件 action </p>
</blockquote>
<p>鼠标事件，键盘事件，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#divMove</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要求：获取鼠标当前的一个坐标--&gt;</span></span><br><span class="line">mouse:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMove&quot;</span>&gt;</span></span><br><span class="line">    在这里移动鼠标试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当网页元素加载完毕之后，响应事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27;x:&#x27;</span>+e.pageX + <span class="string">&#x27;y:&#x27;</span>+e.pageY)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>操作DOM</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;test-ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span> =<span class="string">&quot;python&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>节点文本操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).text(); <span class="comment">// 获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).text(‘<span class="number">12312</span>’); <span class="comment">// 设置值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html(); <span class="comment">// 获得</span></span><br></pre></td></tr></table></figure>
<p>CSS的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>元素的显示和隐藏: 本质<code>display:none</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).hide()</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).show()</span><br></pre></td></tr></table></figure>


<p>未来ajax（）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form&#x27;</span>).ajax()</span><br></pre></td></tr></table></figure>


<blockquote>
<p>小技巧</p>
</blockquote>
<ol>
<li>如何巩固js（看jQuery 源码，看游戏源码！）</li>
<li>巩固HTML,CSS (扒网站，全部down下来，然后对应修改看效果～)</li>
</ol>
<p>Layer 弹窗组件</p>
<p>Element-UI</p>
<p>Ant Design</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>C#文件IO操作</title>
    <url>/2021/04/01/2021-04-01-Csharp%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="C-文件IO操作"><a href="#C-文件IO操作" class="headerlink" title="C#文件IO操作"></a>C#文件IO操作</h1><p><strong>文件</strong>是存储在磁盘中带有指定名称和目录路径的数据集合，是保存在电脑上的人们在各种社会活动中产生的记录，比如 Word文档、Xls文档， PPT等。</p>
<p>当打开文件进行读写时，它变成一个 **流(Stream)**。</p>
<p>从根本上说，流是通过通信路径传递的字节序列。 有两个主要的流：<strong>输入流</strong> 和 <strong>输出流</strong>。</p>
<ul>
<li>输入流用于从文件读取数据（读操作）</li>
<li>输出流用于向文件写入数据（写操作）。</li>
</ul>
<h2 id="C-I-O-类"><a href="#C-I-O-类" class="headerlink" title="C# I/O 类"></a>C# I/O 类</h2><p>System.IO 命名空间有各种不同的类，用于执行各种文件操作，如创建和删除文件、读取或写入文件，关闭文件等。</p>
<p>下表列出了一些 System.IO 命名空间中常用的非抽象类：</p>
<table>
<thead>
<tr>
<th>I/O 类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>BinaryReader</td>
<td>从二进制流读取原始数据。</td>
</tr>
<tr>
<td>BinaryWriter</td>
<td>以二进制格式写入原始数据。</td>
</tr>
<tr>
<td>BufferedStream</td>
<td>字节流的临时存储。</td>
</tr>
<tr>
<td>Directory</td>
<td>有助于操作目录结构。</td>
</tr>
<tr>
<td>DirectoryInfo</td>
<td>用于对目录执行操作。</td>
</tr>
<tr>
<td>DriveInfo</td>
<td>提供驱动器的信息。</td>
</tr>
<tr>
<td>File</td>
<td>有助于处理文件。</td>
</tr>
<tr>
<td>FileInfo</td>
<td>用于对文件执行操作。</td>
</tr>
<tr>
<td>FileStream</td>
<td>用于文件中任何位置的读写。</td>
</tr>
<tr>
<td>MemoryStream</td>
<td>用于随机访问存储在内存中的数据流。</td>
</tr>
<tr>
<td>Path</td>
<td>对路径信息执行操作。</td>
</tr>
<tr>
<td>StreamReader</td>
<td>用于从字节流中读取字符。</td>
</tr>
<tr>
<td>StreamWriter</td>
<td>用于向一个流中写入字符。</td>
</tr>
<tr>
<td>StringReader</td>
<td>用于读取字符串缓冲区。</td>
</tr>
<tr>
<td>StringWriter</td>
<td>用于写入字符串缓冲区。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="FileStream-类"><a href="#FileStream-类" class="headerlink" title="FileStream 类"></a>FileStream 类</h2><p>System.IO 命名空间中的 <strong>FileStream</strong> 类有助于文件的读写与关闭。该类派生自抽象类 Stream。</p>
<p>您需要创建一个 <strong>FileStream</strong> 对象来创建一个新的文件，或打开一个已有的文件。创建 <strong>FileStream</strong> 对象的语法如下:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">FileStream &lt;object_name&gt; = <span class="keyword">new</span> FileStream( &lt;file_name&gt;,</span><br><span class="line">&lt;FileMode Enumerator&gt;, &lt;FileAccess Enumerator&gt;, &lt;FileShare Enumerator&gt;);</span><br></pre></td></tr></table></figure>
<p>例如，创建一个 FileStream 对象 <strong>F</strong> 来读取名为 <strong>hello.txt</strong> 的文件:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">FileStream F = <span class="keyword">new</span> FileStream(<span class="string">&quot;hello.txt&quot;</span>, FileMode.Open, FileAccess.Read, FileShare.Read);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>FileMode</td>
<td>FileMode 枚举定义了各种打开文件的方法。FileMode 枚举的成员有： Append：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件。 Create：创建一个新的文件。如果文件已存在，则删除旧文件，然后创建新文件。 CreateNew：指定操作系统应创建一个新的文件。如果文件已存在，则抛出异常。 Open：打开一个已有的文件。如果文件不存在，则抛出异常。 OpenOrCreate：指定操作系统应打开一个已有的文件。如果文件不存在，则用指定的名称创建一个新的文件打开。 Truncate：打开一个已有的文件，文件一旦打开，就将被截断为零字节大小。然后我们可以向文件写入全新的数据，但是保留文件的初始创建日期。如果文件不存在，则抛出异常。</td>
</tr>
<tr>
<td>FileAccess</td>
<td>FileAccess 枚举的成员有：<strong>Read</strong>、 <strong>ReadWrite</strong> 和 <strong>Write</strong> 。</td>
</tr>
<tr>
<td>FileShare</td>
<td><strong>FileShare</strong> 枚举的成员有：  Inheritable：允许文件句柄可由子进程继承。Win32 不直接支持此功能。  None：谢绝共享当前文件。文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。   Read：允许随后打开文件读取。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。  ReadWrite：允许随后打开文件读取或写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。  Write：允许随后打开文件写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。   Delete：允许随后删除文件。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C# notes</title>
    <url>/2021/03/21/2021-03-19-Csharp-notes/</url>
    <content><![CDATA[<h2 id="C-基本用法和程序"><a href="#C-基本用法和程序" class="headerlink" title="C# 基本用法和程序"></a>C# 基本用法和程序</h2><h3 id="程序结构-demo1"><a href="#程序结构-demo1" class="headerlink" title="程序结构(demo1)"></a>程序结构(demo1)</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorldApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">         <span class="comment">/* 我的第一个 C# 程序*/</span></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>让我们看一下上面程序的各个部分：</p>
<ul>
<li><p>程序的第一行 <strong>using System;</strong> - <strong>using</strong> 关键字用于在程序中包含 <strong>System</strong> 命名空间。 一个程序一般有多个 <strong>using</strong> 语句。</p>
</li>
<li><p>下一行是 <strong>namespace</strong> 声明。一个 <strong>namespace</strong> 里包含了一系列的类。<em>HelloWorldApplication</em> 命名空间包含了类 <em>HelloWorld</em>。</p>
</li>
<li><p>下一行是 <strong>class</strong> 声明。类 <em>HelloWorld</em> 包含了程序使用的数据和方法声明。类一般包含多个方法。方法定义了类的行为。在这里，<em>HelloWorld</em> 类只有一个 <strong>Main</strong> 方法。</p>
</li>
<li><p>下一行定义了 <strong>Main</strong> 方法，是所有 C# 程序的 <strong>入口点</strong>。<strong>Main</strong> 方法说明当执行时 类将做什么动作。</p>
</li>
<li><p>下一行 /<em>…</em>/ 将会被编译器忽略，且它会在程序中添加额外的 <strong>注释</strong>。</p>
</li>
<li><p>Main 方法通过语句</p>
<p> <code>Console.WriteLine(&quot;Hello World&quot;); </code> 指定了它的行为。</p>
<p><em>WriteLine</em> 是一个定义在 <em>System</em> 命名空间中的 <em>Console</em> 类的一个方法。该语句会在屏幕上显示消息 “Hello World”。</p>
</li>
<li><p>最后一行 <strong>Console.ReadKey();</strong> 是针对 VS.NET 用户的。这使得程序会等待一个按键的动作，防止程序从 Visual Studio .NET 启动时屏幕会快速运行并关闭。</p>
</li>
</ul>
<h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>Namespace: 提供一种让一组名称与其他的分割开来的方式，在一个命名空间中生命的类的</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g. </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">      first_space.namespace_cl fc = <span class="keyword">new</span> first_space.namespace_cl();</span><br><span class="line">      second_space.namespace_cl sc = <span class="keyword">new</span> second_space.namespace_cl();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ============</span></span><br><span class="line"></span><br><span class="line">Inside first_space </span><br><span class="line">Inside second_space</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Using"><a href="#Using" class="headerlink" title="Using:"></a>Using:</h3><p>表明程序使用的是给定命名空间中的名称</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Using System;</span><br><span class="line">Console.Writeline(<span class="string">&quot;Hello there&quot;</span>);</span><br><span class="line"><span class="comment">// === 等价于</span></span><br><span class="line">  </span><br><span class="line">System.Console.Writeline(<span class="string">&quot;Hello there&quot;</span>);</span><br></pre></td></tr></table></figure>


<h3 id="Net-Framework"><a href="#Net-Framework" class="headerlink" title=".Net Framework"></a>.Net Framework</h3><p>.Net Framework 框架是.Net平台不可缺少的一部分，它提供了一个稳定的运行环境以来保证我们基于.net平台开发的各种应用能够正常的运转（一种平台一种技术）</p>
<ul>
<li>CLR （公共语言运行时）</li>
<li>.Net 类库</li>
</ul>
<h3 id="C-中-注释和-注释的区别"><a href="#C-中-注释和-注释的区别" class="headerlink" title="C# 中 // 注释和 /// 注释的区别"></a>C# 中 // 注释和 /// 注释的区别</h3><p><strong>///</strong> 会被编译， <strong>//</strong> 不会</p>
<p>所以使用 /// 会减慢编译的速度（但不会影响执行速度）</p>
<p>/// 会在其它的人调用你的代码时提供智能感知</p>
<p>/// 也是一种注释，但是这种注释主要有两种作用：</p>
<ul>
<li> 1.这些注释能够生成一个XML文件。这样呢,看起来会对程序的内容一目了然。</li>
<li> 2.以这种方式对你的类，属性，方法等等加上注释之后，当你在其他地方使用以这种方式加上的类，属性，方法等等地时候，黄色的提示框里面会把你写的注释显示出来，是你更加明白你要使用的功能的作用。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>定义用户姓名属性，该属性为可读可写属性</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>C# 编码的时候，常常涉及代码注释，常见的注释包括两类：</p>
<ul>
<li> 1）单行注释。格式：// Comments</li>
<li> 2）多行注释。格式：/* Comments… */</li>
</ul>
<p>C# 引入了新的 XML 注释，即我们在某个函数前新起一行，输入 ///，VS.Net 会自动增加XML格式的注释，这里整理一下可用的XML注释。 XML 注释分为一级注释（Primary Tags）和二级注释（Secondary Tags），前者可以单独存在，后者必须包含在一级注释内部。</p>
<h4 id="I-一级注释"><a href="#I-一级注释" class="headerlink" title="I 一级注释"></a><strong>I 一级注释</strong></h4><p>\1. &lt;remarks&gt;对类型进行描述，功能类似&lt;summary&gt;，据说建议使用&lt;remarks&gt;;<br>\2. &lt;summary&gt;对共有类型的类、方法、属性或字段进行注释；<br>\3. &lt;value&gt;主要用于属性的注释，表示属性的制的含义，可以配合&lt;summary&gt;使用；<br>\4. &lt;param&gt;用于对方法的参数进行说明，格式：&lt;param name=”param_name”&gt;value&lt;/param&gt;；<br>\5. &lt;returns&gt;用于定义方法的返回值，对于一个方法，输入///后，会自动添加&lt;summary&gt;、&lt;param&gt;列表和&lt;returns&gt;；<br>\6. &lt;exception&gt;定义可能抛出的异常，格式：&lt;exception cref=”IDNotFoundException”&gt;；<br>\7. &lt;example&gt;用于给出如何使用某个方法、属性或者字段的使用方法；<br>\8. &lt;permission&gt;涉及方法的访问许可；<br>\9. &lt;seealso&gt;用于参考某个其它的东东:)，也可以通过cref设置属性；<br>\10. &lt;include&gt;用于指示外部的XML注释；</p>
<h4 id="II-二级注释"><a href="#II-二级注释" class="headerlink" title="II 二级注释"></a><strong>II 二级注释</strong></h4><p>\1. &lt;c&gt; or &lt;code&gt;主要用于加入代码段；<br>\2. &lt;para&gt;的作用类似HTML中的&lt;p&gt;标记符，就是分段；<br>\3.&lt;pararef&gt;用于引用某个参数；<br>\4. &lt;see&gt;的作用类似&lt;seealso&gt;，可以指示其它的方法；<br>\5. &lt;list&gt;用于生成一个列表；<br>另外，还可以自定义XML标签 </p>
<h4 id="让C-智能注释时显示为换行"><a href="#让C-智能注释时显示为换行" class="headerlink" title="让C#智能注释时显示为换行"></a>让C#智能注释时显示为换行</h4><p>在C#智能注释时，常常希望它能在开发时显示为换行，使得提示更加友好！原来一直想怎么实现，今天偶然发现原来如此简单，只需将&lt;para&gt; 标记用于诸如 &lt;summary&gt;、&lt;remarks&gt; 或 &lt;returns&gt; 等标记内即可。</p>
<p>注释在开发时换行显示的办法</p>
<p>&lt;para&gt; 标记用于诸如 &lt;summary&gt;、&lt;remarks&gt; 或 &lt;returns&gt; 等标记内，使您得以将结构添加到文本中。 </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 基类（第1行） </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;para&gt;</span>说明：（第2行）<span class="doctag">&lt;/para&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;para&gt;</span>　　封装一些常用的成员（第3行）<span class="doctag">&lt;/para&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;para&gt;</span>　　前面要用全角空格才能显示出空格来（第4行）<span class="doctag">&lt;/para&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBase</span> </span><br><span class="line">&#123; </span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 构造函数（第1行） </span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;para&gt;</span>说明：（第2行）<span class="doctag">&lt;/para&gt;</span> </span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;para&gt;</span>　　初始化一些数据（第3行）<span class="doctag">&lt;/para&gt;</span> </span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">MyBase</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>      &#123; </span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> 在此处添加构造函数逻辑 </span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">       &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h3 id="region（C-参考）"><a href="#region（C-参考）" class="headerlink" title="#region（C# 参考）"></a>#<strong>region</strong>（<strong>C#</strong> 参考）</h3><p>#<strong>region</strong> 使您可以在使用Visual Studio 代码编辑器的大纲显示功能时指定可展开或折叠的代码块。 在较长的代码文件中，能够折叠或隐藏一个或多个区域会十分便利，这样，您可将精力集中于当前处理的文件部分。</p>
<h2 id="OOP编程"><a href="#OOP编程" class="headerlink" title="OOP编程"></a>OOP编程</h2><h3 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h3><ul>
<li><p>对象是OOP应用程序的组成部件。</p>
</li>
<li><p>类是用于实例化对象的类型定义。</p>
</li>
</ul>
<p>对象可以包含数据，提供其他代码可以使用的操作。数据可以通过属性供外部代码使用，操作可以通过方法供外部代码使用。</p>
<p>属性和方法都称为类的成员。属性可以进行读取访问、写入访问或读写访问。类成员可以是公共的（可用于所有代码）或私有的（只有类定义中的代码可以使用）。在.NET中，所有的东西都是对象</p>
<h3 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h3><ul>
<li>构造阶段： 第一次实例化一个对象时，需要初始化该对象。这个初始化过程称为构造阶段，由构造函数完成。</li>
<li>析构阶段： 在删除一个对象时，常常需要执行一些清理工作，例如释放内存，这由析构函数完成。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">CupOfCoffee myCup = <span class="keyword">new</span> CupOfCoffee();</span><br><span class="line">CupOfCoffee myCup = <span class="keyword">new</span> CupOfCoffee(<span class="string">&quot;Blue Mountain&quot;</span>);</span><br></pre></td></tr></table></figure>


<h3 id="静态成员和实例类成员"><a href="#静态成员和实例类成员" class="headerlink" title="静态成员和实例类成员"></a>静态成员和实例类成员</h3><ul>
<li>静态构造函数<ul>
<li>使用类中的静态成员时，需要预先初始化这些成员。在声明时，可以给静态成员提供一个初始值，但有时需要执行更复杂的初始化操作，或者在赋值、执行静态方法之前执行某些操作。</li>
</ul>
</li>
</ul>
<p>实例成员只能在类的对象实例上使用，静态成员只能直接通过类定义使用，它不与实例关联</p>
<h2 id="C-中的static的用法"><a href="#C-中的static的用法" class="headerlink" title="C# 中的static的用法"></a>C# 中的static的用法</h2><h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h3><p>定义：在全局变量前，加上关键字 <code>static</code> 该变量就被定义成为了一个静态全局变量。</p>
<p>特点：<br>　　A、该变量在全局数据区==<strong>分配内存</strong>==。<br>　　B、初始化：如果不显式初始化，那么将被==隐式初始化为0==。</p>
<h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><p>定义：在局部变量前加上<code>static</code>关键字时，就定义了静态局部变量。</p>
<p>特点：<br>　　A、该变量在全局数据区分配内存。<br>　　B、初始化：如果不显式初始化，那么将被隐式初始化为0。<br>　　C、它<strong>始终驻留在全局数据区</strong>，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。</p>
<h3 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h3><p>特点：<br>　　A、内存分配：在程序的全局数据区分配。<br>　　B、初始化和定义：<br>　　　 a、静态数据成员定义时要分配空间，所以不能在类声明中定义。<br>　　　 b、为了避免在多个使用该类的源文件中，对其重复定义，所以，不能在类的头文件中定义。<br>　　　 c、静态数据成员因为程序一开始运行就必需存在，所以其初始化的最佳位置在类的内部实现。<br>　　C、特点<br>　　　 a、对相于 <code>public,protected,private</code> 关键字的影响它和普通数据成员一样，<br>　　　 b、因为其空间在全局数据区分配，属于所有本类的对象共享，所以，它不属于特定的类对象，在没产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作它。<br>　　D、访问形式<br>　　　 a、 类对象名.静态数据成员名<br>　　E、静态数据成员，主要用在类的所有实例都拥有的属性上。比如，对于一个存款类，帐号相对于每个实例都是不同的，但每个实例的利息是相同的。所以，应该把利息设为存款类的静态数据成员。这有两个好处，第一，不管定义多少个存款类对象，利息数据成员都共享分配在全局区的内存，所以节省存贮空间。第二，一旦利息需要改变时，只要改变一次，则所有存款类对象的利息全改变过来了，因为它们实际上是共用一个东西。</p>
<h3 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h3><p>特点：<br>　　A、静态成员函数与类相联系，不与类的对象相联系。<br>　　B、静态成员函数不能访问非静态数据成员。原因很简单，非静态数据成员属于特定的类实例。<br>作用：<br>　　主要用于对静态数据成员的操作。</p>
<p>调用形式：<br>　　类对象名.静态成员函数名（）</p>
<h3 id="static静态变量的实例与分析"><a href="#static静态变量的实例与分析" class="headerlink" title="static静态变量的实例与分析"></a>static静态变量的实例与分析</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">class1</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">static</span> <span class="built_in">int</span> i = getNum();</span><br><span class="line">       <span class="built_in">int</span> j = getNum();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> num;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">&quot;i=&#123;0&#125;&quot;</span>,i);</span><br><span class="line">           Console.WriteLine(<span class="string">&quot;j=&#123;0&#125;&quot;</span>, <span class="keyword">new</span> class1().j);</span><br><span class="line">           Console.Read();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>分析：<code>Console.WriteLine(&quot;i=&#123;0&#125;&quot;,i);</code>这里<code>i</code>是<code>static</code>变量，而且类<code>class1</code>是第一次被引 用，要先为<code>class1</code>里面所有的<code>static</code>变量分配内存。尽管现在有超线程技术，但是指令在逻辑还是一条一条的按顺序执行的，所以先为<code>static int i</code>分配内存，并且在该内存中保持<code>int</code>的缺省值<code>0</code>，接着再为<code>static int num</code> 变量分配内存，值当然也为<code>0</code>。</p>
<p>然后执行第二步，为变量赋值：先为<code>static int i</code>变量赋值，<code>i＝getNum（）</code>，看<code>getNum</code>里面的代码，就是<code>return num</code>，这个时候<code>num</code>的值是<code>0</code>，于是<code>i</code>就为<code>0</code>了。然后对变量<code>num</code>赋值，<code>num＝1；</code>这行代码执行后，<code>num</code>就为<code>1</code>了。</p>
<p>所以最后的结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i＝0 j＝11</span><br></pre></td></tr></table></figure>
<p><strong>当以一次引用类的时候，会对类中的静态变量先按顺序进行分配内存空间，当全部分配完内存空间之后，在对静态变量按顺序赋值。</strong></p>
<h3 id="static的优点是什么？为什么要使用static-变量或函数？？"><a href="#static的优点是什么？为什么要使用static-变量或函数？？" class="headerlink" title="static的优点是什么？为什么要使用static 变量或函数？？"></a>static的优点是什么？为什么要使用static 变量或函数？？</h3><p>有一些频繁使用的东西，如果你每次使用都重新<code>new</code>一下，那么这个开销可能会很高，如果使用<code>static</code>，一直放在内存中，那么想用就直接用，而不需要重新<code>new</code>一块空间初始化数据。那么<code>static</code>就是为了实现一个系统的缓存作用的，其生命周期直到应用程序退出结束。</p>
<p><strong>静态成员包括静态字段和静态属性，静态成员和类相关联，不依赖于对象而存在，只能由类访问，而不能由对象访问；</strong></p>
<p>静态成员属于类所有，无认创建多少实例对象，静态成员在内存中只有一份；实例成员属于类的实例所有，每创建一个实例对象，实例成员都会在内存中分配一块内存区域。<br>所以静态成员一般用于存放共享的数据段，如数据库连接字符串等。</p>
<p>一个类如果只包含静态成员和静态方法，则该类可以定义为静态类，给类加上<code>static</code>修饰符；</p>
<h3 id="静态方法和非静态方法："><a href="#静态方法和非静态方法：" class="headerlink" title="静态方法和非静态方法："></a>静态方法和非静态方法：</h3><p>一、性能上：静态方法和实例方法差别不大。所有方法，不管是静态方法还是实例方法，都是在JIT加载类时分配内存，不同的是静态方法以类名引用，而实例方法对对象实例引用。创建实例时，不会再为类的方法分配内存，所有的实例对象共用一个类的方法代码。因此静态方法和实例方法的调用，在性能上的差别微乎其微。</p>
<p>二、静态方法只能由类访问；实例方法只能由对象访问。</p>
<blockquote>
<p>优点：<br><strong>1，静态变量在类载入时，就装入内存</strong><br><strong>2，使用时不用 New 就意味的不必 创建类中 所有对象，就可以调用 某个方法</strong></p>
<p>缺点：<br><strong>1，垃圾回收机制 不能 回收 静态变量，静态类变量 会常驻内存</strong></p>
</blockquote>
<hr>
<h3 id="c-中静态类的优缺点"><a href="#c-中静态类的优缺点" class="headerlink" title="c#中静态类的优缺点"></a>c#中静态类的优缺点</h3><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><blockquote>
<p>1、整个类型在程序运行期间只加载一次。 这样是对于那些经常使用的类型来说的，那就不用每次使用前都先加载。效率高些。但是对那些不常用的类型来说。<br>2、<strong>如果是静态类型，那就要一直占用相当的内存；一直到程序停止。或者应用程序域被卸载。所以应该只对那些常用的类型定义成静态类型。</strong></p>
</blockquote>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><blockquote>
<p>1、它们仅包含静态成员。<br>2、它们不能被实例化。<br>3、它们是密封的。<br>4、它们不能包含实例构造函数（C# 编程指南）。</p>
</blockquote>
<p>因此创建静态类与创建仅包含静态成员和私有构造函数的类大致一样。私有构造函数阻止类被实例化。</p>
<p>使用静态类的优点在于，编译器能够执行检查以确保不致偶然地添加实例成员。编译器将保证不会创建此类的实利。</p>
<p>静态类是密封的，因此不可被继承。静态类不能包含构造函数，但仍可声明静态构造函数以分配初始值或设置某个静态状态。</p>
<h3 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C# 类定义"></a>C# 类定义</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210317102344.png" alt="image-20210317102344473"></p>
<h3 id="Visual-Studio-中的OOP工具"><a href="#Visual-Studio-中的OOP工具" class="headerlink" title="Visual Studio 中的OOP工具"></a>Visual Studio 中的OOP工具</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210317112950.png" alt="image-20210317112950037"></p>
<h2 id="定义类成员"><a href="#定义类成员" class="headerlink" title="定义类成员"></a>定义类成员</h2><ul>
<li>public——成员可以由任何代码访问。</li>
<li>private——成员只能由类中的代码访问（如果没有使用任何关键字，就默认使用这个关键字）。</li>
<li>internal——成员只能由定义它的程序集（项目）内部的代码访问。</li>
<li>protected——成员只能由类或派生类中的代码访问。</li>
</ul>
<h2 id="C-网页web开发-ASP-NET"><a href="#C-网页web开发-ASP-NET" class="headerlink" title="C#网页web开发(ASP.NET)"></a>C#网页web开发(ASP.NET)</h2><ul>
<li><p>C/S（Client/Server）结构：</p>
<p>即大家熟知的客户机和服务器结构，在特定的应用中无论是Client端还是Server端都需要特定的软件支持。一般就是那种需要下载不同版本的安装包，在PC机安装，比如：QQ，360安全卫士等。</p>
</li>
<li><p>B/S（Browser/Server）结构：</p>
<p>即浏览器和服务器结构，在这种结构下，用户工作界面是通过www浏览器来实现，极少部分事物逻辑在前端实现，主要事物逻辑在服务器端实现，比如我们的网站，网络办公等。</p>
</li>
</ul>
<p>==预备知识：==</p>
<p>ASP.NET并不是一门编程语言，而是一个统一的Web开发模型，她支持可视化的方式创建企业级网站，ASP.NET是.NET Framework的一部分，在ASP.NET中可以利用.NET Framework中的类进行编程，在ASP.NET 中可以用VB.NET、C#、JScript.NET等编程语言来开发web应用程序。    </p>
<p><strong>WebApplication:</strong> (Web应用程序)是新的网站类型，但是在WebSite（网站)下代码不分命名空间，不利于工程化开发，CS代码修改后不需要重启，代码出错不易察觉，但是可以把WebSite程序转化为WebApplication,在WebSite上点击右键可以有转化为WebApplication的功能，记住，要想调试必须是在Debug的模式下才会有断点生效，并且F12转到定义，然后可以跟进和步过，调试是开发的关键,Session是针对不同的浏览器进程相关，Application是针对所有的应用程序相关，&lt;%  中间包含C#代码在HTML里面 %&gt;  &lt;%=中间放动态的表达式%&gt;</p>
<p><strong>静态网页</strong>：就是服务器向浏览器发送单纯的Html语言（只包含具有在客户端执行的代码），速度很快，但是维护不方便</p>
<p><strong>动态网页</strong>：包含有在Web服务器端执行的代码，然后就是把这一堆都发送给浏览器，又因为浏览器只认识html（还有js脚本等）,所以只能解析html，是在服务器动态组成html</p>
<p><strong>名词解释</strong>：<br><strong>IIS</strong>： Internet information server</p>
<p><strong>CGI</strong>: common Getway interface,通用网关接口</p>
<p><strong>CGI</strong>（Computer Graphics Interface) 计算机图形接口标准</p>
<p>==1. 解释一种错误的认识==<br>其实在空间里拉过来的控件是完全一样的，就是在自己写的html的内容，因为服务器端的语言是asp的语言，要经过服务器解析为html,所以这里的使用方式和html是完全一样的，这里面的Botton和你托的控件是完全一样的，而浏览器只认html,和脚本，这里只是要翻译而已，这里明确的就是可以完全按照html的语法进行写，在一般的控件后的属性只要加个<input  id = "abc" type ="button" runat = "server"> 这样就是说明为服务器语言，</p>
<p><strong>asp语言的是解释性的语言（脚本）</strong>，不利于工程化开发,只有运行到该页的时候才报错，使用webApplication和webSite修改的aspx都不需要重启、大规模的网站一般使用webApplication，并且在VS里还有个在网站上点击右键，有使website转换为webApplication的功能</p>
<p>==2. 简单的服务器-浏览器交互模式：==</p>
<p>1.提交到服务器的表单元素一定要有name属性，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;Text1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;UserName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;Submit1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.提交页面的制作过程为：在网站下添加新项-&gt;添加一般应用程序-&gt;.ashx页面的出现-&gt;ProcessRequest事件里写代码 ProcessRequest事件是对所有的Http请求做的处理，</p>
<blockquote>
<p>服务器和浏览器的交互要有三个阶段，请求-&gt;处理-&gt;响应</p>
</blockquote>
<p>3.首先再建立一个html页面，在你想要提交的表单里添加 name属性啊，在form的action=”aaa.aspx”;就是要提交请求的页面，也可以的任意.aspx页面，在不是使用type = “submit”属性提交的情况下<br>可以使用 在form里添加 runat = “server” 并且  form 的 id = “form1” οnclick=”document.getElementById(‘form1’).submit()” type = “button” 使button的样子也可以提交表单，呵呵</p>
<p>4.在ProcessRequst事件中具体的方法是，先判断是否是由表单提交过来的，简单的方法就是在form里建立一个<input type = "hidden" value ="true" name = "ispostback"> 就是一个隐藏的控件，在浏览器端不可见，呵呵，为的就是看看是否是由本页提交过来的；</p>
<p>5.先获取该字段用 string ispostback = context.Request[“ispostback”];<br>再用if判断就行了，几个常用的方法有：</p>
<p>string 模版全路径 = context.Server.MapPath(“moban.htm”);</p>
<p>string content = System.IO.File.ReadAllText(模版全路径); //因为这里本来就是字符串了，所以就<br>//不用再加双引号了哈</p>
<p>content.Replace(“@num”,number);//表示将本地模版的num的值变为number，现在还没有写回去，在这里的content是获得本地一个相同模版的全路径下的所有文本内容，则会使下面的替换成为可能，步骤是先将读取的本地模版字符串信息里的@变量替换为需要的字符串，然后再用context.Response.Write(content);将修改后的信息的完整页面写回请求页面</p>
<p>string fullpath = context.Server.MapPath(“aaa.htm”); //获得文件全路径</p>
<p>string content = System.IO.File.ReadAllText(fullpath); //读取文件路径下的文件内容</p>
<p>context.Response.Write(content);//向页面写东西，也可以理解为响应</p>
<p>content = content.Replace(“@value”,number); //用number的值替换@value<br>注意是在html 中有 &lt; input type = “text” value = “@value”&gt;的前提下</p>
<p>具体代码如下：<br>    在.ashx的页面：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&lt;%@ WebHandler Language=<span class="string">&quot;C#&quot;</span> Class=<span class="string">&quot;IncValue1&quot;</span> %&gt;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IncValue1</span> : <span class="title">IHttpHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span> (<span class="params">HttpContext context</span>)</span> &#123;</span><br><span class="line">    context.Response.ContentType = <span class="string">&quot;text/html&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> ispostback = context.Request[<span class="string">&quot;ispostback&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> number = context.Request[<span class="string">&quot;number&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (ispostback == <span class="string">&quot;true&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">int</span> i = Convert.ToInt32(number);</span><br><span class="line"></span><br><span class="line">      i++;</span><br><span class="line">      number = i.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      number = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> fullpath = context.Server.MapPath(<span class="string">&quot;IncValue1.htm&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> content = System.IO.File.ReadAllText(fullpath);</span><br><span class="line"></span><br><span class="line">    content = content.Replace(<span class="string">&quot;@value&quot;</span>,number);</span><br><span class="line"></span><br><span class="line">    context.Response.Write(content);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">bool</span> IsReusable &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>在html中的页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--要记住的是，在表单里面只有key和value能提交到服务器，这里的Key就是name,这里的value就是Value,就是说在页面上的数据必须设置name和value属性，才能交给服务器，呵呵--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> =<span class="string">&quot;IncValue1.ashx&quot;</span> <span class="attr">id</span> = <span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;hidden&quot;</span> <span class="attr">value</span> =<span class="string">&quot;true&quot;</span> <span class="attr">name</span> =<span class="string">&quot;ispostback&quot;</span> /&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;Text1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span> = <span class="string">&quot;@value&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;Submit1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;自增&quot;</span> <span class="attr">onclick</span> =<span class="string">&quot;document.getElementById(&#x27;form1&#x27;).submit()&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 如果是type = &quot;button&quot; ,则不会自动提交表单，需要自己写代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="C-Instance"><a href="#C-Instance" class="headerlink" title="C# Instance"></a>C# Instance</h3><p><a class="link"   href="https://hackernoon.com/c-static-vs-instance-classes-and-methods-50fe8987b231" >https://hackernoon.com/c-static-vs-instance-classes-and-methods-50fe8987b231<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><ul>
<li>Non-static (“regular”) classes can be instantiated.</li>
<li>Static classes cannot be instantiated.</li>
<li>Non-static classes can have instance methods <em>and</em> static methods.</li>
<li>Static classes can only have static methods.</li>
<li>Instance methods must be called on the instances of the class, not the class itself.</li>
<li>Static methods must be called on the class itself, not on the instances of the class.</li>
</ul>
<h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p><strong>Static vs Non-Static Classes and Static vs Instance Methods</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Static Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">exampleStaticClass</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">// Static Method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">exampleStaticMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>static keywords differentiates it from an instance method or class</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Class </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">exampleClass</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">// Instance Method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> instance <span class="built_in">int</span> <span class="title">exampleInstanceMethod</span> (<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Classes are always classes that can be instantiated (non-static) unless specified to be static classes.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Defining the (non-static) class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">exampleClass</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">// Creating an instance of the class</span></span><br><span class="line">exampleClass myNewInstance = <span class="keyword">new</span> exampleClass();</span><br></pre></td></tr></table></figure>


<h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><p>Methods that are declared using the static keyword will allow you to call that method onto a static class itself, versus onto the <em>instance</em> of a class.</p>
<p>if your method was declared using the instance keyword you would be able to apply that method to <em>only</em> instantiated objects of that class and not onto the class itself.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declaring a static class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">exampleStaticClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Declaring a static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> str <span class="title">exampleStaticMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Static Methods are allowed in static classes.&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declaring a instance method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> str <span class="title">exampleInstanceMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Instance Methods are not allowed in static classes&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Calling the methods on the class.</span></span><br><span class="line">exampleStaticClass.exampleStaticMethod(); <span class="comment">// Would work</span></span><br><span class="line">exampleStaticClass.exampleInstanceMethod(); <span class="comment">// Would not work</span></span><br></pre></td></tr></table></figure>
<p>Not only that, but while non-static classes may contain both static and instance methods, static classes are <em>only</em> allowed to have static methods.</p>
<p>However, those static methods inside the instance class can not be called on the instance but only on the class itself.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declaring a (non-static) class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">exampleClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Declaring a static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> str <span class="title">exampleStaticMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Static Methods are allowed in both non-static and static classes.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Declaring a instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> str <span class="title">exampleInstanceMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Instance Methods are allowed only in non-static classes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Creating an instance of the class</span></span><br><span class="line">exampleClass myNewInstance = <span class="keyword">new</span> exampleClass();</span><br><span class="line"><span class="comment">// Calling the methods on the instance of the class.</span></span><br><span class="line">myNewInstance.exampleInstanceMethod(); <span class="comment">// Would work</span></span><br><span class="line">myNewInstance.exampleStaticMethod(); <span class="comment">// Would not work</span></span><br><span class="line"><span class="comment">// Calling the static method on the instance class itself (not the instance of the class but the class itself)</span></span><br><span class="line">exampleClass.exampleStaticMethod(); <span class="comment">// Would work</span></span><br></pre></td></tr></table></figure>


<h2 id="C-知识图谱大全"><a href="#C-知识图谱大全" class="headerlink" title="C#知识图谱大全"></a>C#知识图谱大全</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210320093707.png" alt="C#语法知识1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210320093715.png" alt="C#语法知识2"></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C# dotnet的基础面试题</title>
    <url>/2021/03/19/2021-03-19-Csharp-dotnet-%E7%9A%84%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p><strong>最近，整理了一份 c#、.net 基础面试题，其中多少引用了前辈们写的，也加了自己的理解。不对的地方，还请大家多多指正，共同进步，非常感谢！</strong></p>
<p><strong>如有侵权请私信我。</strong><a class="link" href="https://zhuanlan.zhihu.com/p/355257871">https://zhuanlan.zhihu.com/p/355257871<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<p><strong><em>题目概要</em></strong></p>
<p><strong>1、ASP.NET页面之间传值方式？</strong></p>
<p><strong>2、如何理解装箱和拆箱？</strong></p>
<p><strong>3、C#中什么是值类型与引用类型？</strong></p>
<p><strong>4、请详述在C#中类(class)与结构(struct)的异同？</strong></p>
<p><strong>5、virtual 和 abstract</strong></p>
<p><strong>6、简述 private、 protected、 public、 internal 修饰符的访问权限。</strong></p>
<p><strong>7、C#中堆和栈的区别？ 值类型 栈 引用类型 堆</strong></p>
<p><strong>8、在ASP.NET中所有的自定义用户控件都必须继承自？</strong></p>
<p><strong>10、GC（Garbage Collection）</strong></p>
<p><strong>11、CLR（Common Language Runtime）</strong></p>
<p><strong>12、静态构造函数</strong></p>
<p><strong>13、文件I/O</strong></p>
<p><strong>14、序列化与反序列化</strong></p>
<p><strong>15、线程同步</strong></p>
<p><strong>16、C#中 abstract class和interface有什么区别?</strong></p>
<p><strong>17、using关键字的使用场景</strong></p>
<p><strong>18、new关键字的使用场景</strong></p>
<p><strong>19、委托与事件</strong></p>
<p><strong>20、重载(overload)与重写(override)的区别</strong></p>
<p><strong>21、return执行顺序</strong></p>
<p><strong>22、switch(expression)</strong></p>
<p><strong>23、反射Reflection</strong></p>
<p><strong>24、property与attribute的区别</strong></p>
<p><strong>25、（Class）和实例（Instance）</strong></p>
<p><strong>26、类和类的实例有什么区别？</strong></p>
<p><strong>27、C# 中static关键字的作用？</strong></p>
<p><strong>28、C# 成员变量和成员函数前加static的作用？</strong></p>
<p><strong>29、文件编码格式</strong></p>
<p><strong>30、值传递与引用传递解释？</strong></p>
<p><strong>31、参数传递 ref 与 out 的区别</strong></p>
<p><strong>32、什么是内存泄漏？</strong></p>
<p><strong>33、跨域</strong></p>
<p><strong>34、ORM中的延迟加载与直接加载有什么异同？</strong></p>
<p><strong>35、简述Func与Action的区别？</strong></p>
<p><strong>36、能用foreach遍历访问的对象的要求？</strong></p>
<p><strong>37、什么是泛型？</strong></p>
<p><strong>38、Final</strong></p>
<p><strong>39、数据库操作的相关类</strong></p>
<p><strong>40、<a class="link" href="https://link.zhihu.com/?target=http://ADO.NET">http://ADO.NET<i class="fas fa-external-link-alt"></i></a> 五大对象</strong></p>
<p><strong>41、C# DataTable和DataSet 区别？</strong></p>
<p><strong>42、索引器（Indexers）</strong></p>
<p><strong>43、POST和GET深入理解</strong></p>
<p><strong>44、C#中用sealed修饰的类有什么特点？</strong></p>
<p><strong>45、string和StringBuilder的区别,两者性能的比较？</strong></p>
<p><strong>46、什么是扩展方法？</strong></p>
<p><strong>47、C#可否对内存直接操作</strong></p>
<p><strong>48、&amp;和&amp;&amp;区别</strong></p>
<p><strong>49、as和is的区别</strong></p>
<p><strong>50、什么是匿名类，有什么好处？</strong></p>
<p><strong>51、什么是虚函数？什么是抽象函数？</strong></p>
<p><strong>52、什么是托管和非托管？</strong></p>
<p><strong>53、Lambda表达式？</strong></p>
<p><strong>54、如何提高.NET的性能 ？</strong></p>
<p><strong>55、EF</strong></p>
<p><strong>56、如何解决数据并发问题？</strong></p>
<p><strong>57、浅克隆与深克隆（浅拷贝与深拷贝）</strong></p>
<p><strong>58、.NET、C#和<a class="link" href="https://link.zhihu.com/?target=http://ASP.NET">http://ASP.NET<i class="fas fa-external-link-alt"></i></a>，<a class="link" href="https://link.zhihu.com/?target=http://ASP.NET">http://ASP.NET<i class="fas fa-external-link-alt"></i></a> MVC 四者之间的区别</strong></p>
<p><strong>59、MVC 和三层框架区别</strong></p>
<p><strong>60、MVC 和三层框架区别 详细解释</strong></p>
<p><strong>61、高内聚，低耦合。</strong></p>
<p><strong>62、什么是WebService?</strong></p>
<p><strong>63、什么是Web API？</strong></p>
<p><strong>64、Web Service与Web API的关系？</strong></p>
<p><strong>65、前后端分离</strong></p>
<hr>
<h3 id="1、ASP-NET页面之间传值方式？"><a href="#1、ASP-NET页面之间传值方式？" class="headerlink" title="1、ASP.NET页面之间传值方式？"></a><strong>1、ASP.NET页面之间传值方式？</strong></h3><ul>
<li><p>Request.QueryString[“name”]</p>
</li>
<li><p>Request.Form(“name”)</p>
</li>
<li><p>Session</p>
</li>
<li><p>Cookie</p>
</li>
<li><p>Cache</p>
</li>
<li><p>Application</p>
</li>
<li><p>Server.Transfer</p>
</li>
<li><p>Database</p>
</li>
<li><p>HttpContext</p>
</li>
</ul>
<h3 id="2、如何理解装箱和拆箱？"><a href="#2、如何理解装箱和拆箱？" class="headerlink" title="2、如何理解装箱和拆箱？"></a><strong>2、如何理解装箱和拆箱？</strong></h3><p>当一个值类型转换为对象类型时，则被称为 <strong>装箱</strong>；==(值-&gt;对象)==</p>
<p>另一方面，当一个对象类型转换为值类型时，则被称为 <strong>拆箱</strong>。==（对象-&gt;值）==</p>
<p><strong>C#显式转换和隐式转换？</strong></p>
<p>类型转换从根本上说是类型铸造，或者说是把数据从一种类型转换为另一种类型。</p>
<p>在 C# 中，类型铸造有两种形式：</p>
<ul>
<li><strong>隐式类型转换 - 这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。</strong></li>
<li><strong>显式类型转换 - 显式类型转换，即强制类型转换。显式转换需要强制转换运算符，而且强制转换会造成数据丢失。</strong></li>
</ul>
<p><strong>装、拆过程详解</strong>：</p>
<p>装箱：对值类型在堆中分配一个对象实例，并将该值复制到新的对象中。</p>
<p>（1）第一步：新分配托管堆内存(大小为值类型实例大小加上一个方法表指针。</p>
<p>（2）第二步：将值类型的实例字段拷贝到新分配的内存中。</p>
<p>（3）第三步：返回托管堆中新分配对象的地址。这个地址就是一个指向对象的引用了。</p>
<p>拆箱：检查对象实例，确保它是给定值类型的一个装箱值。将该值从实例复制到值类型变量中。</p>
<p>在装箱时是不需要显式的类型转换的，不过拆箱需要显式的类型转换。</p>
<h3 id="3、C-中什么是值类型与引用类型？"><a href="#3、C-中什么是值类型与引用类型？" class="headerlink" title="3、C#中什么是值类型与引用类型？"></a><strong>3、C#中什么是值类型与引用类型？</strong></h3><p><strong>值类型</strong>：struct、enum、int、float、char、bool、decimal</p>
<p><strong>引用类型</strong>：class、delegate、interface、array、object、string</p>
<h3 id="4、请详述在C-中类-class-与结构-struct-的异同？"><a href="#4、请详述在C-中类-class-与结构-struct-的异同？" class="headerlink" title="4、请详述在C#中类(class)与结构(struct)的异同？"></a><strong>4、请详述在C#中类(class)与结构(struct)的异同？</strong></h3><p><strong>class：</strong>可以被实例化,属于引用类型，</p>
<p><strong>可以实现接口和单继承其他类，还可以作为基类型，</strong></p>
<p>分配在内存的<strong>堆</strong>上的。</p>
<p><strong>堆（heap）</strong>也被称为优先队列，队列中允许的操作是 <strong>先进先出</strong>（FIFO），在队尾插入元素，在队头取出元素。而堆也是一样，在堆底插入元素，在堆顶取出元素。二叉树的衍生，有最小堆最大堆的两个概念，将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210322213445.jpg" alt="img"></p>
<p><strong>struct：</strong>属于值类型,</p>
<p>不能作为基类型，但<strong>是可以实现接口，</strong></p>
<p>不能声明默认构造函数，</p>
<p>分配在内存的<strong>栈</strong>上的。</p>
<p>栈（Stack）又名堆栈，作为一个 <strong>先进后出</strong> 的数据结构。（<strong>注意：这里的堆栈本身就是栈，只是换了个抽象的名字</strong>。）<br>它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210322213421.jpg" alt="img"></p>
<p>另外补充一个和堆栈比较相关的概念——队列</p>
<img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210322214015.jpg" alt="img" style="zoom:50%;">



<ul>
<li>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</li>
<li>队列采用 <strong>先进先出</strong> FIFO(first  in first  out)，新元素（等待进入队列的元素）总是被插入到链表的尾部，而读取的时候总是从链表的头部开始读取。每次读取一个元素，释放一个元素。所谓的动态创建，动态释放。因而也不存在溢出等问题。由于链表由结构体间接而成，遍历也方便。</li>
</ul>
<h3 id="5、virtual-和-abstract"><a href="#5、virtual-和-abstract" class="headerlink" title="5、virtual 和 abstract"></a><strong>5、virtual 和 abstract</strong></h3><p>virtual和abstract都是用来修饰<strong>父类的</strong>，通过覆盖父类的定义，让子类重新定义。</p>
<h3 id="6、简述-private、-protected、-public、-internal-修饰符的访问权限。"><a href="#6、简述-private、-protected、-public、-internal-修饰符的访问权限。" class="headerlink" title="6、简述 private、 protected、 public、 internal 修饰符的访问权限。"></a><strong>6、简述 private、 protected、 public、 internal 修饰符的访问权限。</strong></h3><p><strong>private</strong> : 私有成员, 在类的内部才可以访问 ，也就是类内部的函数等成员可以访问。</p>
<p><strong>protected</strong> : 保护成员，该类内部和继承类中可以访问。</p>
<p><strong>public</strong> : 公共成员，完全公开，没有访问限制。</p>
<p><strong>internal</strong>: 当前程序集内可以访问。</p>
<p><strong>精简回答：</strong></p>
<p>（1）public 公有访问，不受任何限制。</p>
<p>（2）private 私有访问，只限于本类成员访问。</p>
<p>（3）protected 保护访问，<strong>只限于本类和子类访问。</strong></p>
<p>（4）internal 内部访问，只限于当前程序集内访问。</p>
<h3 id="7、C-中堆和栈的区别？-值类型-栈-引用类型-堆-上学的时候常常讲"><a href="#7、C-中堆和栈的区别？-值类型-栈-引用类型-堆-上学的时候常常讲" class="headerlink" title="7、C#中堆和栈的区别？ 值类型 栈 引用类型 堆 上学的时候常常讲"></a><strong>7、C#中堆和栈的区别？</strong> 值类型 栈 引用类型 堆 上学的时候常常讲</h3><p><strong>栈：</strong>由编译器自动分配、释放。在函数体中定义的变量通常在栈上。</p>
<p>堆：一般由程序员分配释放。用 new、malloc等分配内存函数分配得到的就是在堆上。</p>
<p>存放在栈中时要管存储顺序，保持着<strong>先进后出</strong>的原则，他是一片连续的内存域，有系统自动分配和维护；</p>
<p><strong>堆：</strong>是无序的，他是一片不连续的内存域，有用户自己来控制和释放，如果用户自己不释放的话，当内存达到一定的特定值时，通过垃圾回收器(GC)来回收。</p>
<p>栈内存无需我们管理，也不受GC管理。当栈顶元素使用完毕，立马释放。而堆则需要GC清理。</p>
<p><strong>补充</strong>：使用引用类型的时候，一般是对指针进行的操作而非引用类型对象本身。但是值类型则操作其本身</p>
<h3 id="8、在ASP-NET中所有的自定义用户控件都必须继承自？"><a href="#8、在ASP-NET中所有的自定义用户控件都必须继承自？" class="headerlink" title="8、在ASP.NET中所有的自定义用户控件都必须继承自？"></a><strong>8、在ASP.NET中所有的自定义用户控件都必须继承自？</strong></h3><p>Control类</p>
<h3 id="9、在-NET托管代码总我们不必担心内存泄漏，这是因为有了？"><a href="#9、在-NET托管代码总我们不必担心内存泄漏，这是因为有了？" class="headerlink" title="9、在.NET托管代码总我们不必担心内存泄漏，这是因为有了？"></a><strong>9、在.NET托管代码总我们不必担心内存泄漏，这是因为有了？</strong></h3><p>GC 垃圾收集器。</p>
<h3 id="10、GC（Garbage-Collection）"><a href="#10、GC（Garbage-Collection）" class="headerlink" title="10、GC（Garbage Collection）"></a><strong>10、GC（Garbage Collection）</strong></h3><p>当程序需要更多的堆空间时，GC需要进行垃圾清理工作，暂停所有线程，找出所有无被引用的对象，进行清理，并通知栈中的指针重新指向地址排序后的对象。</p>
<p>GC只能处理 <strong>托管内存资源</strong> 的释放，对于 <strong>非托管资源则</strong> 不能使用GC进行回收，必须由程序员<strong>手动回收</strong>。</p>
<p>例如FileStream或SqlConnection需要调用Dispose进行资源的回收。</p>
<p><strong>精简：</strong></p>
<p>GC,垃圾回收器，用于自动回收托管堆中无效对象的内存，释放内存空间。</p>
<h3 id="11、CLR（Common-Language-Runtime）"><a href="#11、CLR（Common-Language-Runtime）" class="headerlink" title="11、CLR（Common Language Runtime）"></a><strong>11、CLR（Common Language Runtime）</strong></h3><p>公共语言运行库，负责资源管理（包括内存分配、程序及加载、异常处理、线程同步、垃圾回收等），并保证应用和底层操作系统的分离。</p>
<h3 id="12、静态构造函数"><a href="#12、静态构造函数" class="headerlink" title="12、静态构造函数"></a><strong>12、静态构造函数</strong></h3><p>最先被执行的构造函数，且在一个类里只允许有一个无参的静态构造函数</p>
<p>执行顺序：静态变量&gt;静态构造函数&gt;实例变量&gt;实例构造函数</p>
<h3 id="13、文件I-O"><a href="#13、文件I-O" class="headerlink" title="13、文件I/O"></a><strong>13、文件I/O</strong></h3><p>通过流的方式对文件进行读写操作</p>
<p>（1）FileStream</p>
<p>（2）StreamReader/StreamWriter</p>
<h3 id="14、序列化与反序列化"><a href="#14、序列化与反序列化" class="headerlink" title="14、序列化与反序列化"></a><strong>14、序列化与反序列化</strong></h3><p>序列化：将对<strong>象状态转换为可保持或传输的格式的过程</strong>。将对象实例的字段及类的名称转换成字节流，然后把字节流写入数据流</p>
<p>反序列化：将流转换为对象。</p>
<p>这两个过程结合起来，可以轻松地存储和传输数据。</p>
<h3 id="15、线程同步"><a href="#15、线程同步" class="headerlink" title="15、线程同步"></a><strong>15、线程同步</strong></h3><p>（1）方法一：阻塞（调用Sleep()或Join()）</p>
<p>（2）方法二：加互斥锁lock</p>
<p>（3）方法三：信号和句柄（AutoResetEvent/ManualResetEvent，调用Set()和WaitOne()）</p>
<h3 id="16、C-中-abstract-class和interface有什么区别"><a href="#16、C-中-abstract-class和interface有什么区别" class="headerlink" title="16、C#中 abstract class和interface有什么区别?"></a><strong>16、C#中 abstract class和interface有什么区别?</strong></h3><p>相同点：</p>
<p>（1）都可以被继承</p>
<p>（2）都不能被实例化</p>
<p>（3）都可以包含方法的声明</p>
<p>不同点：</p>
<p>（1）抽象类被子类继承；接口被类实现</p>
<p>（2）抽象类只能被单个类继承；接口可继承接口，并可多继承接口</p>
<p>（3）抽象基类可以定义字段、属性、方法实现；接口只能定义属性、索引器、事件、和方法声明，不能包含字段</p>
<p>（4）抽象类可以做方法声明，也可做方法实现；接口只能做方法声明</p>
<p>（5）<strong>具体派生类</strong>必须<strong>覆盖(override)**抽象基类的</strong>抽象方法**；派生类必须实现接口的所有方法</p>
<p>（6）抽象类是一个不完整的类，需要进一步细化；接口是一个行为规范，必须按照规范来实现。</p>
<p>（7）抽象类中的虚方法或抽象方法必须用public修饰；接口中的所有成员默认为public，不能有private修饰符</p>
<p><strong>解释说明</strong></p>
<p>abstract class</p>
<p><strong>abstract 声明抽象类抽象方法，一个类中有抽象方法，那么这个类就是抽象类了。</strong>所谓的 抽象方法，就是不含主体 （即不提供实现方法），必须由继承者重写。因此，抽象类不可实例化，只能通过继承被子类重写。</p>
<p>interface 声明接口，只提供一些方法规约， 接口是一个行为规范，必须按照规范来实现。</p>
<p>在C#8之前的版本中不提供任何实现，在C#9版本也可以支持接口的实现；不能用public、abstract等修饰，无字段、常量，无构造函数</p>
<p><strong>区别扩展：</strong></p>
<p>1.interface中不能有字段，而abstract class可以有;</p>
<p>2.interface中不能有public等修饰符，而abstract class 可以有。</p>
<p>3.interface 可以实现多继承</p>
<h3 id="17、using关键字的使用场景"><a href="#17、using关键字的使用场景" class="headerlink" title="17、using关键字的使用场景"></a><strong>17、using关键字的使用场景</strong></h3><p>（1）作为指令：用于导入其他命名空间中定义的类型或为命名空间创建别名 （<strong>引用命名空间</strong>）</p>
<p>（2）作为语句：用于定义一个范围，在此范围的末尾将释放对象 （<strong>定义一个代码块</strong>）</p>
<h3 id="18、new关键字的使用场景"><a href="#18、new关键字的使用场景" class="headerlink" title="18、new关键字的使用场景"></a><strong>18、new关键字的使用场景</strong></h3><p>运算符：创建对象实例</p>
<p>修饰符：在派生类定义一个重名的方法，隐藏掉基类方法</p>
<p>约束：泛型约束定义，约束可使用的泛型类型</p>
<h3 id="19、委托与事件"><a href="#19、委托与事件" class="headerlink" title="19、委托与事件"></a><strong>19、委托与事件</strong></h3><p>委托可以把一个方法作为参数传入另一个方法，可以理解为指向一个函数的引用；事件是一种特殊的委托。</p>
<p>比如：onclick事件中的参数就是一种方法。</p>
<h3 id="20、重载-overload-与重写-override-的区别"><a href="#20、重载-overload-与重写-override-的区别" class="headerlink" title="20、重载(overload)与重写(override)的区别"></a><strong>20、重载(overload)与重写(override)的区别</strong></h3><p>重载：是<strong>方法的名称</strong>相同，参数或参数类型不同；重载是面向过程的概念。</p>
<p>重写：是对基类中的虚方法进行重写。重写是面向对象的概念。</p>
<h3 id="21、return执行顺序"><a href="#21、return执行顺序" class="headerlink" title="21、return执行顺序"></a><strong>21、return执行顺序</strong></h3><p>try{} 里有一个return语句，那么finally{} 里的code在return前执行。</p>
<h3 id="22、switch-expression"><a href="#22、switch-expression" class="headerlink" title="22、switch(expression)"></a><strong>22、switch(expression)</strong></h3><p>其中expression支持任何数据类型，包括null。</p>
<h3 id="23、反射Reflection"><a href="#23、反射Reflection" class="headerlink" title="23、反射Reflection"></a><strong>23、反射Reflection</strong></h3><p>动态获取程序集信息。</p>
<p><strong>解释：</strong></p>
<p>程序集包含模块，而模块又包括类型，类型下有成员，反射就是管理程序集，模块，类型的对象，它能够动态的创建类型的实例，设置现有对象的类型或者获取现有对象的类型，能调用类型的方法和访问类型的字段属性。</p>
<p>它是在运行时创建和使用类型实例。</p>
<p><strong>扩展：</strong></p>
<p>typeof</p>
<p>说反射之前，要先知道typeof这个关键字，它是反射的核心，typeof可以动态的获取某个类的类型信息，反射通过这些类型信息，就可以生成实例等一些操作。</p>
<p>Reflection</p>
<p>反射的命名空间位于System.Reflection</p>
<h3 id="24、property与attribute的区别"><a href="#24、property与attribute的区别" class="headerlink" title="24、property与attribute的区别"></a><strong>24、property与attribute的区别</strong></h3><p>property是属性，用于存取类的字段；</p>
<p>attribute是特性，用来标识类，方法等的附加性质。</p>
<h3 id="25、（Class）和实例（Instance）"><a href="#25、（Class）和实例（Instance）" class="headerlink" title="25、（Class）和实例（Instance）"></a><strong>25、（Class）和实例（Instance）</strong></h3><p><strong>理解：</strong></p>
<p>面向对象最重要的概念就是类（Class）和实例（Instance）</p>
<p>牢记：类是抽象的模板</p>
<p>比如 Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>
<p><strong>类和类的实例有什么区别？</strong></p>
<p>类是抽象概念，类的实例是具体的。</p>
<p>比如 创建一个类名字叫“学生”，实例化一个学生“张三”，张三就是“学生类”的一个实例。</p>
<p>比如创建类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span> <span class="comment">//创建一个学生类</span></span><br><span class="line">  </span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">String name; <span class="comment">//学生有个属性，叫“姓名”</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Student s = <span class="keyword">new</span> Student(); <span class="comment">//创建一个学生类的对象，也就是将类实例化</span></span><br><span class="line"></span><br><span class="line">s.name = <span class="string">"张三"</span>; <span class="comment">//将新创建的类的实例的属性“姓名”赋值为“张三”</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p>
<p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p>
<h3 id="26、C-中static关键字的作用？"><a href="#26、C-中static关键字的作用？" class="headerlink" title="26、C# 中static关键字的作用？"></a><strong>26、C# 中static关键字的作用？</strong></h3><p>对类 有意义的 字段 和 方法 使用static关键字修饰，称为静态成员，通过类名加访问操作符“.”进行访问;</p>
<p>对类的实例 有意义的 字段 和 方法 不加static关键字，称为非静态成员或实例成员。</p>
<p>注: 静态字段在内存中只有一个拷贝，</p>
<p>非静态字段则是在每个实例对象中拥有一个拷贝。</p>
<p>而方法无论是否为静态，在内存中只会有一份拷贝，</p>
<p>区别只是通过类名来访问还是通过实例名来访问。</p>
<h3 id="27-C-成员变量和成员函数前加static的作用？"><a href="#27-C-成员变量和成员函数前加static的作用？" class="headerlink" title="27.C# 成员变量和成员函数前加static的作用？"></a><strong>27.C# 成员变量和成员函数前加static的作用？</strong></h3><p>它们被称为常成员变量和常成员函数，又称为类成员变量和类成员函数。 分别用来反映类的状态。</p>
<p>比如类成员变量可以用来统计类实例的数量，类成员函数负责这种统计的动作。不用new</p>
<h3 id="28、文件编码格式"><a href="#28、文件编码格式" class="headerlink" title="28、文件编码格式"></a><strong>28、文件编码格式</strong></h3><p>阶段一：ASCII</p>
<p>阶段二：ANSI（本地化） 如：GBK、GB2312</p>
<p>阶段三：UNICODE（国际化） 如：UTF-8</p>
<h3 id="29、值传递与引用传递解释？"><a href="#29、值传递与引用传递解释？" class="headerlink" title="29、值传递与引用传递解释？"></a><strong>29、值传递与引用传递解释？</strong></h3><p>值传递时，系统首先为被调用方法的形参分配内存空间，并将<strong>实参的值</strong>按位置一一对应地复制<strong>给形参</strong>，此后，被调用方法中<strong>形参值得任何改变都不会影响到相应的实参</strong>；</p>
<p>引用传递时，系统不是将实参本身的值复制后传递给形参，而是将其<strong>引用值（即地址值）</strong>传递给<strong>形参</strong>，因此，形参所引用的该地址上的变量与传递的实参相同，方法体内相应<strong>形参值得任何改变</strong>都<strong>将影响</strong>到作为<strong>引用传递的实参</strong>。</p>
<p>简而言之，<strong>按值传递不是值参数是值类型，而是指形参变量会复制实参变量，也就是会在栈上多创建一个相同的变量。而按引用传递则不会。可以通过 ref 和 out 来决定参数是否按照引用传递。</strong></p>
<p>浅显易懂解释：JAVA 方面的</p>
<p>值传递： 值传递是对基本型变量而言的，传递的是一个变量的副本，改变副本不影响原变量。</p>
<p>引用传递： 引用传递一般是对对象(引用)型变量而言的，传递的是该对象地址的一个副本，并不是原对象本身，所以引用对象进行操作时会改变原对象。</p>
<p>来自 <a class="link" href="https://blog.csdn.net/qq_34955642/article/details/90032800">请你解释什么是值传递和引用传递?<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="30、参数传递-ref-与-out-的区别"><a href="#30、参数传递-ref-与-out-的区别" class="headerlink" title="30、参数传递 ref 与 out 的区别"></a><strong>30、参数传递 ref 与 out 的区别</strong></h3><p>（1）ref指定的参数 在函数调用时必须先初始化，而out不用</p>
<p>（2）out指定的参数 在进入函数时会清空自己，因此必须在函数内部进行初始化赋值操作，而ref不用</p>
<p>总结：ref可以把值传到方法里，也可以把值传到方法外；out只可以把值传到方法外</p>
<p>注意：string作为特殊的引用类型，其操作是与值类型看齐的，若要将方法内对形参赋值后的结果传递出来，需要加上ref或out关键字。</p>
<h3 id="31-什么是内存泄漏？"><a href="#31-什么是内存泄漏？" class="headerlink" title="31.什么是内存泄漏？"></a><strong>31.什么是内存泄漏？</strong></h3><p>答：一般我们所说的内存泄漏指的是堆内存的泄漏。</p>
<p>堆内存是程序从堆中为其分配的，大小任意的，使用完后要显示释放内存。</p>
<p>当应用程序用关键字new等创建对象时，就从堆中为它分配一块内存，使用完后程序调用free或者delete释放该内存，否则就说该内存就不能被使用，我们就说该内存被泄漏了。</p>
<h3 id="32、跨域"><a href="#32、跨域" class="headerlink" title="32、跨域"></a><strong>32、跨域</strong></h3><p>跨域是指浏览器的不执行其他网站脚本的，由于浏览器的同源策略造成，是对JavaScript的一种安全限制。</p>
<p>说白点理解，当你通过浏览器向其他服务器发送请求时，不是服务器不响应，而是服务器返回的结果被浏览器限制了。</p>
<p><strong>同源策略的同源</strong></p>
<p>同源指的是协议、域名、端口 都要保持一致。</p>
<p><a class="link" href="https://link.zhihu.com/?target=http://www.123.com:8080/index.html">http://www.123.com:8080/index.html<i class="fas fa-external-link-alt"></i></a> （http协议，<a class="link" href="http://www.123.com/">www.123.com<i class="fas fa-external-link-alt"></i></a> 域名、8080 端口 ，只要这三个有一项不一样的都是跨域，这里不一一举例子）</p>
<p><a class="link" href="https://link.zhihu.com/?target=http://www.123.com:8080/matsh.html%EF%BC%88%E4%B8%8D%E8%B7%A8%E5%9F%9F%EF%BC%89">http://www.123.com:8080/matsh.html（不跨域）<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://link.zhihu.com/?target=http://www.123.com:8081/matsh.html%EF%BC%88%E7%AB%AF%E5%8F%A3%E4%B8%8D%E4%B8%80%E6%A0%B7%EF%BC%8C%E8%B7%A8%E5%9F%9F%EF%BC%89">http://www.123.com:8081/matsh.html（端口不一样，跨域）<i class="fas fa-external-link-alt"></i></a></p>
<p>注意：localhost 和127.0.0.1 虽然都指向本机，但也属于跨域。</p>
<p><strong>跨域的解决方案</strong></p>
<p>&gt;JSONP方式，只支持GET请求，不支持POST请求。</p>
<p>&gt;反向代理，<strong>Nginx</strong></p>
<p>&gt; 配置浏览器（我配置了谷歌，属性-&gt;目标&gt; 在后面追加 –args –disable-web-security –user-data-dir 注意有个空格）。设置成功打开浏览器是出现已栏提示证明已成功配置。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://www.cnblogs.com/yflbk-2016/p/12603666.html">https://www.cnblogs.com/yflbk-2016/p/12603666.html<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<h3 id="33、ORM中的延迟加载与直接加载有什么异同？"><a href="#33、ORM中的延迟加载与直接加载有什么异同？" class="headerlink" title="33、ORM中的延迟加载与直接加载有什么异同？"></a><strong>33、ORM中的延迟加载与直接加载有什么异同？</strong></h3><p>延迟加载（Lazy Loading）只在真正需要进行数据操作的时候再进行加载数据，可以减少不必要的开销。</p>
<h3 id="34、简述Func与Action的区别？"><a href="#34、简述Func与Action的区别？" class="headerlink" title="34、简述Func与Action的区别？"></a><strong>34、简述Func与Action的区别？</strong></h3><p>Func是有返回值的委托，Action是没有返回值的委托。</p>
<h3 id="35、能用foreach遍历访问的对象的要求？"><a href="#35、能用foreach遍历访问的对象的要求？" class="headerlink" title="35、能用foreach遍历访问的对象的要求？"></a><strong>35、能用foreach遍历访问的对象的要求？</strong></h3><p>需要实现IEnumerable接口或声明GetEnumerator方法的类型。</p>
<h3 id="36、什么是泛型？"><a href="#36、什么是泛型？" class="headerlink" title="36、什么是泛型？"></a><strong>36、什么是泛型？</strong></h3><p>即通过参数化类型来实现在同一份代码上操作多种数据类型。</p>
<p>泛型就是不确定类型的，被调用时才指定类型的数据类型。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://www.cnblogs.com/netchaozhuai/p/13395827.html">https://www.cnblogs.com/netchaozhuai/p/13395827.html<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<h3 id="37、Final"><a href="#37、Final" class="headerlink" title="37、Final"></a><strong>37、Final</strong></h3><p>final修饰符来限定变量、字段、方法和类。</p>
<p>用于变量时，该变量只能赋值一次，不可修改；</p>
<p>用于方法时，该方法不能被重写或隐藏；</p>
<p>用于类时，该类不能被继承。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://blog.csdn.net/weixin_34326179/article/details/90123166">https://blog.csdn.net/weixin_34326179/article/details/90123166<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<h3 id="38、数据库操作的相关类"><a href="#38、数据库操作的相关类" class="headerlink" title="38、数据库操作的相关类"></a><strong>38、数据库操作的相关类</strong></h3><p>特定类：Connection，Command，CommandBuilder，DataAdapter，DataReader，Parameter，Transaction</p>
<p>共享类：DataSet，DataTable，DataRow，DataColumn，DataRealtion，Constraint，DataColumnMapping，DataTableMapping</p>
<h3 id="39、ADO-NET-五大对象"><a href="#39、ADO-NET-五大对象" class="headerlink" title="39、ADO.NET 五大对象"></a><strong>39、ADO.NET 五大对象</strong></h3><p>（1）<strong>Connection</strong>：开启程序与数据库之间的连接。</p>
<p>（2）<strong>Command</strong>：对数据库发送一些指令。例如增删改查等指令，以及调用存在数据库中的存储过程等。</p>
<p>（3）<strong>DataAdapter</strong>：主要在数据源及DataSet 之间执行传输工作，通过Command 下达命令后，将取得的数据放进DataSet对象中。</p>
<p>DataAdapter对象是用来读取数据库，可读取写入数据；但他占用内存比DataReader大，速度慢。</p>
<p>（4）<strong>DataSet</strong>：这个对象可视为一个暂存区(Cache),可以把数据库中所查询到的数据保存起来，甚至可以将整个数据库显示出来，DataSet是放在内存中的。</p>
<p>备注：将DataAdapter对象当做DataSet 对象与数据源间传输数据的桥梁。</p>
<p>DataSet包含若干DataTable、DataTableTable包含若干DataRow。</p>
<p>（5）<strong>DataReader</strong>：DataReader对象是用来读取数据库的最简单方式，只能读取，不能写入，并且是从头至尾往下读的，无法只读某条数据；但他占用内存小，速度快。</p>
<p>总结：<a class="link" href="https://link.zhihu.com/?target=http://ADO.NET">http://ADO.NET<i class="fas fa-external-link-alt"></i></a> 使用Connection对象来连接数据库，使用Command或DataAdapter对象来执行SQL语句，并将执行的结果返回给DataReader或DataAdapter，然后再使用取得的DataReader或DataAdapter对象操作数据结果。</p>
<p><strong>详细解释：</strong></p>
<p>Connection：主要是开启程序和数据库之间的连接。没有利用连接对象将数据库打开，是无法从数据 库中取得数据的。Close和Dispose的区别，Close以后还可以Open，Dispose以后则不能再用。</p>
<p>Command：主要可以用来对数据库发出一些指令，例如可以对数据库下达查询、新增、修改、删除数 据等指令，以及调用存在数据库中的存储过程等。这个对象是架构在Connection 对象上，也就是 Command： 对象是通过在Connection对象连接到数据源。</p>
<p>DataAdapter：主要是在数据源以及DataSet 之间执行数据传输的工作，它可以透过Command 对象下 达命令后，并将取得的数据放入DataSet 对象中。这个对象是架构在Command对象上，并提供了许多 配合DataSet 使用的功能。</p>
<p>DataSet：这个对象可以视为一个暂存区（Cache），可以把从数据库中所查询到的数据保留起来，甚 至可以将整个数据库显示出来，</p>
<p>DataSet是放在内存中的。DataSet 的能力不只是可以储存多个Table 而 已，还可以透过DataAdapter对象取得一些例如主键等的数据表结构，并可以记录数据表间的关联。 DataSet 对象可以说是<a class="link" href="https://link.zhihu.com/?target=http://ADO.NET">http://ADO.NET<i class="fas fa-external-link-alt"></i></a> 中重量级的对象，这个对象架构在DataAdapter对象上，本身不具备和 数据源沟通的能力；也就是说我们是将DataAdapter对象当做DataSet 对象以及数据源间传输数据的桥 梁。DataSet包含若干DataTable、DataTableTable包含若干DataRow。</p>
<p>DataReader：当我们只需要循序的读取数据而不需要其它操作时，可以使用DataReader 对象。 DataReader对象只是一次一次向下循序的读取数据源中的数据，这些数据是存在数据库服务器中的，而 不是一次性加载到程序的内存中的，只能（通过游标）读取当前行的数据，而且这些数据是只读的，并 不允许作其它的操作。因为DataReader 在读取数据的时候限制了每次只读取一条，而且只能只读，所 以使用起来不但节省资源而且效率很好。使用DataReader 对象除了效率较好之外，因为不用把数据全 部传回，故可以降低网络的负载。</p>
<h3 id="40、C-DataTable和DataSet-区别？"><a href="#40、C-DataTable和DataSet-区别？" class="headerlink" title="==40、C# DataTable和DataSet 区别？=="></a>==<strong>40、C# DataTable和DataSet</strong> <strong>区别？</strong>==</h3><p>可以把DataTable和DataSet看做是数据容器，查询数据库后得到一些结果，放到这种容器里。</p>
<p>为什么用容器？原因是，容器的功能强大，除了存数据，还可以有更大用途。</p>
<p>举例：在一个c/s结构的桌面数据库系统里，你可以把前面存放查询结果的容器里的数据显示到你客户端界面上，用户在界面上对数据进行添加、删除、修改，你可以把用户的操作更新到容器，等用户操作完毕了，要求更新，然后你才把容器整个的数据变化更新到中心数据库，这样做的好处是什么？就是减少了数据库操作，客户端速度提高了，数据库压力减小了。</p>
<p>DataSet可以比作一个内存中的数据库，DataTable是一个内存中的数据表，DataSet里可以存储多个DataTable。</p>
<p>DataSet：数据集。一般包含多个DataTable，用的时候，dataset[“表名”]得到DataTable</p>
<p>DataTable：数据表。</p>
<p><strong>DataSet对象中的Tables的用法</strong></p>
<ul>
<li><p>DataSet是一个数据集合，DataSet.Tables是一个存放Data Table的数组，当adapter.Fill(dataSet);</p>
</li>
<li><p>执行后，程序会通过SQL引擎返回一个结果集存放在内存中，这个结果集就是一个DataTable，并且这个DataTalbe会被添加到DataSet.Tables中，所以==dataSet.Tables[0]就是返回所要查询的结果集。==</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> rid=table.Row[<span class="number">0</span>][<span class="string">"rid"</span>].ToString();   <span class="comment">//table.Rows[0]表示Table的第一行数据，table.Rows[0]["rid"].ToString()表示talbe中列rid的值，table的所有列式在SQL中所查询的所有列</span></span><br></pre></td></tr></table></figure>
<p>一个DataSet中有很多DataTable，用DataTabeles表示，默认填充第一个，集DataTables[0]。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">table.Rows------表示所有行</span><br><span class="line"></span><br><span class="line">table.Rows[<span class="number">0</span>]--------第一行</span><br><span class="line"></span><br><span class="line">table.Row[<span class="number">0</span>][<span class="string">"rid"</span>]---------第一行名称为“rid”的列。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="41、索引器（Indexers）"><a href="#41、索引器（Indexers）" class="headerlink" title="41、索引器（Indexers）"></a><strong>41、索引器（Indexers）</strong></h3><p>解释：C# 类的索引器（indexer）。简单说来，所谓索引器就是一类特殊的属性，通过它们你就可以像引用数组一样引用自己的类。</p>
<p>显然，这一功能在创建集合类的场合特别有用，而在其他某些情况下，比如处理大型文件或者抽象某些有限资源等，能让类具有类似数组的行为当然也是非常有用的。</p>
<p>无需显式指定类型或实例成员，即可设置或检索索引值。 索引器类似于<a class="link" href="https://link.zhihu.com/?target=https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/properties">属性<i class="fas fa-external-link-alt"></i></a>，不同之处在于它们的访问器需要使用参数。</p>
<p>微软官网示例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SampleCollection</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare an array to store the data elements.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> T[] arr = <span class="keyword">new</span> T[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the indexer to allow client code to use [] notation.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="keyword">this</span>[<span class="built_in">int</span> i]</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> { <span class="keyword">return</span> arr[i]; }</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> { arr[i] = <span class="keyword">value</span>; }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stringCollection = <span class="keyword">new</span> SampleCollection&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">stringCollection[<span class="number">0</span>] = <span class="string">"Hello, World"</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(stringCollection[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="42、POST和GET深入理解"><a href="#42、POST和GET深入理解" class="headerlink" title="42、POST和GET深入理解"></a><strong>42、POST和GET深入理解</strong></h3><p>\1. POST和GET都是向服务器提交数据，并且都会从服务器获取数据。</p>
<p>\2. get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。</p>
<p>post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</p>
<p>\3. 对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。</p>
<p>\4. get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。</p>
<p>\5. get安全性非常低，post安全性较高。但是执行效率却比Post方法好。</p>
<p><strong>建议：</strong></p>
<p>1、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；</p>
<p>2、在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式；</p>
<p><strong>区别：</strong></p>
<p>1、传送方式：get通过地址栏传输，post通过报文传输。</p>
<p>2、传送长度：get参数有长度限制（受限于url长度），而post无限制</p>
<p>3、GET和POST还有一个重大区别，简单的说：</p>
<p>GET产生一个TCP数据包；POST产生两个TCP数据包</p>
<h3 id="43、C-中用sealed修饰的类有什么特点？"><a href="#43、C-中用sealed修饰的类有什么特点？" class="headerlink" title="43、C#中用sealed修饰的类有什么特点？"></a><strong>43、C#中用sealed修饰的类有什么特点？</strong></h3><p>密封，不能继承。</p>
<h3 id="44、string和StringBuilder的区别-两者性能的比较？"><a href="#44、string和StringBuilder的区别-两者性能的比较？" class="headerlink" title="44、string和StringBuilder的区别,两者性能的比较？"></a><strong>44、string和StringBuilder的区别,两者性能的比较？</strong></h3><p>都是引用类型，</p>
<p>分配再堆上 StringBuilder默认容量是16，可以允许扩充它所封装的字符串中字符的数量。</p>
<p>每个StringBuffer对象都有 一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量。</p>
<p>对于简单的字符串连接操作，在性能上stringbuilder不一定总是优于strin因为stringbulider对象的创建也消耗大量的性能。</p>
<p>在字符串连接比较少的情况下，过度滥用stringbuilder会导致性能的浪费而非节约，只有大量无法预知次数的字符串操作才考虑stringbuilder的使用。</p>
<p>从最后分析可以看出如果是相对较少的字符串拼接根本看不出太大差别。</p>
<p>Stringbulider的使用，最好制定合适的容量值，否则优于默认值容量不足而频繁的进行内存分</p>
<p><strong>补充：</strong></p>
<p>string 每次内容发生变化，都会生成一个新对象，重新分配内存</p>
<p>stringbuilder 每次操作都是对自身进行操作，而不是生成新的对象</p>
<h3 id="45、什么是扩展方法？"><a href="#45、什么是扩展方法？" class="headerlink" title="45、什么是扩展方法？"></a><strong>45、什么是扩展方法？</strong></h3><p>一句话解释，扩展方法使你能够向现有类型“添加”方法，</p>
<p>无需修改类型条件：按扩展方法必须满足的条件，</p>
<p>1.必须要静态类中的静态方法</p>
<p>2.第一个参数的类型是要扩展的类型，并且需要添加this关键字以标识其为扩展方法</p>
<p><strong>建议：</strong>通常，只在不得已的情况下才实现扩展方法，并谨慎的实现</p>
<p><strong>使用：</strong>不能通过类名调用，直接使用类型来调用</p>
<h3 id="46、C-可否对内存直接操作"><a href="#46、C-可否对内存直接操作" class="headerlink" title="46、C#可否对内存直接操作"></a><strong>46、C#可否对内存直接操作</strong></h3><p>C#在unsafe 模式下可以使用指针对内存进行操作，但在托管模式下不可以使用指针，C#NET默认不运行 带指针的，需要设置下，选择项目右键-&gt;属性-&gt;选择生成-&gt;“允许不安全代码”打勾-&gt;保存</p>
<h3 id="47、-amp-和-amp-amp-区别"><a href="#47、-amp-和-amp-amp-区别" class="headerlink" title="47、&和&&区别"></a><strong>47、&amp;和&amp;&amp;区别</strong></h3><p><strong>相同点</strong></p>
<p>&amp;和&amp;&amp;都可作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，其结 果才为true，否则，只要有一方为false，则结果为false。（ps：当要用到逻辑与的时候&amp;是毫无意义， &amp;本身就不是干这个的）</p>
<p><strong>不同点</strong></p>
<p>if(loginUser!=null&amp;&amp;string.IsnullOrEmpty(loginUser.UserName)) &amp;&amp;具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，对于上面的表达式，当 loginUser为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&amp;&amp;改为&amp;，则 会抛出NullPointerException异常。（ps：所以说当要用到逻辑与的时候&amp;是毫无意义的） &amp; 是用作位运算的。</p>
<p><strong>总结</strong></p>
<p>&amp;是位运算，返回结果是int类型 &amp;&amp;是逻辑运算，返回结果是bool类型。</p>
<h3 id="48、as和is的区别"><a href="#48、as和is的区别" class="headerlink" title="48、as和is的区别"></a><strong>48、as和is的区别</strong></h3><p>as在转换的同时判断兼容性，如果无法进行转换，返回位null（没有产生新的对象），as转换是否成功 判断的依据是是否位null。</p>
<p>is只是做类型兼容性判断，并不执行真正的类型转换，返回true或false，对象 为null也会返回false。</p>
<p>as比is效率更高，as只需要做一次类型兼容检查。</p>
<h3 id="49、什么是匿名类，有什么好处？"><a href="#49、什么是匿名类，有什么好处？" class="headerlink" title="49、什么是匿名类，有什么好处？"></a><strong>49、什么是匿名类，有什么好处？</strong></h3><p>不用定义、没有名字的类，使用一次便可丢弃。好处是简单、随意、临时的。</p>
<h3 id="50、什么是虚函数？什么是抽象函数？"><a href="#50、什么是虚函数？什么是抽象函数？" class="headerlink" title="50、什么是虚函数？什么是抽象函数？"></a><strong>50、什么是虚函数？什么是抽象函数？</strong></h3><p>虚函数：没有实现的，可以由子类继承并重写的函数。</p>
<p>抽象函数：规定其非虚子类必须实现的函数，必须被重写。</p>
<h3 id="51、什么是托管和非托管？"><a href="#51、什么是托管和非托管？" class="headerlink" title="51、什么是托管和非托管？"></a><strong>51、什么是托管和非托管？</strong></h3><p><strong>托管代码：</strong>是由公共语言运行库（CLR）执行的代码，而不是由操作系统直接执行。有关内存管理（内存申请，内存释放，垃圾回收之类的）全部都是.net的CLR来管理。</p>
<p><strong>非托管代码：</strong>直接编译成目标计算机码，由操作系统直接执行的代码，内存回收要继承IDisposable接口手动回收。</p>
<h3 id="52、Lambda表达式？"><a href="#52、Lambda表达式？" class="headerlink" title="52、Lambda表达式？"></a><strong>52、Lambda表达式？</strong></h3><p>“Lambda表达式”是一个匿名函数，是一种高效的类似于函数式编程的表达式，Lambda简化了开发中需要编写的代码量。</p>
<h3 id="53、如何提高-NET的性能-？"><a href="#53、如何提高-NET的性能-？" class="headerlink" title="53、如何提高.NET的性能 ？"></a><strong>53、如何提高.NET的性能 ？</strong></h3><p>1、使用异步方式调用Web服务和远程对象</p>
<p><strong>解释：</strong>只要有可能就要避免在请求的处理过程中对Web服务和远程对象的同步调用，因为它占用的是的 <a class="link" href="https://link.zhihu.com/?target=http://ASP.NET">http://ASP.NET<i class="fas fa-external-link-alt"></i></a> 线程池中的工 作线程，这将直接影响Web服务器响应其它请求的能力。</p>
<p>2、使用适当的Caching策略来提高性能</p>
<p>3、判断字符串，不要用”” 比较。</p>
<p>//避免 if(strABC!=null &amp;&amp; strABC!=””) {}</p>
<p>//推荐 if(!strABC.IsNullOrEmpty) {}</p>
<p>4、页面优化</p>
<p>5、用完马上关闭数据库连接</p>
<p>6、尽量使用存储过程，并优化查询语句</p>
<p>7、只读数据访问用SqlDataReader，不要使用DataSet托管堆中</p>
<h3 id="54、EF"><a href="#54、EF" class="headerlink" title="54、EF"></a><strong>54、EF</strong></h3><p>1、EF(Entity Framework)</p>
<p>实体框架EF是<a class="link" href="https://link.zhihu.com/?target=http://ADO.NET">http://ADO.NET<i class="fas fa-external-link-alt"></i></a>中的一组支持开发面向数据的软件应用程序的技术，是微软的一个ORM框架。</p>
<p>Database First</p>
<p>Database First”模式我们称之为“数据库优先”，前提是你的应用已经有相应的数据库，你可以使用EF设计工具根据数据库生成数据数据类，你可以使用Visual Studio模型设计器修改这些模型之间对应关系。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://blog.csdn.net/u011854789/article/details/72783902">https://blog.csdn.net/u011854789/article/details/72783902<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<p>Model First</p>
<p>Model First我们称之为“模型优先”，这里的模型指的是“<a class="link" href="https://link.zhihu.com/?target=http://ADO.NET">http://ADO.NET<i class="fas fa-external-link-alt"></i></a> Entity Framework Data Model”，此时你的应用并没有设计相关数据库，在Visual Studio中我们通过设计对于的数据模型来生成数据库和数据类。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://blog.csdn.net/u011854789/article/details/72783902">https://blog.csdn.net/u011854789/article/details/72783902<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<p>Code First</p>
<p>Code First模式我们称之为“代码优先”模式，是从EF4.1开始新建加入的功能。使用Code First模式进行EF开发时开发人员只需要编写对应的数据类（其实就是领域模型的实现过程），然后自动生成数据库。这样设计的好处在于我们可以针对概念模型进行所有数据操作而不必关心数据的存储关系，使我们可以更加自然的采用面向对象的方式进行面向数据的应用程序开发。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://blog.csdn.net/u011854789/article/details/72783902">https://blog.csdn.net/u011854789/article/details/72783902<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<p>2、什么是ORM?</p>
<p>ORM指的是面向对象的对象模型和关系型数据库的数据结构之间的互相转换。</p>
<p>(表实体跟表之间的相互转换)</p>
<p>ORM框架有很多，EF框架是ORM框架的其中一种，是实现了ORM思想的框架。</p>
<p>O=&gt;表实体</p>
<p>M=&gt;映射关系</p>
<p>R=&gt;数据库.表</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://blog.csdn.net/qq_35491254/article/details/52994136">https://blog.csdn.net/qq_35491254/article/details/52994136<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<h3 id="55、如何解决数据并发问题？"><a href="#55、如何解决数据并发问题？" class="headerlink" title="55、如何解决数据并发问题？"></a><strong>55、如何解决数据并发问题？</strong></h3><p><strong>一：并发操作出现的原因</strong></p>
<p>原因：多个动作在一瞬间同时操作同一数据</p>
<p>现象：</p>
<ol>
<li>多人在某一瞬间通过相同的方式操作同一条数据</li>
<li>多人在某一瞬间通过不同的方式操作同一条数据</li>
<li>在某一瞬间，同一动作，多次执行</li>
</ol>
<p><strong>二：并发举例及解决办法</strong></p>
<p>针对上述的三种的情况，分别以实际情况进行举例。</p>
<p>【多人在某一瞬间通过相同的方式操作同一条数据】</p>
<p>1.某仓库系统有一品牌商品A，商品A在数据库中只允许存在一条记录，库存的数量是这条数据的一个字段，现有库存100件，在某一天到货了1000件。由于数量比较大，现在需要10名操作员去处理这1000件商品进行入库，操作的途径都是使用PDA扫描完成后进行入库。我们假设至少存在1名以上的操作员同时进行入库操作。这样就可以满足上述条件【多人在某一瞬间通过相同的方式操作同一条数据】。在这种情况下，如果不进行处理，就会导致数据错乱，错乱的原因简单说就是在双方写数据时没有获取到最新的数据库数据。</p>
<p>解决方法：</p>
<p>方法一： 加锁。加锁是比较常用的方法。从系统的架构上来说，锁被分为单机锁和分布式锁。如果系统只是部署在单一机器上，可以简单通过java提供的各种锁来进行操作。如果系统被部署在多台机器上，可以使用redis来实现分布式加锁。这两种加锁方式从某种意义上来说是悲观锁。上述的问题，我们可以使用商品的唯一属性，比如id或者商品的唯一条码来进行加锁。</p>
<p>方法二：数据库乐观锁。数据库乐观锁几乎适用于所有的并发场景。使用方法：在数据库表中增加一个版本号字段，每一次更新和删除时把当前持有的对象版本号和数据库中最新的版本号进行比对，如果相同则验证通过，不然则操作失败。</p>
<p>方法三：使用消息队列。这种方式在消息过多时，对库存的处理可能不会特别及时。由于库存一般是需要比较及时的可见，所以这种方式并不建议。</p>
<p>【多人在某一瞬间通过不同的方式操作同一条数据】</p>
<p>\2. 还是按照上述的背景来说。在这10名操作员进行入库的同时，还有至少1名操作员对A商品进行出库操作。我们假设入库时没有并发问题，但是其中一个入库和一个出库同时操作了A商品的库存，通过两种不同的方式对库存进行操作。如果不进行处理，库存也会出现数据错乱的问题。</p>
<p>解决方法：</p>
<p>方法一： 加锁。这个时候使用普通的单机锁已经没有意义了，可以使用分布式锁，依旧使用唯一属性来进行加锁，尽管方法不同，但关键的key是一样的，这样就可以锁住操作。</p>
<p>方法二：数据库乐观锁。</p>
<p>对于上述的问题，我扩展一下，如果是一批商品，你总不能一个一个进行加锁处理吧，那样效率也太低了。所以这种情况下，简单的加锁已经不能满足现在的需要了。所以数据库乐观锁又重新出现了。在批量更新时，发现其中任何一个商品的版本号不一致，立即报错回滚。</p>
<p>【在某一瞬间，同一动作，多次执行】</p>
<p>3.这一种情况属于请求重复提交，同样，如果没有进行处理，数据也会出现问题。</p>
<p>一个用户在入库时重复提交了两次，这样在不考虑其它并发的影响下，库存中的数据会多增加一次，但在入库历史中却只能看见一次记录，这样肯定是不可接受的。</p>
<p>解决方法：</p>
<p>方法一：前台可以在按钮或链接第一次点击后立刻禁用。这样可以有效的解决绝大部分的问题。但是由于操作端千变万化，这种方式并不能够完全解决问题。</p>
<p>方法二：后台生成一个随机数放在前台，前台在访问后台时，将随机数传输到后台进行验证，第一次验证通过即刻销毁, 随机数可以存在redis或session中，一般用于表单提交。但是这种方式还是存在缺陷，如果同一个页面有多个请求，一个随机数就完全不够用了。</p>
<p>方法三：nginx可以控制ip在同一时间内对服务的访问频率。比如入库时，如果进行了多次点击，发送了多次请求，在这1秒中，系统只接收第一次请求。</p>
<p><strong>三：总结</strong></p>
<p>处理并发的最终原理其实就是：将用户的并行操作变成串行操作。</p>
<p>在解决并发问题时，从操作端到服务端，再到数据库，都需要进行处理，层层过滤。</p>
<p>前端：防止多次点击。</p>
<p>服务端：对相同数据的操作写在同一个服务中。</p>
<p>数据库：乐观锁一定要使用。有需要的话，数据库的联合唯一索引也要准备。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://blog.csdn.net/love1793912554/article/details/92437035">https://blog.csdn.net/love1793912554/article/details/92437035<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<h3 id="56、-NET、C-和http-ASP-NET，http-ASP-NET-MVC-四者之间的区别"><a href="#56、-NET、C-和http-ASP-NET，http-ASP-NET-MVC-四者之间的区别" class="headerlink" title="56、.NET、C#和http://ASP.NET，http://ASP.NET MVC 四者之间的区别"></a><strong>56、.NET、C#和<a class="link" href="http://asp.net,http//ASP.NET">http://ASP.NET，http://ASP.NET<i class="fas fa-external-link-alt"></i></a> MVC 四者之间的区别</strong></h3><p><strong>什么是.NET?</strong></p>
<p>.NET是微软公司下的一个开发平台，.NET核心就是.NET Framwork（.NET框架）是.NET程序开发和运行的环境，在这个平台下可以用不同的语言进行开发。</p>
<p>因为.NET是跨语言的一个平台。语言可以是C#,f#,j#,<a class="link" href="http://vb.net等等./">http://vb.net等等。<i class="fas fa-external-link-alt"></i></a></p>
<p>顺便说一下sum公司的JAVA和.NET不同的一点是java是跨平台的，不跨语言的。.NET跨平台仅限于安卓系统和IOS苹果系统。</p>
<p><strong>1、.net框架的组成分为两部分：</strong></p>
<p>CLR:公共语言运行时 （提供内在管理，代码安全性检测等功能）</p>
<p>FLC:.NET框架类库,类库中有很多线程的资源可使用（比如：类，方法，属性）,提供大量应用类库，提高开发效率。</p>
<p><strong>2、CLR的结构：</strong></p>
<p>CTS:通用类型系统，将各种语言中的数据类型转换成统一的类型。</p>
<p>CLS:通用语言规范，获取各种语言转换成统一的语法规范。</p>
<p>JIT:实时编译器（即时编译器）用于将转换之后的语言编译为二进制语言，交给CPU执行。</p>
<p><strong>3、NET运行机制流程：</strong></p>
<p>各种语言（c#,F#,j#等对应的源程序）———&gt; 经过CTS，CLS第一次编译 ———&gt; 统一规范语言（中间语言）MSIL(.EXE,.DLL)</p>
<p>———&gt; JIT第二次编译 ———&gt; 二进制语言 ———&gt; 运行在CPU中</p>
<p>Java运行机制</p>
<p>.java———&gt;编译———&gt;字节码文件（.CLASS）———&gt; jvm解释（jvm虚拟机）———&gt; 二进制语言———&gt;运行在CPU中</p>
<p><strong>4.C#是一个.NET平台下的一个程序设计语言，只是一个语言，仅此而已。</strong></p>
<p>程序设计语言是为了方便开发人员和计算机沟通的工具。</p>
<p>程序设计语言是为了方便开发人员和计算机沟通的工具。</p>
<p>ASP.NET是一个网站开发的技术，是.NET框架中的一个应用模型。（历史挺长远的）使用ASP.NET开发Web应用程序并维持其运行，比其他开发语言更加简单。</p>
<p>与Java、PHP和Perl等高级技术相比，ASP.NET具有方便性、灵活性、生产效率高、安全性高及面向对象等优点，是目前主流的网络编程技术之一。</p>
<p><strong>6.ASP.NET MVC</strong>，刚开始接触这个技术的时候我经常不理解他们的名字，我相信许多学ASP.NET开发人员开始接触MVC应该也和我一样产生很多为什么，也会误认为认为MVC与ASP.NET完全没有关系，是一个全新的Web开发，深入学习后我才知道事实上<strong>ASP.NET是创建WEB应用的框架</strong>而<strong>MVC</strong>是能够用更好的方法来<strong>组织并管理代码的</strong>一种更<strong>高级架构体系</strong>，所以可以称之为ASP.NET MVC。</p>
<p>我们可将原来的ASP.NET称为 ASP.NET Webforms，新的MVC 称为ASP.NET MVC。</p>
<p>MVC是软件架构的一种模式，可以说就相当于我们常说的设计模式吧。其中主要包括三个模块，顾名思义。</p>
<p>就如MVC名字所显示的那样：</p>
<p>模型（Model），视图（View），控制器（Controller）。</p>
<p>mvc中的模型（Model）和视图（View ）是完全区别于三层架构中的模型（Model）和视图（View）的。</p>
<p>MVC中<strong>模型（Model）</strong>的特点：</p>
<p>①有对数据直接访问的权利，如：对数据库的访问；</p>
<p>②模型（Model）“不依赖”视图（View）和控制器（Controller），即模型（Model）不关心它会被如何显示或者如何被操作；</p>
<p>③模型（Model）中数据的变化一般会通过一种刷新机制被“公布”；</p>
<p>④为了实现③中的“机制”用于监视此模型的视图必须事先在此模型上注册。从而，视图可以了解在数据模型上发生的改变。</p>
<p><strong>视图（View），</strong>这里的视图基本跟三层中的视图一样，都是为了显示数据，没有程序上的逻辑。为了实现视图上数据的刷新，视图（View）需要访问它监视的模型（Model），所以应该事先在被它监视的数据那里进行注册。</p>
<p><strong>控制器（Controller），</strong>这个概念是在三层中不存在的概念。它主要起到不同层面的组织作用，用于控制应用程序的流程。主要处理事件并作出相应操作。</p>
<p>来自 <a class="link" href="https://link.zhihu.com/?target=https://www.cnblogs.com/wwym/p/5555772.html">https://www.cnblogs.com/wwym/p/5555772.html<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="58、MVC-和三层框架区别"><a href="#58、MVC-和三层框架区别" class="headerlink" title="58、MVC 和三层框架区别"></a><strong>58、MVC 和三层框架区别</strong></h3><p><strong>意思</strong></p>
<p>M 即Model(模型层),主要负责处理业务逻辑以及数据库的交互</p>
<p>V 即View(视图层),主要负责显示数据和提交数据</p>
<p>C 即Controller(控制层),主要是永作辅助捕获请求并控制请求转发</p>
<p>三层</p>
<p>UI界面层</p>
<p>BLL业务逻辑层</p>
<p>DAL数据访问层</p>
<p><strong>区别</strong></p>
<p>三层是基于业务逻辑来分的，而MVC是基于页面来分的</p>
<p>MVC模式是一种复合 设计模式，一种解决方案</p>
<p>三层是种 软件架构，通过接口实现编程</p>
<p>三层模式是体系结构模式，MVC是设计模式</p>
<p>三层模式又可归于部署模式，MVC可归于表示模式</p>
<p>来自 <a class="link" href="https://link.zhihu.com/?target=https://www.cnblogs.com/yellowwenhao/p/11542367.html">https://www.cnblogs.com/yellowwenhao/p/11542367.html<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="59、MVC-和三层框架区别-详细解释"><a href="#59、MVC-和三层框架区别-详细解释" class="headerlink" title="59、MVC 和三层框架区别 详细解释"></a><strong>59、MVC 和三层框架区别</strong> <strong>详细解释</strong></h3><p>三层架构是一个分层式的软件体系架构设计，它可适用于任何一个项目。</p>
<p><strong>MVC是一个设计模式</strong>，它是根据项目的具体需求来决定是否适用于该项目。</p>
<p>那么架构跟设计模式有什么区别呢？</p>
<p>我们从接手一个项目开始，<strong>首先，我们需要进行架构设计，一般我们采用的就是分层式的架构设计，即我们的三层架构。</strong></p>
<p>然后，在确定了架构以后，我们再根据项目的具体需求去考虑是否需要应用一些设计模式，比如是否应用我们的MVC模式，抽象工厂模式等等。（在这里我们看出，MVC与三层架构不是一个等级的，而与抽象工厂等设计模式才是一路的）</p>
<p>最后，确定了模式以后，就是我们的一些具体的实现了。（当然一个项目不仅仅考虑这些问题，我只是为了说明两者的区别，将其他问题已省略）</p>
<p>其次，它俩划分的层次不同。</p>
<p>三层架构将整个项目划分为：表现层（UI）、业务逻辑层（BLL）、数据访问层（DAL）。</p>
<p>MVC 是在三层UI层上 进一步划分 即Model（模型），View（视图），Controller（控制）。</p>
<p><strong><em>区别与联系\</em></strong></p>
<ul>
<li><p><strong>字面解释</strong></p>
<p>我们平常所说的V是UI，C是BLL，M是DAL的观点是错误的。</p>
<p>而我们通常所见到的MVC一般也都是在应用三层架构的基础上，即将Model层再进行分层。</p>
<p>而如果Model不再进行划分的话，那么使用MVC的意义也就不大了。</p>
</li>
<li><p><strong>各自目的</strong>:</p>
<p>然后，它俩的目的着重点不同。</p>
<p>三层架构的目的着重点是“高内聚，低耦合”，即解耦。</p>
<p>MVC的目的则是实现Web系统的职能分工，即职责划分。</p>
<p>其实职责划分也是解耦，但是三层侧重的是整体的一个解耦，而MVC侧重的是web系统的解耦，即侧重jsp和Servlet的一个解耦。</p>
</li>
</ul>
<p><strong>为何我们会将其混为一谈？</strong></p>
<p><strong>1.二者都是“三层”</strong></p>
<p>这个原因是最容易迷惑我们初学者的，一个是UI,BLL,DAL，一个是View，Controller，Model，不都是三层吗？</p>
<p>虽然都是“三层”（不一定是真的三层，还可以是多层），但是它们的划分的不一样。大家可从上面的图中看出不同。</p>
<p><strong>2.MVC总是伴随着三层架构。</strong></p>
<p>这个就是我在前面一再强调的，我们一般是在考虑使用（也可以不使用）了三层架构的基础上再根据具体需求决定是否需要使用MVC，于是我们常说的MVC中总是伴随着三层架构，所以大家总是会认为MVC就是三层架构，三层架构就是MVC，殊不知，它们二者是一起出现的。</p>
<p><strong>3.都是在分层，即都是在解耦。</strong></p>
<p>前面说它们目的的时候也说了，虽然它们的侧重点不同，但是它们的总体目的是一样的，都是为了解耦，对于初学者而言，是不知道这两个侧重点有何不同的。</p>
<p>大家往往对它们的联系知道很多，不然也不会混为一谈，但是对它们的区别却知道较少，希望我上面讲解的它们两者之间的区别可以让大家对它们有些了解，如有写的不妥的地方，请指教。</p>
<p>三层架构（3-tier application） 通常意义上的三层架构就是将整个业务应用划分为：</p>
<p><strong>表现层（UI）、业务逻辑层（BLL）、数据访问层（DAL）。</strong></p>
<p>区分层次的目的即为了“高内聚，低耦合”的思想。</p>
<p>1、表现层（UI）：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。</p>
<p>2、业务逻辑层（BLL）：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。</p>
<p>3、数据访问层（DAL）：该层所做事务直接操作数据库，针对数据的增添、删除、修改、更新、查找等。</p>
<p><strong>MVC是 Model-View-Controller，严格说这三个加起来以后才是三层架构中的UI层。</strong></p>
<p>也就是说，MVC把三层架构中的UI层再度进行了分化，分成了控制器、视图、实体三个部分。</p>
<p>控制器完成页面逻辑，通过实体来与界面层完成通话；而C层直接与三层中的BLL进行对话。</p>
<p>MVC可以是三层中的一个表现层框架，属于表现层。三层和MVC可以共存。</p>
<p><strong>三层是基于业务逻辑来分的，而MVC是基于页面来分的。</strong></p>
<p>MVC主要用于表现层，3层主要用于体系架构，3层一般是表现层、中间层、数据层，其中表现层又可以分成M、V、C，（Model View Controller）模型－视图－控制器</p>
<p>MVC是表现层的架构，MVC的Model实际上是ViewModel，即供View进行展示的数据。 ViewModel不包含业务逻辑，也不包含数据读取。</p>
<p>三层架构的分层模式是典型的上下关系，上层依赖于下层。</p>
<p>但MVC作为表现模式是不存在上下关系的，而是相互协作关系。</p>
<p>即使将MVC当作架构模式，也不是分层模式。MVC和三层架构基本没有可比性，是应用于不同领域的技术。</p>
<p><a class="link" href="https://link.zhihu.com/?target=https://www.cnblogs.com/zdxster/p/5305155.html">https://www.cnblogs.com/zdxster/p/5305155.html<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="60、高内聚，低耦合。"><a href="#60、高内聚，低耦合。" class="headerlink" title="60、高内聚，低耦合。"></a><strong>60、高内聚，低耦合。</strong></h3><p>内聚关注 模块 内部元素 结合程度，</p>
<p>耦合关注 模块 间 依赖程度。</p>
<p>需要知道！！！</p>
<p><strong>内聚性：</strong></p>
<p>又称块内联系。</p>
<p>指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，则它的内聚性就越高。</p>
<p>所谓高内聚是指一个软件模块是由相关性很强的代码组成，只负责一项任务，也就是常说的单一责任原则。</p>
<p><strong>耦合性：</strong></p>
<p>也称块间联系。</p>
<p>指软件系统结构中各模块间相互联系紧密程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。</p>
<p>对于低耦合，粗浅的理解是：一个完整的系统，模块与模块之间，尽可能的使其独立存在。也就是说，让每个模块，尽可能的独立完成某个特定的子功能。<strong>模块与模块之间的接口，尽量的少而简单。</strong>如果某两个模块间的关系比较复杂的话，最好首先考虑<strong>进一步的模块划分</strong>。这样有利于修改和组合。</p>
<p>更深层次！！！</p>
<p><strong>内聚</strong></p>
<p>内聚有如下的种类，它们之间的内聚度由弱到强排列如下：</p>
<p>一、偶然内聚：一个模块内的各处理元素之间没有任何联系，只是偶然地被凑到一起。这种模块也称为巧合内聚，内聚程度最低。</p>
<p>二、逻辑内聚：这种模块把几种相关的功能组合在一起， 每次被调用时，由传送给模块参数来确定该模块应完成哪一种功能 。</p>
<p>三、时间内聚：把需要同时执行的动作组合在一起形成的模块称为时间内聚模块。</p>
<p>四、过程内聚：构件或者操作的组合方式是，允许在调用前面的构件或操作之后，马上调用后面的构件或操作，即使两者之间没有数据进行传递。简单的说就是如果一个模块内的处理元素是相关的，而且必须以特定次序执行则称为过程内聚。</p>
<p>例如某要完成登录的功能，前一个功能判断网络状态，后一个执行登录操作，显然是按照特定次序执行的。</p>
<p>五、通信内聚：指模块内所有处理元素都在同一个数据结构上操作或所有处理功能都通过公用数据而发生关联（有时称之为信息内聚）。即指模块内各个组成部分都使用相同的数据结构或产生相同的数据结构。</p>
<p>六、顺序内聚：一个模块中各个处理元素和同一个功能密切相关，而且这些处理必须顺序执行，通常前一个处理元素的输出时后一个处理元素的输入。</p>
<p>例如某要完成获取订单信息的功能，前一个功能获取用户信息，后一个执行计算均价操作，显然该模块内两部分紧密关联。</p>
<p>顺序内聚的内聚度比较高，但缺点是不如功能内聚易于维护。</p>
<p>七、功能内聚：模块内所有元素的各个组成部分全部都为完成同一个功能而存在，共同完成一个单一的功能，模块已不可再分。即模块仅包括为完成某个功能所必须的所有成分，这些成分紧密联系、缺一不可。</p>
<p>功能内聚是最强的内聚，其优点是它的功能明确。判断一个模块是否功能内聚，一般从模块名称就能看出。如果模块名称只有一个动词和一个特定的目标（单数名词），一般来说就是功能内聚，如：“计算水费”、“计算产值”等模块。功能内聚一般出现在软件结构图的较低层次上。</p>
<p>功能内聚模块的一个重要特点是：他是一个“暗盒”，对于该模块的调用者来说，只需要知道这个模块能做什么，而不需要知道这个模块是如何做的。</p>
<h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a><strong>耦合</strong></h3><p>耦合可以分为以下几种，它们之间的耦合度由高到低排列如下：</p>
<p>一、 内容耦合：一个模块直接访问另一模块的内容，则称这两个模块为内容耦合。</p>
<p>若在程序中出现下列情况之一，则说明两个模块之间发生了内容耦合：</p>
<p>\1. 一个模块直接访问另一个模块的内部数据。</p>
<p>\2. 一个模块不通过正常入口而直接转入到另一个模块的内部。</p>
<p>\3. 两个模块有一部分代码重叠（该部分代码具有一定的独立功能）。</p>
<p>\4. 一个模块有多个入口。</p>
<p>内容耦合可能在汇编语言中出现。大多数高级语言都已设计成不允许出现内容耦合。这种耦合的耦合性最强，模块独立性最弱。</p>
<p>二、公共耦合：一组模块都访问同一个全局数据结构，则称之为公共耦合。公共数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等。如果模块只是向公共数据环境输入数据，或是只从公共数据环境取出数据，这属于比较松散的公共耦合；如果模块既向公共数据环境输入数据又从公共数据环境取出数据，这属于较紧密的公共耦合。</p>
<p>公共耦合会引起以下问题：</p>
<p>\1. 无法控制各个模块对公共数据的存取，严重影响了软件模块的可靠性和适应性。</p>
<p>\2. 使软件的可维护性变差。若一个模块修改了公共数据，则会影响相关模块。</p>
<p>\3. 降低了软件的可理解性。不容易清楚知道哪些数据被哪些模块所共享，排错困难。</p>
<p>一般地，仅当模块间共享的数据很多且通过参数传递很不方便时，才使用公共耦合。</p>
<p>三、外部耦合：一组模块都访问同一全局简单变量，而且不通过参数表传递该全局变量的信息，则称之为外部耦合。</p>
<p>四、控制耦合：模块之间传递的不是数据信息，而是控制信息例如标志、开关量等，一个模块控制了另一个模块的功能。</p>
<p>五、标记耦合：调用模块和被调用模块之间传递数据结构而不是简单数据，同时也称作特征耦合。表就和的模块间传递的不是简单变量，而是像高级语言中的数据名、记录名和文件名等数据结果，这些名字即为标记，其实传递的是地址。</p>
<p>六、数据耦合：调用模块和被调用模块之间只传递简单的数据项参数。相当于高级语言中的值传递。</p>
<p>七、非直接耦合：两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。耦合度最弱，模块独立性最强。</p>
<p><strong>分析</strong></p>
<p><strong>高内聚，低耦合的系统有什么好处呢？</strong></p>
<p>事实上，短期来看，并没有很明显的好处，甚至短期内会影响系统的开发进度，因为高内聚，低耦合的系统对开发设计人员提出了更高的要求。</p>
<p>高内聚，低耦合的好处体现在<strong>系统持续发展的过程中</strong>，高内聚，低耦合的系统具有更好的<strong>重用性，维护性，扩展性</strong>，可以更高效的完成系统的维护开发，持续的<strong>支持业务的发展</strong>，而<strong>不会成为业务发展的障碍</strong>。</p>
<p><strong>高内聚低耦合是否意味着内聚越高越好，耦合越低越好？</strong></p>
<ol>
<li>并不是内聚越高越好，耦合越低越好，真正好的设计是在高内聚和低耦合间进行平衡，也就是说高内聚和低耦合是冲突的。</li>
<li>最强的内聚莫过于一个类只写一个函数，这样内聚性绝对是最高的。但这会带来一个<br>明显的问题：类的数量急剧增多，这样就导致了其它类的耦合特别多，于是整个设计就变成了“高内聚高耦合”了。由于高耦合，整个系统变动同样非常频繁。</li>
<li>对于耦合来说，最弱的耦合是一个类将所有的函数都包含了，这样类完全不依赖其它类，耦合性是最低的。但这样会带来一个明显的问题：内聚性很低，于是整个设计就变成了“低耦合低内聚”了。由于低内聚，整个类的变动同样非常频繁。</li>
<li>真正做到高内聚、低耦合是很难的，很多时候未必一定要这样，更多的时候“最适合”的才是最好的，不过、审时度势、融会贯通、人尽其才、物尽其用，才是设计的王道。</li>
</ol>
<p><strong>软件设计时，如何做好高内聚低耦合？</strong></p>
<p>在模块划分时，要遵循“一个模块，一个功能”的原则，尽可能使模块达到功能内聚。</p>
<p>耦合是影响软件复杂程度和设计质量的一个重要因素，为提高模块的独立性，应建立模块间尽可能松散的系统，在设计上我们应采用以下原则：若模块间必须存在耦合，应尽量使用数据耦合，少用控制耦合，慎用或有控制地使用公共耦合，并限制公共耦合的范围，尽量避免内容耦合。</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://blog.csdn.net/walid1992/article/details/73278304">https://blog.csdn.net/walid1992/article/details/73278304<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<h3 id="61、什么是ABP框架？"><a href="#61、什么是ABP框架？" class="headerlink" title="61、什么是ABP框架？"></a><strong>61、什么是ABP框架？</strong></h3><p>ABP框架全称为“<a class="link" href="https://link.zhihu.com/?target=http://ASP.NET">http://ASP.NET<i class="fas fa-external-link-alt"></i></a> Boilerplate Project”，中文翻译为“ <a class="link" href="https://link.zhihu.com/?target=http://ASP.NET">http://ASP.NET<i class="fas fa-external-link-alt"></i></a>样板项目”，诞生的主要目的就是为了让.NET程序员“秒变”架构师，将.NET企业级项目的主流开发技术、最先进的架构整合起来，让.NET工程师能够更快的开发出更好的项目。</p>
<h3 id="62、什么是WebService"><a href="#62、什么是WebService" class="headerlink" title="62、什么是WebService?"></a><strong>62、什么是WebService?</strong></h3><p>WebService是一种跨编程语言和跨操作系统平台的远程调用技术。</p>
<p>WebService是一个SOA（面向服务的编程）的架构，它是不依赖于语言，不依赖于平台，可以实现不同的语言间的相互调用，通过</p>
<p>Internet进行基于Http协议的网络应用间的交互。</p>
<h3 id="63、什么是Web-API？"><a href="#63、什么是Web-API？" class="headerlink" title="63、什么是Web API？"></a><strong>63、什么是Web API？</strong></h3><p>Web API是网络应用程序接口。</p>
<p>包含了广泛的功能，网络应用通过API接口，可以实现存储服务、消息服务、计算服务等能力，利用这些能力可以进行开发出强大功能的web应用。</p>
<h3 id="64、Web-Service与Web-API的关系？"><a href="#64、Web-Service与Web-API的关系？" class="headerlink" title="64、Web Service与Web API的关系？"></a><strong>64、Web Service与Web API的关系？</strong></h3><p>\1. webservice走HTTP协议和<a class="link" href="https://link.zhihu.com/?target=https://www.baidu.com/s?wd=80%E7%AB%AF%E5%8F%A3&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">80端口<i class="fas fa-external-link-alt"></i></a>。WebService则类似于bs架构，只需要开发<a class="link" href="https://link.zhihu.com/?target=https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">服务器端<i class="fas fa-external-link-alt"></i></a>，不需要开发客户端，客户端只要遵循<a class="link" href="https://link.zhihu.com/?target=https://www.baidu.com/s?wd=soap%E5%8D%8F%E8%AE%AE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">soap协议<i class="fas fa-external-link-alt"></i></a>，就可以调用。</p>
<p>\2. api，用的协议和端口，是根据开发人员定义的。 api类似于<a class="link" href="https://link.zhihu.com/?target=https://www.baidu.com/s?wd=cs%E6%9E%B6%E6%9E%84&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">cs架构<i class="fas fa-external-link-alt"></i></a>，需要同时开发客户端API和<a class="link" href="https://link.zhihu.com/?target=https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">服务器端<i class="fas fa-external-link-alt"></i></a>程序。</p>
<p>webapi用的是http协议，webservice用的是soap协议</p>
<p>webapi无状态，相对webservice更轻量级。webapi支持如get,post等http操作</p>
<p>http soap关系</p>
<p>http:是一个客户端和服务器端请求和应答的标准（TCP）。http协议其目的是为了提供一种发布和接收htttp页面的方法</p>
<p>一http协议的客户端与服务器的交互：由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。</p>
<p>soap 协议：它描述了一种在分散或分布式的环境中如何交换信息的轻量级协议。soap在http协议的基础上，一个基于XML的协议。</p>
<p>不同：都是底层的通信协议，请求包的格式不同而已，soap包是XML格式,http纯文本格式。</p>
<p>关系：SOAP是个通信协议， SOAP在HTTP协议的基础上，把编写成XML的REQUEST参数, 放在HTTP BODY上提交个WEB SERVICE服务器(SERVLET，ASP什么的) 处理完成后，结果也写成XML作为RESPONSE送回用户端， 为了使用户端和WEB SERVICE可以相互对应，可以使用WSDL作为这种通信方式的描述文件，利用WSDL工具可以自动生成WS和用户端的框架文件，SOAP具备把复杂对象序列化捆绑到XML里去的能力。</p>
<p>Web Service</p>
<p>1、它是基于SOAP协议的，数据格式是XML</p>
<p>2、只支持HTTP协议</p>
<p>3、它不是开源的，但可以被任意一个了解XML的人使用</p>
<p>4、它只能部署在IIS上</p>
<p>WCF</p>
<p>1、这个也是基于SOAP的，数据格式是XML</p>
<p>2、这个是Web Service（ASMX）的进化版，可以支持各种各样的协议，像TCP，HTTP，HTTPS，Named Pipes, MSMQ.</p>
<p>3、WCF的主要问题是，它配置起来特别的繁琐</p>
<p>4、它不是开源的，但可以被任意一个了解XML的人使用</p>
<p>5、它可以部署应用程序中或者IIS上或者Windows服务中</p>
<p>Web API</p>
<p>1、这是一个简单的构建HTTP服务的新框架</p>
<p>2、在.net平台上Web API 是一个开源的、理想的、构建REST-ful 服务的技术</p>
<p>3、不像WCF REST Service.它可以使用HTTP的全部特点（比如URIs、request/response头，缓存，版本控制，多种内容格式）</p>
<p>4、它也支持MVC的特征，像路由、控制器、action、filter、模型绑定、控制反转（IOC）或依赖注入（DI），单元测试。这些可以使程序更简单、更健壮</p>
<p>5、它可以部署在应用程序和IIS上</p>
<p>6、这是一个轻量级的框架，并且对限制带宽的设备，比如智能手机等支持的很好</p>
<p>7、Response可以被Web API的MediaTypeFormatter转换成Json、XML 或者任何你想转换的格式。</p>
<p>技术这么多，我该选谁？</p>
<p>1、当你想创建一个支持消息、消息队列、双工通信的服务时，你应该选择WCF</p>
<p>2、当你想创建一个服务，可以用更快速的传输通道时，像TCP、NamedPipes或者甚至是UDP（在WCF4.5中）,在其他传输通道不可用的时候也可以支持HTTP。</p>
<p>3、当你想创建一个基于HTTP的面向资源的服务并且可以使用HTTP的全部特征时（比如URIs、request/response头，缓存，版本控制，多种内容格式），你应该选择WebAPI</p>
<p>4、当你想让你的服务用于浏览器、手机、iPhone和平板电脑时，你应该选择Web API</p>
<p>来自 &lt;<a class="link" href="https://link.zhihu.com/?target=https://www.cnblogs.com/bolang100/p/10642419.html">https://www.cnblogs.com/bolang100/p/10642419.html<i class="fas fa-external-link-alt"></i></a>&gt;</p>
<h3 id="65、前后端分离"><a href="#65、前后端分离" class="headerlink" title="65、前后端分离"></a><strong>65、前后端分离</strong></h3><p>首先什么是前后端分离？</p>
<p>最核心的就是无论你后端换了什么语言，换了什么人去编写，换了什么样的服务器，只要你们定义的一个接口规则不变，然后不会影响到用户的使用，数据的一个展示。</p>
<p>同时反过来也一样，无论你前端换了什么UI框架，欸，我今天用easyui，明天我用layui，后天我用bootstrap，你也能够根据定义的接口文档去展示相关数据和效果，那么就是前后端分离。</p>
<p>说白了就是相互之间是独立的，这就是为什么有前后端分离这个观点出来，并且大家都认可不迟反对态度，恰恰就是说明前后端分离当中的两个字，“分离”</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C# DataTable 的用法</title>
    <url>/2021/03/19/2021-03-19-Csharp-DataTable-%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>在项目中经常用到DataTable,如果DataTable使用得当，不仅能使程序简洁实用，而且能够提高性能，达到事半功倍的效果，现对DataTable的使用技巧进行一下总结。 </p>
<h2 id="DataTable-简介"><a href="#DataTable-简介" class="headerlink" title="DataTable 简介"></a>DataTable 简介</h2><h3 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="(1)构造函数"></a>(1)构造函数</h3><p><code>DataTable()</code>  不带参数初始化DataTable类的新实例</p>
<p><code>DataTable (string tableName)</code> 用指定的表名初始化DataTable类的新实例。 </p>
<p><code>DataTable (string tableName, string tableNamespace)</code> 用指定的表名和命名空间初始化DataTable类的新实例。 </p>
<h3 id="2-常用属性"><a href="#2-常用属性" class="headerlink" title="(2) 常用属性"></a>(2) 常用属性</h3><p>CaseSensitive  指示表中的字符串比较是否区分大小写。<br>ChildRelations  获取此DataTable的子关系的集合。<br>Columns       获取属于该表的列的集合。<br>Constraints    获取由该表维护的约束的集合。<br>DataSet       获取此表所属的DataSet。<br>DefaultView    获取可能包括筛选视图或游标位置的表的自定义视图。<br>HasErrors     获取一个值，该值指示该表所属的DataSet的任何表的任何行中是否有错误。<br>MinimumCapacity 获取或设置该表最初的起始大小。该表中行的最初起始大小。默认值为50。<br>Rows         获取属于该表的行的集合。<br>TableName   获取或设置DataTable的名称。 </p>
<h3 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="(3)常用方法"></a>(3)常用方法</h3><p>AcceptChanges()  提交自上次调用AcceptChanges()以来对该表进行的所有更改。<br>BeginInit()     开始初始化在窗体上使用或由另一个组件使用的DataTable。初始化发生在运行时。<br>Clear()       清除所有数据的DataTable。<br>Clone()       克隆DataTable的结构，包括所有DataTable架构和约束。<br>EndInit()      结束在窗体上使用或由另一个组件使用的DataTable的初始化。初始化发生在运行时。<br>ImportRow(DataRow row)  将DataRow复制到DataTable中，保留任何属性设置以及初始值和当前值。<br>Merge(DataTable table) 将指定的DataTable与当前的DataTable合并。<br>NewRow()     创建与该表具有相同架构的新DataRow。</p>
<h2 id="二、DataTable-使用技巧"><a href="#二、DataTable-使用技巧" class="headerlink" title="二、DataTable 使用技巧"></a>二、DataTable 使用技巧</h2><p>   （1）Create a DataTable</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DataTable dt = <span class="keyword">new</span> DataTable(<span class="string">"Table_AX"</span>); </span><br></pre></td></tr></table></figure>
<p>   （2）Add columns for DataTable</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Method 1</span></span><br><span class="line"> dt.Columns.Add(<span class="string">"column0"</span>, System.Type.GetType(<span class="string">"System.String"</span>));</span><br><span class="line"> <span class="comment">//Method 2</span></span><br><span class="line"> DataColumn dc = <span class="keyword">new</span> DataColumn(<span class="string">"column1"</span>, System.Type.GetType(<span class="string">"System.Boolean"</span>));</span><br><span class="line"> dt.Columns.Add(dc); </span><br></pre></td></tr></table></figure>
<p>​    （3）Add rows for DataTable</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Initialize the row</span></span><br><span class="line">    DataRow dr = dt.NewRow();</span><br><span class="line">    dr[<span class="string">"column0"</span>] = <span class="string">"AX"</span>;</span><br><span class="line">    dr[<span class="string">"column1"</span>] = <span class="literal">true</span>;</span><br><span class="line">    dt.Rows.Add(dr);</span><br><span class="line">    <span class="comment">//Doesn't initialize the row</span></span><br><span class="line">    DataRow dr1 = dt.NewRow();</span><br><span class="line">    dt.Rows.Add(dr1); </span><br></pre></td></tr></table></figure>
<p>​    （4）Select row</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Search the second row 如果没有赋值,则用is null来select</span></span><br><span class="line"> DataRow[] drs = dt.Select(<span class="string">"column1 is null"</span>);</span><br><span class="line"> DataRow[] drss = dt.Select(<span class="string">"column0 = 'AX'"</span>); </span><br></pre></td></tr></table></figure>
<p>​    （5）Copy DataTable include data</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DataTable dtNew = dt.Copy(); </span><br></pre></td></tr></table></figure>
<p>​    （6）Copy DataTable only scheme​</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DataTable dtOnlyScheme = dt.Clone(); </span><br></pre></td></tr></table></figure>
<p>​    （7）Operate one row </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对dt的操作</span></span><br><span class="line">    <span class="comment">//Method 1</span></span><br><span class="line">    DataRow drOperate = dt.Rows[<span class="number">0</span>];</span><br><span class="line">    drOperate[<span class="string">"column0"</span>] = <span class="string">"AXzhz"</span>;</span><br><span class="line">    drOperate[<span class="string">"column1"</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//Method 2</span></span><br><span class="line">    drOperate[<span class="number">0</span>] = <span class="string">"AXzhz"</span>;</span><br><span class="line">    drOperate[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//Method 3</span></span><br><span class="line">    dt.Rows[<span class="number">0</span>][<span class="string">"column0"</span>] = <span class="string">"AXzhz"</span>;</span><br><span class="line">    dt.Rows[<span class="number">0</span>][<span class="string">"column1"</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//Method 4</span></span><br><span class="line">    dt.Rows[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">"AXzhz"</span>;</span><br><span class="line">    dt.Rows[<span class="number">0</span>][<span class="number">1</span>] = <span class="literal">false</span>; </span><br></pre></td></tr></table></figure>
<p>​    （8）Evaluate another DataTable’s row to current Datatable</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">dtOnlyScheme.Rows.Add(dt.Rows[<span class="number">0</span>].ItemArray);   </span><br></pre></td></tr></table></figure>
<p>（9）Convert to string  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">System.IO.StringWriter sw = <span class="keyword">new</span> System.IO.StringWriter();</span><br><span class="line">System.Xml.XmlTextWriter xw = <span class="keyword">new</span> System.Xml.XmlTextWriter(sw);</span><br><span class="line">dt.WriteXml(xw);</span><br><span class="line"><span class="built_in">string</span> s = sw.ToString();</span><br></pre></td></tr></table></figure>
<p>​    （10）Filter DataTable</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">dt.DefaultView.RowFilter = <span class="string">"column1 &lt;&gt; true"</span>;</span><br><span class="line">dt.DefaultView.RowFilter = <span class="string">"column1 = true"</span>;</span><br></pre></td></tr></table></figure>
<p>​    （11）Sort row</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">dt.DefaultView.Sort = <span class="string">"ID ,Name ASC"</span>;</span><br><span class="line">dt=dt.DefaultView.ToTable();</span><br></pre></td></tr></table></figure>
<p>​     （12）Bind DataTable</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//绑定的其实是DefaultView</span></span><br><span class="line">gvTestDataTable.DataSource = dt;</span><br><span class="line">gvTestDataTable.DataBind();</span><br></pre></td></tr></table></figure>
<p>​     （13）judge the DataTable’s Column name is a string</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//判断一个字符串是否为DataTable的列名</span></span><br><span class="line">dtInfo.Columns.Contains(<span class="string">"AX"</span>);</span><br></pre></td></tr></table></figure>
<p>​     （14）DataTable convert to XML and XML convert to DataTable</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>     {</span><br><span class="line">       DataTable dt_AX = <span class="keyword">new</span> DataTable();</span><br><span class="line">       <span class="comment">//dt_AX.Columns.Add("Sex", typeof(System.Boolean));</span></span><br><span class="line">       <span class="comment">//DataRow dr = dt_AX.NewRow();</span></span><br><span class="line">       <span class="comment">//dr["Sex"] = true;</span></span><br><span class="line">       <span class="comment">//dt_AX.Rows.Add(dr);</span></span><br><span class="line">       <span class="built_in">string</span> xml=ConvertBetweenDataTableAndXML_AX(dt_AX);</span><br><span class="line">       DataTable dt = ConvertBetweenDataTableAndXML_AX(xml);</span><br><span class="line">     }</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ConvertBetweenDataTableAndXML_AX</span>(<span class="params">DataTable dtNeedCoveret</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">       System.IO.TextWriter tw = <span class="keyword">new</span> System.IO.StringWriter();</span><br><span class="line">      <span class="comment">//if TableName is empty, WriteXml() will throw Exception.         </span></span><br><span class="line"></span><br><span class="line">dtNeedCoveret.TableName=dtNeedCoveret.TableName.Length==<span class="number">0</span>?<span class="string">"Table_AX"</span>:dtNeedCoveret.TableName;</span><br><span class="line">       dtNeedCoveret.WriteXml(tw);</span><br><span class="line">       dtNeedCoveret.WriteXmlSchema(tw);</span><br><span class="line">       <span class="keyword">return</span> tw.ToString();</span><br><span class="line">    }</span><br><span class="line">     <span class="function"><span class="keyword">public</span> DataTable <span class="title">ConvertBetweenDataTableAndXML_AX</span>(<span class="params"><span class="built_in">string</span> xml</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">       System.IO.TextReader trDataTable = <span class="keyword">new</span> System.IO.StringReader(xml.Substring(<span class="number">0</span>, xml.IndexOf(<span class="string">"&lt;?xml"</span>)));</span><br><span class="line">       System.IO.TextReader trSchema = <span class="keyword">new</span> System.IO.StringReader(xml.Substring(xml.IndexOf(<span class="string">"&lt;?xml"</span>)));</span><br><span class="line">       DataTable dtReturn = <span class="keyword">new</span> DataTable();</span><br><span class="line">       dtReturn.ReadXmlSchema(trSchema);</span><br><span class="line">       dtReturn.ReadXml(trDataTable);</span><br><span class="line">       <span class="keyword">return</span> dtReturn;</span><br><span class="line">    }</span><br></pre></td></tr></table></figure>


<h2 id="三、DataTable-Select-筛选数据"><a href="#三、DataTable-Select-筛选数据" class="headerlink" title="三、DataTable.Select() 筛选数据"></a>三、DataTable.Select() 筛选数据</h2><p>有时候我们需要对数据表进行筛选，微软为我们封装了一个公共方法， DataTable.Select()，其用法如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Select()</span><br><span class="line"></span><br><span class="line">Select(<span class="built_in">string</span> filterExpression)</span><br><span class="line"></span><br><span class="line">Select(<span class="built_in">string</span> filterExpression, <span class="built_in">string</span> sort)</span><br><span class="line"></span><br><span class="line">Select(string filterExpression,string sort, DataViewRowState record States)</span><br></pre></td></tr></table></figure>
<p>1） <code>Select()</code>——获取所有 System.Data.DataRow 对象的数组；</p>
<p>2） <code>Select(string filterExpression)</code>——按照主键顺序（如果没有主键，则按照添加顺序）获取与筛选条件相匹配的所有 System.Data.DataRow 对象的数组；</p>
<p>3） <code>Select(string filterExpression, string sort)</code>——获取按照指定的排序顺序且与筛选条件相匹配的所有System.Data.DataRow 对象的数组；</p>
<p>4） <code>Select(string filterExpression, string sort, DataViewRowState recordStates)</code>——获取与排序顺序中的筛选器以及指定的状态相匹配的所有。</p>
<h3 id="举例说明："><a href="#举例说明：" class="headerlink" title="==举例说明：=="></a>==举例说明：==</h3><p>有一个用户表，名称为 dtUsers，有id、姓名name、性别sex、年龄age</p>
<p>1.筛选所有的用户  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DataRow[] drs1 = dtUsers.Select();</span><br></pre></td></tr></table></figure>
<p>2.筛选所有性别为男的用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DataRow[] drs2 =dtUsers.Select("sex = '男' ");</span><br></pre></td></tr></table></figure>
<p>3.筛选所有性别为男且年龄在18岁以上的用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DataRow[] drs3 =dtUsers.Select("sex = '男' and age &gt;= 18");</span><br></pre></td></tr></table></figure>
<p>4.筛选所有性别为男或者年龄在18岁以上的用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DataRow[] drs4 =dtUsers.Select("sex = '男' or age &gt;= 18");</span><br></pre></td></tr></table></figure>
<p>5.筛选所有姓“夏”的用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DataRow[] drs5 =dtUsers.Select("name like '夏%'");</span><br></pre></td></tr></table></figure>
<p>6.筛选所有18岁以上的用户且按从大到小的顺序排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DataRow[] drs5 =dtUsers.Select("age &gt;=18","age desc");</span><br></pre></td></tr></table></figure>
<p>7.上面最后一种用法没试过，有机会再列举出来。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>1.上面的Select操作是不区分大小写的（表字段不敏感，如pl-sql语法），如果需要区分大小写，需要将DataTable的caseSensitive属性设为true，例如上表的</p>
<p>dtUsers.CaseSensitive = true;//区分大小写</p>
<p>2.今天做开发发现一个问题，那边是对空白符的筛选无效，即dt.Select(“colnume = ‘’ “);经过调试后发现是因为我的数据源是从数据库中查询的，如下（表名dtOriginal）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210414084308.jpg" alt="img"></p>
<p>我在对PRODUCTUNIT列进行筛选的时候，第一行的“制作一部”筛选出了结果，而后面4行并没有，因为是数据类型的问题——</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210414084308.jpg" alt="img"></p>
<p>解决办法有两种，一种是把所有的空白单元格替换成空格字符 ‘’，一种是在数据库查询的时候用decode()函数进行替换，例如SELECT DECODE(列名,NULL,’’,’列本身’) FROM 表名(用replace函数在数据库中替换NULL是无效的)。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap 笔记</title>
    <url>/2021/04/13/2021-04-13-Bootstrap-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210413104055.png" alt="image-20210413104055420"></p>
<h2 id="BootStrap的安装和使用"><a href="#BootStrap的安装和使用" class="headerlink" title="BootStrap的安装和使用"></a>BootStrap的安装和使用</h2><p>英文：<a class="link"   href="https://getbootstrap.com/" >https://getbootstrap.com/<i class="fas fa-external-link-alt"></i></a></p>
<p>中文： <a class="link"   href="https://v3.bootcss.com/" >https://v3.bootcss.com/<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="BootStrap-介绍"><a href="#BootStrap-介绍" class="headerlink" title="BootStrap 介绍"></a>BootStrap 介绍</h3><p>BootStrap 是一套现成的CSS</p>
<ul>
<li>用于开发响应式布局</li>
</ul>
<h3 id="BootStrap-特点"><a href="#BootStrap-特点" class="headerlink" title="BootStrap 特点"></a>BootStrap 特点</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210413104545.png" alt="image-20210413104545894"></p>
<h2 id="布局容器和栅格网格系统"><a href="#布局容器和栅格网格系统" class="headerlink" title="布局容器和栅格网格系统"></a>布局容器和栅格网格系统</h2><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><ol>
<li>.container 类似于固定宽度并且支持响应式布局的容器</li>
<li>.container-fluid 类用于100%宽度，占据全部适口</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">布局容器</span></span><br><span class="line"><span class="comment">1. .container 类似于固定宽度并且支持响应式布局的容器</span></span><br><span class="line"><span class="comment">2. .container-fluid 类用于100%宽度，占据全部适口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1/2 选择其一，不建议都选择</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&lt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: thistle;height: 500px&quot;</span>&gt;</span>--&gt;</span><br><span class="line">  .container 类似于固定宽度并且支持响应式布局的容器</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: thistle;height: 500px&quot;</span>&gt;</span></span><br><span class="line">    .container-fluid 类用于100%宽度，占据全部适口</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="栅格网格系统"><a href="#栅格网格系统" class="headerlink" title="栅格网格系统"></a>栅格网格系统</h3><p>数据行(.row) 必须包含在容器（.container)中，以方便为其赋予合适的对齐方式和内距（padding）</p>
<p>在行(.row)中可以添加列(.colum)</p>
<h3 id="栅格参数"><a href="#栅格参数" class="headerlink" title="栅格参数"></a>栅格参数</h3><p>通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">超小屏幕 手机 (&lt;768px)</th>
<th align="left">小屏幕 平板 (≥768px)</th>
<th align="left">中等屏幕 桌面显示器 (≥992px)</th>
<th align="left">大屏幕 大桌面显示器 (≥1200px)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">栅格系统行为</td>
<td align="left">总是水平排列</td>
<td align="left">开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>.container</code> 最大宽度</td>
<td align="left">None （自动）</td>
<td align="left">750px</td>
<td align="left">970px</td>
<td align="left">1170px</td>
</tr>
<tr>
<td align="left">类前缀</td>
<td align="left"><code>.col-xs-</code></td>
<td align="left"><code>.col-sm-</code></td>
<td align="left"><code>.col-md-</code></td>
<td align="left"><code>.col-lg-</code></td>
</tr>
<tr>
<td align="left">列（column）数</td>
<td align="left">12</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">最大列（column）宽</td>
<td align="left">自动</td>
<td align="left">~62px</td>
<td align="left">~81px</td>
<td align="left">~97px</td>
</tr>
<tr>
<td align="left">槽（gutter）宽</td>
<td align="left">30px （每列左右均有 15px）</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">可嵌套</td>
<td align="left">是</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">偏移（Offsets）</td>
<td align="left">是</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">列排序</td>
<td align="left">是</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<ol>
<li><p>列组合: 列总和数不能超过12 大于12 则自动换到下一行</p>
</li>
<li><p>列偏移</p>
</li>
<li><p>列排序</p>
</li>
<li><p>列嵌套</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>栅格网格系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #2b669a&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #2aabd2&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">栅格网格系统</span></span><br><span class="line"><span class="comment">    1. 列组合: 列总和数不能超过12 大于12 则自动换到下一行</span></span><br><span class="line"><span class="comment">    2. 列偏移</span></span><br><span class="line"><span class="comment">    3. 列排序</span></span><br><span class="line"><span class="comment">    4. 列嵌套</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--布局容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        列元素 col-xs-数值 col-sm-数值 col-md-数值 col-lg-数值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: chartreuse;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #3e8f3e;&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    列组合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: mediumaquamarine&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: burlywood&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: indianred&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: darkturquoise&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #666bcd&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #764e1b&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #9d9d9d&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #3e8f3e&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #4cae4c&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：列的总数不能超过12--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: mediumaquamarine&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 col-md-offset-2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: burlywood&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: indianred&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: darkturquoise&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    列排序--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: black&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 col-md-push-3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blue&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: gold&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 col-md-pull-2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: green&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--列嵌套--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #3e8f3e&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #8f3e7d&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #708f3e&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #8f6b3e&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: burlywood&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #9d9d9d&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #3e8f3e&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #4c84ae&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #ae4c92&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="常用板式"><a href="#常用板式" class="headerlink" title="常用板式"></a>常用板式</h2><h4 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h4><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>​    bootstrap 对h1-h6的标题效果进行了覆盖<br>​    提供了对应的类名，为非标题元素设置样式 .h1~.h6<br>​    副标题 small 标签或者 .small 类名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  标题1</span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span></span><br><span class="line">    副标题</span><br><span class="line">  <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span> bootstrap的副标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>bootstrap 定义的h1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 通过.lead 来突出强调内容（其作用是增大文本字号，加粗文本，而且对行高和margin也做相应的处理）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span> 通过.lead 来突出<span class="tag">&lt;<span class="name">small</span>&gt;</span>强调内容<span class="tag">&lt;/<span class="name">small</span>&gt;</span>（其作用是增大文本字号，加粗文本，而且对行高和margin也做相应的处理）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h2 id="Bootstrap-模态框（Modal）插件"><a href="#Bootstrap-模态框（Modal）插件" class="headerlink" title="Bootstrap 模态框（Modal）插件"></a>Bootstrap 模态框（Modal）插件</h2><p>模态框（Modal）是覆盖在父窗体上的子窗体。通常，目的是显示来自一个单独的源的内容，可以在不离开父窗体的情况下有一些互动。子窗体可提供信息、交互等。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>您可以切换模态框（Modal）插件的隐藏内容：</p>
<ul>
<li><p><strong>通过 data 属性</strong>：在控制器元素（比如按钮或者链接）上设置属性 <strong>data-toggle=”modal”**，同时设置 **data-target=”#identifier”</strong> 或 <strong>href=”#identifier”</strong> 来指定要切换的特定的模态框（带有 id=”identifier”）。</p>
</li>
<li><p>通过 JavaScript</p>
<p>：使用这种技术，您可以通过简单的一行 JavaScript 来调用带有 id=”identifier” 的模态框：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#identifier&#x27;</span>).modal(options)</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3></li>
</ul>
<p>一个静态的模态窗口实例，如下面的实例所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 实例 - 模态框（Modal）插件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>创建模态框（Modal）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮触发模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span></span><br><span class="line">	开始演示模态框</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">					<span class="symbol">&amp;times;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span></span><br><span class="line">					模态框（Modal）标题</span><br><span class="line">				<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">				在这里添加一些文本</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭</span><br><span class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">					提交更改</span><br><span class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>下表列出了模态框中要用到事件。这些事件可在函数中当钩子使用。</p>
<table>
<thead>
<tr>
<th align="left">事件</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">show.bs.modal</td>
<td align="left">在调用 show 方法后触发。</td>
<td align="left"><code>$(&#39;#identifier&#39;).on(&#39;show.bs.modal&#39;, function () &#123;  // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td align="left">shown.bs.modal</td>
<td align="left">当模态框对用户可见时触发（将等待 CSS 过渡效果完成）。</td>
<td align="left"><code>$(&#39;#identifier&#39;).on(&#39;shown.bs.modal&#39;, function () &#123;  // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td align="left">hide.bs.modal</td>
<td align="left">当调用 hide 实例方法时触发。</td>
<td align="left"><code>$(&#39;#identifier&#39;).on(&#39;hide.bs.modal&#39;, function () &#123;  // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td align="left">hidden.bs.modal</td>
<td align="left">当模态框完全对用户隐藏时触发。</td>
<td align="left"><code>$(&#39;#identifier&#39;).on(&#39;hidden.bs.modal&#39;, function () &#123;  // 执行一些动作... &#125;)</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiny 网页设计</title>
    <url>/2021/04/17/2021-04-17-Shiny-%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>Short essay (300 words): </p>
<p>Briefly comment on bioinformatics web app design and usage, including important key considerations, information extraction, typical problems, future challenges, promising directions, and other issues that catch your attention. (20 points)</p>
<ul>
<li>Key consideration</li>
<li>Information extraction</li>
<li>Typical problems</li>
<li>Future challenges</li>
<li>Promising direction</li>
</ul>
<p>Web skills, one of the significant tools in demonstrating experiment results, have gained increasing importance in bioinformatics students and researchers. Generally, a bioinformatics web application could process some kind of biological data from users’ input and output the annotated or elaborated results, for instance, RNA-seq, GO analysis. In other words, a bioinformatics web application contains three steps, input, processing, and output. Therefore, UI design scripts and data processing scripts would be necessary for bioinformatics people. Regarding the UI design, HTML, CSS and JavaScript would be the top choice, meanwhile, regarding the data processing language, R or Python would be widely used. </p>
<p>Owing to the fact that most bioinformatics people do not possess enough programing knowledge to learn all the language suggested previously, they generally mastered one language, for instance, R. As a result, “shiny” package based on R was devised and researchers could now design and publish their own web application with a few R codes. To be more specific, shiny is a highly assembled R package and sufficient to cover basic requirements for demonstration. Hence, there is no need for bioinformatics researchers to learn extra web design language and let them focus on the data processing part, saving their energy and time. </p>
<p>However, the shiny-based web application has its own drawbacks. Based on my personal experience in this coursework, I found that the tools were limited and could only satisfy the basic layout, rather than fancy, well-designed web pages. Also, since shiny is based on R, researchers’ choice could be restricted to R, but some heated techniques like deep learning could not achieve their full potential on the R platform, so the application area is in a small scope. In the meantime, users have to devote some time to learning the document of shiny, but the overall investment could already support you to learn the normal web designing language HTML, CSS and Javascript. The previously stated reasons could probably account for the limited use of shiny in actual web development in the bioinformatic field, they mostly prefer the normal web development tool. In reality, it is a great way to start by shiny and cultivate some interests in web design and turn to other more general, widely used tools</p>
<h2 id="The-layout-of-the-website"><a href="#The-layout-of-the-website" class="headerlink" title="The layout of the website"></a>The layout of the website</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210417190257.png" alt="image-20210417190257742"></p>
<h2 id="Filtering-criteria"><a href="#Filtering-criteria" class="headerlink" title="Filtering criteria"></a>Filtering criteria</h2><p><img src="/Users/yuxuan/Library/Application%20Support/typora-user-images/image-20210417202526960.png" alt="image-20210417202526960"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210417202811.png" alt="image-20210417202811677"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210417202738.png" alt="image-20210417202738923"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210418075434.png" alt="image-20210418075434264"></p>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Title     : TODO</span></span><br><span class="line"><span class="comment"># Objective : TODO</span></span><br><span class="line"><span class="comment"># Created by: yuxuan</span></span><br><span class="line"><span class="comment"># Created on: 4/9/21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment"># This is Server design script</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"></span><br><span class="line">library(shiny)</span><br><span class="line"></span><br><span class="line">shinyServer(<span class="keyword">function</span>(input, output) &#123;</span><br><span class="line">  res = read.table(file = <span class="string">&quot;~/cw1/P1/DGE/gene_exp.diff&quot;</span>, header = <span class="built_in">T</span>, sep = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"></span><br><span class="line">  query &lt;- eventReactive(input$go0, &#123;</span><br><span class="line">    ID &lt;- which(res$gene_id == input$gene)</span><br><span class="line">    data &lt;- res[ID,]</span><br><span class="line">    data[,<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">12</span>)]</span><br><span class="line">  &#125;)</span><br><span class="line">  data_v1 &lt;- eventReactive(input$go, &#123;</span><br><span class="line">    input$FPKM_value_1</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  data_v2 &lt;- eventReactive(input$go, &#123;</span><br><span class="line">    input$FPKM_value_2</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  data_fg &lt;- eventReactive(input$go, &#123;</span><br><span class="line">    input$fold_change</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  data_pv &lt;- eventReactive(input$go, &#123;</span><br><span class="line">    input$p_value</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  output$FPKM_value_1 &lt;- renderText(data_v1())</span><br><span class="line">  output$FPKM_value_2 &lt;- renderText(data_v2())</span><br><span class="line">  output$fold_change &lt;- renderText(data_fg())</span><br><span class="line">  output$p_value &lt;- renderText(data_pv())</span><br><span class="line"></span><br><span class="line">  <span class="comment"># data processing, still run after update buttom</span></span><br><span class="line"></span><br><span class="line">  process &lt;- eventReactive(input$go, &#123;</span><br><span class="line">    idx = which((res$value_1 &gt; input$FPKM_value_1 | res$value_2 &gt; input$FPKM_value_2) &amp;</span><br><span class="line">                  (<span class="built_in">abs</span>(res$log2.fold_change.) &gt;= input$fold_change) &amp;</span><br><span class="line">                  (res$p_value &lt; input$p_value))</span><br><span class="line">    res_processed = res[idx,]</span><br><span class="line">    head(res_processed)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  rows &lt;- eventReactive(input$go, &#123;</span><br><span class="line">    idx = which((res$value_1 &gt; input$FPKM_value_1 | res$value_2 &gt; input$FPKM_value_2) &amp;</span><br><span class="line">                  (<span class="built_in">abs</span>(res$log2.fold_change.) &gt;= input$fold_change) &amp;</span><br><span class="line">                  (res$p_value &lt; input$p_value))</span><br><span class="line">    res_processed = res[idx,]</span><br><span class="line">    nrow(res_processed)</span><br><span class="line">  &#125;)</span><br><span class="line">  cols &lt;- eventReactive(input$go, &#123;</span><br><span class="line">    idx = which((res$value_1 &gt; input$FPKM_value_1 | res$value_2 &gt; input$FPKM_value_2) &amp;</span><br><span class="line">                  (<span class="built_in">abs</span>(res$log2.fold_change.) &gt;= input$fold_change) &amp;</span><br><span class="line">                  (res$p_value &lt; input$p_value))</span><br><span class="line">    res_processed = res[idx,]</span><br><span class="line">    ncol(res_processed)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  bar_plot &lt;- eventReactive(input$go2, &#123;</span><br><span class="line">    idx = which((res$value_1 &gt; input$FPKM_value_1 | res$value_2 &gt; input$FPKM_value_2) &amp;</span><br><span class="line">                  (<span class="built_in">abs</span>(res$log2.fold_change.) &gt;= input$fold_change) &amp;</span><br><span class="line">                  (res$p_value &lt; input$p_value))</span><br><span class="line">    res_processed = res[idx,]</span><br><span class="line">    <span class="keyword">if</span> (input$gene %in% res_processed$gene_id) &#123;</span><br><span class="line">      ID &lt;- which(res_processed$gene_id == input$gene)</span><br><span class="line">      data &lt;- res_processed[ID,]</span><br><span class="line">      barplot(height = <span class="built_in">c</span>(data$value_1, data$value_2), names.arg = <span class="built_in">c</span>(<span class="string">&quot;WT&quot;</span>, <span class="string">&#x27;METTL5_KO&#x27;</span>)) &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      output$error &lt;- renderText(&#123; print(<span class="string">&quot;The entered gene name is not in the filtered list&quot;</span>) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  output$head_ori_data &lt;- renderTable(&#123; head(res) &#125;)</span><br><span class="line">  output$query &lt;- renderTable(query())</span><br><span class="line">  output$head_data_processed &lt;- renderTable(&#123; process() &#125;)</span><br><span class="line">  output$rows &lt;- renderText(&#123; rows() &#125;)</span><br><span class="line">  output$cols &lt;- renderText(&#123; cols() &#125;)</span><br><span class="line">  output$test &lt;- renderPrint(test())</span><br><span class="line">  output$bar &lt;- renderPlot(&#123; bar_plot() &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Title     : TODO</span></span><br><span class="line"><span class="comment"># Objective : TODO</span></span><br><span class="line"><span class="comment"># Created by: yuxuan</span></span><br><span class="line"><span class="comment"># Created on: 4/9/21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment"># This is UI design script</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"></span><br><span class="line">library(shiny)</span><br><span class="line">res_ori = read.table(file = <span class="string">&quot;~/cw1/P1/DGE/gene_exp.diff&quot;</span>, header = <span class="built_in">T</span>, sep = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define UI for application that draws a histogram</span></span><br><span class="line">shinyUI(fluidPage(</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">titlePanel(<span class="string">&quot;Welcome to my shiny-based website&quot;</span>),</span><br><span class="line"></span><br><span class="line">tags$h3(<span class="string">&quot;An overview of the data selected&quot;</span>),</span><br><span class="line">tableOutput(<span class="string">&quot;head_ori_data&quot;</span>),</span><br><span class="line"></span><br><span class="line">tags$hr(),</span><br><span class="line">tags$h3(<span class="string">&quot;Gene-based query&quot;</span>),</span><br><span class="line">textInput(<span class="string">&#x27;gene_query&#x27;</span>,label = <span class="string">&quot;Enter the gene name&quot;</span>,value = <span class="string">&quot;A1BG&quot;</span>),</span><br><span class="line">tableOutput(<span class="string">&quot;query&quot;</span>),</span><br><span class="line">actionButton(inputId = <span class="string">&quot;go0&quot;</span>, label = <span class="string">&quot;Search&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tags$hr(),</span><br><span class="line">tags$h3(<span class="string">&quot;Select the filter criteria&quot;</span>),</span><br><span class="line"></span><br><span class="line">fluidRow(</span><br><span class="line">  column(<span class="number">3</span>, sliderInput(<span class="string">&quot;FPKM_value_1&quot;</span>, <span class="string">&quot;FPKM of value 1&quot;</span>, value = <span class="number">1</span>, <span class="built_in">min</span> = <span class="number">0</span>, <span class="built_in">max</span> = <span class="built_in">max</span>(res_ori$value_1))),</span><br><span class="line">  column(<span class="number">3</span>, sliderInput(<span class="string">&quot;FPKM_value_2&quot;</span>, <span class="string">&quot;FPKM of value 2&quot;</span>, value = <span class="number">1</span>, <span class="built_in">min</span> = <span class="number">0</span>, <span class="built_in">max</span> = <span class="built_in">max</span>(res_ori$value_2))),</span><br><span class="line"></span><br><span class="line">  column(<span class="number">3</span>, sliderInput(<span class="string">&quot;fold_change&quot;</span>, <span class="string">&quot;log2(fold change)&quot;</span>, value = <span class="number">1</span>, <span class="built_in">min</span> = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">10</span>)),</span><br><span class="line">  column(<span class="number">3</span>, sliderInput(<span class="string">&quot;p_value&quot;</span>, <span class="string">&quot;p value&quot;</span>, value = <span class="number">0.05</span>, <span class="built_in">min</span> = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">1</span>))</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the input gene and set the default value</span></span><br><span class="line"></span><br><span class="line">actionButton(inputId = <span class="string">&quot;go&quot;</span>, label = <span class="string">&quot;update&quot;</span>),</span><br><span class="line"></span><br><span class="line">tags$br(),</span><br><span class="line">tags$br(),</span><br><span class="line">tags$br(),</span><br><span class="line"></span><br><span class="line">tags$h4(<span class="string">&quot;The suggested optimal filtering criteria is:&quot;</span>),</span><br><span class="line">tags$br(),</span><br><span class="line">tags$p(<span class="string">&quot;I. FPKM1 or FPKM2 &gt; 1&quot;</span>),</span><br><span class="line">tags$p(<span class="string">&quot;II. log2(fold change) &gt;1 or &lt; -1 &lt;=&gt; Absoluate value &gt; 1 &quot;</span>),</span><br><span class="line">tags$p(<span class="string">&quot;III. p-value &lt; 0.05&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tags$br(),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tags$h4(<span class="string">&quot;The filtering criteria you selected is: &quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fluidRow(</span><br><span class="line">  column(<span class="number">1</span>, tags$p(<span class="string">&quot;FPKM_value_1:&quot;</span>)),</span><br><span class="line">  column(<span class="number">1</span>, textOutput(<span class="string">&quot;FPKM_value_1&quot;</span>)),</span><br><span class="line">  column(<span class="number">1</span>, tags$p(<span class="string">&quot;FPKM_value_2:&quot;</span>)),</span><br><span class="line">  column(<span class="number">1</span>, textOutput(<span class="string">&quot;FPKM_value_2&quot;</span>)),</span><br><span class="line">  column(<span class="number">1</span>, tags$p(<span class="string">&quot;log2(fold change):&quot;</span>)),</span><br><span class="line">  column(<span class="number">1</span>, textOutput(<span class="string">&quot;fold_change&quot;</span>)),</span><br><span class="line">  column(<span class="number">1</span>, tags$p(<span class="string">&quot;p value&quot;</span>)),</span><br><span class="line">  column(<span class="number">3</span>, textOutput(<span class="string">&quot;p_value&quot;</span>)),</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line">tags$hr(),</span><br><span class="line">tags$h3(<span class="string">&quot;The head of the processed data under the criterial you filtered&quot;</span>),</span><br><span class="line">tags$br(),</span><br><span class="line">tableOutput(<span class="string">&quot;head_data_processed&quot;</span>),</span><br><span class="line">fluidRow(column(<span class="number">1</span>, tags$p(<span class="string">&quot;Rows:&quot;</span>)),</span><br><span class="line">         column(<span class="number">1</span>, textOutput(<span class="string">&quot;rows&quot;</span>))),</span><br><span class="line">fluidRow(column(<span class="number">1</span>, tags$p(<span class="string">&quot;Columns:&quot;</span>)),</span><br><span class="line">         column(<span class="number">1</span>, textOutput(<span class="string">&quot;cols&quot;</span>))),</span><br><span class="line">tags$hr(),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tags$h3(<span class="string">&quot;Now you obtained the filtered dataset&quot;</span>),</span><br><span class="line">tags$p(<span class="string">&quot;Enter the gene you would like to choose:&quot;</span>),</span><br><span class="line">textInput(inputId = <span class="string">&#x27;gene&#x27;</span>, <span class="string">&quot;Gene Name&quot;</span>, value = <span class="string">&quot;ABHD11-AS1&quot;</span>),</span><br><span class="line">tags$hr(),</span><br><span class="line">actionButton(inputId = <span class="string">&quot;go2&quot;</span>, label = <span class="string">&quot;update&quot;</span>),</span><br><span class="line">  textOutput(<span class="string">&quot;error&quot;</span>),</span><br><span class="line">  plotOutput(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>Shiny</tag>
      </tags>
  </entry>
  <entry>
    <title>Object类&amp;常用API</title>
    <url>/2021/04/19/2021-04-19-Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="主要内容-从第215个视频开始"><a href="#主要内容-从第215个视频开始" class="headerlink" title="主要内容 (从第215个视频开始)"></a>主要内容 (从第215个视频开始)</h2><ul>
<li>Object类</li>
<li>Date类</li>
<li>DateFormat类</li>
<li>Calendar类</li>
<li>System类</li>
<li>StringBuilder类</li>
<li>包装类</li>
</ul>
<p><a class="link"   href="https://www.bilibili.com/video/BV1uJ411k7wy?p=215" >https://www.bilibili.com/video/BV1uJ411k7wy?p=215<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够说出Object类的特点</li>
<li><input disabled="" type="checkbox"> 能够重写Object类的toString方法</li>
<li><input disabled="" type="checkbox"> 能够重写Object类的equals方法</li>
<li><input disabled="" type="checkbox"> 能够使用日期类输出当前日期</li>
<li><input disabled="" type="checkbox"> 能够使用将日期格式化为字符串的方法</li>
<li><input disabled="" type="checkbox"> 能够使用将字符串转换成日期的方法</li>
<li><input disabled="" type="checkbox"> 能够使用System类的数组复制方法</li>
<li><input disabled="" type="checkbox"> 能够使用System类获取当前毫秒时刻值</li>
<li><input disabled="" type="checkbox"> 能够说出使用StringBuilder类可以解决的问题</li>
<li><input disabled="" type="checkbox"> 能够使用StringBuilder进行字符串拼接操作</li>
<li><input disabled="" type="checkbox"> 能够说出8种基本类型对应的包装类名称</li>
<li><input disabled="" type="checkbox"> 能够说出自动装箱、自动拆箱的概念</li>
<li><input disabled="" type="checkbox"> 能够将字符串转换为对应的基本类型</li>
<li><input disabled="" type="checkbox"> 能够将基本类型转换为对应的字符串</li>
</ul>
<h1 id="第一章-Object类"><a href="#第一章-Object类" class="headerlink" title="第一章 Object类"></a>第一章 Object类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p><code>java.lang.Object</code>类是Java语言中的根类，即所有类的父类。它中描述的所有方法子类都可以使用。在对象实例化的时候，最终找的父类就是Object。</p>
<p>如果一个类没有特别指定父类，    那么默认则继承自Object类。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。今天我们主要学习其中的2个：</p>
<ul>
<li><code>public String toString()</code>：返回该对象的字符串表示。</li>
<li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li>
</ul>
<p><code>Person 类</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        直接打印对象的地址值没有意义,需要重写Object类中的toString方法</span></span><br><span class="line"><span class="comment">        打印对象的属性(name,age)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">       //return &quot;abc&quot;;</span></span><br><span class="line"><span class="comment">       return &quot;Person&#123;name=&quot;+name+&quot; ,age=&quot;+age+&quot;&#125;&quot;;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        return &quot;Person&#123;&quot; +</span></span><br><span class="line"><span class="comment">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="comment">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /*</span></span><br><span class="line"><span class="comment">        Object类的equals方法,默认比较的是两个对象的地址值,没有意义</span></span><br><span class="line"><span class="comment">        所以我们要重写equals方法,比较两个对象的属性(name,age)</span></span><br><span class="line"><span class="comment">        问题:</span></span><br><span class="line"><span class="comment">            隐含着一个多态</span></span><br><span class="line"><span class="comment">            多态的弊端:无法使用子类特有的内容(属性和方法)</span></span><br><span class="line"><span class="comment">            Object obj = p2 = new Person(&quot;古力娜扎&quot;,19);</span></span><br><span class="line"><span class="comment">            解决:可以使用向下转型(强转)把obj类型转换为Person</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">        //增加一个判断,传递的参数obj如果是this本身,直接返回true,提高程序的效率</span></span><br><span class="line"><span class="comment">        if(obj==this)&#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //增加一个判断,传递的参数obj如果是null,直接返回false,提高程序的效率</span></span><br><span class="line"><span class="comment">        if(obj==null)&#123;</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //增加一个判断,防止类型转换一次ClassCastException</span></span><br><span class="line"><span class="comment">        if(obj instanceof Person)&#123;</span></span><br><span class="line"><span class="comment">            //使用向下转型,把obj转换为Person类型</span></span><br><span class="line"><span class="comment">            Person p = (Person)obj;</span></span><br><span class="line"><span class="comment">            //比较两个对象的属性,一个对象是this(p1),一个对象是p(obj-&gt;p2)</span></span><br><span class="line"><span class="comment">            boolean b = this.name.equals(p.name) &amp;&amp; this.age==p.age;</span></span><br><span class="line"><span class="comment">            return b;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //不是Person类型直接返回false</span></span><br><span class="line"><span class="comment">        return false;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//getClass() != o.getClass() 使用反射技术,判断o是否是Person类型  等效于 obj instanceof Person</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-2-toString方法"><a href="#1-2-toString方法" class="headerlink" title="1.2 toString方法"></a>1.2 toString方法</h2><h3 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul>
<li><code>public String toString()</code>：返回该对象的字符串表示。</li>
</ul>
<p>toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值。</p>
<p>由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p>
<h3 id="覆盖重写"><a href="#覆盖重写" class="headerlink" title="覆盖重写"></a>覆盖重写</h3><p>如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造器与Getter Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在IntelliJ IDEA中，可以点击<code>Code</code>菜单中的<code>Generate...</code>，也可以使用快捷键<code>alt+insert</code>，点击<code>toString()</code>选项。选择需要包含的成员变量并确定。如下图所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.lang.Object</span></span><br><span class="line"><span class="comment">    类 Object 是类层次结构的根(父)类。</span></span><br><span class="line"><span class="comment">    每个类(Person,Student...)都使用 Object 作为超(父)类。</span></span><br><span class="line"><span class="comment">    所有对象（包括数组）都实现这个类的方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ToString</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Person类默认继承了Object类,所以可以使用Object类中的toString方法</span></span><br><span class="line"><span class="comment">            String toString() 返回该对象的字符串表示。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        String s = p.toString();</span><br><span class="line">        System.out.println(s);<span class="comment">//com.itheima.demo01.Object.Person@75412c2f | abc | Person&#123;name=张三 ,age=18&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接打印对象的名字,其实就是调用对象的toString  p=p.toString();</span></span><br><span class="line">        System.out.println(p);<span class="comment">//com.itheima.demo01.Object.Person@5f150435 | abc | Person&#123;name=张三 ,age=18&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//看一个类是否重写了toString,直接打印这个类的对象即可,如果没有重写toString方法那么打印的是对象的地址值</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        System.out.println(r);<span class="comment">//java.util.Random@3f3afe78  没有重写toString方法</span></span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(sc);<span class="comment">//java.util.Scanner[delimiters=\p&#123;javaWhitespace&#125;+..  重写toString方法</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[1, 2, 3]  重写toString方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>小贴士： 在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其toString()方法。</p>
</blockquote>
<h2 id="1-3-equals方法"><a href="#1-3-equals方法" class="headerlink" title="1.3 equals方法"></a>1.3 equals方法</h2><h3 id="方法摘要-1"><a href="#方法摘要-1" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul>
<li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li>
</ul>
<p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p>
<h3 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h3><p>如果没有覆盖重写equals方法，那么Object类中默认进行<code>==</code>运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p>
<h3 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h3><p><code>Demo02 Equals</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一个判断,传递的参数obj如果是this本身,直接返回true,提高程序的效率</span></span><br><span class="line">    <span class="keyword">if</span>(obj==<span class="keyword">this</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个判断,传递的参数obj如果是null,直接返回false,提高程序的效率</span></span><br><span class="line">    <span class="keyword">if</span>(obj==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个判断,防止类型转换一次ClassCastException</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        <span class="comment">//使用向下转型,把obj转换为Person类型</span></span><br><span class="line">        Person p = (Person)obj;</span><br><span class="line">        <span class="comment">//比较两个对象的属性,一个对象是this(p1),一个对象是p(obj-&gt;p2)</span></span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age==p.age;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不是Person类型直接返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。例如：(建议使用这个方法，是用IDEA自动生成的)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果对象地址一样，则认为相同</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 如果参数为空，或者类型信息不一样，则认为不同</span></span><br><span class="line">       <span class="comment">//getClass() != o.getClass() 使用反射技术,判断o是否是Person类型  等效于 obj instanceof Person</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 转换为当前类型</span></span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="comment">// 要求基本类型相等，并且将引用类型交给java.util.Objects类的equals静态方法取用结果</span></span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码充分考虑了对象为空、类型一致等问题，但方法内容并不唯一。大多数IDE都可以自动生成equals方法的代码内容。在IntelliJ IDEA中，可以使用<code>Code</code>菜单中的<code>Generate…</code>选项，也可以使用快捷键<code>alt+insert</code>，并选择<code>equals() and hashCode()</code>进行自动代码生成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object类的equals方法,默认比较的是两个对象的地址值,没有意义</span><br><span class="line">所以我们要重写equals方法,比较两个对象的属性(name,age)</span><br><span class="line">问题:</span><br><span class="line">隐含着一个多态</span><br><span class="line">多态的弊端:无法使用子类特有的内容(属性和方法)</span><br><span class="line">Object obj &#x3D; p2 &#x3D; new Person(&quot;古力娜扎&quot;,19);</span><br><span class="line">解决:可以使用向下转型(强转)把obj类型转换为Person</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips：Object类当中的hashCode等其他方法，今后学习。</p>
</blockquote>
<h2 id="1-4-Objects类"><a href="#1-4-Objects类" class="headerlink" title="1.4 Objects类"></a>1.4 Objects类</h2><p>在刚才IDEA自动重写equals代码中，使用到了<code>java.util.Objects</code>类，那么这个类是什么呢？</p>
<p>在<strong>JDK7</strong>添加了一个Objects工具类，它提供了一些方法来操作对象，它由一些静态的实用方法组成，这些方法是null-save（==空指针安全的）或null-tolerant（容忍空指针的）==，用于计算对象的hashcode、返回对象的字符串表示形式、比较两个对象。</p>
<p>在比较两个对象的时候，Object的equals方法容易抛出空指针异常，而Objects类中的equals方法就优化了这个问题。方法如下：</p>
<p> Objects类的equals方法:对两个对象进行比较,防止空指针异常</p>
<ul>
<li><code>public static boolean equals(Object a, Object b)</code>:判断两个对象是否相等。</li>
</ul>
<p>我们可以查看一下源码，学习一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo03</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="comment">//String s1 = null;</span></span><br><span class="line">        String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="comment">//boolean b = s1.equals(s2); // NullPointerException null是不能调用方法的,会抛出空指针异常</span></span><br><span class="line">        <span class="comment">//System.out.println(b);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Objects类的equals方法:对两个对象进行比较,防止空指针异常</span></span><br><span class="line"><span class="comment">            public static boolean equals(Object a, Object b) &#123;</span></span><br><span class="line"><span class="comment">                return (a == b) || (a != null &amp;&amp; a.equals(b));</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = Objects.equals(s1, s2);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5  总结"></a>1.5  总结</h2><h3 id="1-Object类介绍"><a href="#1-Object类介绍" class="headerlink" title="1. Object类介绍"></a>1. Object类介绍</h3><p>​    Object类是所有类的父类。一个类都会直接或者间接的继承自该类</p>
<p>​    该类提供了一些非常常用的方法！</p>
<h3 id="2-toString-方法"><a href="#2-toString-方法" class="headerlink" title="2. toString() 方法"></a>2. toString() 方法</h3><p>​    A: 作用：打印对象的信息</p>
<p>​    B: 重写前：打印的是包名类名@地址值</p>
<p>​    C: 重写后：打印的是对象中的属性值</p>
<h3 id="3-equals-方法"><a href="#3-equals-方法" class="headerlink" title="3. equals()方法"></a>3. equals()方法</h3><p>​    A: 作用：比较两个对象</p>
<p>​    B: 重写前：比较的是对象的地址值</p>
<p>​    C: 重写后：比较的是对象中的属性值</p>
<h3 id="4-Objects-equals-方法"><a href="#4-Objects-equals-方法" class="headerlink" title="4. Objects.equals()方法"></a>4. Objects.equals()方法</h3><p>​    比较两个对象是否相同，但是加了一些健壮性的判断</p>
<h1 id="第二章-日期时间类"><a href="#第二章-日期时间类" class="headerlink" title="第二章 日期时间类"></a>第二章 日期时间类</h1><h2 id="2-1-Date类"><a href="#2-1-Date类" class="headerlink" title="2.1 Date类"></a>2.1 Date类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code> java.util.Date</code>类 表示特定的瞬间，精确到毫秒。</p>
<p>继续查阅Date类的描述，发现Date拥有多个构造函数，只是部分已经过时，但是其中有未过时的构造函数可以把毫秒值转成日期对象。</p>
<ul>
<li><code>public Date()</code>：分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</li>
<li><code>public Date(long date)</code>：分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.util.Date:表示日期和时间的类</span><br><span class="line">类 Date 表示特定的瞬间，精确到毫秒。</span><br><span class="line">毫秒:千分之一秒 1000毫秒&#x3D;1秒</span><br><span class="line">特定的瞬间:一个时间点,一刹那时间</span><br><span class="line">2088-08-08 09:55:33:333 瞬间</span><br><span class="line">2088-08-08 09:55:33:334 瞬间</span><br><span class="line">2088-08-08 09:55:33:334 瞬间</span><br><span class="line">...</span><br><span class="line">毫秒值的作用:可以对时间和日期进行计算</span><br><span class="line">2099-01-03 到 2088-01-01 中间一共有多少天</span><br><span class="line">可以日期转换为毫秒进行计算,计算完毕,在把毫秒转换为日期</span><br><span class="line"></span><br><span class="line">把日期转换为毫秒:</span><br><span class="line">    当前的日期:2088-01-01</span><br><span class="line">    时间原点(0毫秒):1970 年 1 月 1 日 00:00:00(英国格林威治)</span><br><span class="line">    就是计算当前日期到时间原点之间一共经历了多少毫秒 (3742767540068L)</span><br><span class="line">注意:</span><br><span class="line">    中国属于东八区,会把时间增加8个小时</span><br><span class="line">    1970 年 1 月 1 日 08:00:00</span><br><span class="line"></span><br><span class="line">把毫秒转换为日期:</span><br><span class="line">    1 天 &#x3D; 24 × 60 × 60 &#x3D; 86400 秒  &#x3D; 86400 x 1000 &#x3D; 86400000毫秒</span><br></pre></td></tr></table></figure>


<blockquote>
<p>tips: 由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒。</p>
</blockquote>
<p>简单来说：使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Date</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date()); <span class="comment">// Tue Jan 16 14:37:35 CST 2018</span></span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(<span class="number">0L</span>)); <span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:在使用println方法时，会自动调用Date类中的toString方法。Date类对Object类中的toString方法进行了覆盖重写，所以结果为指定格式的字符串。</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>Date类中的多数方法已经过时，常用的方法有：</p>
<ul>
<li><code>public long getTime()</code> 把日期对象转换成对应的时间毫秒值。</li>
</ul>
<p><code>Demo02</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Date</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo03();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        long getTime() 把日期转换为毫秒值(相当于System.currentTimeMillis()方法)</span></span><br><span class="line"><span class="comment">          返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">        System.out.println(time);<span class="comment">//3742777636267</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Date类的带参数构造方法</span></span><br><span class="line"><span class="comment">        Date(long date) :传递毫秒值,把毫秒值转换为Date日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="number">0L</span>);</span><br><span class="line">        System.out.println(date);<span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line"></span><br><span class="line">        date = <span class="keyword">new</span> Date(<span class="number">3742767540068L</span>);</span><br><span class="line">        System.out.println(date);<span class="comment">// Sun Aug 08 09:39:00 CST 2088</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Date类的空参数构造方法</span></span><br><span class="line"><span class="comment">        Date() 获取当前系统的日期和时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);<span class="comment">//Sun Aug 08 12:23:03 CST 2088</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-2-DateFormat类"><a href="#2-2-DateFormat类" class="headerlink" title="2.2 DateFormat类"></a>2.2 DateFormat类</h2><p><code>java.text.DateFormat</code> 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。</p>
<ul>
<li><strong>格式化</strong>：按照指定的格式，从Date对象转换为String对象。</li>
<li><strong>解析</strong>：按照指定的格式，从String对象转换为Date对象。</li>
</ul>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p>
<ul>
<li><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。</li>
</ul>
<p>参数pattern是一个字符串，代表日期时间的自定义格式。</p>
<h3 id="格式规则"><a href="#格式规则" class="headerlink" title="格式规则"></a>格式规则</h3><p>常用的格式规则为：</p>
<table>
<thead>
<tr>
<th>标识字母（区分大小写）</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>y</td>
<td>年</td>
</tr>
<tr>
<td>M</td>
<td>月</td>
</tr>
<tr>
<td>d</td>
<td>日</td>
</tr>
<tr>
<td>H</td>
<td>时</td>
</tr>
<tr>
<td>m</td>
<td>分</td>
</tr>
<tr>
<td>s</td>
<td>秒</td>
</tr>
</tbody></table>
<blockquote>
<p>备注：更详细的格式规则，可以参考SimpleDateFormat类的API文档0。</p>
</blockquote>
<p>创建SimpleDateFormat对象的代码如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02SimpleDateFormat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的日期格式如：2018-01-16 15:06:38</span></span><br><span class="line">        DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p>DateFormat类的常用方法有：</p>
<ul>
<li><code>public String format(Date date)</code>：将Date对象格式化为字符串。</li>
<li><code>public Date parse(String source)</code>：将字符串解析为Date对象。</li>
</ul>
<h4 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h4><p>使用format方法的代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把Date对象转换成String</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03DateFormatMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span></span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        String str = df.format(date);</span><br><span class="line">        System.out.println(str); <span class="comment">// 2008年1月23日</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h4><p>使用parse方法的代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把String转换成Date对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04DateFormatMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        String str = <span class="string">&quot;2018年12月11日&quot;</span>;</span><br><span class="line">        Date date = df.parse(str);</span><br><span class="line">        System.out.println(date); <span class="comment">// Tue Dec 11 00:00:00 CST 2018</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-练习"><a href="#2-3-练习" class="headerlink" title="2.3 练习"></a>2.3 练习</h2><p>请使用日期时间相关的API，计算出一个人已经出生了多少天。</p>
<p><strong>思路：</strong></p>
<p>1.获取当前时间对应的毫秒值</p>
<p>2.获取自己出生日期对应的毫秒值</p>
<p>3.两个时间相减（当前时间– 出生日期）</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;请输入出生日期 格式 YYYY-MM-dd&quot;</span>);</span><br><span class="line">	<span class="comment">// 获取出生日期,键盘输入</span></span><br><span class="line">	String birthdayString = <span class="keyword">new</span> Scanner(System.in).next();</span><br><span class="line">	<span class="comment">// 将字符串日期,转成Date对象</span></span><br><span class="line">	<span class="comment">// 创建SimpleDateFormat对象,写日期模式</span></span><br><span class="line">	SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">	<span class="comment">// 调用方法parse,字符串转成日期对象</span></span><br><span class="line">	Date birthdayDate = sdf.parse(birthdayString);	</span><br><span class="line">	<span class="comment">// 获取今天的日期对象</span></span><br><span class="line">	Date todayDate = <span class="keyword">new</span> Date();	</span><br><span class="line">	<span class="comment">// 将两个日期转成毫秒值,Date类的方法getTime</span></span><br><span class="line">	<span class="keyword">long</span> birthdaySecond = birthdayDate.getTime();</span><br><span class="line">	<span class="keyword">long</span> todaySecond = todayDate.getTime();</span><br><span class="line">	<span class="keyword">long</span> secone = todaySecond-birthdaySecond;	</span><br><span class="line">	<span class="keyword">if</span> (secone &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;还没出生呢&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		System.out.println(secone/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-Calendar类"><a href="#2-4-Calendar类" class="headerlink" title="2.4 Calendar类"></a>2.4 Calendar类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>日历我们都见过</p>
<p><code>java.util.Calendar</code>是日历类，在Date后出现，替换掉了许多Date的方法。该类将所有可能用到的时间信息封装为静态成员变量，方便获取。日历类就是方便获取各个时间属性的。</p>
<h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p>Calendar为抽象类，由于语言敏感性，Calendar类在创建对象时并非直接创建，而是通过静态方法创建，返回子类对象，如下：</p>
<p>Calendar静态方法</p>
<ul>
<li><code>public static Calendar getInstance()</code>：使用默认时区和语言环境获得一个日历</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06CalendarInit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><p>根据Calendar类的API文档，常用方法有：</p>
<ul>
<li><code>public int get(int field)</code>：返回给定日历字段的值。</li>
<li><code>public void set(int field, int value)</code>：将给定的日历字段设置为给定值。</li>
<li><code>public abstract void add(int field, int amount)</code>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li>
<li><code>public Date getTime()</code>：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</li>
</ul>
<p>Calendar类中提供很多成员常量，代表给定的日历字段：</p>
<table>
<thead>
<tr>
<th>字段值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>年</td>
</tr>
<tr>
<td>MONTH</td>
<td>月（从0开始，可以+1使用）</td>
</tr>
<tr>
<td>DAY_OF_MONTH</td>
<td>月中的天（几号）</td>
</tr>
<tr>
<td>HOUR</td>
<td>时（12小时制）</td>
</tr>
<tr>
<td>HOUR_OF_DAY</td>
<td>时（24小时制）</td>
</tr>
<tr>
<td>MINUTE</td>
<td>分</td>
</tr>
<tr>
<td>SECOND</td>
<td>秒</td>
</tr>
<tr>
<td>DAY_OF_WEEK</td>
<td>周中的天（周几，周日为1，可以-1使用）</td>
</tr>
</tbody></table>
<h4 id="get-set方法"><a href="#get-set方法" class="headerlink" title="get/set方法"></a>get/set方法</h4><p>get方法用来获取指定字段的值，set方法用来设置指定字段的值，代码使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Calendar对象</span></span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置年 </span></span><br><span class="line">        <span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 设置月</span></span><br><span class="line">        <span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 设置日</span></span><br><span class="line">        <span class="keyword">int</span> dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.print(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + dayOfMonth + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.set(Calendar.YEAR, <span class="number">2020</span>);</span><br><span class="line">        System.out.print(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + dayOfMonth + <span class="string">&quot;日&quot;</span>); <span class="comment">// 2020年1月17日</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h4><p>add方法可以对指定日历字段的值进行加减操作，如果第二个参数为正数则加上偏移量，如果为负数则减去偏移量。代码如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        System.out.print(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + dayOfMonth + <span class="string">&quot;日&quot;</span>); <span class="comment">// 2018年1月17日</span></span><br><span class="line">        <span class="comment">// 使用add方法</span></span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, <span class="number">2</span>); <span class="comment">// 加2天</span></span><br><span class="line">        cal.add(Calendar.YEAR, -<span class="number">3</span>); <span class="comment">// 减3年</span></span><br><span class="line">        System.out.print(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + dayOfMonth + <span class="string">&quot;日&quot;</span>); <span class="comment">// 2015年1月18日; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="getTime方法"><a href="#getTime方法" class="headerlink" title="getTime方法"></a>getTime方法</h4><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        Date date = cal.getTime();</span><br><span class="line">        System.out.println(date); <span class="comment">// Tue Jan 16 16:03:09 CST 2018</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小贴士：</p>
<p>​     西方星期的开始为周日，中国为周一。</p>
<p>​     在Calendar类中，月份的表示是以0-11代表1-12月。</p>
<p>​     日期是有大小关系的，时间靠后，时间越大。</p>
</blockquote>
<h2 id="2-5日期相关类的总结"><a href="#2-5日期相关类的总结" class="headerlink" title="2.5日期相关类的总结"></a>2.5日期相关类的总结</h2><h3 id="2-5-1-Date-类"><a href="#2-5-1-Date-类" class="headerlink" title="2.5.1 Date 类"></a>2.5.1 Date 类</h3><p>​    A. 构造方法</p>
<p>​            Date(); 根据当前系统事件创建日期对象</p>
<p>​            Date(long time); 根据传入的毫秒值事件创建日期对象</p>
<p>​    B. 成员方法</p>
<p>​            long getTime(); 获取当前日期对象的毫秒时间值</p>
<p>​            String toLocalString(); 根据本地格式转换日期对象</p>
<h3 id="2-5-2-DateFormat-类SimpleDateFormat类"><a href="#2-5-2-DateFormat-类SimpleDateFormat类" class="headerlink" title="2.5.2 DateFormat 类SimpleDateFormat类"></a>2.5.2 DateFormat 类SimpleDateFormat类</h3><p>​    A. 构造方法</p>
<p>​            simpleDateFormat (String s); 根据指定模版创建日期格式化对象</p>
<p>​    B. 成员方法</p>
<p>​            String format(Date d); 根据指定格式格式化日期对象</p>
<p>​            Date parse(String s); 根据指定格式解析字符串</p>
<h3 id="2-5-3-Calendar-类"><a href="#2-5-3-Calendar-类" class="headerlink" title="2.5.3 Calendar 类"></a>2.5.3 Calendar 类</h3><p>​    A. 创建对象方式</p>
<p>​        Calendar c = Calendar.newInstance(); 获取日历类对象</p>
<p>​    B. 成员方法</p>
<p>​        int get(int n); 获取指定日历字段信息</p>
<p>​        void set(int n, int value);     将指定日历字段设置为指定的值</p>
<p>​        void add(int n, int value); 将指定日历字段增加或减少指定的值</p>
<h1 id="第三章-System类"><a href="#第三章-System类" class="headerlink" title="第三章 System类"></a>第三章 System类</h1><p><code>java.lang.System</code>类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作，在System类的API文档中，常用的方法有：</p>
<ul>
<li><code>public static long currentTimeMillis()</code>：返回以毫秒为单位的当前时间。</li>
<li><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>：将数组中指定的数据拷贝到另一个数组中。</li>
</ul>
<h2 id="3-1-currentTimeMillis方法"><a href="#3-1-currentTimeMillis方法" class="headerlink" title="3.1 currentTimeMillis方法"></a>3.1 currentTimeMillis方法</h2><p>实际上，currentTimeMillis方法就是 获取当前系统时间与1970年01月01日00:00点之间的毫秒差值 <code>(通常用来计算程序消耗的时间)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       	<span class="comment">//获取当前时间毫秒值</span></span><br><span class="line">        System.out.println(System.currentTimeMillis()); <span class="comment">// 1516090531144</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>验证for循环打印数字1-9999所需要使用的时间（毫秒）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时毫秒：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-arraycopy方法"><a href="#3-2-arraycopy方法" class="headerlink" title="3.2 arraycopy方法"></a>3.2 arraycopy方法</h2><ul>
<li><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>：将数组中指定的数据拷贝到另一个数组中。</li>
</ul>
<p>数组的拷贝动作是系统级的，性能很高。System.arraycopy方法具有5个参数，含义分别为：</p>
<table>
<thead>
<tr>
<th>参数序号</th>
<th>参数名称</th>
<th>参数类型</th>
<th>参数含义</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>src</td>
<td>Object</td>
<td>源数组</td>
</tr>
<tr>
<td>2</td>
<td>srcPos</td>
<td>int</td>
<td>源数组索引起始位置</td>
</tr>
<tr>
<td>3</td>
<td>dest</td>
<td>Object</td>
<td>目标数组</td>
</tr>
<tr>
<td>4</td>
<td>destPos</td>
<td>int</td>
<td>目标数组索引起始位置</td>
</tr>
<tr>
<td>5</td>
<td>length</td>
<td>int</td>
<td>复制元素个数</td>
</tr>
</tbody></table>
<h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>将src数组中前3个元素，复制到dest数组的前3个位置上复制元素前：src数组元素[1,2,3,4,5]，dest数组元素[6,7,8,9,10]复制元素后：src数组元素[1,2,3,4,5]，dest数组元素[1,2,3,9,10]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11SystemArrayCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] src = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        System.arraycopy( src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">/*代码运行后：两个数组中的元素发生了变化</span></span><br><span class="line"><span class="comment">         src数组元素[1,2,3,4,5]</span></span><br><span class="line"><span class="comment">         dest数组元素[1,2,3,9,10]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>Demo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.lang.System类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作，在System类的API文档中，常用的方法有：</span></span><br><span class="line"><span class="comment">        public static long currentTimeMillis()：返回以毫秒为单位的当前时间。</span></span><br><span class="line"><span class="comment">        public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)：将数组中指定的数据拷贝到另一个数组中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01System</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo02();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)：将数组中指定的数据拷贝到另一个数组中。</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            src - 源数组。</span></span><br><span class="line"><span class="comment">            srcPos - 源数组中的起始位置(起始索引)。</span></span><br><span class="line"><span class="comment">            dest - 目标数组。</span></span><br><span class="line"><span class="comment">            destPos - 目标数据中的起始位置。</span></span><br><span class="line"><span class="comment">            length - 要复制的数组元素的数量。</span></span><br><span class="line"><span class="comment">        练习:</span></span><br><span class="line"><span class="comment">            将src数组中前3个元素，复制到dest数组的前3个位置上</span></span><br><span class="line"><span class="comment">                复制元素前：</span></span><br><span class="line"><span class="comment">                src数组元素[1,2,3,4,5]，dest数组元素[6,7,8,9,10]</span></span><br><span class="line"><span class="comment">                复制元素后：</span></span><br><span class="line"><span class="comment">                src数组元素[1,2,3,4,5]，dest数组元素[1,2,3,9,10]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义源数组</span></span><br><span class="line">        <span class="keyword">int</span>[] src = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//定义目标数组</span></span><br><span class="line">        <span class="keyword">int</span>[] dest = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;复制前:&quot;</span>+ Arrays.toString(dest));</span><br><span class="line">        <span class="comment">//使用System类中的arraycopy把源数组的前3个元素复制到目标数组的前3个位置上</span></span><br><span class="line">        System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;复制后:&quot;</span>+ Arrays.toString(dest));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public static long currentTimeMillis()：返回以毫秒为单位的当前时间。</span></span><br><span class="line"><span class="comment">        用来程序的效率</span></span><br><span class="line"><span class="comment">        验证for循环打印数字1-9999所需要使用的时间（毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//程序执行前,获取一次毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//执行for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">9999</span> ; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//程序执行后,获取一次毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序共耗时:&quot;</span>+(e-s)+<span class="string">&quot;毫秒&quot;</span>);<span class="comment">//程序共耗时:106毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第四章-StringBuilder类"><a href="#第四章-StringBuilder类" class="headerlink" title="第四章 StringBuilder类"></a>第四章 StringBuilder类</h1><h2 id="4-1-字符串拼接问题"><a href="#4-1-字符串拼接问题" class="headerlink" title="4.1 字符串拼接问题"></a>4.1 字符串拼接问题</h2><p>由于String类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        s += <span class="string">&quot;World&quot;</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在API中对String类有这样的描述：字符串是常量，它们的值在创建后不能被更改。</p>
<p>根据这句话分析我们的代码，其实总共产生了三个字符串，即<code>&quot;Hello&quot;</code>、<code>&quot;World&quot;</code>和<code>&quot;HelloWorld&quot;</code>。引用变量s首先指向<code>Hello</code>对象，最终指向拼接出来的新字符串对象，即<code>HelloWord</code> 。</p>
<p>由此可知，如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。为了解决这一问题，可以使用<code>java.lang.StringBuilder</code>类。</p>
<h2 id="4-2-StringBuilder概述"><a href="#4-2-StringBuilder概述" class="headerlink" title="4.2 StringBuilder概述"></a>4.2 StringBuilder概述</h2><p>查阅<code>java.lang.StringBuilder</code>的API，StringBuilder又称为可变字符序列，它是一个类似于 String 的字符串缓冲区，通过某些方法调用可以改变该序列的长度和内容。</p>
<p>原来StringBuilder是个字符串的缓冲区，即它是一个容器，容器中可以装很多字符串。并且能够对其中的字符串进行各种操作。</p>
<p>它的内部拥有一个数组用来存放字符串内容，进行字符串拼接时，直接在数组中加入新内容。StringBuilder会自动维护数组的扩容。原理如下图所示：(默认16字符空间，超过自动扩充)</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210419104407.bmp" alt="01_StringBuilder的原理"></p>
<h2 id="4-3-构造方法"><a href="#4-3-构造方法" class="headerlink" title="4.3 构造方法"></a>4.3 构造方法</h2><p>根据StringBuilder的API文档，常用构造方法有2个：</p>
<ul>
<li><code>public StringBuilder()</code>：构造一个空的StringBuilder容器。</li>
<li><code>public StringBuilder(String str)</code>：构造一个StringBuilder容器，并将字符串添加进去。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(sb1); <span class="comment">// (空白)</span></span><br><span class="line">        <span class="comment">// 使用带参构造</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        System.out.println(sb2); <span class="comment">// itcast</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-4-常用方法"><a href="#4-4-常用方法" class="headerlink" title="4.4 常用方法"></a>4.4 常用方法</h2><p>StringBuilder常用的方法有2个：</p>
<ul>
<li><code>public StringBuilder append(...)</code>：添加任意类型数据的字符串形式，并返回当前对象自身。</li>
<li><code>public String toString()</code>：将当前StringBuilder对象转换为String对象。</li>
</ul>
<h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>append方法具有多种重载形式，可以接收任意类型的参数。任何数据作为参数都会将对应的字符串内容添加到StringBuilder中。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建对象</span></span><br><span class="line">		StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="comment">//public StringBuilder append(任意类型)</span></span><br><span class="line">		StringBuilder builder2 = builder.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">		<span class="comment">//对比一下</span></span><br><span class="line">		System.out.println(<span class="string">&quot;builder:&quot;</span>+builder);</span><br><span class="line">		System.out.println(<span class="string">&quot;builder2:&quot;</span>+builder2);</span><br><span class="line">		System.out.println(builder == builder2); <span class="comment">//true</span></span><br><span class="line">	    <span class="comment">// 可以添加 任何类型</span></span><br><span class="line">		builder.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">		builder.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">		builder.append(<span class="keyword">true</span>);</span><br><span class="line">		builder.append(<span class="number">100</span>);</span><br><span class="line">		<span class="comment">// 在我们开发中，会遇到调用一个方法后，返回一个对象的情况。然后使用返回的对象继续调用方法。</span></span><br><span class="line">        <span class="comment">// 这种时候，我们就可以把代码现在一起，如append方法一样，代码如下</span></span><br><span class="line">		<span class="comment">//链式编程</span></span><br><span class="line">		builder.append(<span class="string">&quot;hello&quot;</span>).append(<span class="string">&quot;world&quot;</span>).append(<span class="keyword">true</span>).append(<span class="number">100</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;builder:&quot;</span>+builder);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>链式操作</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06StringBuilder;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    StringBuilder的常用方法:</span></span><br><span class="line"><span class="comment">        public StringBuilder append(...)：添加任意类型数据的字符串形式，并返回当前对象自身。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建StringBuilder对象</span></span><br><span class="line">        StringBuilder bu = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//使用append方法往StringBuilder中添加数据</span></span><br><span class="line">        <span class="comment">//append方法返回的是this,调用方法的对象bu,this==bu</span></span><br><span class="line">        <span class="comment">//StringBuilder bu2 = bu.append(&quot;abc&quot;);//把bu的地址赋值给了bu2</span></span><br><span class="line">        <span class="comment">//System.out.println(bu);//&quot;abc&quot;</span></span><br><span class="line">        <span class="comment">//System.out.println(bu2);//&quot;abc&quot;</span></span><br><span class="line">        <span class="comment">//System.out.println(bu==bu2);//比较的是地址 true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用append方法无需接收返回值</span></span><br><span class="line"><span class="comment">//        bu.append(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">//        bu.append(1);</span></span><br><span class="line"><span class="comment">//        bu.append(true);</span></span><br><span class="line"><span class="comment">//        bu.append(8.8);</span></span><br><span class="line"><span class="comment">//        bu.append(&#x27;中&#x27;);</span></span><br><span class="line"><span class="comment">//        System.out.println(bu);//abc1true8.8中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            链式编程:方法返回值是一个对象,可以继续调用方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.toUpperCase().toLowerCase().toUpperCase().toLowerCase());</span><br><span class="line">        bu.append(<span class="string">&quot;abc&quot;</span>).append(<span class="number">1</span>).append(<span class="keyword">true</span>).append(<span class="number">8.8</span>).append(<span class="string">&#x27;中&#x27;</span>);</span><br><span class="line">        System.out.println(bu);<span class="comment">//abc1true8.8中</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：StringBuilder已经覆盖重写了Object当中的toString方法。</p>
</blockquote>
<h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>通过toString方法，StringBuilder对象将会转换为不可变的String对象。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder和String可以相互转换:</span><br><span class="line">    String-&gt;StringBuilder:可以使用StringBuilder的构造方法</span><br><span class="line">        StringBuilder(String str) 构造一个字符串生成器，并初始化为指定的字符串内容。</span><br><span class="line">    StringBuilder-&gt;String:可以使用StringBuilder中的toString方法</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>：将当前StringBuilder对象转换为String对象。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 链式创建</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Hello&quot;</span>).append(<span class="string">&quot;World&quot;</span>).append(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        String str = sb.toString();</span><br><span class="line">        System.out.println(str); <span class="comment">// HelloWorldJava</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-3-System-类的总结"><a href="#3-3-System-类的总结" class="headerlink" title="3.3 System 类的总结"></a>3.3 System 类的总结</h2><h3 id="3-3-1-currentTimeMillis-方法"><a href="#3-3-1-currentTimeMillis-方法" class="headerlink" title="3.3.1 currentTimeMillis() 方法"></a>3.3.1 currentTimeMillis() 方法</h3><p>作用：获取当前的系统毫秒值时间</p>
<h3 id="3-3-2-arrayCopy-方法"><a href="#3-3-2-arrayCopy-方法" class="headerlink" title="3.3.2 arrayCopy()方法"></a>3.3.2 arrayCopy()方法</h3><p>作用：复制数组</p>
<h3 id="3-3-3-StringBuilder-类"><a href="#3-3-3-StringBuilder-类" class="headerlink" title="3.3.3 StringBuilder 类"></a>3.3.3 StringBuilder 类</h3><ol>
<li>构造方法</li>
</ol>
<p>StringBuilder append(Object obj); 添加内容</p>
<p>StringBuilder reverse(); 反转内容</p>
<p>String toString(); 将缓冲区内容转化为字符串</p>
<h1 id="第五章-包装类"><a href="#第五章-包装类" class="headerlink" title="第五章 包装类"></a>第五章 包装类</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210419105931.bmp" alt="02_包装类的概念"></p>
<p>Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类，如下：</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>对应的包装类（位于java.lang包中）</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td><strong>Integer</strong></td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td><strong>Character</strong></td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h2 id="5-2-装箱与拆箱"><a href="#5-2-装箱与拆箱" class="headerlink" title="5.2 装箱与拆箱"></a>5.2 装箱与拆箱</h2><p>基本类型与对应的包装类对象之间，来回转换的过程称为”装箱“与”拆箱“：</p>
<ul>
<li><p><strong>装箱</strong>：从基本类型转换为对应的包装类对象。</p>
</li>
<li><p><strong>拆箱</strong>：从包装类对象转换为对应的基本类型。</p>
</li>
</ul>
<p>用Integer与 int为例：（看懂代码即可）</p>
<p>基本数值—-&gt;包装对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line">Integer iii = Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br></pre></td></tr></table></figure>
<p>包装对象—-&gt;基本数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = i.intValue();</span><br></pre></td></tr></table></figure>
<p><code>demo07-1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07Integer;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    装箱:把基本类型的数据,包装到包装类中(基本类型的数据-&gt;包装类)</span></span><br><span class="line"><span class="comment">        构造方法:</span></span><br><span class="line"><span class="comment">            Integer(int value) 构造一个新分配的 Integer 对象，它表示指定的 int 值。</span></span><br><span class="line"><span class="comment">            Integer(String s) 构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。</span></span><br><span class="line"><span class="comment">                传递的字符串,必须是基本类型的字符串,否则会抛出异常 &quot;100&quot; 正确  &quot;a&quot; 抛异常</span></span><br><span class="line"><span class="comment">        静态方法:</span></span><br><span class="line"><span class="comment">            static Integer valueOf(int i) 返回一个表示指定的 int 值的 Integer 实例。</span></span><br><span class="line"><span class="comment">            static Integer valueOf(String s) 返回保存指定的 String 的值的 Integer 对象。</span></span><br><span class="line"><span class="comment">    拆箱:在包装类中取出基本类型的数据(包装类-&gt;基本类型的数据)</span></span><br><span class="line"><span class="comment">        成员方法:</span></span><br><span class="line"><span class="comment">            int intValue() 以 int 类型返回该 Integer 的值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Integer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//装箱:把基本类型的数据,包装到包装类中(基本类型的数据-&gt;包装类)</span></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);<span class="comment">//方法上有横线,说明方法过时了</span></span><br><span class="line">        System.out.println(in1);<span class="comment">//1 重写了toString方法</span></span><br><span class="line"></span><br><span class="line">        Integer in2 = <span class="keyword">new</span> Integer(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(in2);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        Integer in3 = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">        System.out.println(in3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Integer in4 = Integer.valueOf(&quot;a&quot;);//NumberFormatException数字格式化异常</span></span><br><span class="line">        Integer in4 = Integer.valueOf(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(in4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆箱:在包装类中取出基本类型的数据(包装类-&gt;基本类型的数据)</span></span><br><span class="line">        <span class="keyword">int</span> i = in1.intValue();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="5-3自动装箱与自动拆箱"><a href="#5-3自动装箱与自动拆箱" class="headerlink" title="5.3自动装箱与自动拆箱"></a>5.3自动装箱与自动拆箱</h2><p>由于我们经常要做基本类型与包装类之间的转换，从Java 5（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="number">4</span>;<span class="comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span></span><br><span class="line">i = i + <span class="number">5</span>;<span class="comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span></span><br><span class="line"><span class="comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span></span><br></pre></td></tr></table></figure>


<p><code>demo07-2</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07Integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    自动装箱与自动拆箱:基本类型的数据和包装类之间可以自动的相互转换</span></span><br><span class="line"><span class="comment">    JDK1.5之后出现的新特性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Ineger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            自动装箱:直接把int类型的整数赋值包装类</span></span><br><span class="line"><span class="comment">            Integer in = 1; 就相当于 Integer in = new Integer(1);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Integer in = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            自动拆箱:in是包装类,无法直接参与运算,可以自动转换为基本数据类型,在进行计算</span></span><br><span class="line"><span class="comment">            in+2;就相当于 in.intVale() + 2 = 3</span></span><br><span class="line"><span class="comment">            in = in.intVale() + 2 = 3 又是一个自动装箱</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        in = in+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ArrayList集合无法直接存储整数,可以存储Integer包装类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list.add(<span class="number">1</span>); <span class="comment">//--&gt;自动装箱 list.add(new Integer(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = list.get(<span class="number">0</span>); <span class="comment">//--&gt;自动拆箱  list.get(0).intValue();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="5-3-基本类型与字符串之间的转换"><a href="#5-3-基本类型与字符串之间的转换" class="headerlink" title="5.3 基本类型与字符串之间的转换"></a>5.3 基本类型与字符串之间的转换</h2><h3 id="基本类型转换为String"><a href="#基本类型转换为String" class="headerlink" title="基本类型转换为String"></a>基本类型转换为String</h3><p>   基本类型转换String总共有三种方式，查看课后资料可以得知，这里只讲最简单的一种方式： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基本类型直接与””相连接即可；如：34+&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>String转换成对应的基本类型 </p>
<p>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型：</p>
<ul>
<li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li>
<li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li>
<li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li>
<li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li>
<li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li>
<li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li>
<li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li>
</ul>
<p>代码使用（仅以Integer类的静态方法parseXxx为例）如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo18WrapperParse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p>
</blockquote>
<p><code>demo07-3</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07Integer;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    基本类型与字符串类型之间的相互转换</span></span><br><span class="line"><span class="comment">    基本类型-&gt;字符串(String)</span></span><br><span class="line"><span class="comment">        1.基本类型的值+&quot;&quot;  最简单的方法(工作中常用)</span></span><br><span class="line"><span class="comment">        2.包装类的静态方法toString(参数),不是Object类的toString() 重载</span></span><br><span class="line"><span class="comment">            static String toString(int i) 返回一个表示指定整数的 String 对象。</span></span><br><span class="line"><span class="comment">        3.String类的静态方法valueOf(参数)</span></span><br><span class="line"><span class="comment">            static String valueOf(int i) 返回 int 参数的字符串表示形式。</span></span><br><span class="line"><span class="comment">    字符串(String)-&gt;基本类型</span></span><br><span class="line"><span class="comment">        使用包装类的静态方法parseXXX(&quot;字符串&quot;);</span></span><br><span class="line"><span class="comment">            Integer类: static int parseInt(String s)</span></span><br><span class="line"><span class="comment">            Double类: static double parseDouble(String s)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Integer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//基本类型-&gt;字符串(String)</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">100</span>;</span><br><span class="line">        String s1 = i1+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s1+<span class="number">200</span>);<span class="comment">//100200</span></span><br><span class="line"></span><br><span class="line">        String s2 = Integer.toString(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s2+<span class="number">200</span>);<span class="comment">//100200</span></span><br><span class="line"></span><br><span class="line">        String s3 = String.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s3+<span class="number">200</span>);<span class="comment">//100200</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串(String)-&gt;基本类型</span></span><br><span class="line">        <span class="keyword">int</span> i = Integer.parseInt(s1);</span><br><span class="line">        System.out.println(i-<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = Integer.parseInt(<span class="string">&quot;a&quot;</span>);<span class="comment">//NumberFormatException</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection&amp;泛型</title>
    <url>/2021/04/19/2021-04-19-Collection%E3%80%81%E6%B3%9B%E5%9E%8B-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Collection、泛型"><a href="#Collection、泛型" class="headerlink" title="Collection、泛型"></a>Collection、泛型</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>Collection集合</li>
<li>迭代器</li>
<li>增强for</li>
<li>泛型</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够说出集合与数组的区别</li>
<li><input disabled="" type="checkbox"> 说出Collection集合的常用功能</li>
<li><input disabled="" type="checkbox"> 能够使用迭代器对集合进行取元素</li>
<li><input disabled="" type="checkbox"> 能够说出集合的使用细节</li>
<li><input disabled="" type="checkbox"> 能够使用集合存储自定义类型</li>
<li><input disabled="" type="checkbox"> 能够使用foreach循环遍历集合</li>
<li><input disabled="" type="checkbox"> 能够使用泛型定义集合对象</li>
<li><input disabled="" type="checkbox"> 能够理解泛型上下限</li>
<li><input disabled="" type="checkbox"> 能够阐述泛型通配符的作用</li>
</ul>
<h1 id="第一章-Collection集合"><a href="#第一章-Collection集合" class="headerlink" title="第一章 Collection集合"></a>第一章 Collection集合</h1><h2 id="1-1-集合概述"><a href="#1-1-集合概述" class="headerlink" title="1.1 集合概述"></a>1.1 集合概述</h2><p>在前面基础班我们已经学习过并使用过集合ArrayList&lt;E&gt; ,那么集合到底是什么呢?</p>
<ul>
<li><strong>集合</strong>：集合是java中提供的一种容器，可以用来存储多个数据。</li>
</ul>
<p>集合和数组既然都是容器，它们有啥区别呢？</p>
<ul>
<li><p>数组的长度是固定的。集合的长度是可变的。</p>
<p>int[] arr = new int[10];</p>
<p>Student[] arr = new Student[3];</p>
</li>
<li><p>数组中存储的是同一类型的元素，可以存储基本数据类型值。<code>集合存储的都是对象</code>。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</p>
</li>
</ul>
<h2 id="1-2-集合框架"><a href="#1-2-集合框架" class="headerlink" title="1.2  集合框架"></a>1.2  集合框架</h2><p>JAVASE提供了满足各种需求的API，在使用这些API前，先了解其继承与接口操作架构，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。</p>
<p>集合按照其存储结构可以分为两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code>，今天我们主要学习<code>Collection</code>集合，在day04时讲解<code>Map</code>集合。</p>
<ul>
<li><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。其中，<code>List</code>的特点是元素有序、元素可重复。<code>Set</code>的特点是元素无序，而且不可重复。<code>List</code>接口的主要实现类有<code>java.util.ArrayList</code>和<code>java.util.LinkedList</code>，<code>Set</code>接口的主要实现类有<code>java.util.HashSet</code>和<code>java.util.TreeSet</code>。</li>
</ul>
<p>从上面的描述可以看出JDK中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述整个集合类的继承体系。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210419131136.bmp" alt="01_集合框架介绍"></p>
<p>其中，橙色框里填写的都是接口类型，而蓝色框里填写的都是具体的实现类。这几天将针对图中所列举的集合类进行逐一地讲解。</p>
<p>集合本身是一个工具，它存放在java.util包中。在<code>Collection</code>接口定义着单列集合框架中最最共性的内容。</p>
<h3 id="Collection总结"><a href="#Collection总结" class="headerlink" title="Collection总结"></a>Collection总结</h3><p><code>list集合</code>：有索引，可以储存重复元素，可以保证存储的顺序</p>
<ul>
<li><code>ArrayList</code>:底层是数组的实现的，查询快，增删慢</li>
<li><code>LinkedList</code>:底层是链表实现的，查询慢，增删快</li>
</ul>
<p><code>Set集合</code>：无索引，不可以储存重复元素，存储无序</p>
<ul>
<li><code>HashSet    </code>: 底层是哈希表+（红黑树）实现的，无索引、不可以存储重复元素，存储无序</li>
<li><code>LinkedHashSet</code>:底层是哈希表+链表实现的，无索引，不可以存储重复的元素、可以保证存取顺序</li>
<li><code>TreeSet</code>: 底层是二叉树实现，一半用于排序</li>
</ul>
<h2 id="1-3-Collection-常用功能"><a href="#1-3-Collection-常用功能" class="headerlink" title="1.3 Collection 常用功能"></a>1.3 Collection 常用功能</h2><p>Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p>
<ul>
<li><code>public boolean add(E e)</code>：  把给定的对象添加到当前集合中 。</li>
<li><code>public void clear()</code> :清空集合中所有的元素。</li>
<li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li>
<li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li>
<li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li>
<li><code>public int size()</code>: 返回集合中元素的个数。</li>
<li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</li>
</ul>
<p>方法演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建集合对象 </span></span><br><span class="line">    	<span class="comment">// 使用多态形式</span></span><br><span class="line">    	Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    	<span class="comment">// 使用方法</span></span><br><span class="line">    	<span class="comment">// 添加功能  boolean  add(String s)</span></span><br><span class="line">    	coll.add(<span class="string">&quot;小李广&quot;</span>);</span><br><span class="line">    	coll.add(<span class="string">&quot;扫地僧&quot;</span>);</span><br><span class="line">    	coll.add(<span class="string">&quot;石破天&quot;</span>);</span><br><span class="line">    	System.out.println(coll);</span><br><span class="line"></span><br><span class="line">    	<span class="comment">// boolean contains(E e) 判断o是否在集合中存在</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;判断  扫地僧 是否在集合中&quot;</span>+coll.contains(<span class="string">&quot;扫地僧&quot;</span>));</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//boolean remove(E e) 删除在集合中的o元素</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;删除石破天：&quot;</span>+coll.remove(<span class="string">&quot;石破天&quot;</span>));</span><br><span class="line">    	System.out.println(<span class="string">&quot;操作之后集合中元素:&quot;</span>+coll);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// size() 集合中有几个元素</span></span><br><span class="line">		System.out.println(<span class="string">&quot;集合中有&quot;</span>+coll.size()+<span class="string">&quot;个元素&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Object[] toArray()转换成一个Object数组</span></span><br><span class="line">    	Object[] objects = coll.toArray();</span><br><span class="line">    	<span class="comment">// 遍历数组</span></span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">			System.out.println(objects[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// void  clear() 清空集合</span></span><br><span class="line">		coll.clear();</span><br><span class="line">		System.out.println(<span class="string">&quot;集合中内容为：&quot;</span>+coll);</span><br><span class="line">		<span class="comment">// boolean  isEmpty()  判断是否为空</span></span><br><span class="line">		System.out.println(coll.isEmpty());  	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips: 有关Collection中的方法可不止上面这些，其他方法可以自行查看API学习。</p>
</blockquote>
<p><code>demo01-1-collection</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Collection接口</span></span><br><span class="line"><span class="comment">        所有单列集合的最顶层的接口,里边定义了所有单列集合共性的方法</span></span><br><span class="line"><span class="comment">        任意的单列集合都可以使用Collection接口中的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    共性的方法:</span></span><br><span class="line"><span class="comment">      public boolean add(E e)：  把给定的对象添加到当前集合中 。</span></span><br><span class="line"><span class="comment">      public void clear() :清空集合中所有的元素。</span></span><br><span class="line"><span class="comment">      public boolean remove(E e): 把给定的对象在当前集合中删除。</span></span><br><span class="line"><span class="comment">      public boolean contains(E e): 判断当前集合中是否包含给定的对象。</span></span><br><span class="line"><span class="comment">      public boolean isEmpty(): 判断当前集合是否为空。</span></span><br><span class="line"><span class="comment">      public int size(): 返回集合中元素的个数。</span></span><br><span class="line"><span class="comment">      public Object[] toArray(): 把集合中的元素，存储到数组中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象,可以使用多态</span></span><br><span class="line">        <span class="comment">//Collection&lt;String&gt; coll = new ArrayList&lt;&gt;();</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        System.out.println(coll);<span class="comment">//重写了toString方法  []</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean add(E e)：  把给定的对象添加到当前集合中 。</span></span><br><span class="line"><span class="comment">            返回值是一个boolean值,一般都返回true,所以可以不用接收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = coll.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b1:&quot;</span>+b1);<span class="comment">//b1:true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三]</span></span><br><span class="line">        coll.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 赵六, 田七]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean remove(E e): 把给定的对象在当前集合中删除。</span></span><br><span class="line"><span class="comment">            返回值是一个boolean值,集合中存在元素,删除元素,返回true</span></span><br><span class="line"><span class="comment">                                集合中不存在元素,删除失败,返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = coll.remove(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b2:&quot;</span>+b2);<span class="comment">//b2:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = coll.remove(<span class="string">&quot;赵四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b3:&quot;</span>+b3);<span class="comment">//b3:false</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 田七]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean contains(E e): 判断当前集合中是否包含给定的对象。</span></span><br><span class="line"><span class="comment">            包含返回true</span></span><br><span class="line"><span class="comment">            不包含返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b4 = coll.contains(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b4:&quot;</span>+b4);<span class="comment">//b4:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b5 = coll.contains(<span class="string">&quot;赵四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b5:&quot;</span>+b5);<span class="comment">//b5:false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean isEmpty(): 判断当前集合是否为空。 集合为空返回true,集合不为空返回false</span></span><br><span class="line">        <span class="keyword">boolean</span> b6 = coll.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;b6:&quot;</span>+b6);<span class="comment">//b6:false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int size(): 返回集合中元素的个数。</span></span><br><span class="line">        <span class="keyword">int</span> size = coll.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;size:&quot;</span>+size);<span class="comment">//size:3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Object[] toArray(): 把集合中的元素，存储到数组中。</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void clear() :清空集合中所有的元素。但是不删除集合,集合还存在</span></span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);<span class="comment">//[]</span></span><br><span class="line">        System.out.println(coll.isEmpty());<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="第二章-Iterator迭代器"><a href="#第二章-Iterator迭代器" class="headerlink" title="第二章 Iterator迭代器"></a>第二章 Iterator迭代器</h2><h2 id="2-1-Iterator接口"><a href="#2-1-Iterator接口" class="headerlink" title="2.1 Iterator接口"></a>2.1 Iterator接口</h2><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储元素，而<code>Iterator</code>主要用于迭代访问（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p>
<p>想要遍历Collection集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获取迭代器的方法：</p>
<ul>
<li><code>public Iterator iterator()</code>: 获取集合对应的迭代器，用来遍历集合中的元素的。</li>
</ul>
<p>下面介绍一下迭代的概念：</p>
<ul>
<li><strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</li>
</ul>
<p>Iterator接口的常用方法如下：</p>
<ul>
<li><code>public E next()</code>:返回迭代的下一个元素。</li>
<li><code>public boolean hasNext()</code>:如果仍有元素可以迭代，则返回 true。</li>
</ul>
<p>接下来我们通过案例学习如何使用Iterator迭代集合中元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用多态方式 创建对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素到集合</span></span><br><span class="line">        coll.add(<span class="string">&quot;串串星人&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;吐槽星人&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;汪星人&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">        <span class="comment">//  泛型指的是 迭代出 元素的数据类型</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123; <span class="comment">//判断是否有迭代元素</span></span><br><span class="line">            String s = it.next();<span class="comment">//获取迭代出的元素</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:：在进行集合元素取出时，如果集合中已经没有元素了，还继续使用迭代器的next方法，将会发生java.util.NoSuchElementException没有集合元素的错误。</p>
</blockquote>
<p><code>demo01-2-Iterator</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Iterator接口:迭代器(对集合进行遍历)</span></span><br><span class="line"><span class="comment">    有两个常用的方法</span></span><br><span class="line"><span class="comment">        boolean hasNext() 如果仍有元素可以迭代，则返回 true。</span></span><br><span class="line"><span class="comment">            判断集合中还有没有下一个元素,有就返回true,没有就返回false</span></span><br><span class="line"><span class="comment">        E next() 返回迭代的下一个元素。</span></span><br><span class="line"><span class="comment">            取出集合中的下一个元素</span></span><br><span class="line"><span class="comment">    Iterator迭代器,是一个接口,我们无法直接使用,需要使用Iterator接口的实现类对象,获取实现类的方式比较特殊</span></span><br><span class="line"><span class="comment">    Collection接口中有一个方法,叫iterator(),这个方法返回的就是迭代器的实现类对象</span></span><br><span class="line"><span class="comment">        Iterator&lt;E&gt; iterator() 返回在此 collection 的元素上进行迭代的迭代器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    迭代器的使用步骤(重点):</span></span><br><span class="line"><span class="comment">        1.使用集合中的方法iterator()获取迭代器的实现类对象,使用Iterator接口接收(多态)</span></span><br><span class="line"><span class="comment">        2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</span></span><br><span class="line"><span class="comment">        3.使用Iterator接口中的方法next取出集合中的下一个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        coll.add(<span class="string">&quot;姚明&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;科比&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;麦迪&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;詹姆斯&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;艾弗森&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.使用集合中的方法iterator()获取迭代器的实现类对象,使用Iterator接口接收(多态)</span></span><br><span class="line"><span class="comment">            注意:</span></span><br><span class="line"><span class="comment">                Iterator&lt;E&gt;接口也是有泛型的,迭代器的泛型跟着集合走,集合是什么泛型,迭代器就是什么泛型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//多态  接口            实现类对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            发现使用迭代器取出集合中元素的代码,是一个重复的过程</span></span><br><span class="line"><span class="comment">            所以我们可以使用循环优化</span></span><br><span class="line"><span class="comment">            不知道集合中有多少元素,使用while循环</span></span><br><span class="line"><span class="comment">            循环结束的条件,hasNext方法返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String e = it.next();</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;String&gt; it2 = coll.iterator();it2.hasNext();)&#123;</span><br><span class="line">            String e = it2.next();</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* //2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</span></span><br><span class="line"><span class="comment">        boolean b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);//true</span></span><br><span class="line"><span class="comment">        //3.使用Iterator接口中的方法next取出集合中的下一个元素</span></span><br><span class="line"><span class="comment">        String s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);//姚明</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);//没有元素,返回false</span></span><br><span class="line"><span class="comment">        s = it.next();//没有元素,在取出元素会抛出NoSuchElementException没有元素异常</span></span><br><span class="line"><span class="comment">        System.out.println(s);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-2-迭代器的实现原理"><a href="#2-2-迭代器的实现原理" class="headerlink" title="2.2 迭代器的实现原理"></a>2.2 迭代器的实现原理</h2><p>我们在之前案例已经完成了Iterator遍历集合的整个过程。当遍历集合时，首先通过调用t集合的iterator()方法获得迭代器对象，然后使用hashNext()方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出，否则说明已到达了集合末尾，停止遍历元素。</p>
<p>Iterator迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素，为了让初学者能更好地理解迭代器的工作原理，接下来通过一个图例来演示Iterator对象迭代元素的过程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210419135145.bmp" alt="02_迭代器的实现原理(1)"></p>
<p>在调用Iterator的next方法之前，迭代器的索引位于第一个元素之前，不指向任何元素，当第一次调用迭代器的next方法后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，当再次调用next方法时，迭代器的索引会指向第二个元素并将该元素返回，依此类推，直到hasNext方法返回false，表示到达了集合的末尾，终止对元素的遍历。</p>
<h2 id="2-3-增强for"><a href="#2-3-增强for" class="headerlink" title="2.3 增强for"></a>2.3 增强for</h2><p>增强for循环(也称for each循环)是<strong>JDK1.5</strong>以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class="line">  	<span class="comment">//写操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它用于遍历Collection和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作。</p>
<h4 id="练习1：遍历数组"><a href="#练习1：遍历数组" class="headerlink" title="练习1：遍历数组"></a>练习1：遍历数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBForDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">87</span>&#125;;</span><br><span class="line">       	<span class="comment">//使用增强for遍历数组</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a : arr)&#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">			System.out.println(a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="练习2-遍历集合"><a href="#练习2-遍历集合" class="headerlink" title="练习2:遍历集合"></a>练习2:遍历集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">    	Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    	coll.add(<span class="string">&quot;小河神&quot;</span>);</span><br><span class="line">    	coll.add(<span class="string">&quot;老河神&quot;</span>);</span><br><span class="line">    	coll.add(<span class="string">&quot;神婆&quot;</span>);</span><br><span class="line">    	<span class="comment">//使用增强for遍历</span></span><br><span class="line">    	<span class="keyword">for</span>(String s :coll)&#123;<span class="comment">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class="line">    		System.out.println(s);</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips: 新for循环必须有被遍历的目标。目标只能是Collection或者是数组。新式for仅仅作为遍历操作出现。</p>
</blockquote>
<p><code>demo01-3-增强For</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    增强for循环:底层使用的也是迭代器,使用for循环的格式,简化了迭代器的书写</span></span><br><span class="line"><span class="comment">    是JDK1.5之后出现的新特性</span></span><br><span class="line"><span class="comment">    Collection&lt;E&gt;extends Iterable&lt;E&gt;:所有的单列集合都可以使用增强for</span></span><br><span class="line"><span class="comment">    public interface Iterable&lt;T&gt;实现这个接口允许对象成为 &quot;foreach&quot; 语句的目标。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    增强for循环:用来遍历集合和数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    格式:</span></span><br><span class="line"><span class="comment">        for(集合/数组的数据类型 变量名: 集合名/数组名)&#123;</span></span><br><span class="line"><span class="comment">            sout(变量名);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Foreach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用增强for循环遍历集合</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用增强for循环遍历数组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第三章-泛型"><a href="#第三章-泛型" class="headerlink" title="第三章 泛型"></a>第三章 泛型</h1><h2 id="3-1-泛型概述"><a href="#3-1-泛型概述" class="headerlink" title="3.1  泛型概述"></a>3.1  泛型概述</h2><p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成Object类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。</p>
<p>大家观察下面代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		coll.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">		coll.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">		coll.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class="line">		Iterator it = coll.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			<span class="comment">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class="line">			String str = (String) it.next();</span><br><span class="line">			System.out.println(str.length());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序在运行时发生了问题<strong>java.lang.ClassCastException</strong>。                                                                                             为什么会发生类型转换异常呢？                                                                                                                                       我们来分析下：由于集合中什么类型的元素都可以存储。导致取出时强转引发运行时 ClassCastException。                                                                                                                                                       怎么来解决这个问题呢？                                                                                                                                                           Collection虽然可以存储各种对象，但实际上通常Collection只存储同一类型对象。例如都是存储字符串对象。因此在JDK5之后，新增了<strong>泛型</strong>(<strong>Generic</strong>)语法，让你在设计API时可以<code>指定类或方法支持泛型</code>，这样我们使用API的时候也变得更为简洁，并得到了<code>编译时期的语法检查。</code></p>
<ul>
<li><strong>泛型</strong>：可以在类或方法中预支地使用未知的类型。</li>
</ul>
<blockquote>
<p>tips:一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422111505.bmp" alt="03_泛型的概念"></p>
<h2 id="3-2-使用泛型的好处"><a href="#3-2-使用泛型的好处" class="headerlink" title="3.2  使用泛型的好处"></a>3.2  使用泛型的好处</h2><p>上一节只是讲解了泛型的引入，那么泛型带来了哪些好处呢？</p>
<ul>
<li>将运行时期的ClassCastException，转移到了编译时期变成了编译失败。</li>
<li>避免了类型强转的麻烦。</li>
</ul>
<p>通过我们如下代码体验一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        <span class="comment">// list.add(5);//当集合明确类型后，存放类型不一致就会编译报错</span></span><br><span class="line">        <span class="comment">// 集合已经明确具体存放的元素类型，那么在使用迭代器的时候，迭代器也同样会知道具体遍历元素类型</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String str = it.next();</span><br><span class="line">            <span class="comment">//当使用Iterator&lt;String&gt;控制元素类型后，就不需要强转了。获取到的元素直接就是String类型</span></span><br><span class="line">            System.out.println(str.length());</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:泛型是数据类型的一部分，我们将类名与泛型合并一起看做数据类型。</p>
</blockquote>
<h3 id="课上的demo"><a href="#课上的demo" class="headerlink" title="课上的demo"></a>课上的demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建集合对象,使用泛型</span></span><br><span class="line"><span class="comment">        好处:</span></span><br><span class="line"><span class="comment">            1.避免了类型转换的麻烦,存储的是什么类型,取出的就是什么类型</span></span><br><span class="line"><span class="comment">            2.把运行期异常(代码运行之后会抛出的异常),提升到了编译期(写代码的时候会报错)</span></span><br><span class="line"><span class="comment">         弊端:</span></span><br><span class="line"><span class="comment">            泛型是什么类型,只能存储什么类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">//list.add(1);//add(java.lang.String)in ArrayList cannot be applied to (int)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器遍历list集合</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s+<span class="string">&quot;-&gt;&quot;</span>+s.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建集合对象,不使用泛型</span></span><br><span class="line"><span class="comment">        好处:</span></span><br><span class="line"><span class="comment">            集合不使用泛型,默认的类型就是Object类型,可以存储任意类型的数据</span></span><br><span class="line"><span class="comment">        弊端:</span></span><br><span class="line"><span class="comment">            不安全,会引发异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器遍历list集合</span></span><br><span class="line">        <span class="comment">//获取迭代器</span></span><br><span class="line">        Iterator it = list.iterator();</span><br><span class="line">        <span class="comment">//使用迭代器中的方法hasNext和next遍历集合</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//取出元素也是Object类型</span></span><br><span class="line">            Object obj = it.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//想要使用String类特有的方法,length获取字符串的长度;不能使用  多态 Object obj = &quot;abc&quot;;</span></span><br><span class="line">            <span class="comment">//需要向下转型</span></span><br><span class="line">            <span class="comment">//会抛出ClassCastException类型转换异常,不能把Integer类型转换为String类型</span></span><br><span class="line">            String s = (String)obj;</span><br><span class="line">            System.out.println(s.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-3-泛型的定义与使用"><a href="#3-3-泛型的定义与使用" class="headerlink" title="3.3  泛型的定义与使用"></a>3.3  泛型的定义与使用</h2><p>我们在集合中会大量使用到泛型，这里来完整地学习泛型知识。</p>
<p>泛型，用来灵活地将数据类型应用到不同的类、方法、接口当中。将数据类型作为参数进行传递。</p>
<h3 id="定义和使用含有泛型的类"><a href="#定义和使用含有泛型的类" class="headerlink" title="定义和使用含有泛型的类"></a>定义和使用含有泛型的类</h3><p>定义格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符 class 类名&lt;代表泛型的变量&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure>
<p>例如，API中的ArrayList集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">   	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用泛型： 即什么时候确定泛型。</p>
<p><strong>在创建对象的时候确定泛型</strong></p>
<p> 例如，<code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p>
<p>此时，变量E的值就是String类型,那么我们的类型就可以理解为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String e)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再例如，<code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code></p>
<p>此时，变量E的值就是Integer类型,那么我们的类型就可以理解为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt; </span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Integer e)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例自定义泛型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericClass</span>&lt;<span class="title">MVP</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span></span><br><span class="line">	<span class="keyword">private</span> MVP mvp;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMVP</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mvp = mvp;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MVP <span class="title">getMVP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassDemo</span> </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;		 </span><br><span class="line">         <span class="comment">// 创建一个泛型为String的类</span></span><br><span class="line">         MyGenericClass&lt;String&gt; my = <span class="keyword">new</span> MyGenericClass&lt;String&gt;();    	</span><br><span class="line">         <span class="comment">// 调用setMVP</span></span><br><span class="line">         my.setMVP(<span class="string">&quot;大胡子登登&quot;</span>);</span><br><span class="line">         <span class="comment">// 调用getMVP</span></span><br><span class="line">         String mvp = my.getMVP();</span><br><span class="line">         System.out.println(mvp);</span><br><span class="line">         <span class="comment">//创建一个泛型为Integer的类</span></span><br><span class="line">         MyGenericClass&lt;Integer&gt; my2 = <span class="keyword">new</span> MyGenericClass&lt;Integer&gt;(); </span><br><span class="line">         my2.setMVP(<span class="number">123</span>);   	  </span><br><span class="line">         Integer mvp2 = my2.getMVP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02GenericClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不写泛型默认为Object类型</span></span><br><span class="line">        GenericClass gc = <span class="keyword">new</span> GenericClass();</span><br><span class="line">        gc.setName(<span class="string">&quot;只能是字符串&quot;</span>);</span><br><span class="line">        Object obj = gc.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建GenericClass对象,泛型使用Integer类型</span></span><br><span class="line">        GenericClass&lt;Integer&gt; gc2 = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        gc2.setName(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Integer name = gc2.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建GenericClass对象,泛型使用String类型</span></span><br><span class="line">        GenericClass&lt;String&gt; gc3 = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        gc3.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        String name1 = gc3.getName();</span><br><span class="line">        System.out.println(name1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=======================*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个含有泛型的类,模拟ArrayList集合</span></span><br><span class="line"><span class="comment">    泛型是一个未知的数据类型,当我们不确定什么什么数据类型的时候,可以使用泛型</span></span><br><span class="line"><span class="comment">    泛型可以接收任意的数据类型,可以使用Integer,String,Student...</span></span><br><span class="line"><span class="comment">    创建对象的时候确定泛型的数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(E name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h3><p>定义格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;  &#125;</span><br></pre></td></tr></table></figure>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;	  </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">    	System.out.println(mvp.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function">MVP <span class="title">show2</span><span class="params">(MVP mvp)</span> </span>&#123;	</span><br><span class="line">    	<span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用格式：<strong>调用方法时，确定泛型的类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        MyGenericMethod mm = <span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">        <span class="comment">// 演示看方法提示</span></span><br><span class="line">        mm.show(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        mm.show(<span class="number">123</span>);</span><br><span class="line">        mm.show(<span class="number">12.45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义含有泛型的方法:泛型定义在方法的修饰符和返回值类型之间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    格式:</span></span><br><span class="line"><span class="comment">        修饰符 &lt;泛型&gt; 返回值类型 方法名(参数列表(使用泛型))&#123;</span></span><br><span class="line"><span class="comment">            方法体;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    含有泛型的方法,在调用方法的时候确定泛型的数据类型</span></span><br><span class="line"><span class="comment">    传递什么类型的参数,泛型就是什么类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个含有泛型的方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method01</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个含有泛型的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function"><span class="keyword">void</span> <span class="title">method02</span><span class="params">(S s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*=======================*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试含有泛型的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建GenericMethod对象</span></span><br><span class="line">        GenericMethod gm = <span class="keyword">new</span> GenericMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            调用含有泛型的方法method01</span></span><br><span class="line"><span class="comment">            传递什么类型,泛型就是什么类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        gm.method01(<span class="number">10</span>);</span><br><span class="line">        gm.method01(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        gm.method01(<span class="number">8.8</span>);</span><br><span class="line">        gm.method01(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        gm.method02(<span class="string">&quot;静态方法,不建议创建对象使用&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法,通过类名.方法名(参数)可以直接使用</span></span><br><span class="line">        GenericMethod.method02(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">        GenericMethod.method02(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h3><p>定义格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符 interface接口名&lt;代表泛型的变量&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用格式：</p>
<p><strong>1、定义类时确定泛型的类型</strong></p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，泛型E的值就是String类型。</p>
<p> <strong>2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong></p>
<p> 例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp2</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       	 <span class="comment">// 省略...</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>确定泛型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyImp2&lt;String&gt;  my = <span class="keyword">new</span> MyImp2&lt;String&gt;();  </span><br><span class="line">        my.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    含有泛型的接口,第一种使用方式:定义接口的实现类,实现接口,指定接口的泛型</span></span><br><span class="line"><span class="comment">    public interface Iterator&lt;E&gt; &#123;</span></span><br><span class="line"><span class="comment">        E next();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Scanner类实现了Iterator接口,并指定接口的泛型为String,所以重写的next方法泛型默认就是String</span></span><br><span class="line"><span class="comment">    public final class Scanner implements Iterator&lt;String&gt;&#123;</span></span><br><span class="line"><span class="comment">        public String next() &#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===================================*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    含有泛型的接口第二种使用方式:接口使用什么泛型,实现类就使用什么泛型,类跟着接口走</span></span><br><span class="line"><span class="comment">    就相当于定义了一个含有泛型的类,创建对象的时候确定泛型的类型</span></span><br><span class="line"><span class="comment">    public interface List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">        boolean add(E e);</span></span><br><span class="line"><span class="comment">        E get(int index);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public class ArrayList&lt;E&gt; implements List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">        public boolean add(E e) &#123;&#125;</span></span><br><span class="line"><span class="comment">        public E get(int index) &#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl2</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试含有泛型的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl1对象</span></span><br><span class="line">        GenericInterfaceImpl1 gi1 = <span class="keyword">new</span> GenericInterfaceImpl1();</span><br><span class="line">        gi1.method(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl2对象</span></span><br><span class="line">        GenericInterfaceImpl2&lt;Integer&gt; gi2 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        gi2.method(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        GenericInterfaceImpl2&lt;Double&gt; gi3 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        gi3.method(<span class="number">8.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="3-4-泛型通配符"><a href="#3-4-泛型通配符" class="headerlink" title="3.4  泛型通配符"></a>3.4  泛型通配符</h2><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p>
<h4 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h4><p>泛型的通配符:<strong>不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。</strong></p>
<p>此时只能接受数据,不能往该集合中存储数据。</p>
<p>举个例子大家理解使用即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Intger&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    getElement(list1);</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    getElement(list2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:泛型不存在继承关系 Collection&lt;Object&gt; list = new ArrayList&lt;String&gt;();这种是错误的。</p>
</blockquote>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    泛型的通配符:</span></span><br><span class="line"><span class="comment">        ?:代表任意的数据类型</span></span><br><span class="line"><span class="comment">    使用方式:</span></span><br><span class="line"><span class="comment">        不能创建对象使用</span></span><br><span class="line"><span class="comment">        只能作为方法的参数使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list02.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        printArray(list01);</span><br><span class="line">        printArray(list02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayList&lt;?&gt; list03 = new ArrayList&lt;?&gt;();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,能遍历所有类型的ArrayList集合</span></span><br><span class="line"><span class="comment">        这时候我们不知道ArrayList集合使用什么数据类型,可以泛型的通配符?来接收数据类型</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            泛型没有继承概念的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用迭代器遍历集合</span></span><br><span class="line">        Iterator&lt;?&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//it.next()方法,取出的元素是Object,可以接收任意的数据类型</span></span><br><span class="line">            Object o = it.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h4><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<strong>上限</strong>和<strong>下限</strong>。</p>
<p><strong>泛型的上限</strong>：</p>
<ul>
<li><strong>格式</strong>： <code>类型名称 &lt;? extends 类 &gt; 对象名称</code></li>
<li><strong>意义</strong>： <code>只能接收该类型及其子类</code></li>
</ul>
<p><strong>泛型的下限</strong>：</p>
<ul>
<li><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></li>
<li><strong>意义</strong>： <code>只能接收该类型及其父类型</code></li>
</ul>
<p>比如：现已知Object类，String 类，Number类，Integer类，其中Number是Integer的父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">    Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    </span><br><span class="line">    getElement(list1);</span><br><span class="line">    getElement(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement(list3);</span><br><span class="line">    getElement(list4);<span class="comment">//报错</span></span><br><span class="line">  </span><br><span class="line">    getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list3);</span><br><span class="line">    getElement2(list4);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    泛型的上限限定: ? extends E  代表使用的泛型只能是E类型的子类/本身</span></span><br><span class="line"><span class="comment">    泛型的下限限定: ? super E    代表使用的泛型只能是E类型的父类/本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        getElement1(list1);</span><br><span class="line">        <span class="comment">//getElement1(list2);//报错</span></span><br><span class="line">        getElement1(list3);</span><br><span class="line">        <span class="comment">//getElement1(list4);//报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getElement2(list1);//报错</span></span><br><span class="line">        <span class="comment">//getElement2(list2);//报错</span></span><br><span class="line">        getElement2(list3);</span><br><span class="line">        getElement2(list4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            类与类之间的继承关系</span></span><br><span class="line"><span class="comment">            Integer extends Number extends Object</span></span><br><span class="line"><span class="comment">            String extends Object</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第四章-集合综合案例"><a href="#第四章-集合综合案例" class="headerlink" title="第四章 集合综合案例"></a>第四章 集合综合案例</h1><h2 id="4-1-案例介绍"><a href="#4-1-案例介绍" class="headerlink" title="4.1 案例介绍"></a>4.1 案例介绍</h2><p>按照斗地主的规则，完成洗牌发牌的动作。<br>具体规则：</p>
<p>使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p>
<h2 id="4-2-案例分析"><a href="#4-2-案例分析" class="headerlink" title="4.2 案例分析"></a>4.2 案例分析</h2><ul>
<li><p>准备牌：</p>
<p>牌可以设计为一个ArrayList&lt;String&gt;,每个字符串为一张牌。<br>每张牌由花色数字两部分组成，我们可以使用花色集合与数字集合嵌套迭代完成每张牌的组装。<br>牌由Collections类的shuffle方法进行随机排序。</p>
</li>
<li><p>发牌</p>
<p>将每个人以及底牌设计为ArrayList&lt;String&gt;,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p>
</li>
</ul>
<ul>
<li><p>看牌</p>
<p>直接打印每个集合。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422111530.bmp" alt="04_斗地主案例的需求分析"></p>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1: 准备牌操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//1.1 创建牌盒 将来存储牌面的 </span></span><br><span class="line">        ArrayList&lt;String&gt; pokerBox = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//1.2 创建花色集合</span></span><br><span class="line">        ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.3 创建数字集合</span></span><br><span class="line">        ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.4 分别给花色 以及 数字集合添加元素</span></span><br><span class="line">        colors.add(<span class="string">&quot;♥&quot;</span>);</span><br><span class="line">        colors.add(<span class="string">&quot;♦&quot;</span>);</span><br><span class="line">        colors.add(<span class="string">&quot;♠&quot;</span>);</span><br><span class="line">        colors.add(<span class="string">&quot;♣&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            numbers.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        numbers.add(<span class="string">&quot;J&quot;</span>);</span><br><span class="line">        numbers.add(<span class="string">&quot;Q&quot;</span>);</span><br><span class="line">        numbers.add(<span class="string">&quot;K&quot;</span>);</span><br><span class="line">        numbers.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="comment">//1.5 创造牌  拼接牌操作</span></span><br><span class="line">        <span class="comment">// 拿出每一个花色  然后跟每一个数字 进行结合  存储到牌盒中</span></span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="comment">//color每一个花色 </span></span><br><span class="line">            <span class="comment">//遍历数字集合</span></span><br><span class="line">            <span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line">                <span class="comment">//结合</span></span><br><span class="line">                String card = color+number;</span><br><span class="line">                <span class="comment">//存储到牌盒中</span></span><br><span class="line">                pokerBox.add(card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.6大王小王</span></span><br><span class="line">        pokerBox.add(<span class="string">&quot;小☺&quot;</span>);</span><br><span class="line">        pokerBox.add(<span class="string">&quot;大☠&quot;</span>);	  </span><br><span class="line">        <span class="comment">// System.out.println(pokerBox);</span></span><br><span class="line">        <span class="comment">//洗牌 是不是就是将  牌盒中 牌的索引打乱 </span></span><br><span class="line">        <span class="comment">// Collections类  工具类  都是 静态方法</span></span><br><span class="line">        <span class="comment">// shuffer方法   </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * static void shuffle(List&lt;?&gt; list) </span></span><br><span class="line"><span class="comment">         *     使用默认随机源对指定列表进行置换。 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//2:洗牌</span></span><br><span class="line">        Collections.shuffle(pokerBox);</span><br><span class="line">        <span class="comment">//3 发牌</span></span><br><span class="line">        <span class="comment">//3.1 创建 三个 玩家集合  创建一个底牌集合</span></span><br><span class="line">        ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();	  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历 牌盒  必须知道索引   </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokerBox.size();i++)&#123;</span><br><span class="line">            <span class="comment">//获取 牌面</span></span><br><span class="line">            String card = pokerBox.get(i);</span><br><span class="line">            <span class="comment">//留出三张底牌 存到 底牌集合中</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;<span class="comment">//存到底牌集合中</span></span><br><span class="line">                dipai.add(card);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//玩家1   %3  ==0</span></span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                  	player1.add(card);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;<span class="comment">//玩家2</span></span><br><span class="line">                  	player2.add(card);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//玩家3</span></span><br><span class="line">                  	player3.add(card);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//看看</span></span><br><span class="line">        System.out.println(<span class="string">&quot;令狐冲：&quot;</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">&quot;田伯光：&quot;</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">&quot;绿竹翁：&quot;</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌：&quot;</span>+dipai);  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 快捷键 MAC</title>
    <url>/2021/04/22/2021-04-22-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE-MAC/</url>
    <content><![CDATA[<h1 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h1><p>下面有些功能，Mac小键盘空间不足，没有单键实现，转而使用组合键来实现。</p>
<ul>
<li><code>⎋</code> Escape (Esc)</li>
<li><code>⌘</code> Command 命令 = Windows的Windows键</li>
<li><code>⇧</code> Shift 切换</li>
<li><code>⌥</code> Option 选项 = Windows 的Alt键</li>
<li><code>⌃</code> Control 控制</li>
<li><code>↩︎</code> Return/Enter 换行</li>
<li><code>⌫</code> Delete 向左删除</li>
<li><code>⌦</code> 向右删除 = Fn + Delete</li>
<li><code>⇞</code> Page Up = <code>Fn + ↑</code></li>
<li><code>⇟</code> Page Down = <code>Fn + ↓</code></li>
<li><code>Home</code> = <code>Fn + ←左方向键</code></li>
<li><code>End</code> = <code>Fn + →右方向键</code></li>
<li><code>⇥</code> 右制表符（Tab键）</li>
<li><code>⇤</code> 左制表符 = <code>Shift + Tab</code></li>
</ul>
<h1 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h1><h4 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌃ Space</td>
<td align="left">基本的代码补全（补全任何类、方法、变量）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">⌃ ⇧ Space</td>
<td align="left">智能代码<code>补全</code>（过滤器方法列表和变量的预期类型）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">⌘ ⇧ ↩︎</td>
<td align="left">自动结束代码，行末自动添加<code>分号</code></td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="显示查看"><a href="#显示查看" class="headerlink" title="显示查看"></a>显示查看</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ P</td>
<td align="left">显示方法的参数信息（光标放在被调用方法的圆括号内，然后按此快捷键）</td>
<td align="left">★★★★</td>
</tr>
<tr>
<td align="left">⌃ J</td>
<td align="left">快速显示文档</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⇧ F1</td>
<td align="left">显示外部文档（在某些代码上会触发打开浏览器显示相关文档）</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ + 鼠标放在代码上</td>
<td align="left">显示基本信息</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ F1</td>
<td align="left">在<code>错误</code>或<code>警告</code>处显示描述信息</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌃ ⇧ Q</td>
<td align="left">显示上下文信息</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h4 id="快速生成-提示"><a href="#快速生成-提示" class="headerlink" title="快速生成 / 提示"></a>快速生成 / 提示</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ N, ⌃ ↩︎, ⌃ N</td>
<td align="left">生成代码（Getters, Setters, Constructors,hashCode/equals, toString）</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ O</td>
<td align="left">覆盖方法（重写父类方法）</td>
<td align="left">★★</td>
</tr>
<tr>
<td align="left">⌃ I</td>
<td align="left">实现方法（实现接口中的方法）</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ T</td>
<td align="left">包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ /</td>
<td align="left">注释/取消注释与<code>行注释</code></td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ /</td>
<td align="left">注释/取消注释与<code>块注释</code></td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌥ ↑</td>
<td align="left">连续选中代码块</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌥ ↓</td>
<td align="left">减少当前选中的代码块</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌥ ↩︎</td>
<td align="left">显示意向动作和快速修复代码</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h4 id="优化（格式化，去除多余，优化import）"><a href="#优化（格式化，去除多余，优化import）" class="headerlink" title="优化（格式化，去除多余，优化import）"></a>优化（格式化，去除多余，优化import）</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ ⌥ L</td>
<td align="left">格式化代码</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ ⌥ O</td>
<td align="left">优化import</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌃ ⌥ I</td>
<td align="left">自动缩进行</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⇥ , ⇧ ⇥</td>
<td align="left">缩进代码 / 反缩进代码</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h4 id="剪切、复制、粘贴、删除"><a href="#剪切、复制、粘贴、删除" class="headerlink" title="剪切、复制、粘贴、删除"></a>剪切、复制、粘贴、删除</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ X</td>
<td align="left">剪切<code>当前行</code>或<code>选定的块</code>到剪贴板</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ C</td>
<td align="left">复制<code>当前行</code>或<code>选定的块</code>到剪贴板</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ V</td>
<td align="left">从剪贴板粘贴</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ V</td>
<td align="left">从最近的缓冲区粘贴</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ D</td>
<td align="left">复制<code>当前行</code>或<code>选定的块</code></td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌫</td>
<td align="left">删除<code>当前行</code>或<code>选定的块的行</code></td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌥ ⌫</td>
<td align="left">删除到单词的<code>开头</code></td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌥ Fn ⌫</td>
<td align="left">删除到单词的<code>末尾</code></td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h4 id="普通edit操作"><a href="#普通edit操作" class="headerlink" title="普通edit操作"></a>普通edit操作</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⇧ ↩︎</td>
<td align="left">开始新的一行</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧  U</td>
<td align="left">大小写切换</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ ([ / ])</td>
<td align="left">选择直到<code>代码块</code>结束/开始</td>
<td align="left">★</td>
</tr>
<tr>
<td align="left">⌃ ⇧ J</td>
<td align="left">智能的将代码拼接成一行</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ↩︎</td>
<td align="left">智能的拆分拼接的行</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ (+ / -)</td>
<td align="left">展开 / 折叠代码块</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ (+ / -)</td>
<td align="left">展开 / 折叠所有代码块</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ W</td>
<td align="left">关闭活动的编辑器选项卡</td>
<td align="left">★★★</td>
</tr>
</tbody></table>
<h2 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Double ⇧</td>
<td align="left">查询任何东西(包括<code>文件夹</code>、<code>文件</code>以及<code>字符串</code>)</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ F</td>
<td align="left">文件内查找</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ G</td>
<td align="left">查找模式下，向下查找</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ G</td>
<td align="left">查找模式下，向上查找</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ R</td>
<td align="left">文件内替换</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⇧ F</td>
<td align="left">全局查找（根据路径）</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⇧ R</td>
<td align="left">全局替换（根据路径）</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⇧ S</td>
<td align="left">查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⇧ M</td>
<td align="left">替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h2 id="三、Usage-Search（使用地点查询）"><a href="#三、Usage-Search（使用地点查询）" class="headerlink" title="三、Usage Search（使用地点查询）"></a>三、Usage Search（使用地点查询）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">(⌥ / ⌘) F7</td>
<td align="left">查找在哪个文件中被使用 / 查找在哪个类中被使用</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ F7</td>
<td align="left">高亮显示在本文件中使用地点</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ F7</td>
<td align="left">显示使用地点</td>
<td align="left">★★★</td>
</tr>
</tbody></table>
<h1 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h1><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ F9</td>
<td align="left">编译Project</td>
<td align="left">★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ F9</td>
<td align="left">编译选择的文件、包或模块</td>
<td align="left">★</td>
</tr>
<tr>
<td align="left">⌃ ⌥ R</td>
<td align="left">弹出 Run 的可选择菜单</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ ⌥ D</td>
<td align="left">弹出 Debug 的可选择菜单</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ R</td>
<td align="left">运行</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ D</td>
<td align="left">调试</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ ⇧ (R / D)</td>
<td align="left">从编辑器运行上下文环境配置</td>
<td align="left">★★★★★</td>
</tr>
</tbody></table>
<h2 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F8</td>
<td align="left">进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">F7</td>
<td align="left">进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⇧ F7</td>
<td align="left">智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⇧ F8</td>
<td align="left">跳出</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌥ F9</td>
<td align="left">运行到光标处，如果光标前有其他断点会进入到该断点</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌥ F8</td>
<td align="left">计算表达式（可以更改变量值使其生效）</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⌥ R</td>
<td align="left">恢复程序运行，如果该断点下面代码还有断点则停在下一个断点</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ F8</td>
<td align="left">切换断点（若光标当前行有断点则取消断点，没有则加上断点）</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ F8</td>
<td align="left">查看断点信息</td>
<td align="left">★★★★★</td>
</tr>
</tbody></table>
<h2 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h2><h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ O</td>
<td align="left">跳转到指定的类</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ O</td>
<td align="left">跳转到所有类型<code>文件/目录</code>，目录需要在输入的内容<code>前/后</code>加一个反斜杠/</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ O</td>
<td align="left">跳转到指定的目标（变量 / 方法）</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ L</td>
<td align="left">跳转到<code>指定行</code></td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ U</td>
<td align="left">跳转到<code>父类/接口</code>的对应处</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ B</td>
<td align="left">跳转到<code>实现</code>处</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ (B / 鼠标点击)</td>
<td align="left">跳转到光标所在的<code>方法</code>/<code>变量</code>的<code>声明</code>处</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ ⇧ B</td>
<td align="left">跳转到类<code>声明</code>处</td>
<td align="left">★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ (← / →)</td>
<td align="left">跳转到<code>上一个</code>/ <code>下一个</code>操作处</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ ⌫</td>
<td align="left">跳转到<code>最后一次</code>编辑处</td>
<td align="left">★★</td>
</tr>
<tr>
<td align="left">⌃ (↓ / ↑)</td>
<td align="left">跳转到<code>上一个</code> / <code>下一个</code>方法名处</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">F2，⇧ F2</td>
<td align="left">跳转到<code>下一个</code>/<code>上一个</code>高亮错误/警告处</td>
<td align="left">★★</td>
</tr>
<tr>
<td align="left">⌘ ([ / ])</td>
<td align="left">跳转到<code>当前所在代码块</code>的花括号<code>开始</code>/<code>结束</code>处</td>
<td align="left">★★</td>
</tr>
</tbody></table>
<h4 id="弹出"><a href="#弹出" class="headerlink" title="弹出"></a>弹出</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ E</td>
<td align="left">弹出<code>最近打开</code>的文件列表</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ F12</td>
<td align="left">弹出<code>当前文件</code>结构，类似eclipse的<code>outline</code></td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ H</td>
<td align="left">弹出当前<code>类</code>的层次（即父类、子类）</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ H</td>
<td align="left">弹出<code>方法</code>层次结构</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ ⌥ H</td>
<td align="left">弹出<code>调用</code>层次（哪些调用了此处）</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌥ Space, ⌘ Y</td>
<td align="left">弹出光标所在<code>方法</code>、<code>类</code>的定义</td>
<td align="left">★★★★★</td>
</tr>
</tbody></table>
<h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌥ F1</td>
<td align="left">弹出窗口列表，跳转到选定的窗口</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">F12</td>
<td align="left">返回到前一个工具窗口</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">Esc</td>
<td align="left">跳转到代码编辑窗口（从工具窗口）</td>
<td align="left">★★</td>
</tr>
<tr>
<td align="left">⇧ Esc</td>
<td align="left">隐藏<code>当前</code>/<code>最后</code>一个活动的窗口（且光标进入代码文件窗口）</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌃ (← / →)</td>
<td align="left">左右切换打开的编辑tab页</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⇧ F4</td>
<td align="left">关闭活动run/messages/find/… tab</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">F4，⌘ ↓</td>
<td align="left"><code>编辑</code>/<code>查看</code>源代码</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌥ Fn ←</td>
<td align="left">显示到当前文件的导航条</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h4 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F3</td>
<td align="left">选中文件/文件夹/代码行，添加/取消书签</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌥ F3</td>
<td align="left">选中文件/文件夹/代码行，使用助记符添加/取消书签</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌃ 0…9</td>
<td align="left">跳转到对应数值的书签处</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ F3</td>
<td align="left">显示所有书签</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h2 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F5</td>
<td align="left">复制文件到指定目录</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">F6</td>
<td align="left">移动文件到指定目录</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⌫</td>
<td align="left">在文件上为安全删除文件，弹出确认框</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⇧ F6</td>
<td align="left">重命名文件</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ F6</td>
<td align="left">更改签名</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⌥ N</td>
<td align="left">一致性</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⌥ M</td>
<td align="left">将选中的代码提取为方法</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⌥ V</td>
<td align="left">将选中的代码提取为变量</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ F</td>
<td align="left">将选中的代码提取为字段</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⌥ C</td>
<td align="left">将选中的代码提取为常量</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⌥ P</td>
<td align="left">将选中的代码提取为参数</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h2 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ K</td>
<td align="left">提交代码到版本控制器</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ T</td>
<td align="left">从版本控制器更新代码</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌥ ⇧ C</td>
<td align="left">查看最近的变更记录</td>
<td align="left">★</td>
</tr>
<tr>
<td align="left">⌃ C</td>
<td align="left">快速弹出版本控制器操作面板</td>
<td align="left">★★★★★</td>
</tr>
</tbody></table>
<h2 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ ⌥ J</td>
<td align="left">弹出模板选择窗口，将选定的代码使用动态模板包住</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ J</td>
<td align="left">插入自定义动态代码模板</td>
<td align="left">☆</td>
</tr>
</tbody></table>
<h2 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ (1…9)</td>
<td align="left">打开相应编号的工具窗口</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ S</td>
<td align="left">保存所有</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌘ ⌥ Y</td>
<td align="left">同步、刷新</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌃ ⌘ F</td>
<td align="left">切换全屏模式</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⇧ F12</td>
<td align="left">切换最大化编辑器</td>
<td align="left">★★★★★</td>
</tr>
<tr>
<td align="left">⌥ ⇧ F</td>
<td align="left">添加到收藏夹</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌥ ⇧ I</td>
<td align="left">检查当前文件与当前的配置文件</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌃ `</td>
<td align="left">快速切换当前的scheme（切换主题、代码样式等）</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ,</td>
<td align="left">打开IDEA系统设置</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ;</td>
<td align="left">打开项目结构对话框</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌘ ⇧ A</td>
<td align="left">查找动作（可设置相关选项）</td>
<td align="left">☆</td>
</tr>
<tr>
<td align="left">⌃ ⇧ Tab</td>
<td align="left">编辑窗口标签和工具窗口之间切换（如切换过程中按delete，则关闭对应选中窗口）</td>
<td align="left">★★★★★</td>
</tr>
</tbody></table>
<h2 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
<th align="left">使用频率</th>
</tr>
</thead>
<tbody><tr>
<td align="left">⌘ ⇧ 8</td>
<td align="left">竖编辑模式</td>
<td align="left">★★★★★</td>
</tr>
</tbody></table>
<p>作者：lsh的学习笔记<br>链接：<a class="link"   href="https://www.jianshu.com/p/e1f7deef3ec2" >https://www.jianshu.com/p/e1f7deef3ec2<i class="fas fa-external-link-alt"></i></a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>IDEs</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2021/04/22/2021-04-22-Map/</url>
    <content><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li> Map集合</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够说出Map集合特点</li>
<li><input disabled="" type="checkbox"> 使用Map集合添加方法保存数据</li>
<li><input disabled="" type="checkbox"> 使用”键找值”的方式遍历Map集合</li>
<li><input disabled="" type="checkbox"> 使用”键值对”的方式遍历Map集合</li>
<li><input disabled="" type="checkbox"> 能够使用HashMap存储自定义键值对的数据</li>
<li><input disabled="" type="checkbox"> 能够使用HashMap编写斗地主洗牌发牌案例</li>
</ul>
<h1 id="第一章-Map集合"><a href="#第一章-Map集合" class="headerlink" title="第一章 Map集合"></a>第一章 Map集合</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>现实生活中，我们常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类用来存放这种对象关系的对象，即<code>java.util.Map</code>接口。</p>
<p>我们通过查看<code>Map</code>接口描述，发现<code>Map</code>接口下的集合与<code>Collection</code>接口下的集合，它们存储数据的形式不同，如下图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422152644.bmp"></p>
<ul>
<li><code>Collection</code>中的集合，元素是孤立存在的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li>
<li><code>Map</code>中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。</li>
<li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li>
<li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li>
</ul>
<h2 id="1-2-Map常用子类"><a href="#1-2-Map常用子类" class="headerlink" title="1.2  Map常用子类"></a>1.2  Map常用子类</h2><p>通过查看Map接口描述，看到Map有多个子类，这里我们主要讲解常用的HashMap集合、LinkedHashMap集合。</p>
<ul>
<li>**HashMap&lt;K,V&gt;**：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li>
<li>**LinkedHashMap&lt;K,V&gt;**：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li>
</ul>
<blockquote>
<p>tips：Map接口中的集合都有两个泛型变量&lt;K,V&gt;,在使用时，要为两个泛型变量赋予数据类型。两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可以不同。</p>
</blockquote>
<h2 id="1-3-Map接口中的常用方法"><a href="#1-3-Map接口中的常用方法" class="headerlink" title="1.3  Map接口中的常用方法"></a>1.3  Map接口中的常用方法</h2><p>Map接口中定义了很多方法，常用的如下：</p>
<ul>
<li><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</li>
<li><code>public V remove(Object key)</code>: 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li>
<li><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</li>
<li><code>boolean containsKey(Object key)  </code> 判断集合中是否包含指定的键。</li>
<li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li>
<li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li>
</ul>
<p>Map接口的方法演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 map对象</span></span><br><span class="line">        HashMap&lt;String, String&gt;  map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素到集合</span></span><br><span class="line">        map.put(<span class="string">&quot;黄晓明&quot;</span>, <span class="string">&quot;杨颖&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;文章&quot;</span>, <span class="string">&quot;马伊琍&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="string">&quot;孙俪&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String remove(String key)</span></span><br><span class="line">        System.out.println(map.remove(<span class="string">&quot;邓超&quot;</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 想要查看 黄晓明的媳妇 是谁</span></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;黄晓明&quot;</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;邓超&quot;</span>));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:</p>
<p>使用put方法时，若指定的键(key)在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中； </p>
<p>若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。 </p>
</blockquote>
<h2 id="1-4-Map集合遍历键找值方式"><a href="#1-4-Map集合遍历键找值方式" class="headerlink" title="1.4   Map集合遍历键找值方式"></a>1.4   Map集合遍历键找值方式</h2><p>键找值方式：即通过元素中的键，获取键所对应的值</p>
<p>分析步骤：</p>
<ol>
<li>获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示:<code>keyset()</code></li>
<li>遍历键的Set集合，得到每一个键。</li>
<li>根据键，获取键所对应的值。方法提示:<code>get(K key)</code></li>
</ol>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象 </span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        <span class="comment">//添加元素到集合 </span></span><br><span class="line">        map.put(<span class="string">&quot;胡歌&quot;</span>, <span class="string">&quot;霍建华&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭德纲&quot;</span>, <span class="string">&quot;于谦&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;薛之谦&quot;</span>, <span class="string">&quot;大张伟&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的键  获取键集</span></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="comment">// 遍历键集 得到 每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">          	<span class="comment">//key  就是键</span></span><br><span class="line">            <span class="comment">//获取对应值</span></span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;的CP是：&quot;</span>+value);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历图解：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422154513.bmp" alt="Map集合遍历方式一"></p>
<h2 id="1-5-Entry键值对对象"><a href="#1-5-Entry键值对对象" class="headerlink" title="1.5  Entry键值对对象"></a>1.5  Entry键值对对象</h2><p>我们已经知道，<code>Map</code>中存放的是两种对象，一种称为<strong>key</strong>(键)，一种称为<strong>value</strong>(值)，它们在在<code>Map</code>中是一一对应关系，这一对对象又称做<code>Map</code>中的一个<code>Entry(项)</code>。<code>Entry</code>将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历<code>Map</code>集合时，就可以从每一个键值对（<code>Entry</code>）对象中获取对应的键与对应的值。</p>
<p> 既然Entry表示了一对键和值，那么也同样提供了获取对应键和对应值得方法：</p>
<ul>
<li><code>public K getKey()</code>：获取Entry对象中的键。</li>
<li><code>public V getValue()</code>：获取Entry对象中的值。</li>
</ul>
<p>在Map集合中也提供了获取所有Entry对象的方法：</p>
<ul>
<li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Map&lt;k,v&gt;集合</span></span><br><span class="line"><span class="comment">    Map集合的特点:</span></span><br><span class="line"><span class="comment">        1.Map集合是一个双列集合,一个元素包含两个值(一个key,一个value)</span></span><br><span class="line"><span class="comment">        2.Map集合中的元素,key和value的数据类型可以相同,也可以不同</span></span><br><span class="line"><span class="comment">        3.Map集合中的元素,key是不允许重复的,value是可以重复的</span></span><br><span class="line"><span class="comment">        4.Map集合中的元素,key和value是一一对应</span></span><br><span class="line"><span class="comment">    java.util.HashMap&lt;k,v&gt;集合 implements Map&lt;k,v&gt;接口</span></span><br><span class="line"><span class="comment">    HashMap集合的特点:</span></span><br><span class="line"><span class="comment">        1.HashMap集合底层是哈希表:查询的速度特别的快</span></span><br><span class="line"><span class="comment">            JDK1.8之前:数组+单向链表</span></span><br><span class="line"><span class="comment">            JDK1.8之后:数组+单向链表|红黑树(链表的长度超过8):提高查询的速度</span></span><br><span class="line"><span class="comment">        2.hashMap集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致</span></span><br><span class="line"><span class="comment">   java.util.LinkedHashMap&lt;k,v&gt;集合 extends HashMap&lt;k,v&gt;集合</span></span><br><span class="line"><span class="comment">   LinkedHashMap的特点:</span></span><br><span class="line"><span class="comment">        1.LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)</span></span><br><span class="line"><span class="comment">        2.LinkedHashMap集合是一个有序的集合,存储元素和取出元素的顺序是一致的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show04();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        boolean containsKey(Object key) 判断集合中是否包含指定的键。</span></span><br><span class="line"><span class="comment">        包含返回true,不包含返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;赵丽颖&quot;</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨颖&quot;</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">&quot;林志玲&quot;</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b1 = map.containsKey(<span class="string">&quot;赵丽颖&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b1:&quot;</span>+b1);<span class="comment">//b1:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = map.containsKey(<span class="string">&quot;赵颖&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b2:&quot;</span>+b2);<span class="comment">//b2:false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V get(Object key) 根据指定的键，在Map集合中获取对应的值。</span></span><br><span class="line"><span class="comment">            返回值:</span></span><br><span class="line"><span class="comment">                key存在,返回对应的value值</span></span><br><span class="line"><span class="comment">                key不存在,返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;赵丽颖&quot;</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨颖&quot;</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">&quot;林志玲&quot;</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        Integer v1 = map.get(<span class="string">&quot;杨颖&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:&quot;</span>+v1);<span class="comment">//v1:165</span></span><br><span class="line"></span><br><span class="line">        Integer v2 = map.get(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:&quot;</span>+v2);<span class="comment">//v2:null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V remove(Object key): 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</span></span><br><span class="line"><span class="comment">            返回值:V</span></span><br><span class="line"><span class="comment">                key存在,v返回被删除的值</span></span><br><span class="line"><span class="comment">                key不存在,v返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;赵丽颖&quot;</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨颖&quot;</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">&quot;林志玲&quot;</span>,<span class="number">178</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;林志玲=178, 赵丽颖=168, 杨颖=165&#125;</span></span><br><span class="line"></span><br><span class="line">        Integer v1 = map.remove(<span class="string">&quot;林志玲&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:&quot;</span>+v1);<span class="comment">//v1:178</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;赵丽颖=168, 杨颖=165&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int v2 = map.remove(&quot;林志颖&quot;);//自动拆箱  NullPointerException</span></span><br><span class="line">        Integer v2 = map.remove(<span class="string">&quot;林志颖&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:&quot;</span>+v2);<span class="comment">//v2:null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;赵丽颖=168, 杨颖=165&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V put(K key, V value):  把指定的键与指定的值添加到Map集合中。</span></span><br><span class="line"><span class="comment">            返回值:v</span></span><br><span class="line"><span class="comment">                存储键值对的时候,key不重复,返回值V是null</span></span><br><span class="line"><span class="comment">                存储键值对的时候,key重复,会使用新的value替换map中重复的value,返回被替换的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象,多态</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String v1 = map.put(<span class="string">&quot;李晨&quot;</span>, <span class="string">&quot;范冰冰1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:&quot;</span>+v1);<span class="comment">//v1:null</span></span><br><span class="line"></span><br><span class="line">        String v2 = map.put(<span class="string">&quot;李晨&quot;</span>, <span class="string">&quot;范冰冰2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:&quot;</span>+v2);<span class="comment">//v2:范冰冰1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;李晨=范冰冰2&#125;</span></span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;冷锋&quot;</span>,<span class="string">&quot;龙小云&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>,<span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;尹志平&quot;</span>,<span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;杨过=小龙女, 尹志平=小龙女, 李晨=范冰冰2, 冷锋=龙小云&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-6-Map集合遍历键值对方式"><a href="#1-6-Map集合遍历键值对方式" class="headerlink" title="1.6 Map集合遍历键值对方式"></a>1.6 Map集合遍历键值对方式</h2><p>键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中的键与值。</p>
<p>操作步骤与图解：</p>
<ol>
<li><p> 获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示:<code>entrySet()</code>。</p>
</li>
<li><p> 遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。</p>
</li>
<li><p> 通过键值对(Entry)对象，获取Entry对象中的键与值。  方法提示:<code>getkey() getValue()</code>     </p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Map集合对象 </span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        <span class="comment">// 添加元素到集合 </span></span><br><span class="line">        map.put(<span class="string">&quot;胡歌&quot;</span>, <span class="string">&quot;霍建华&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭德纲&quot;</span>, <span class="string">&quot;于谦&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;薛之谦&quot;</span>, <span class="string">&quot;大张伟&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 所有的 entry对象  entrySet</span></span><br><span class="line">        Set&lt;Entry&lt;String,String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历得到每一个entry对象</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">           	<span class="comment">// 解析 </span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();  </span><br><span class="line">            System.out.println(key+<span class="string">&quot;的CP是:&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历图解：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422154547.bmp" alt="Map集合遍历方式二"></p>
<blockquote>
<p>tips：Map集合不能直接使用迭代器或者foreach进行遍历。但是转成Set之后就可以使用了。</p>
</blockquote>
<p><code>demo in class</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422160830.bmp" alt="01_Map集合遍历键找值方式"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Map集合的第一种遍历方式:通过键找值的方式</span></span><br><span class="line"><span class="comment">    Map集合中的方法:</span></span><br><span class="line"><span class="comment">         Set&lt;K&gt; keySet() 返回此映射中包含的键的 Set 视图。</span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.使用Map集合中的方法keySet(),把Map集合所有的key取出来,存储到一个Set集合中</span></span><br><span class="line"><span class="comment">        2.遍历set集合,获取Map集合中的每一个key</span></span><br><span class="line"><span class="comment">        3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;赵丽颖&quot;</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨颖&quot;</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">&quot;林志玲&quot;</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法keySet(),把Map集合所有的key取出来,存储到一个Set集合中</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历set集合,获取Map集合中的每一个key</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//使用增强for遍历Set集合</span></span><br><span class="line">        <span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">            <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//使用增强for遍历Set集合</span></span><br><span class="line">        <span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">            <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>entrySet()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Map集合遍历的第二种方式:使用Entry对象遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Map集合中的方法:</span></span><br><span class="line"><span class="comment">        Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 返回此映射中包含的映射关系的 Set 视图。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来,存储到一个Set集合中</span></span><br><span class="line"><span class="comment">        2.遍历Set集合,获取每一个Entry对象</span></span><br><span class="line"><span class="comment">        3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;赵丽颖&quot;</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨颖&quot;</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">&quot;林志玲&quot;</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来,存储到一个Set集合中</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历Set集合,获取每一个Entry对象</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; entry = it.next();</span><br><span class="line">            <span class="comment">//3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; entry:set)&#123;</span><br><span class="line">            <span class="comment">//3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-7-HashMap存储自定义类型键值"><a href="#1-7-HashMap存储自定义类型键值" class="headerlink" title="1.7  HashMap存储自定义类型键值"></a>1.7  HashMap存储自定义类型键值</h2><p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到map集合中。学生作为键, 家庭住址作为值。</p>
<blockquote>
<p>注意，学生姓名相同并且年龄相同视为同一名学生。</p>
</blockquote>
<p>编写学生类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1,创建Hashmap集合对象。</span></span><br><span class="line">        Map&lt;Student,String&gt;map = <span class="keyword">new</span> HashMap&lt;Student,String&gt;();</span><br><span class="line">        <span class="comment">//2,添加元素。</span></span><br><span class="line">        map.put(newStudent(<span class="string">&quot;lisi&quot;</span>,<span class="number">28</span>), <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">&quot;wangwu&quot;</span>,<span class="number">22</span>), <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">&quot;zhaoliu&quot;</span>,<span class="number">24</span>), <span class="string">&quot;成都&quot;</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">&quot;zhouqi&quot;</span>,<span class="number">25</span>), <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">&quot;wangwu&quot;</span>,<span class="number">22</span>), <span class="string">&quot;南京&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3,取出元素。键找值方式</span></span><br><span class="line">        Set&lt;Student&gt;keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span>(Student key: keySet)&#123;</span><br><span class="line">            Stringvalue = map.get(key);</span><br><span class="line">            System.out.println(key.toString()+<span class="string">&quot;.....&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当给HashMap中存放自定义对象时，如果自定义对象作为key存在，这时要保证对象唯一，必须复写对象的hashCode和equals方法(如果忘记，请回顾HashSet存放自定义对象)。</li>
<li>如果要保证map中存放的key和取出的顺序一致，可以使用<code>java.util.LinkedHashMap</code>集合来存放。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">    Map集合保证key是唯一的:</span></span><br><span class="line"><span class="comment">        作为key的元素,必须重写hashCode方法和equals方法,以保证key唯一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashMapSavePerson</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">        key:Person类型</span></span><br><span class="line"><span class="comment">            Person类就必须重写hashCode方法和equals方法,以保证key唯一</span></span><br><span class="line"><span class="comment">        value:String类型</span></span><br><span class="line"><span class="comment">            可以重复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;Person,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;女王&quot;</span>,<span class="number">18</span>),<span class="string">&quot;英国&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;秦始皇&quot;</span>,<span class="number">18</span>),<span class="string">&quot;秦国&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;普京&quot;</span>,<span class="number">30</span>),<span class="string">&quot;俄罗斯&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;女王&quot;</span>,<span class="number">18</span>),<span class="string">&quot;毛里求斯&quot;</span>);</span><br><span class="line">        <span class="comment">//使用entrySet和增强for遍历Map集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Person, String&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Person, String&gt; entry : set) &#123;</span><br><span class="line">            Person key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;--&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">        key:String类型</span></span><br><span class="line"><span class="comment">            String类重写hashCode方法和equals方法,可以保证key唯一</span></span><br><span class="line"><span class="comment">        value:Person类型</span></span><br><span class="line"><span class="comment">            value可以重复(同名同年龄的人视为同一个)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;北京&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;上海&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        map.put(<span class="string">&quot;广州&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        map.put(<span class="string">&quot;北京&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;赵六&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">//使用keySet加增强for遍历Map集合</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">            Person value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;--&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*================================================*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo02.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="1-8-LinkedHashMap"><a href="#1-8-LinkedHashMap" class="headerlink" title="1.8   LinkedHashMap"></a>1.8   LinkedHashMap</h2><p>我们知道HashMap保证成对元素唯一，并且查询速度很快，可是成对元素存放进去是没有顺序的，那么我们要保证有序，还要速度快怎么办呢？</p>
<p>在HashMap下面有一个子类LinkedHashMap，它是链表和哈希表组合的一个数据存储结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="string">&quot;孙俪&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;李晨&quot;</span>, <span class="string">&quot;范冰冰&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;刘德华&quot;</span>, <span class="string">&quot;朱丽倩&quot;</span>);</span><br><span class="line">        Set&lt;Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;  &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">邓超  孙俪</span><br><span class="line">李晨  范冰冰</span><br><span class="line">刘德华  朱丽倩</span><br></pre></td></tr></table></figure>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.LinkedHashMap&lt;K,V&gt; entends HashMap&lt;K,V&gt;</span></span><br><span class="line"><span class="comment">    Map 接口的哈希表和链接列表实现，具有可预知的迭代顺序。</span></span><br><span class="line"><span class="comment">    底层原理:</span></span><br><span class="line"><span class="comment">        哈希表+链表(记录元素的顺序)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01LinkedHashMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">// key不允许重复,无序 &#123;a=d, b=b, c=c&#125;</span></span><br><span class="line"></span><br><span class="line">        LinkedHashMap&lt;String,String&gt; linked = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        linked.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        linked.put(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        linked.put(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        linked.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">// key不允许重复,有序 &#123;a=d, c=c, b=b&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code> Hashtable了解即可</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Hashtable&lt;K,V&gt;集合 implements Map&lt;K,V&gt;接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Hashtable:底层也是一个哈希表,是一个线程安全的集合,是单线程集合,速度慢</span></span><br><span class="line"><span class="comment">    HashMap:底层是一个哈希表,是一个线程不安全的集合,是多线程的集合,速度快</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    HashMap集合(之前学的所有的集合):可以存储null值,null键</span></span><br><span class="line"><span class="comment">    Hashtable集合,不能存储null值,null键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Hashtable和Vector集合一样,在jdk1.2版本之后被更先进的集合(HashMap,ArrayList)取代了</span></span><br><span class="line"><span class="comment">    Hashtable的子类Properties依然活跃在历史舞台</span></span><br><span class="line"><span class="comment">    Properties集合是一个唯一和IO流相结合的集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Hashtable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;b&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;null=null, b=null&#125;</span></span><br><span class="line"></span><br><span class="line">        Hashtable&lt;String,String&gt; table = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        <span class="comment">//table.put(null,&quot;a&quot;);//NullPointerException</span></span><br><span class="line">        <span class="comment">//table.put(&quot;b&quot;,null);//NullPointerException</span></span><br><span class="line">        table.put(<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-9-Map集合练习"><a href="#1-9-Map集合练习" class="headerlink" title="1.9 Map集合练习"></a>1.9 Map集合练习</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422165847.bmp" alt="03_练习_计算一个字符串中每个字符出现次数"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    练习:</span></span><br><span class="line"><span class="comment">        计算一个字符串中每个字符出现次数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    分析:</span></span><br><span class="line"><span class="comment">        1.使用Scanner获取用户输入的字符串</span></span><br><span class="line"><span class="comment">        2.创建Map集合,key是字符串中的字符,value是字符的个数</span></span><br><span class="line"><span class="comment">        3.遍历字符串,获取每一个字符</span></span><br><span class="line"><span class="comment">        4.使用获取到的字符,去Map集合判断key是否存在</span></span><br><span class="line"><span class="comment">            key存在:</span></span><br><span class="line"><span class="comment">                通过字符(key),获取value(字符个数)</span></span><br><span class="line"><span class="comment">                value++</span></span><br><span class="line"><span class="comment">                put(key,value)把新的value存储到Map集合中</span></span><br><span class="line"><span class="comment">            key不存在:</span></span><br><span class="line"><span class="comment">                put(key,1)</span></span><br><span class="line"><span class="comment">        5.遍历Map集合,输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.使用Scanner获取用户输入的字符串</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串:&quot;</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line">        <span class="comment">//2.创建Map集合,key是字符串中的字符,value是字符的个数</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//3.遍历字符串,获取每一个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c :str.toCharArray())&#123;</span><br><span class="line">            <span class="comment">//4.使用获取到的字符,去Map集合判断key是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                <span class="comment">//key存在</span></span><br><span class="line">                Integer value = map.get(c);</span><br><span class="line">                value++;</span><br><span class="line">                map.put(c,value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//key不存在</span></span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.遍历Map集合,输出结果</span></span><br><span class="line">        <span class="keyword">for</span>(Character key :map.keySet())&#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>需求：</strong></p>
<p>计算一个字符串中每个字符出现次数。</p>
<p><strong>分析：</strong></p>
<ol>
<li> 获取一个字符串对象</li>
<li> 创建一个Map集合，键代表字符，值代表次数。</li>
<li> 遍历字符串得到每个字符。</li>
<li> 判断Map中是否有该键。</li>
<li> 如果没有，第一次出现，存储次数为1；如果有，则说明已经出现过，获取到对应的值进行++，再次存储。     </li>
<li> 打印最终结果</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//友情提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请录入一个字符串:&quot;</span>);</span><br><span class="line">        String line = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">        <span class="comment">// 定义 每个字符出现次数的方法</span></span><br><span class="line">        findChar(line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findChar</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1:创建一个集合 存储  字符 以及其出现的次数</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="comment">//2:遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = line.charAt(i);</span><br><span class="line">            <span class="comment">//判断 该字符 是否在键集中</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(c)) &#123;<span class="comment">//说明这个字符没有出现过</span></span><br><span class="line">                <span class="comment">//那就是第一次</span></span><br><span class="line">                map.put(c, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先获取之前的次数</span></span><br><span class="line">                Integer count = map.get(c);</span><br><span class="line">                <span class="comment">//count++;</span></span><br><span class="line">                <span class="comment">//再次存入  更新</span></span><br><span class="line">                map.put(c, ++count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第二章-补充知识点"><a href="#第二章-补充知识点" class="headerlink" title="第二章 补充知识点"></a>第二章 补充知识点</h1><h2 id="2-1-JDK9对集合添加的优化"><a href="#2-1-JDK9对集合添加的优化" class="headerlink" title="2.1  JDK9对集合添加的优化"></a>2.1  JDK9对集合添加的优化</h2><p>通常，我们在代码中创建一个集合（例如，List 或 Set ），并直接用一些元素填充它。 实例化集合，几个 add方法 调用，使得代码重复。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> Java 9，添加了几种集合工厂方法,更方便创建少量元素的集合、map实例。新的List、Set、Map的静态工厂方法可以更方便地创建集合的不可变实例。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJDK9</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Set&lt;String&gt; str1=Set.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);  </span><br><span class="line">        <span class="comment">//str1.add(&quot;c&quot;);这里编译的时候不会错，但是执行的时候会报错，因为是不可变的集合  </span></span><br><span class="line">        System.out.println(str1);  </span><br><span class="line">        Map&lt;String,Integer&gt; str2=Map.of(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>);  </span><br><span class="line">        System.out.println(str2);  </span><br><span class="line">        List&lt;String&gt; str3=List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);  </span><br><span class="line">        System.out.println(str3);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>需要注意以下两点：</p>
<blockquote>
<p>1:of()方法只是Map，List，Set这三个接口的静态方法，其父类接口和子类实现并没有这类方法，比如    HashSet，ArrayList等待；</p>
<p>2:返回的集合是不可变的；</p>
</blockquote>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.JDK9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    JDK9的新特性:</span></span><br><span class="line"><span class="comment">        List接口,Set接口,Map接口:里边增加了一个静态的方法of,可以给集合一次性添加多个元素</span></span><br><span class="line"><span class="comment">        static &lt;E&gt; List&lt;E&gt; of(E... elements)</span></span><br><span class="line"><span class="comment">        使用前提:</span></span><br><span class="line"><span class="comment">            当集合中存储的元素的个数已经确定了,不再改变时使用</span></span><br><span class="line"><span class="comment">     注意:</span></span><br><span class="line"><span class="comment">        1.of方法只适用于List接口,Set接口,Map接口,不适用于接接口的实现类</span></span><br><span class="line"><span class="comment">        2.of方法的返回值是一个不能改变的集合,集合不能再使用add,put方法添加元素,会抛出异常</span></span><br><span class="line"><span class="comment">        3.Set接口和Map接口在调用of方法的时候,不能有重复的元素,否则会抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01JDK9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, a, c, d]</span></span><br><span class="line">        <span class="comment">//list.add(&quot;w&quot;);//UnsupportedOperationException:不支持操作异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set = Set.of(&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;d&quot;);//IllegalArgumentException:非法参数异常,有重复的元素</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">//set.add(&quot;w&quot;);//UnsupportedOperationException:不支持操作异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map&lt;String, Integer&gt; map = Map.of(&quot;张三&quot;, 18, &quot;李四&quot;, 19, &quot;王五&quot;, 20,&quot;张三&quot;,19);////IllegalArgumentException:非法参数异常,有重复的元素</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = Map.of(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">19</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;王五=20, 李四=19, 张三=18&#125;</span></span><br><span class="line">        <span class="comment">//map.put(&quot;赵四&quot;,30);//UnsupportedOperationException:不支持操作异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-2-Debug追踪"><a href="#2-2-Debug追踪" class="headerlink" title="2.2 Debug追踪"></a>2.2 Debug追踪</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Debug;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Debug调试程序:</span></span><br><span class="line"><span class="comment">        可以让代码逐行执行,查看代码执行的过程,调试程序中出现的bug</span></span><br><span class="line"><span class="comment">    使用方式:</span></span><br><span class="line"><span class="comment">        在行号的右边,鼠标左键单击,添加断点(每个方法的第一行,哪里有bug添加到哪里)</span></span><br><span class="line"><span class="comment">        右键,选择Debug执行程序</span></span><br><span class="line"><span class="comment">        程序就会停留在添加的第一个断点处</span></span><br><span class="line"><span class="comment">    执行程序:</span></span><br><span class="line"><span class="comment">        f8:逐行执行程序</span></span><br><span class="line"><span class="comment">        f7:进入到方法中</span></span><br><span class="line"><span class="comment">        shift+f8:跳出方法</span></span><br><span class="line"><span class="comment">        f9:跳到下一个断点,如果没有下一个断点,那么就结束程序</span></span><br><span class="line"><span class="comment">        ctrl+f2:退出debug模式,停止程序</span></span><br><span class="line"><span class="comment">        Console:切换到控制台</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Debug</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*int a = 10;</span></span><br><span class="line"><span class="comment">        int b = 20;</span></span><br><span class="line"><span class="comment">        int sum = a + b;</span></span><br><span class="line"><span class="comment">        System.out.println(sum);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt;3 ; i++) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(i);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        print();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>使用IDEA的断点调试功能，查看程序的运行过程</strong></p>
<ol>
<li><p>在有效代码行，点击行号右边的空白区域，设置断点，程序执行到断点将停止，我们可以手动来运行程序     </p>
<p>   <img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422154350.png"></p>
</li>
<li><p>点击Debug运行模式      <img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422170955.png" alt="debug2">                                                                                                                                                                      </p>
</li>
<li><p>程序停止在断点上不再执行，而IDEA最下方打开了Debug调试窗口  </p>
<p> <img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084108.png" alt="debug3"> !<img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084202.png" alt="debug4"></p>
</li>
<li><p>Debug调试窗口介绍</p>
<p> <img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422171141.png" alt="debug5"></p>
</li>
<li><p>快捷键F8，代码向下执行一行,第九行执行完毕，执行到第10行（第10行还未执行）</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084234.png" alt="debug6"></p>
</li>
<li><p>切换到控制台面板，控制台显示 请录入一个字符串： 并且等待键盘录入</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084250.png" alt="debug7"></p>
</li>
<li><p>快捷键F8，程序继续向后执行，执行键盘录入操作，在控制台录入数据 ababcea</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084259.png" alt="debug8"></p>
<p>回车之后效果：<img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084259.png" alt="debug9"></p>
<p>调试界面效果：<img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084319.png" alt="debug0"></p>
</li>
<li><p>此时到达findChar方法，快捷键F7，进入方法findChar</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084319.png" alt="debug11"></p>
</li>
<li><p>快捷键F8 接续执行，创建了map对象，变量区域显示</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084337.png" alt="debug12"></p>
</li>
<li><p>快捷键F8 接续执行，进入到循环中，循环变量i为 0,F8再继续执行，就获取到变量c赋值为字符‘a’ 字节值97</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084343.png" alt="debug13"></p>
</li>
<li><p>快捷键F8 接续执行，进入到判断语句中，因为该字符 不在Map集合键集中，再按F8执行，进入该判断中</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084350.png" alt="debug14"></p>
</li>
<li><p>快捷键F8 接续执行，循环结束，进入下次循环，此时map中已经添加一对儿元素</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084357.png" alt="debug15"></p>
</li>
<li><p>快捷键F8 接续执行，进入下次循环，再继续上面的操作，我们就可以看到代码每次是如何执行的了</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084407.png"></p>
</li>
<li><p>如果不想继续debug,那么可以使用快捷键F9,程序正常执行到结束，程序结果在控制台显示</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084414.png"></p>
</li>
</ol>
<h1 id="第三章-模拟斗地主洗牌发牌"><a href="#第三章-模拟斗地主洗牌发牌" class="headerlink" title="第三章  模拟斗地主洗牌发牌"></a>第三章  模拟斗地主洗牌发牌</h1><h2 id="3-1-案例介绍"><a href="#3-1-案例介绍" class="headerlink" title="3.1 案例介绍"></a>3.1 案例介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422171625.bmp" alt="04_斗地主案例需求分析"></p>
<p>按照斗地主的规则，完成洗牌发牌的动作。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084018.png" alt="斗地主"></p>
<p>具体规则：</p>
<ol>
<li>组装54张扑克牌将</li>
<li>54张牌顺序打乱</li>
<li>三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</li>
<li>查看三人各自手中的牌（按照牌的大小排序）、底牌</li>
</ol>
<blockquote>
<p>规则：手中扑克牌从大到小的摆放顺序：大王,小王,2,A,K,Q,J,10,9,8,7,6,5,4,3</p>
</blockquote>
<h2 id="3-2-案例需求分析"><a href="#3-2-案例需求分析" class="headerlink" title="3.2 案例需求分析"></a>3.2 案例需求分析</h2><ol>
<li> 准备牌：</li>
</ol>
<p>完成数字与纸牌的映射关系：</p>
<p>使用双列Map(HashMap)集合，完成一个数字与字符串纸牌的对应关系(相当于一个字典)。</p>
<ol start="2">
<li> 洗牌：</li>
</ol>
<p>通过数字完成洗牌发牌</p>
<ol start="3">
<li> 发牌：</li>
</ol>
<p>将每个人以及底牌设计为ArrayList<String>,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p>
<p>存放的过程中要求数字大小与斗地主规则的大小对应。</p>
<p>将代表不同纸牌的数字分配给不同的玩家与底牌。</p>
<ol start="4">
<li> 看牌：</li>
</ol>
<p>通过Map集合找到对应字符展示。</p>
<p>通过查询纸牌与数字的对应关系，由数字转成纸牌字符串再进行展示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423084005.png" alt="斗地主分析"></p>
<h2 id="3-3-实现代码步骤"><a href="#3-3-实现代码步骤" class="headerlink" title="3.3  实现代码步骤"></a>3.3  实现代码步骤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1组装54张扑克牌</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 1.1 创建Map集合存储</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; pokerMap = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 1.2 创建 花色集合 与 数字集合</span></span><br><span class="line">        ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3 存储 花色 与数字</span></span><br><span class="line">        Collections.addAll(colors, <span class="string">&quot;♦&quot;</span>, <span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♠&quot;</span>);</span><br><span class="line">        Collections.addAll(numbers, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 存储编号变量</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        pokerMap.put(count++, <span class="string">&quot;大王&quot;</span>);</span><br><span class="line">        pokerMap.put(count++, <span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.4 创建牌 存储到map集合中</span></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                String card = color + number;</span><br><span class="line">                pokerMap.put(count++, card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 2 将54张牌顺序打乱</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 取出编号 集合</span></span><br><span class="line">        Set&lt;Integer&gt; numberSet = pokerMap.keySet();</span><br><span class="line">        <span class="comment">// 因为要将编号打乱顺序 所以 应该先进行转换到 list集合中</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numberList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        numberList.addAll(numberSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打乱顺序</span></span><br><span class="line">        Collections.shuffle(numberList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 完成三个玩家交替摸牌，每人17张牌，最后三张留作底牌</span></span><br><span class="line">        <span class="comment">// 3.1 发牌的编号</span></span><br><span class="line">        <span class="comment">// 创建三个玩家编号集合 和一个 底牌编号集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; noP1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; noP2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; noP3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; dipaiNo = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.2发牌的编号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 获取该编号</span></span><br><span class="line">            Integer no = numberList.get(i);</span><br><span class="line">            <span class="comment">// 发牌</span></span><br><span class="line">            <span class="comment">// 留出底牌</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">51</span>) &#123;</span><br><span class="line">                dipaiNo.add(no);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    noP1.add(no);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    noP2.add(no);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    noP3.add(no);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 查看三人各自手中的牌（按照牌的大小排序）、底牌</span></span><br><span class="line">        <span class="comment">// 4.1 对手中编号进行排序</span></span><br><span class="line">        Collections.sort(noP1);</span><br><span class="line">        Collections.sort(noP2);</span><br><span class="line">        Collections.sort(noP3);</span><br><span class="line">        Collections.sort(dipaiNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.2 进行牌面的转换</span></span><br><span class="line">        <span class="comment">// 创建三个玩家牌面集合 以及底牌牌面集合</span></span><br><span class="line">        ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.3转换</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP1) &#123;</span><br><span class="line">            <span class="comment">// 4.4 根据编号找到 牌面 pokerMap</span></span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            <span class="comment">// 添加到对应的 牌面集合中</span></span><br><span class="line">            player1.add(card);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP2) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            player2.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP3) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            player3.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : dipaiNo) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            dipai.add(card);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.5 查看</span></span><br><span class="line">        System.out.println(<span class="string">&quot;令狐冲：&quot;</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">&quot;石破天：&quot;</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">&quot;鸠摩智：&quot;</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌：&quot;</span>+dipai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>List&amp;Set&amp;数据结构&amp;Collections</title>
    <url>/2021/04/22/2021-04-22-List-Set-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="List、Set、数据结构、Collections"><a href="#List、Set、数据结构、Collections" class="headerlink" title="List、Set、数据结构、Collections"></a>List、Set、数据结构、Collections</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>数据结构</li>
<li>List集合</li>
<li>Set集合</li>
<li>Collections</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够说出List集合特点</li>
<li><input disabled="" type="checkbox"> 能够说出常见的数据结构</li>
<li><input disabled="" type="checkbox"> 能够说出数组结构特点</li>
<li><input disabled="" type="checkbox"> 能够说出栈结构特点</li>
<li><input disabled="" type="checkbox"> 能够说出队列结构特点</li>
<li><input disabled="" type="checkbox"> 能够说出单向链表结构特点</li>
<li><input disabled="" type="checkbox"> 能够说出Set集合的特点</li>
<li><input disabled="" type="checkbox"> 能够说出哈希表的特点</li>
<li><input disabled="" type="checkbox"> 使用HashSet集合存储自定义元素</li>
<li><input disabled="" type="checkbox"> 能够说出可变参数的格式</li>
<li><input disabled="" type="checkbox"> 能够使用集合工具类</li>
<li><input disabled="" type="checkbox"> 能够使用Comparator比较器进行排序</li>
</ul>
<h1 id="第一章-数据结构"><a href="#第一章-数据结构" class="headerlink" title="第一章 数据结构"></a>第一章 数据结构</h1><h2 id="2-1-数据结构有什么用？"><a href="#2-1-数据结构有什么用？" class="headerlink" title="2.1 数据结构有什么用？"></a>2.1 数据结构有什么用？</h2><p>当你用着java里面的容器类很爽的时候，你有没有想过，怎么ArrayList就像一个无限扩充的数组，也好像链表之类的。好用吗？好用，这就是数据结构的用处，只不过你在不知不觉中使用了。</p>
<p>现实世界的存储，我们使用的工具和建模。每种数据结构有自己的优点和缺点，想想如果Google的数据用的是数组的存储，我们还能方便地查询到所需要的数据吗？而算法，在这么多的数据中如何做到最快的插入，查找，删除，也是在追求更快。</p>
<p>我们java是面向对象的语言，就好似自动档轿车，C语言好似手动档吉普。数据结构呢？是变速箱的工作原理。你完全可以不知道变速箱怎样工作，就把自动档的车子从 A点 开到 B点，而且未必就比懂得的人慢。写程序这件事，和开车一样，经验可以起到很大作用，但如果你不知道底层是怎么工作的，就永远只能开车，既不会修车，也不能造车。当然了，数据结构内容比较多，细细的学起来也是相对费功夫的，不可能达到一蹴而就。我们将常见的数据结构：堆栈、队列、数组、链表和红黑树 这几种给大家介绍一下，作为数据结构的入门，了解一下它们的特点即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422151817.png" alt="数据结构比喻"></p>
<h2 id="2-2-常见的数据结构"><a href="#2-2-常见的数据结构" class="headerlink" title="2.2 常见的数据结构"></a>2.2 常见的数据结构</h2><p>数据存储的常用结构有：栈、队列、数组、链表和红黑树。我们分别来了解一下：</p>
<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul>
<li><strong>栈</strong>：<strong>stack</strong>,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li>
</ul>
<p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p>
<ul>
<li><p>先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。</p>
</li>
<li><p>栈的入口、出口的都是栈的顶端位置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422151817.png" alt="堆栈"></p>
</li>
</ul>
<p>这里两个名词需要注意：</p>
<ul>
<li><strong>压栈</strong>：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</li>
<li><strong>弹栈</strong>：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422151817.png" alt="01_数据结构_栈&amp;队列"></p>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul>
<li><strong>队列</strong>：<strong>queue</strong>,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li>
</ul>
<p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p>
<ul>
<li>先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。</li>
<li>队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422151817.png"></p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul>
<li><strong>数组</strong>:<strong>Array</strong>,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。</li>
</ul>
<p>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422151817.png" alt="02_数据结构_数组"></p>
<ul>
<li><p> 查找元素快：通过索引，可以快速访问指定位置的元素<br><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422151817.png" alt="数组查询快"></p>
</li>
<li><p>增删元素慢</p>
<ul>
<li><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图<br><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422125759.png" alt="数组添加"></li>
<li><strong>指定索引位置删除元素：</strong>需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图<br><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422125808.png" alt="数组删除"></li>
</ul>
</li>
</ul>
<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422130410.bmp"></p>
<ul>
<li><p><strong>链表</strong>:<strong>linked list</strong>,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是<strong>单向链表</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422130304.png" alt="单链表结构特点"></p>
</li>
</ul>
<p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p>
<ul>
<li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422130818.png" alt="单链表结构"></p>
</li>
<li><p>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素</p>
</li>
<li><p>增删元素快：</p>
<ul>
<li><p>增加元素：只需要修改连接下个元素的地址即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422131019.png" alt="增加结点"></p>
</li>
<li><p>删除元素：只需要修改连接下个元素的地址即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422131038.bmp" alt="删除结点"></p>
</li>
</ul>
</li>
</ul>
<h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422131132.bmp" alt="04_数据结构_红黑树"></p>
<ul>
<li><strong>二叉树</strong>：<strong>binary tree</strong> ,是每个结点不超过2的有序<strong>树（tree）</strong> 。</li>
</ul>
<p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。</p>
<p>二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。</p>
<p>如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422131055.bmp" alt="二叉树"></p>
<p>我们要说的是二叉树的一种比较有意思的叫做<strong>红黑树</strong>，红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然是一颗二叉查找树。也就意味着，树的键值仍然是有序的。</p>
<p>红黑树的约束:</p>
<ol>
<li>节点可以是红色的或者黑色的</li>
</ol>
<ol start="2">
<li>根节点是黑色的</li>
</ol>
<ol start="3">
<li>叶子节点(特指空节点)是黑色的</li>
<li>每个红色节点的子节点都是黑色的</li>
<li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同</li>
</ol>
<p>红黑树的特点:</p>
<p>​    速度特别快,趋近平衡树,查找叶子元素最少和最多次数不多于二倍</p>
<h1 id="第二章-List集合"><a href="#第二章-List集合" class="headerlink" title="第二章 List集合"></a>第二章 List集合</h1><p>我们掌握了Collection接口的使用后，再来看看Collection接口中的子类，他们都具备那些特性呢？</p>
<p>接下来，我们一起学习Collection中的常用几个子类（<code>java.util.List</code>集合、<code>java.util.Set</code>集合）。</p>
<h2 id="1-1-List接口介绍"><a href="#1-1-List接口介绍" class="headerlink" title="1.1 List接口介绍"></a>1.1 List接口介绍</h2><p><code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支，习惯性地会将实现了<code>List</code>接口的对象称为List集合。在List集合中允许出现重复的元素，所有的元素是以一种线性方式进行存储的，在程序中可以通过索引来访问集合中的指定元素。另外，List集合还有一个特点就是元素有序，即元素的存入顺序和取出顺序一致。</p>
<p>看完API，我们总结一下：</p>
<p>List接口特点：</p>
<ol>
<li>它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li>
<li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li>
<li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li>
</ol>
<blockquote>
<p>tips:我们在基础班的时候已经学习过List接口的子类java.util.ArrayList类，该类中的方法都是来自List中定义。</p>
</blockquote>
<h2 id="1-2-List接口中常用方法"><a href="#1-2-List接口中常用方法" class="headerlink" title="1.2 List接口中常用方法"></a>1.2 List接口中常用方法</h2><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法，如下：</p>
<ul>
<li><code>public void add(int index, E element)</code>: 将指定的元素，添加到该集合中的指定位置上。</li>
<li><code>public E get(int index)</code>:返回集合中指定位置的元素。</li>
<li><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</li>
<li><code>public E set(int index, E element)</code>:用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li>
</ul>
<p>List集合特有的方法都是跟索引相关，我们在基础班都学习过，那么我们再来复习一遍吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建List集合对象</span></span><br><span class="line">    	List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 往 尾部添加 指定元素</span></span><br><span class="line">    	list.add(<span class="string">&quot;图图&quot;</span>);</span><br><span class="line">    	list.add(<span class="string">&quot;小美&quot;</span>);</span><br><span class="line">    	list.add(<span class="string">&quot;不高兴&quot;</span>);</span><br><span class="line">    	</span><br><span class="line">    	System.out.println(list);</span><br><span class="line">    	<span class="comment">// add(int index,String s) 往指定位置添加</span></span><br><span class="line">    	list.add(<span class="number">1</span>,<span class="string">&quot;没头脑&quot;</span>);</span><br><span class="line">    	</span><br><span class="line">    	System.out.println(list);</span><br><span class="line">    	<span class="comment">// String remove(int index) 删除指定位置元素  返回被删除元素</span></span><br><span class="line">    	<span class="comment">// 删除索引位置为2的元素 </span></span><br><span class="line">    	System.out.println(<span class="string">&quot;删除索引位置为2的元素&quot;</span>);</span><br><span class="line">    	System.out.println(list.remove(<span class="number">2</span>));</span><br><span class="line">    	</span><br><span class="line">    	System.out.println(list);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// String set(int index,String s)</span></span><br><span class="line">    	<span class="comment">// 在指定位置 进行 元素替代（改） </span></span><br><span class="line">    	<span class="comment">// 修改指定位置元素</span></span><br><span class="line">    	list.set(<span class="number">0</span>, <span class="string">&quot;三毛&quot;</span>);</span><br><span class="line">    	System.out.println(list);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// String get(int index)  获取指定位置元素</span></span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 跟size() 方法一起用  来 遍历的 </span></span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    		System.out.println(list.get(i));</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">//还可以使用增强for</span></span><br><span class="line">    	<span class="keyword">for</span> (String string : list) &#123;</span><br><span class="line">			System.out.println(string);</span><br><span class="line">		&#125;  	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>课上的demo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.List接口 extends Collection接口</span></span><br><span class="line"><span class="comment">    List接口的特点:</span></span><br><span class="line"><span class="comment">        1.有序的集合,存储元素和取出元素的顺序是一致的(存储123 取出123)</span></span><br><span class="line"><span class="comment">        2.有索引,包含了一些带索引的方法</span></span><br><span class="line"><span class="comment">        3.允许存储重复的元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    List接口中带索引的方法(特有)</span></span><br><span class="line"><span class="comment">        - public void add(int index, E element): 将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line"><span class="comment">        - public E get(int index):返回集合中指定位置的元素。</span></span><br><span class="line"><span class="comment">        - public E remove(int index): 移除列表中指定位置的元素, 返回的是被移除的元素。</span></span><br><span class="line"><span class="comment">        - public E set(int index, E element):用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">        操作索引的时候,一定要防止索引越界异常</span></span><br><span class="line"><span class="comment">        IndexOutOfBoundsException:索引越界异常,集合会报</span></span><br><span class="line"><span class="comment">        ArrayIndexOutOfBoundsException:数组索引越界异常</span></span><br><span class="line"><span class="comment">        StringIndexOutOfBoundsException:字符串索引越界异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01List</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个List集合对象,多态</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, a]  不是地址重写了toString</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void add(int index, E element): 将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line">        <span class="comment">//在c和d之间添加一个itheima</span></span><br><span class="line">        list.add(<span class="number">3</span>,<span class="string">&quot;itheima&quot;</span>);<span class="comment">//[a, b, c, itheima, d, a]</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E remove(int index): 移除列表中指定位置的元素, 返回的是被移除的元素。</span></span><br><span class="line">        <span class="comment">//移除元素</span></span><br><span class="line">        String removeE = list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被移除的元素:&quot;</span>+removeE);<span class="comment">//被移除的元素:c</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, a]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E set(int index, E element):用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</span></span><br><span class="line">        <span class="comment">//把最后一个a,替换为A</span></span><br><span class="line">        String setE = list.set(<span class="number">4</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被替换的元素:&quot;</span>+setE);<span class="comment">//被替换的元素:a</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, A]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List集合遍历有3种方式</span></span><br><span class="line">        <span class="comment">//使用普通的for循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="comment">//public E get(int index):返回集合中指定位置的元素。</span></span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//使用增强for</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String r = list.get(<span class="number">5</span>);<span class="comment">//IndexOutOfBoundsException: Index 5 out-of-bounds for length 5</span></span><br><span class="line">        System.out.println(r);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第三章-List的子类"><a href="#第三章-List的子类" class="headerlink" title="第三章 List的子类"></a>第三章 List的子类</h1><h2 id="3-1-ArrayList集合"><a href="#3-1-ArrayList集合" class="headerlink" title="3.1 ArrayList集合"></a>3.1 ArrayList集合</h2><p><code>java.util.ArrayList</code>集合数据存储的结构是数组结构。元素增删慢，查找快，由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p>
<p>许多程序员开发时非常随意地使用ArrayList完成任何需求，并不严谨，这种用法是不提倡的。</p>
<p>去看源码！！！复制-&gt;增删慢</p>
<h2 id="3-2-LinkedList集合"><a href="#3-2-LinkedList集合" class="headerlink" title="3.2 LinkedList集合"></a>3.2 LinkedList集合</h2><p><code>java.util.LinkedList</code>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p>
<blockquote>
<p>LinkedList是一个双向链表，那么双向链表是什么样子的呢，我们用个图了解下</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422132156.png" alt="双向链表"></p>
<p>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法。这些方法我们作为了解即可：</p>
<ul>
<li><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</li>
<li><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</li>
<li><code>public E getFirst()</code>:返回此列表的第一个元素。</li>
<li><code>public E getLast()</code>:返回此列表的最后一个元素。</li>
<li><code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</li>
<li><code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</li>
<li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li>
<li><code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</li>
<li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</li>
</ul>
<p>LinkedList是List的子类，List中的方法LinkedList都是可以使用，这里就不做详细介绍，我们只需要了解LinkedList的特有方法即可。在开发时，LinkedList集合也可以作为堆栈，队列的结构使用。（了解即可）</p>
<p>方法演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; link = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        link.addFirst(<span class="string">&quot;abc1&quot;</span>);</span><br><span class="line">        link.addFirst(<span class="string">&quot;abc2&quot;</span>);</span><br><span class="line">        link.addFirst(<span class="string">&quot;abc3&quot;</span>);</span><br><span class="line">        System.out.println(link);</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        System.out.println(link.getFirst());</span><br><span class="line">        System.out.println(link.getLast());</span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        System.out.println(link.removeFirst());</span><br><span class="line">        System.out.println(link.removeLast());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!link.isEmpty()) &#123; <span class="comment">//判断集合是否为空</span></span><br><span class="line">            System.out.println(link.pop()); <span class="comment">//弹出集合中的栈顶元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(link);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>课上的demo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.LinkedList集合 implements List接口</span></span><br><span class="line"><span class="comment">    LinkedList集合的特点:</span></span><br><span class="line"><span class="comment">        1.底层是一个链表结构:查询慢,增删快</span></span><br><span class="line"><span class="comment">        2.里边包含了大量操作首尾元素的方法</span></span><br><span class="line"><span class="comment">        注意:使用LinkedList集合特有的方法,不能使用多态</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line"><span class="comment">        - public void addLast(E e):将指定元素添加到此列表的结尾。</span></span><br><span class="line"><span class="comment">        - public void push(E e):将元素推入此列表所表示的堆栈。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public E getFirst():返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E getLast():返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public E removeFirst():移除并返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E removeLast():移除并返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment">        - public E pop():从此列表所表示的堆栈处弹出一个元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public boolean isEmpty()：如果列表不包含元素，则返回true。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show03();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public E removeFirst():移除并返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E removeLast():移除并返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment">        - public E pop():从此列表所表示的堆栈处弹出一个元素。此方法相当于 removeFirst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String first = linked.removeFirst();</span></span><br><span class="line">        String first = linked.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;被移除的第一个元素:&quot;</span>+first);</span><br><span class="line">        String last = linked.removeLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;被移除的最后一个元素:&quot;</span>+last);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[b]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public E getFirst():返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E getLast():返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//linked.clear();//清空集合中的元素 在获取集合中的元素会抛出NoSuchElementException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean isEmpty()：如果列表不包含元素，则返回true。</span></span><br><span class="line">        <span class="keyword">if</span>(!linked.isEmpty())&#123;</span><br><span class="line">            String first = linked.getFirst();</span><br><span class="line">            System.out.println(first);<span class="comment">//a</span></span><br><span class="line">            String last = linked.getLast();</span><br><span class="line">            System.out.println(last);<span class="comment">//c</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line"><span class="comment">        - public void addLast(E e):将指定元素添加到此列表的结尾。</span></span><br><span class="line"><span class="comment">        - public void push(E e):将元素推入此列表所表示的堆栈。此方法等效于 addFirst(E)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line">        <span class="comment">//linked.addFirst(&quot;www&quot;);</span></span><br><span class="line">        linked.push(<span class="string">&quot;www&quot;</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, a, b, c]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void addLast(E e):将指定元素添加到此列表的结尾。此方法等效于 add()</span></span><br><span class="line">        linked.addLast(<span class="string">&quot;com&quot;</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, a, b, c, com]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第四章-Set接口"><a href="#第四章-Set接口" class="headerlink" title="第四章 Set接口"></a>第四章 Set接口</h1><p><code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p>
<p><code>Set</code>集合有多个子类，这里我们介绍其中的<code>java.util.HashSet</code>、<code>java.util.LinkedHashSet</code>这两个集合。</p>
<blockquote>
<p>tips:Set集合取出元素的方式可以采用：迭代器、增强for。</p>
</blockquote>
<p><code>课上的demo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Set接口 extends Collection接口</span></span><br><span class="line"><span class="comment">    Set接口的特点:</span></span><br><span class="line"><span class="comment">        1.不允许存储重复的元素</span></span><br><span class="line"><span class="comment">        2.没有索引,没有带索引的方法,也不能使用普通的for循环遍历</span></span><br><span class="line"><span class="comment">    java.util.HashSet集合 implements Set接口</span></span><br><span class="line"><span class="comment">    HashSet特点:</span></span><br><span class="line"><span class="comment">         1.不允许存储重复的元素</span></span><br><span class="line"><span class="comment">         2.没有索引,没有带索引的方法,也不能使用普通的for循环遍历</span></span><br><span class="line"><span class="comment">         3.是一个无序的集合,存储元素和取出元素的顺序有可能不一致</span></span><br><span class="line"><span class="comment">         4.底层是一个哈希表结构(查询的速度非常的快)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//使用迭代器遍历set集合</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            Integer n = it.next();</span><br><span class="line">            System.out.println(n);<span class="comment">//1,2,3</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用增强for遍历set集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer i : set) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-1-HashSet集合介绍"><a href="#3-1-HashSet集合介绍" class="headerlink" title="3.1 HashSet集合介绍"></a>3.1 HashSet集合介绍</h2><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不一致)。<code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>支持，由于我们暂时还未学习，先做了解。</p>
<p><code>HashSet</code>是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法。</p>
<p>我们先来使用一下Set集合存储，看下现象，再进行原理的讲解:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 Set集合</span></span><br><span class="line">        HashSet&lt;String&gt;  set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> String(<span class="string">&quot;cba&quot;</span>));</span><br><span class="line">        set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;bac&quot;</span>); </span><br><span class="line">        set.add(<span class="string">&quot;cba&quot;</span>);  </span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String name : set) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下，说明集合中不能存储重复元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cba</span><br><span class="line">abc</span><br><span class="line">bac</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:根据结果我们发现字符串”cba”只存储了一个，也就是说重复的元素set集合不存储。</p>
</blockquote>
<h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><p><code>课上demo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.hashCode;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    哈希值:是一个十进制的整数,由系统随机给出(就是对象的地址值,是一个逻辑地址,是模拟出来得到地址,不是数据实际存储的物理地址)</span></span><br><span class="line"><span class="comment">    在Object类有一个方法,可以获取对象的哈希值</span></span><br><span class="line"><span class="comment">    int hashCode() 返回该对象的哈希码值。</span></span><br><span class="line"><span class="comment">    hashCode方法的源码:</span></span><br><span class="line"><span class="comment">        public native int hashCode();</span></span><br><span class="line"><span class="comment">        native:代表该方法调用的是本地操作系统的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Person类继承了Object类,所以可以使用Object类的hashCode方法</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h1 = p1.hashCode();</span><br><span class="line">        System.out.println(h1);<span class="comment">//1967205423  | 1</span></span><br><span class="line"></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h2 = p2.hashCode();</span><br><span class="line">        System.out.println(h2);<span class="comment">//42121758   |  1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            toString方法的源码:</span></span><br><span class="line"><span class="comment">                return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(p1);<span class="comment">//com.itheima.demo03.hashCode.Person@75412c2f</span></span><br><span class="line">        System.out.println(p2);<span class="comment">//com.itheima.demo03.hashCode.Person@282ba1e</span></span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            String类的哈希值</span></span><br><span class="line"><span class="comment">                String类重写Obejct类的hashCode方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(s1.hashCode());<span class="comment">//96354</span></span><br><span class="line">        System.out.println(s2.hashCode());<span class="comment">//96354</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;重地&quot;</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通话&quot;</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="2-2-HashSet集合存储数据的结构（哈希表）"><a href="#2-2-HashSet集合存储数据的结构（哈希表）" class="headerlink" title="2.2  HashSet集合存储数据的结构（哈希表）"></a>2.2  HashSet集合存储数据的结构（哈希表）</h2><p>什么是哈希表呢？</p>
<p>在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。</p>
<p>简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下图所示。<img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422133642.png" alt="哈希表"></p>
<p>看到这张图就有人要问了，这个是怎么存储的呢？</p>
<p>为了方便大家的理解我们结合一个存储流程图来说明一下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422134221.png" alt="哈希流程图"></p>
<p>总而言之，<strong>JDK1.8</strong>引入红黑树大程度优化了HashMap的性能，那么对于我们来讲保证HashSet集合元素的唯一，其实就是根据对象的hashCode和equals方法来决定的。如果我们往集合中存放自定义的对象，那么保证其唯一，就必须复写hashCode和equals方法建立属于当前对象的比较方式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422135138.bmp" alt="05_HashSet集合存储数据的结构（哈希表）"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422135921.bmp" alt="06_Set集合存储元素不重复的原理"></p>
<h2 id="2-3-HashSet存储自定义类型元素"><a href="#2-3-HashSet存储自定义类型元素" class="headerlink" title="2.3  HashSet存储自定义类型元素"></a>2.3  HashSet存储自定义类型元素</h2><p>给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一</p>
<p>创建自定义Student类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">               Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象   该集合中存储 Student类型对象</span></span><br><span class="line">        HashSet&lt;Student&gt; stuSet = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line">        <span class="comment">//存储 </span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">&quot;于谦&quot;</span>, <span class="number">43</span>);</span><br><span class="line">        stuSet.add(stu);</span><br><span class="line">        stuSet.add(<span class="keyword">new</span> Student(<span class="string">&quot;郭德纲&quot;</span>, <span class="number">44</span>));</span><br><span class="line">        stuSet.add(<span class="keyword">new</span> Student(<span class="string">&quot;于谦&quot;</span>, <span class="number">43</span>));</span><br><span class="line">        stuSet.add(<span class="keyword">new</span> Student(<span class="string">&quot;郭麒麟&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        stuSet.add(stu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student stu2 : stuSet) &#123;</span><br><span class="line">            System.out.println(stu2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行结果：</span><br><span class="line">Student [name=郭德纲, age=<span class="number">44</span>]</span><br><span class="line">Student [name=于谦, age=<span class="number">43</span>]</span><br><span class="line">Student [name=郭麒麟, age=<span class="number">23</span>]</span><br></pre></td></tr></table></figure>




<h2 id="2-3-LinkedHashSet"><a href="#2-3-LinkedHashSet" class="headerlink" title="2.3 LinkedHashSet"></a>2.3 LinkedHashSet</h2><p>我们知道HashSet保证元素唯一，可是元素存放进去是没有顺序的，那么我们要保证有序，怎么办呢？</p>
<p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。</p>
<p>演示代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSetDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">		set.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;bbc&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			System.out.println(it.next());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">  bbb</span><br><span class="line">  aaa</span><br><span class="line">  abc</span><br><span class="line">  bbc</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.LinkedHashSet集合 extends HashSet集合</span></span><br><span class="line"><span class="comment">    LinkedHashSet集合特点:</span></span><br><span class="line"><span class="comment">        底层是一个哈希表(数组+链表/红黑树)+链表:多了一条链表(记录元素的存储顺序),保证元素有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04LinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;www&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[abc, www, itcast] 无序,不允许重复</span></span><br><span class="line"></span><br><span class="line">        LinkedHashSet&lt;String&gt; linked = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        linked.add(<span class="string">&quot;www&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        linked.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, abc, itcast] 有序,不允许重复</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-9-可变参数"><a href="#1-9-可变参数" class="headerlink" title="1.9  可变参数"></a>1.9  可变参数</h2><p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型... 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure>
<p>其实这个书写完全等价与</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型[] 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure>
<p>只是后面这种定义，在调用时必须传递数组，而前者可以直接传递数据即可。</p>
<p><strong>JDK1.5</strong>以后。出现了简化操作。**…** 用在参数上，称之为可变参数。</p>
<p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可变参数的特殊(终极)写法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Object...obj)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码演示：    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeArgs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">62</span>, <span class="number">431</span>, <span class="number">2</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = getSum(arr);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="comment">//  6  7  2 12 2121</span></span><br><span class="line">        <span class="comment">// 求 这几个元素和 6  7  2 12 2121</span></span><br><span class="line">        <span class="keyword">int</span> sum2 = getSum(<span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">2121</span>);</span><br><span class="line">        System.out.println(sum2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 完成数组  所有元素的求和 原始写法</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">      public static int getSum(int[] arr)&#123;</span></span><br><span class="line"><span class="comment">        int sum = 0;</span></span><br><span class="line"><span class="comment">        for(int a : arr)&#123;</span></span><br><span class="line"><span class="comment">            sum += a;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        return sum;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//可变参数写法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>... arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">            sum += a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips: 上述add方法在同一个类中，只能存在一个。因为会发生调用的不确定性</p>
<p>注意：如果在方法书写时，这个方法拥有多参数，参数中包含可变参数，可变参数一定要写在参数列表的末尾位置。</p>
</blockquote>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.VarArgs;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    可变参数:是JDK1.5之后出现的新特性</span></span><br><span class="line"><span class="comment">    使用前提:</span></span><br><span class="line"><span class="comment">        当方法的参数列表数据类型已经确定,但是参数的个数不确定,就可以使用可变参数.</span></span><br><span class="line"><span class="comment">    使用格式:定义方法时使用</span></span><br><span class="line"><span class="comment">        修饰符 返回值类型 方法名(数据类型...变量名)&#123;&#125;</span></span><br><span class="line"><span class="comment">    可变参数的原理:</span></span><br><span class="line"><span class="comment">        可变参数底层就是一个数组,根据传递参数个数不同,会创建不同长度的数组,来存储这些参数</span></span><br><span class="line"><span class="comment">        传递的参数个数,可以是0个(不传递),1,2...多个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01VarArgs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int i = add();</span></span><br><span class="line">        <span class="comment">//int i = add(10);</span></span><br><span class="line">        <span class="keyword">int</span> i = add(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//int i = add(10,20,30,40,50,60,70,80,90,100);</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        method(<span class="string">&quot;abc&quot;</span>,<span class="number">5.5</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可变参数的注意事项</span></span><br><span class="line"><span class="comment">            1.一个方法的参数列表,只能有一个可变参数</span></span><br><span class="line"><span class="comment">            2.如果方法的参数有多个,那么可变参数必须写在参数列表的末尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*public static void method(int...a,String...b)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public static void method(String b,double c,int d,int...a)&#123;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可变参数的特殊(终极)写法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Object...obj)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义计算(0-n)整数和的方法</span></span><br><span class="line"><span class="comment">        已知:计算整数的和,数据类型已经确定int</span></span><br><span class="line"><span class="comment">        但是参数的个数不确定,不知道要计算几个整数的和,就可以使用可变参数</span></span><br><span class="line"><span class="comment">        add(); 就会创建一个长度为0的数组, new int[0]</span></span><br><span class="line"><span class="comment">        add(10); 就会创建一个长度为1的数组,存储传递来过的参数 new int[]&#123;10&#125;;</span></span><br><span class="line"><span class="comment">        add(10,20); 就会创建一个长度为2的数组,存储传递来过的参数 new int[]&#123;10,20&#125;;</span></span><br><span class="line"><span class="comment">        add(10,20,30,40,50,60,70,80,90,100); 就会创建一个长度为10的数组,存储传递来过的参数 new int[]&#123;10,20,30,40,50,60,70,80,90,100&#125;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(arr);//[I@2ac1fdc4 底层是一个数组</span></span><br><span class="line">        <span class="comment">//System.out.println(arr.length);//0,1,2,10</span></span><br><span class="line">        <span class="comment">//定义一个初始化的变量,记录累加求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历数组,获取数组中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            <span class="comment">//累加求和</span></span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把求和结果返回</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法,计算三个int类型整数的和</span></span><br><span class="line">    <span class="comment">/*public static int add(int a,int b,int c)&#123;</span></span><br><span class="line"><span class="comment">        return a+b+c;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法,计算两个int类型整数的和</span></span><br><span class="line">    <span class="comment">/*public static int add(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">        return a+b;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第五章-Collections"><a href="#第五章-Collections" class="headerlink" title="第五章  Collections"></a>第五章  Collections</h1><h2 id="2-1-常用功能"><a href="#2-1-常用功能" class="headerlink" title="2.1 常用功能"></a>2.1 常用功能</h2><ul>
<li><code>java.utils.Collections</code>是集合工具类，用来对集合进行操作。部分方法如下：</li>
</ul>
<ul>
<li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)  </code>:往集合中添加一些元素。</li>
<li><code>public static void shuffle(List&lt;?&gt; list) 打乱顺序</code>:打乱集合顺序。</li>
<li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</li>
<li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//原来写法</span></span><br><span class="line">        <span class="comment">//list.add(12);</span></span><br><span class="line">        <span class="comment">//list.add(14);</span></span><br><span class="line">        <span class="comment">//list.add(15);</span></span><br><span class="line">        <span class="comment">//list.add(1000);</span></span><br><span class="line">        <span class="comment">//采用工具类 完成 往集合中添加元素  </span></span><br><span class="line">        Collections.addAll(list, <span class="number">5</span>, <span class="number">222</span>, <span class="number">1</span>，<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//排序方法 </span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">[<span class="number">5</span>, <span class="number">222</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">222</span>]</span><br></pre></td></tr></table></figure>
<p>代码演示之后 ，发现我们的集合按照顺序进行了排列，可是这样的顺序是采用默认的顺序，如果想要指定顺序那该怎么办呢？</p>
<p>我们发现还有个方法没有讲，<code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。接下来讲解一下指定规则的排列。</p>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        - public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements):往集合中添加一些元素。</span></span><br><span class="line"><span class="comment">        - public static void shuffle(List&lt;?&gt; list) 打乱顺序:打乱集合顺序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加多个元素</span></span><br><span class="line">        <span class="comment">/*list.add(&quot;a&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;b&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;c&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;d&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;e&quot;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements):往集合中添加一些元素。</span></span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, e]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static void shuffle(List&lt;?&gt; list) 打乱顺序:打乱集合顺序。</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//[b, d, c, a, e], [b, d, c, a, e]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-2-Comparator比较器"><a href="#2-2-Comparator比较器" class="headerlink" title="2.2 Comparator比较器"></a>2.2 Comparator比较器</h2><p>我们还是先研究这个方法</p>
<p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</p>
<p>不过这次存储的是字符串类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt;  list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;cba&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;aba&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;sba&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;nba&quot;</span>);</span><br><span class="line">        <span class="comment">//排序方法</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[aba, cba, nba, sba]</span><br></pre></td></tr></table></figure>
<p>我们使用的是默认的规则完成字符串的排序，那么默认规则是怎么定义出来的呢？</p>
<p>说到排序了，简单的说就是两个对象之间比较大小，那么在JAVA中提供了两种比较实现的方式，一种是比较死板的采用<code>java.lang.Comparable</code>接口去实现，一种是灵活的当我需要做排序的时候在去选择的<code>java.util.Comparator</code>接口完成。</p>
<p>那么我们采用的<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>这个方法完成的排序，实际上要求了被排序的类型需要实现Comparable接口完成比较的功能，在String类型上如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>String类实现了这个接口，并完成了比较规则的定义，但是这样就把这种规则写死了，那比如我想要字符串按照第一个字符降序排列，那么这样就要修改String的源代码，这是不可能的了，那么这个时候我们可以使用</p>
<p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>方法灵活的完成，这个里面就涉及到了Comparator这个接口，位于位于java.util包下，排序是comparator能实现的功能之一,该接口代表一个比较器，比较器具有可比性！顾名思义就是做排序的，通俗地讲需要比较两个对象谁排在前谁排在后，那么比较的方法就是：</p>
<ul>
<li><p><code> public int compare(String o1, String o2)</code>：比较其两个参数的顺序。</p>
<blockquote>
<p>两个对象比较的结果有三种：大于，等于，小于。</p>
<p>如果要按照升序排序，<br>则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）<br>如果要按照降序排序<br>则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p>
</blockquote>
</li>
</ul>
<p>操作如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;cba&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;aba&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;sba&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;nba&quot;</span>);</span><br><span class="line">        <span class="comment">//排序方法  按照第一个单词的降序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.charAt(<span class="number">0</span>) - o1.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[sba, nba, cba, aba]</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; void sort(List&lt;T&gt; list):将集合中元素按照默认规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">         sort(List&lt;T&gt; list)使用前提</span></span><br><span class="line"><span class="comment">         被排序的集合里边存储的元素,必须实现Comparable,重写接口中的方法compareTo定义排序的规则</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Comparable接口的排序规则:</span></span><br><span class="line"><span class="comment">        自己(this)-参数:升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo02Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T&gt; void sort(List&lt;T&gt; list):将集合中元素按照默认规则排序。</span></span><br><span class="line">        Collections.sort(list01);<span class="comment">//默认是升序</span></span><br><span class="line"></span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list02.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list02.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        System.out.println(list02);<span class="comment">//[a, c, b]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list02);</span><br><span class="line">        System.out.println(list02);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; list03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>,<span class="number">15</span>));</span><br><span class="line">        System.out.println(list03);<span class="comment">//[Person&#123;name=&#x27;张三&#x27;, age=18&#125;, Person&#123;name=&#x27;李四&#x27;, age=20&#125;, Person&#123;name=&#x27;王五&#x27;, age=15&#125;]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list03);</span><br><span class="line">        System.out.println(list03);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*================================*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写排序的规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return 0;//认为元素都是相同的</span></span><br><span class="line">        <span class="comment">//自定义比较的规则,比较两个人的年龄(this,参数Person)</span></span><br><span class="line">        <span class="comment">//return this.getAge() - o.getAge();//年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> o.getAge() - <span class="keyword">this</span>.getAge();<span class="comment">//年龄降序排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="2-3-简述Comparable和Comparator两个接口的区别。"><a href="#2-3-简述Comparable和Comparator两个接口的区别。" class="headerlink" title="2.3 简述Comparable和Comparator两个接口的区别。"></a>2.3 简述Comparable和Comparator两个接口的区别。</h2><p><strong>Comparable</strong>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的compareTo方法被称为它的自然比较方法。只能在类中实现compareTo()一次，不能经常修改类的代码实现自己想要的排序。实现此接口的对象列表（和数组）可以通过Collections.sort（和Arrays.sort）进行自动排序，对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p>
<p><strong>Comparator</strong>强行对某个对象进行整体排序。可以将Comparator 传递给sort方法（如Collections.sort或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用Comparator来控制某些数据结构（如有序set或有序映射）的顺序，或者为那些没有自然顺序的对象collection提供排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; ):将集合中元素按照指定规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Comparator和Comparable的区别</span></span><br><span class="line"><span class="comment">        Comparable:自己(this)和别人(参数)比较,自己需要实现Comparable接口,重写比较的规则compareTo方法</span></span><br><span class="line"><span class="comment">        Comparator:相当于找一个第三方的裁判,比较两个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Comparator的排序规则:</span></span><br><span class="line"><span class="comment">        o1-o2:升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list01, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">//重写比较的规则</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//return o1-o2;//升序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;<span class="comment">//降序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list01);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">&quot;a迪丽热巴&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">&quot;古力娜扎&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">&quot;杨幂&quot;</span>,<span class="number">17</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">&quot;b杨幂&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        System.out.println(list02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Collections.sort(list02, new Comparator&lt;Student&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(Student o1, Student o2) &#123;</span></span><br><span class="line"><span class="comment">                //按照年龄升序排序</span></span><br><span class="line"><span class="comment">                return o1.getAge()-o2.getAge();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//扩展:了解</span></span><br><span class="line">        Collections.sort(list02, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//按照年龄升序排序</span></span><br><span class="line">                <span class="keyword">int</span> result =  o1.getAge()-o2.getAge();</span><br><span class="line">                <span class="comment">//如果两个人年龄相同,再使用姓名的第一个字比较</span></span><br><span class="line">                <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">                    result =  o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>  result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-4-练习"><a href="#2-4-练习" class="headerlink" title="2.4  练习"></a>2.4  练习</h2><p>创建一个学生类，存储到ArrayList集合中完成指定排序操作。</p>
<p>Student 初始类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">               <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">               <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建四个学生对象 存储到集合中</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;rose&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;jack&quot;</span>,<span class="number">16</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;abc&quot;</span>,<span class="number">16</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;ace&quot;</span>,<span class="number">17</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;mark&quot;</span>,<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          让学生 按照年龄排序 升序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        Collections.sort(list);//要求 该list中元素类型  必须实现比较器Comparable接口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现，当我们调用Collections.sort()方法的时候 程序报错了。</p>
<p>原因：如果想要集合中的元素完成排序，那么必须要实现比较器Comparable接口。</p>
<p>于是我们就完成了Student类的一个实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age-o.age;<span class="comment">//升序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次测试，代码就OK 了效果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student&#123;name=<span class="string">&#x27;jack&#x27;</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;abc&#x27;</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;mark&#x27;</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;ace&#x27;</span>, age=<span class="number">17</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;rose&#x27;</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-扩展"><a href="#2-5-扩展" class="headerlink" title="2.5 扩展"></a>2.5 扩展</h2><p>如果在使用的时候，想要独立的定义规则去使用 可以采用Collections.sort(List list,Comparetor&lt;T&gt; c)方式，自己定义规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2.getAge()-o1.getAge();<span class="comment">//以学生的年龄降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student&#123;name&#x3D;&#39;rose&#39;, age&#x3D;18&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;ace&#39;, age&#x3D;17&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;jack&#39;, age&#x3D;16&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;abc&#39;, age&#x3D;16&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;mark&#39;, age&#x3D;16&#125;</span><br></pre></td></tr></table></figure>


<p>如果想要规则更多一些，可以参考下面代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 年龄降序</span></span><br><span class="line">                <span class="keyword">int</span> result = o2.getAge()-o1.getAge();<span class="comment">//年龄降序</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;<span class="comment">//第一个规则判断完了 下一个规则 姓名的首字母 升序</span></span><br><span class="line">                    result = o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student&#123;name&#x3D;&#39;rose&#39;, age&#x3D;18&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;ace&#39;, age&#x3D;17&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;abc&#39;, age&#x3D;16&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;jack&#39;, age&#x3D;16&#125;</span><br><span class="line">Student&#123;name&#x3D;&#39;mark&#39;, age&#x3D;16&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>线程、同步</title>
    <url>/2021/04/23/2021-04-23-%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="线程、同步"><a href="#线程、同步" class="headerlink" title="线程、同步"></a>线程、同步</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li><p>线程</p>
</li>
<li><p>同步</p>
</li>
<li><p>线程状态</p>
</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够描述Java中多线程运行原理</li>
<li><input disabled="" type="checkbox"> 能够使用继承类的方式创建多线程</li>
<li><input disabled="" type="checkbox"> 能够使用实现接口的方式创建多线程</li>
<li><input disabled="" type="checkbox"> 能够说出实现接口方式的好处</li>
<li><input disabled="" type="checkbox"> 能够解释安全问题的出现的原因</li>
<li><input disabled="" type="checkbox"> 能够使用同步代码块解决线程安全问题</li>
<li><input disabled="" type="checkbox"> 能够使用同步方法解决线程安全问题</li>
<li><input disabled="" type="checkbox"> 能够说出线程6个状态的名称</li>
</ul>
<h1 id="第一章-线程"><a href="#第一章-线程" class="headerlink" title="第一章 线程"></a>第一章 线程</h1><h2 id="1-1-多线程原理"><a href="#1-1-多线程原理" class="headerlink" title="1. 1 多线程原理"></a>1. 1 多线程原理</h2><p>昨天的时候我们已经写过一版多线程的代码，很多同学对原理不是很清楚，那么我们今天先画个多线程执行时序来体现一下多线程程序的执行流程。</p>
<p>代码如下：</p>
<p>自定义线程类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 利用继承中的特点</span></span><br><span class="line"><span class="comment">* 将线程名称传递 进行设置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 重写run方法</span></span><br><span class="line"><span class="comment">* 定义线程要执行的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i =  <span class="number">0</span> ; i &lt;  <span class="number">20</span> ; i++) &#123;</span><br><span class="line">			<span class="comment">//getName()方法 来自父亲</span></span><br><span class="line">			System.out.println(getName()+i);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这里是main线程&quot;</span>);</span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">&quot;小强&quot;</span>);</span><br><span class="line">        mt.start();<span class="comment">//开启了一个新的线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =  <span class="number">0</span> ; i &lt;  <span class="number">20</span> ; i++) &#123;</span><br><span class="line">        		System.out.println(<span class="string">&quot;旺财:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423110607.png" alt="线程流程图"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423111220.bmp" alt="01_多线程随机性打印结果"></p>
<p>程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用mt的对象的start方法，另外一个新的线程也启动了，这样，整个应用就在多线程下运行。</p>
<p>通过这张图我们可以很清晰的看到多线程的执行流程，那么为什么可以完成并发执行呢？我们再来讲一讲原理。</p>
<p>多线程执行时，到底在内存中是如何运行的呢？以上个程序为例，进行图解说明：</p>
<p>多线程执行时，在栈内存中，其实每一个执行线程都有一片自己所属的栈内存空间。进行方法的压栈和弹栈。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423111056.bmp" alt="栈内存原理图"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423112046.bmp" alt="02_多线程内存图解"></p>
<p>当执行线程的任务结束了，线程自动在栈内存中释放了。但是当所有的执行线程都结束了，那么进程就结束了。</p>
<h2 id="1-2-Thread类"><a href="#1-2-Thread类" class="headerlink" title="1. 2 Thread类"></a>1. 2 Thread类</h2><p>在上一天内容中我们已经可以完成最基本的线程开启，那么在我们完成操作过程中用到了java.lang.Thread类，<br>API中该类中定义了有关线程的一些方法，具体如下：</p>
<p>构造方法：</p>
<ul>
<li><code>public Thread():</code>分配一个新的线程对象。</li>
<li>  <code>public Thread(String name):</code>分配一个指定名字的新的线程对象。</li>
<li>  <code>public Thread(Runnable target):</code>分配一个带有指定目标新的线程对象。</li>
<li>  <code>public Thread(Runnable target,String name):</code>分配一个带有指定目标新的线程对象并指定名字。</li>
</ul>
<p>常用方法：</p>
<ul>
<li><code>public String getName():</code>获取当前线程名称。</li>
<li><code>public void start():</code>导致此线程开始执行; Java虚拟机调用此线程的run方法。</li>
<li><code>public void run():</code>此线程要执行的任务在此处定义代码。</li>
<li><code>public static void sleep(long millis):</code>使当前正在执行的线程以指定的毫秒数暂- 停（暂时停止执行）。</li>
<li><code>public static Thread currentThread()</code>:返回对当前正在执行的线程对象的引用。</li>
</ul>
<p>翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式，方式一我们上一天已经完成，接下来讲解方式二实现的方式。</p>
<h3 id="getName"><a href="#getName" class="headerlink" title="getName()"></a>getName()</h3><p><code>获取线程的名称</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.getName;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取线程的名称:</span></span><br><span class="line"><span class="comment">        1.使用Thread类中的方法getName()</span></span><br><span class="line"><span class="comment">            String getName() 返回该线程的名称。</span></span><br><span class="line"><span class="comment">        2.可以先获取到当前正在执行的线程,使用线程中的方法getName()获取线程的名称</span></span><br><span class="line"><span class="comment">            static Thread currentThread() 返回对当前正在执行的线程对象的引用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 定义一个Thread类的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写Thread类中的run方法,设置线程任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="comment">//String name = getName();</span></span><br><span class="line">        <span class="comment">//System.out.println(name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread t = Thread.currentThread();</span></span><br><span class="line">        <span class="comment">//System.out.println(t);//Thread[Thread-0,5,main]</span></span><br><span class="line">        <span class="comment">//String name = t.getName();</span></span><br><span class="line">        <span class="comment">//System.out.println(name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>测试类</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.getName;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    线程的名称:</span></span><br><span class="line"><span class="comment">        主线程: main</span></span><br><span class="line"><span class="comment">        新线程: Thread-0,Thread-1,Thread-2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01GetThreadName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Thread类的子类对象</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//调用start方法,开启新线程,执行run方法</span></span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="setName"><a href="#setName" class="headerlink" title="setName"></a>setName</h3><p><code>测试类</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.setName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01SetThreadName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启多线程</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        mt.setName(<span class="string">&quot;小强&quot;</span>);</span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启多线程</span></span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">&quot;旺财&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>set类</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.setName;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    设置线程的名称:(了解)</span></span><br><span class="line"><span class="comment">        1.使用Thread类中的方法setName(名字)</span></span><br><span class="line"><span class="comment">            void setName(String name) 改变线程名称，使之与参数 name 相同。</span></span><br><span class="line"><span class="comment">        2.创建一个带参数的构造方法,参数传递线程的名称;调用父类的带参构造方法,把线程名称传递给父类,让父类(Thread)给子线程起一个名字</span></span><br><span class="line"><span class="comment">            Thread(String name) 分配新的 Thread 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//把线程名称传递给父类,让父类(Thread)给子线程起一个名字</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取线程的名称</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.sleep;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public static void sleep(long millis):使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</span></span><br><span class="line"><span class="comment">    毫秒数结束之后,线程继续执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Sleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟秒表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">60</span> ; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用Thread类的sleep方法让程序睡眠1秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-3-创建线程方式二"><a href="#1-3-创建线程方式二" class="headerlink" title="1. 3 创建线程方式二"></a>1. 3 创建线程方式二</h2><p>采用<code>java.lang.Runnable</code>也是非常常见的一种，我们只需要重写run方法即可。</p>
<p>步骤如下：</p>
<ol>
<li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li>
<li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正<br>的线程对象。</li>
<li>调用线程对象的start()方法来启动线程。</li>
</ol>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =  <span class="number">0</span> ; i &lt;  <span class="number">20</span> ; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建自定义类对象 线程任务对象</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(mr, <span class="string">&quot;小强&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =  <span class="number">0</span> ; i &lt;  <span class="number">20</span> ; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;旺财 &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过实现Runnable接口，使得该类有了多线程类的特征。run()方法是多线程程序的一个执行目标。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。</p>
<p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调Thread对象的start()方法来运行多线程代码。</p>
<p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是继承Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</p>
<blockquote>
<p>tips:Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run()方法仅作为线程执行体。<br>而实际的线程对象依然是Thread实例，只是该Thread线程负责执行其target的run()方法。</p>
</blockquote>
<p><code>demo in class</code></p>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.Runnable;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建多线程程序的第二种方式:实现Runnable接口</span></span><br><span class="line"><span class="comment">    java.lang.Runnable</span></span><br><span class="line"><span class="comment">        Runnable 接口应该由那些打算通过某一线程执行其实例的类来实现。类必须定义一个称为 run 的无参数方法。</span></span><br><span class="line"><span class="comment">    java.lang.Thread类的构造方法</span></span><br><span class="line"><span class="comment">        Thread(Runnable target) 分配新的 Thread 对象。</span></span><br><span class="line"><span class="comment">        Thread(Runnable target, String name) 分配新的 Thread 对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.创建一个Runnable接口的实现类</span></span><br><span class="line"><span class="comment">        2.在实现类中重写Runnable接口的run方法,设置线程任务</span></span><br><span class="line"><span class="comment">        3.创建一个Runnable接口的实现类对象</span></span><br><span class="line"><span class="comment">        4.创建Thread类对象,构造方法中传递Runnable接口的实现类对象</span></span><br><span class="line"><span class="comment">        5.调用Thread类中的start方法,开启新的线程执行run方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现Runnable接口创建多线程程序的好处:</span></span><br><span class="line"><span class="comment">        1.避免了单继承的局限性</span></span><br><span class="line"><span class="comment">            一个类只能继承一个类(一个人只能有一个亲爹),类继承了Thread类就不能继承其他的类</span></span><br><span class="line"><span class="comment">            实现了Runnable接口,还可以继承其他的类,实现其他的接口</span></span><br><span class="line"><span class="comment">        2.增强了程序的扩展性,降低了程序的耦合性(解耦)</span></span><br><span class="line"><span class="comment">            实现Runnable接口的方式,把设置线程任务和开启新线程进行了分离(解耦)</span></span><br><span class="line"><span class="comment">            实现类中,重写了run方法:用来设置线程任务</span></span><br><span class="line"><span class="comment">            创建Thread类对象,调用start方法:用来开启新线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建一个Runnable接口的实现类对象</span></span><br><span class="line">        RunnableImpl run = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">        <span class="comment">//4.创建Thread类对象,构造方法中传递Runnable接口的实现类对象</span></span><br><span class="line">        <span class="comment">//Thread t = new Thread(run);//打印线程名称</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RunnableImpl2());<span class="comment">//打印HelloWorld</span></span><br><span class="line">        <span class="comment">//5.调用Thread类中的start方法,开启新的线程执行run方法</span></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口类-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.Runnable;</span><br><span class="line"><span class="comment">//1.创建一个Runnable接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.在实现类中重写Runnable接口的run方法,设置线程任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1-4-Thread和Runnable的区别"><a href="#1-4-Thread和Runnable的区别" class="headerlink" title="1. 4 Thread和Runnable的区别"></a>1. 4 Thread和Runnable的区别</h2><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p>
<p><strong>总结：</strong></p>
<p><strong>实现Runnable接口比继承Thread类所具有的优势：</strong></p>
<ol>
<li>适合多个相同的程序代码的线程去共享同一个资源。</li>
<li>可以避免java中的单继承的局限性。（类继承了Thread类就不能继承其他的类实现了Runnable接口,还可以继承其他的类,实现其他的接口）</li>
<li>增加程序的健壮性，实现<code>解耦</code>操作，代码可以被多个线程共享，代码和线程独立。</li>
<li>线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。</li>
</ol>
<blockquote>
<p>扩充：在java中，每次程序运行至少启动 2 个线程。一个是main线程，一个是垃圾收集线程。因为每当使用<br>java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进<br>程。</p>
</blockquote>
<h2 id="1-5-匿名内部类方式实现线程的创建"><a href="#1-5-匿名内部类方式实现线程的创建" class="headerlink" title="1. 5 匿名内部类方式实现线程的创建"></a>1. 5 匿名内部类方式实现线程的创建</h2><p>使用线程的内匿名内部类方式，可以方便的实现每个线程执行不同的线程任务操作。</p>
<p>使用匿名内部类的方式实现Runnable接口，重新Runnable接口中的run方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoNameInnerClassThread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// new Runnable()&#123;</span></span><br><span class="line">    <span class="comment">// public void run()&#123;</span></span><br><span class="line">        <span class="comment">// for (int i =  0 ; i &lt;  20 ; i++) &#123;</span></span><br><span class="line">        <span class="comment">// System.out.println(&quot;张宇:&quot;+i);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;; //‐‐‐这个整体 相当于new MyRunnable()</span></span><br><span class="line">Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =  <span class="number">0</span> ; i &lt;  <span class="number">20</span> ; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;张宇:&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;<span class="keyword">new</span> Thread(r).start();</span><br></pre></td></tr></table></figure>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.InnerClassThread;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    匿名内部类方式实现线程的创建</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    匿名:没有名字</span></span><br><span class="line"><span class="comment">    内部类:写在其他类内部的类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    匿名内部类作用:简化代码</span></span><br><span class="line"><span class="comment">        把子类继承父类,重写父类的方法,创建子类对象合一步完成</span></span><br><span class="line"><span class="comment">        把实现类实现类接口,重写接口中的方法,创建实现类对象合成一步完成</span></span><br><span class="line"><span class="comment">    匿名内部类的最终产物:子类/实现类对象,而这个类没有名字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    格式:</span></span><br><span class="line"><span class="comment">        new 父类/接口()&#123;</span></span><br><span class="line"><span class="comment">            重复父类/接口中的方法</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClassThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程的父类是Thread</span></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="comment">//重写run方法,设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+<span class="string">&quot;黑马&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程的接口Runnable</span></span><br><span class="line">        <span class="comment">//Runnable r = new RunnableImpl();//多态</span></span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="comment">//重写run方法,设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化接口的方式</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="comment">//重写run方法,设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+<span class="string">&quot;传智播客&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第二章-线程安全"><a href="#第二章-线程安全" class="headerlink" title="第二章 线程安全"></a>第二章 线程安全</h1><h2 id="2-1-线程安全"><a href="#2-1-线程安全" class="headerlink" title="2. 1 线程安全"></a>2. 1 线程安全</h2><p>如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p>
<p>我们通过一个案例，演示线程的安全问题：</p>
<p>电影院要卖票，我们模拟电影院的卖票过程。假设要播放的电影是 “葫芦娃大战奥特曼”，本次电影的座位共 100 个(本场电影只能卖 100 张票)。</p>
<p>我们来模拟电影院的售票窗口，实现多个窗口同时卖 “葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这 100 张票)需要窗口，采用线程对象来模拟；需要票，Runnable接口子类来模拟</p>
<p>提高安全问题产生的概率</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423140044.bmp" alt="03_线程安全问题的概述"></p>
<p>模拟票：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作</span></span><br><span class="line">        <span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                <span class="comment">//出票操作</span></span><br><span class="line">                <span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(name + <span class="string">&quot;正在卖:&quot;</span> + ticket‐‐);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建线程任务对象</span></span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line"><span class="comment">//创建三个窗口对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(ticket, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(ticket, <span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(ticket, <span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"><span class="comment">//同时卖票</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果中有一部分这样现象：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423141454.png" alt="线程安全问题"></p>
<p>发现程序出现了两个问题：</p>
<ol>
<li><p>相同的票数,比如 5 这张票被卖了两回。</p>
</li>
<li><p>不存在的票，比如 0 票与- 1 票，是不存在的。</p>
</li>
</ol>
<p>这种问题，几个窗口(线程)票数不同步了，这种问题称为线程不安全。<code>多线程访问共享的对象</code></p>
<p>线程安全问题都是由<code>全局变量及静态变量</code>引起的。若每个线程中<code>对全局变量、静态变量只有读操作</code>，<code>而无写操作</code>，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑<code>线程同步</code>，否则的话就可能影响线程安全。</p>
<p><code>demo in class</code></p>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06.ThreadSafe;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    模拟卖票案例</span></span><br><span class="line"><span class="comment">    创建3个线程,同时开启,对共享的票进行出售</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        RunnableImpl run = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">        <span class="comment">//创建Thread类对象,构造方法中传递Runnable接口的实现类对象</span></span><br><span class="line">        Thread t0 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        <span class="comment">//调用start方法开启多线程</span></span><br><span class="line">        t0.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模拟类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06.ThreadSafe;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现卖票案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置线程任务:卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用死循环,让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率,让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//票存在,卖票 ticket--</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423142610.bmp" alt="04_线程安全问题产生的原理"></p>
<h2 id="2-2-线程同步"><a href="#2-2-线程同步" class="headerlink" title="2. 2 线程同步"></a>2. 2 线程同步</h2><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。</p>
<p>要解决上述多线程并发访问一个资源的安全性问题:也就是解决重复票与不存在票问题，Java中提供了同步机制**(synchronized)**来解决。</p>
<p>根据案例简述：</p>
<blockquote>
<p>窗口1线程进入操作的时候，窗口2和窗口3线程只能在外等着，窗口1操作结束，窗口1和窗口2和窗口3才有机会进入代码去执行。也就是说在某个线程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</p>
</blockquote>
<p>为了保证每个线程都能正常执行原子操作, java引入了线程同步机制。</p>
<p>那么怎么去使用呢？有三种方式完成同步操作：</p>
<ol>
<li><p>同步代码块。</p>
</li>
<li><p>同步方法。</p>
</li>
<li><p>锁机制。</p>
</li>
</ol>
<h2 id="2-3-同步代码块"><a href="#2-3-同步代码块" class="headerlink" title="2. 3 同步代码块"></a>2. 3 同步代码块</h2><ul>
<li>同步代码块：<code>synchronized</code>关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。</li>
</ul>
<p>格式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">        需要同步操作的代码</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><strong>同步锁:</strong></p>
<p>对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.</p>
<ol>
<li><p>锁对象 可以是任意类型。</p>
</li>
<li><p>多个线程对象 要使用同一把锁。</p>
</li>
</ol>
<blockquote>
<p>注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。</p>
</blockquote>
<p>使用同步代码块解决代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//每个窗口卖票的操作</span></span><br><span class="line"><span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;<span class="comment">//有票 可以卖</span></span><br><span class="line"><span class="comment">//出票操作</span></span><br><span class="line"><span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                    String name = Thread.currentThread().getName();</span><br><span class="line">                    System.out.println(name + <span class="string">&quot;正在卖:&quot;</span> + ticket‐‐);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当使用了同步代码块后，上述的线程的安全问题，解决了。</p>
<p><code>demo in class</code></p>
<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    模拟卖票案例</span></span><br><span class="line"><span class="comment">    创建3个线程,同时开启,对共享的票进行出售</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        RunnableImpl run = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">        <span class="comment">//创建Thread类对象,构造方法中传递Runnable接口的实现类对象</span></span><br><span class="line">        Thread t0 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        <span class="comment">//调用start方法开启多线程</span></span><br><span class="line">        t0.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>锁对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    卖票案例出现了线程安全问题</span></span><br><span class="line"><span class="comment">    卖出了不存在的票和重复的票</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    解决线程安全问题的一种方案:使用同步代码块</span></span><br><span class="line"><span class="comment">    格式:</span></span><br><span class="line"><span class="comment">        synchronized(锁对象)&#123;</span></span><br><span class="line"><span class="comment">            可能会出现线程安全问题的代码(访问了共享数据的代码)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">        1.通过代码块中的锁对象,可以使用任意的对象</span></span><br><span class="line"><span class="comment">        2.但是必须保证多个线程使用的锁对象是同一个</span></span><br><span class="line"><span class="comment">        3.锁对象作用:</span></span><br><span class="line"><span class="comment">            把同步代码块锁住,只让一个线程在同步代码块中执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个锁对象</span></span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置线程任务:卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用死循环,让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">           <span class="comment">//同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="comment">//先判断票是否存在</span></span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//提高安全问题出现的概率,让程序睡眠</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//票存在,卖票 ticket--</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423145119.bmp" alt="05_同步的原理"></p>
<h2 id="2-4-同步方法"><a href="#2-4-同步方法" class="headerlink" title="2. 4 同步方法"></a>2. 4 同步方法</h2><ul>
<li><strong>同步方法</strong>:使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外<br>等着。</li>
</ul>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        可能会产生线程安全问题的代码</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>同步锁是谁?</p>
<p>对于非static方法,同步锁就是this。</p>
<p>对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。</p>
</blockquote>
<p>使用同步方法代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//每个窗口卖票的操作</span></span><br><span class="line"><span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            sellTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 锁对象 是 谁调用这个方法 就是谁</span></span><br><span class="line"><span class="comment">     * 隐含 锁对象 就是 this</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line"><span class="comment">//出票操作</span></span><br><span class="line"><span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                e.printStackTrace();&#125;</span><br><span class="line"><span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">            String name = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(name+<span class="string">&quot;正在卖:&quot;</span>+ticket+<span class="string">&quot;‐‐&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>demo in class</code></p>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo08.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    模拟卖票案例</span></span><br><span class="line"><span class="comment">    创建3个线程,同时开启,对共享的票进行出售</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        RunnableImpl run = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">        System.out.println(<span class="string">&quot;run:&quot;</span>+run);<span class="comment">//run:com.itheima.demo08.Synchronized.RunnableImpl@58ceff1</span></span><br><span class="line">        <span class="comment">//创建Thread类对象,构造方法中传递Runnable接口的实现类对象</span></span><br><span class="line">        Thread t0 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        <span class="comment">//调用start方法开启多线程</span></span><br><span class="line">        t0.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>synchronized类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo08.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    卖票案例出现了线程安全问题</span></span><br><span class="line"><span class="comment">    卖出了不存在的票和重复的票</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    解决线程安全问题的二种方案:使用同步方法</span></span><br><span class="line"><span class="comment">    使用步骤:</span></span><br><span class="line"><span class="comment">        1.把访问了共享数据的代码抽取出来,放到一个方法中</span></span><br><span class="line"><span class="comment">        2.在方法上添加synchronized修饰符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    格式:定义方法的格式</span></span><br><span class="line"><span class="comment">    修饰符 synchronized 返回值类型 方法名(参数列表)&#123;</span></span><br><span class="line"><span class="comment">        可能会出现线程安全问题的代码(访问了共享数据的代码)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置线程任务:卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this:&quot;</span>+<span class="keyword">this</span>);<span class="comment">//this:com.itheima.demo08.Synchronized.RunnableImpl@58ceff1</span></span><br><span class="line">        <span class="comment">//使用死循环,让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            payTicketStatic();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        静态的同步方法</span></span><br><span class="line"><span class="comment">        锁对象是谁?</span></span><br><span class="line"><span class="comment">        不能是this</span></span><br><span class="line"><span class="comment">        this是创建对象之后产生的,静态方法优先于对象</span></span><br><span class="line"><span class="comment">        静态方法的锁对象是本类的class属性--&gt;class文件对象(反射)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">payTicketStatic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (RunnableImpl.class)&#123;</span><br><span class="line">            <span class="comment">//先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率,让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//票存在,卖票 ticket--</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个同步方法</span></span><br><span class="line"><span class="comment">        同步方法也会把方法内部的代码锁住</span></span><br><span class="line"><span class="comment">        只让一个线程执行</span></span><br><span class="line"><span class="comment">        同步方法的锁对象是谁?</span></span><br><span class="line"><span class="comment">        就是实现类对象 new RunnableImpl()</span></span><br><span class="line"><span class="comment">        也是就是this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">payTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="comment">//先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率,让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//票存在,卖票 ticket--</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-5-Lock锁"><a href="#2-5-Lock锁" class="headerlink" title="2. 5 Lock锁"></a>2. 5 Lock锁</h2><p><code>java.util.concurrent.locks.Lock</code>机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。</p>
<p>Lock锁也称同步锁，加锁与释放锁方法化了，如下：</p>
<ul>
<li><code>public void lock():</code>加同步锁。</li>
<li><code>public void unlock():</code>释放同步锁。</li>
</ul>
<p>使用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//每个窗口卖票的操作</span></span><br><span class="line"><span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line"><span class="comment">//出票操作</span></span><br><span class="line"><span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(name+<span class="string">&quot;正在卖:&quot;</span>+ticket‐‐);</span><br><span class="line">            &#125;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<p>测试类同前</p>
<p>锁类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo09.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    卖票案例出现了线程安全问题</span></span><br><span class="line"><span class="comment">    卖出了不存在的票和重复的票</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    解决线程安全问题的三种方案:使用Lock锁</span></span><br><span class="line"><span class="comment">    java.util.concurrent.locks.Lock接口</span></span><br><span class="line"><span class="comment">    Lock 实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作。</span></span><br><span class="line"><span class="comment">    Lock接口中的方法:</span></span><br><span class="line"><span class="comment">        void lock()获取锁。</span></span><br><span class="line"><span class="comment">        void unlock()  释放锁。</span></span><br><span class="line"><span class="comment">    java.util.concurrent.locks.ReentrantLock implements Lock接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用步骤:</span></span><br><span class="line"><span class="comment">        1.在成员位置创建一个ReentrantLock对象</span></span><br><span class="line"><span class="comment">        2.在可能会出现安全问题的代码前调用Lock接口中的方法lock获取锁</span></span><br><span class="line"><span class="comment">        3.在可能会出现安全问题的代码后调用Lock接口中的方法unlock释放锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.在成员位置创建一个ReentrantLock对象</span></span><br><span class="line">    Lock l = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置线程任务:卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用死循环,让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//2.在可能会出现安全问题的代码前调用Lock接口中的方法lock获取锁</span></span><br><span class="line">            l.lock();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率,让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    <span class="comment">//票存在,卖票 ticket--</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//3.在可能会出现安全问题的代码后调用Lock接口中的方法unlock释放锁</span></span><br><span class="line">                    l.unlock();<span class="comment">//无论程序是否异常,都会把锁释放</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*//设置线程任务:卖票</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        //使用死循环,让卖票操作重复执行</span></span><br><span class="line"><span class="comment">        while(true)&#123;</span></span><br><span class="line"><span class="comment">           //2.在可能会出现安全问题的代码前调用Lock接口中的方法lock获取锁</span></span><br><span class="line"><span class="comment">           l.lock();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //先判断票是否存在</span></span><br><span class="line"><span class="comment">            if(ticket&gt;0)&#123;</span></span><br><span class="line"><span class="comment">                //提高安全问题出现的概率,让程序睡眠</span></span><br><span class="line"><span class="comment">                try &#123;</span></span><br><span class="line"><span class="comment">                    Thread.sleep(10);</span></span><br><span class="line"><span class="comment">                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                //票存在,卖票 ticket--</span></span><br><span class="line"><span class="comment">                System.out.println(Thread.currentThread().getName()+&quot;--&gt;正在卖第&quot;+ticket+&quot;张票&quot;);</span></span><br><span class="line"><span class="comment">                ticket--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //3.在可能会出现安全问题的代码后调用Lock接口中的方法unlock释放锁</span></span><br><span class="line"><span class="comment">            l.unlock();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第三章-线程状态"><a href="#第三章-线程状态" class="headerlink" title="第三章 线程状态"></a>第三章 线程状态</h1><h2 id="3-1-线程状态概述"><a href="#3-1-线程状态概述" class="headerlink" title="3.1 线程状态概述"></a>3.1 线程状态概述</h2><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中java.lang.Thread.State 这个枚举中给出了六种线程状态：</p>
<p>这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423152028.png" alt="image-20210423152027930"></p>
<p>我们不需要去研究这几种状态的实现原理，我们只需知道在做线程操作中存在这样的状态。那我们怎么去理解几个状态呢，新建与被终止还是很容易理解的，我们就研究一下线程从Runnable（可运行）状态与非运行状态之间的转换问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423152335.bmp" alt="线程的状态图"></p>
<h2 id="3-2-Timed-Waiting（计时等待）"><a href="#3-2-Timed-Waiting（计时等待）" class="headerlink" title="3. 2 Timed Waiting（计时等待）"></a>3. 2 Timed Waiting（计时等待）</h2><p>Timed Waiting在API中的描述为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。单独的去理解这句话，真是玄之又玄，其实我们在之前的操作中已经接触过这个状态了，在哪里呢？</p>
<p>在我们写卖票的案例中，为了减少线程执行太快，现象不明显等问题，我们在run方法中添加了sleep语句，这样就强制当前正在执行的线程休眠<strong>（暂停执行）</strong>，以“减慢线程”。</p>
<p>其实当我们调用了sleep方法之后，当前执行的线程就进入到“休眠状态”，其实就是所谓的Timed Waiting(计时等<br>待)，那么我们通过一个案例加深对该状态的一个理解。</p>
<p>实现一个计数器，计数到 100 ，在每个数字之间暂停 1 秒，每隔 10 个数字输出一个字符串</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i) % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐&quot;</span> + i);&#125;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.print(<span class="string">&quot; 线程睡眠1秒！\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过案例可以发现，sleep方法的使用还是很简单的。我们需要记住下面几点：</p>
<ol>
<li>进入 TIMED_WAITING 状态的一种常见情形是调用的 sleep 方法，单独的线程也可以调用，不一定非要有协<br>作关系。</li>
<li>为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程<br>中会睡眠</li>
<li>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable（可运行）状态。</li>
</ol>
<blockquote>
<p>小提示：sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始立刻执行。</p>
</blockquote>
<p>Timed Waiting 线程状态图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423152621.png" alt="计时等待"></p>
<h2 id="3-3-BLOCKED（锁阻塞）"><a href="#3-3-BLOCKED（锁阻塞）" class="headerlink" title="3. 3 BLOCKED（锁阻塞）"></a>3. 3 BLOCKED（锁阻塞）</h2><p>Blocked状态在API中的介绍为：一个正在阻塞等待一个监视器锁（锁对象）的线程处于这一状态。</p>
<p>我们已经学完同步机制，那么这个状态是非常好理解的了。比如，线程A与线程B代码中使用同一锁，如果线程A获<br>取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态。</p>
<p>这是由Runnable状态进入Blocked状态。除此Waiting以及Time Waiting状态也会在某种情况下进入阻塞状态，而<br>这部分内容作为扩充知识点带领大家了解一下。</p>
<p>Blocked 线程状态图</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423152918.png" alt="锁阻塞"></p>
<h2 id="3-4-Waiting（无限等待）"><a href="#3-4-Waiting（无限等待）" class="headerlink" title="3. 4 Waiting（无限等待）"></a>3. 4 Waiting（无限等待）</h2><p>Wating状态在API中介绍为：一个正在无限期等待另一个线程执行一个特别的（唤醒）动作的线程处于这一状态。</p>
<p>那么我们之前遇到过这种状态吗？答案是并没有，但并不妨碍我们进行一个简单深入的了解。我们通过一段代码来学习一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 演示waiting</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println( Thread.currentThread().getName() +<span class="string">&quot;===获取到锁对象，调用wait方法，进入waiting状态，释放锁对象&quot;</span>);</span><br><span class="line">                            obj.wait(); <span class="comment">//无限等待</span></span><br><span class="line"><span class="comment">//obj.wait(5000); //计时等待, 5秒 时间到，自动醒来</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println( Thread.currentThread().getName() + <span class="string">&quot;=== 从waiting状态醒来，获取到锁对象，继续执行了&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;等待线程&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// while (true)&#123; //每隔3秒 唤醒一次</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println( Thread.currentThread().getName() +<span class="string">&quot;‐‐‐‐‐ 等待3秒钟&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println( Thread.currentThread().getName() +<span class="string">&quot;‐‐‐‐‐ 获取到锁对象,调用notify方法，释放锁对象&quot;</span>);</span><br><span class="line">                            obj.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">        &#125;,<span class="string">&quot;唤醒线程&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423153338.bmp" alt="06_等待唤醒案例分析"></p>
<p>通过上述案例我们会发现，一个调用了某个对象的 Object.wait 方法的线程会等待另一个线程调用此对象的<br>Object.notify()方法 或 Object.notifyAll()方法。</p>
<p>其实waiting状态并不是一个线程的操作，它体现的是多个线程间的通信，可以理解为多个线程之间的协作关系，<br>多个线程会争取锁，同时相互之间又存在协作关系。就好比在公司里你和你的同事们，你们可能存在晋升时的竞<br>争，但更多时候你们更多是一起合作以完成某些任务。</p>
<p>当多个线程协作时，比如A，B线程，如果A线程在Runnable（可运行）状态中调用了wait()方法那么A线程就进入<br>了Waiting（无限等待）状态，同时失去了同步锁。假如这个时候B线程获取到了同步锁，在运行状态中调用了<br>notify()方法，那么就会将无限等待的A线程唤醒。注意是唤醒，如果获取到锁对象，那么A线程唤醒后就进入<br>Runnable（可运行）状态；如果没有获取锁对象，那么就进入到Blocked（锁阻塞状态）。</p>
<p>Waiting 线程状态图</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423153118.png" alt="无限等待"></p>
<p><code>demo in class</code></p>
<p><code>waitAndNotify</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo10.WaitAndNotify;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    等待唤醒案例:线程之间的通信</span></span><br><span class="line"><span class="comment">        创建一个顾客线程(消费者):告知老板要的包子的种类和数量,调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</span></span><br><span class="line"><span class="comment">        创建一个老板线程(生产者):花了5秒做包子,做好包子之后,调用notify方法,唤醒顾客吃包子</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">        顾客和老板线程必须使用同步代码块包裹起来,保证等待和唤醒只能有一个在执行</span></span><br><span class="line"><span class="comment">        同步使用的锁对象必须保证唯一</span></span><br><span class="line"><span class="comment">        只有锁对象才能调用wait和notify方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Obejct类中的方法</span></span><br><span class="line"><span class="comment">    void wait()</span></span><br><span class="line"><span class="comment">          在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。</span></span><br><span class="line"><span class="comment">    void notify()</span></span><br><span class="line"><span class="comment">          唤醒在此对象监视器上等待的单个线程。</span></span><br><span class="line"><span class="comment">          会继续执行wait方法之后的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo01WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建锁对象,保证唯一</span></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">// 创建一个顾客线程(消费者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="comment">//一直等着买包子</span></span><br><span class="line">               <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                   <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                   <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                       <span class="comment">//调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</span></span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           obj.wait();</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="comment">//唤醒之后执行的代码</span></span><br><span class="line">                       System.out.println(<span class="string">&quot;包子已经做好了,开吃!&quot;</span>);</span><br><span class="line">                       System.out.println(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个老板线程(生产者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//一直做包子</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//花了5秒做包子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);<span class="comment">//花5秒钟做包子</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;老板5秒钟之后做好包子,告知顾客,可以吃包子了&quot;</span>);</span><br><span class="line">                        <span class="comment">//做好包子之后,调用notify方法,唤醒顾客吃包子</span></span><br><span class="line">                        obj.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>notifyAll methods demo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo10.WaitAndNotify;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    进入到TimeWaiting(计时等待)有两种方式</span></span><br><span class="line"><span class="comment">    1.使用sleep(long m)方法,在毫秒值结束之后,线程睡醒进入到Runnable/Blocked状态</span></span><br><span class="line"><span class="comment">    2.使用wait(long m)方法,wait方法如果在毫秒值结束之后,还没有被notify唤醒,就会自动醒来,线程睡醒进入到Runnable/Blocked状态</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    唤醒的方法:</span></span><br><span class="line"><span class="comment">         void notify() 唤醒在此对象监视器上等待的单个线程。</span></span><br><span class="line"><span class="comment">         void notifyAll() 唤醒在此对象监视器上等待的所有线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建锁对象,保证唯一</span></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">// 创建一个顾客线程(消费者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//一直等着买包子</span></span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;顾客1告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                        <span class="comment">//调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//唤醒之后执行的代码</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;包子已经做好了,顾客1开吃!&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个顾客线程(消费者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//一直等着买包子</span></span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;顾客2告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                        <span class="comment">//调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//唤醒之后执行的代码</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;包子已经做好了,顾客2开吃!&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个老板线程(生产者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//一直做包子</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//花了5秒做包子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);<span class="comment">//花5秒钟做包子</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;老板5秒钟之后做好包子,告知顾客,可以吃包子了&quot;</span>);</span><br><span class="line">                        <span class="comment">//做好包子之后,调用notify方法,唤醒顾客吃包子</span></span><br><span class="line">                        <span class="comment">//obj.notify();//如果有多个等待线程,随机唤醒一个</span></span><br><span class="line">                        obj.notifyAll();<span class="comment">//唤醒所有等待的线程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-补充知识点"><a href="#3-5-补充知识点" class="headerlink" title="3. 5 补充知识点"></a>3. 5 补充知识点</h2><p>到此为止我们已经对线程状态有了基本的认识，想要有更多的了解，详情可以见下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423153220.png" alt="线程状态图"></p>
<p>一条有意思的tips:</p>
<blockquote>
<p>我们在翻阅API的时候会发现Timed Waiting（计时等待） 与 Waiting（无限等待） 状态联系还是很紧密的，<br>比如Waiting（无限等待） 状态中wait方法是空参的，而timed waiting（计时等待） 中wait方法是带参的。<br>这种带参的方法，其实是一种倒计时操作，相当于我们生活中的小闹钟，我们设定好时间，到时通知，可是<br>如果提前得到（唤醒）通知，那么设定好时间在通知也就显得多此一举了，那么这种设计方案其实是一举两<br>得。如果没有得到（唤醒）通知，那么线程就处于Timed Waiting状态,直到倒计时完毕自动醒来；如果在倒<br>计时期间得到（唤醒）通知，那么线程从Timed Waiting状态立刻唤醒。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>异常、线程</title>
    <url>/2021/04/22/2021-04-22%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="异常、线程"><a href="#异常、线程" class="headerlink" title="异常、线程"></a>异常、线程</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>异常、线程</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够辨别程序中异常和错误的区别</li>
<li><input disabled="" type="checkbox"> 说出异常的分类</li>
<li><input disabled="" type="checkbox"> 说出虚拟机处理异常的方式</li>
<li><input disabled="" type="checkbox"> 列举出常见的三个运行期异常</li>
<li><input disabled="" type="checkbox"> 能够使用try…catch关键字处理异常</li>
<li><input disabled="" type="checkbox"> 能够使用throws关键字处理异常</li>
<li><input disabled="" type="checkbox"> 能够自定义异常类</li>
<li><input disabled="" type="checkbox"> 能够处理自定义异常类</li>
<li><input disabled="" type="checkbox"> 说出进程的概念</li>
<li><input disabled="" type="checkbox"> 说出线程的概念</li>
<li><input disabled="" type="checkbox"> 能够理解并发与并行的区别</li>
<li><input disabled="" type="checkbox"> 能够开启新线程</li>
</ul>
<h1 id="第一章-异常"><a href="#第一章-异常" class="headerlink" title="第一章    异常"></a>第一章    异常</h1><h2 id="1-1-异常概念"><a href="#1-1-异常概念" class="headerlink" title="1.1 异常概念"></a>1.1 异常概念</h2><p>异常，就是不正常的意思。在生活中:医生说,你的身体某个部位有异常,该部位和正常相比有点不同,该部位的功能将受影响.在程序中的意思就是：</p>
<ul>
<li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li>
</ul>
<p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p>
<blockquote>
<p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p>
</blockquote>
<h2 id="1-2-异常体系"><a href="#1-2-异常体系" class="headerlink" title="1.2 异常体系"></a>1.2 异常体系</h2><p>异常机制其实是帮助我们<strong>找到</strong>程序中的问题，异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code>与<code>java.lang.Exception</code>，平常所说的异常指<code>java.lang.Exception</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422190815.png" alt="异常体系"></p>
<p><strong>Throwable体系：</strong></p>
<ul>
<li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免，好比绝症。</li>
<li><strong>Exception</strong>:表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。好比感冒、阑尾炎。</li>
</ul>
<p><strong>Throwable中的常用方法：</strong></p>
<ul>
<li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p>
<p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p>
</li>
<li><p><code>public String getMessage()</code>:获取发生异常的原因。</p>
<p><em>提示给用户的时候,就提示错误原因。</em></p>
</li>
<li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p>
</li>
</ul>
<p><strong><em>出现异常,不要紧张,把异常的简单类名,拷贝到API中去查。</em></strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422190934.bmp" alt="简单的异常查看"></p>
<h2 id="1-3-异常分类"><a href="#1-3-异常分类" class="headerlink" title="1.3 异常分类"></a>1.3 异常分类</h2><p>我们平常说的异常就是指Exception，因为这类异常一旦出现，我们就要对代码进行更正，修复程序。</p>
<p><strong>异常(Exception)的分类</strong>:根据在编译时期还是运行时期去检查异常?</p>
<ul>
<li><strong>编译时期异常</strong>:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)</li>
<li><strong>运行时期异常</strong>:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数学异常)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422190955.png" alt="异常的分类"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.lang.Throwable:类是 Java 语言中所有错误或异常的超类。</span></span><br><span class="line"><span class="comment">        Exception:编译期异常,进行编译(写代码)java程序出现的问题</span></span><br><span class="line"><span class="comment">            RuntimeException:运行期异常,java程序运行过程中出现的问题</span></span><br><span class="line"><span class="comment">            异常就相当于程序得了一个小毛病(感冒,发烧),把异常处理掉,程序可以继续执行(吃点药,继续革命工作)</span></span><br><span class="line"><span class="comment">        Error:错误</span></span><br><span class="line"><span class="comment">            错误就相当于程序得了一个无法治愈的毛病(非典,艾滋).必须修改源代码,程序才能继续执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="comment">/*throws ParseException*/</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Exception:编译期异常,进行编译(写代码)java程序出现的问题</span></span><br><span class="line">        <span class="comment">/*SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);//用来格式化日期</span></span><br><span class="line"><span class="comment">        Date date = null;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            date = sdf.parse(&quot;1999-0909&quot;);//把字符串格式的日期,解析为Date格式的日期</span></span><br><span class="line"><span class="comment">        &#125; catch (ParseException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println(date);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//RuntimeException:运行期异常,java程序运行过程中出现的问题</span></span><br><span class="line">        <span class="comment">/*int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">        //System.out.println(arr[0]);</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            //可能会出现异常的代码</span></span><br><span class="line"><span class="comment">            System.out.println(arr[3]);</span></span><br><span class="line"><span class="comment">        &#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">            //异常的处理逻辑</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Error:错误</span></span><br><span class="line"><span class="comment">            OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">            内存溢出的错误,创建的数组太大了,超出了给JVM分配的内存</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//int[] arr = new int[1024*1024*1024];</span></span><br><span class="line">        <span class="comment">//必须修改代码,创建的数组小一点</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-4-异常的产生过程解析"><a href="#1-4-异常的产生过程解析" class="headerlink" title="1.4     异常的产生过程解析"></a>1.4     异常的产生过程解析</h2><p>先运行下面的程序，程序会产生一个数组索引越界异常ArrayIndexOfBoundsException。我们通过图解来解析下异常产生的过程。</p>
<p> 工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTools</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对给定的数组通过给定的角标获取元素。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> element = arr[index];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">34</span>, <span class="number">12</span>, <span class="number">67</span> &#125;;</span><br><span class="line">        intnum = ArrayTools.getElement(arr, <span class="number">4</span>)</span><br><span class="line">        System.out.println(<span class="string">&quot;num=&quot;</span> + num);</span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述程序执行过程图解：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422192106.png" alt="异常产生过程"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210422192126.bmp" alt="01_异常的产生过程解析"></p>
<h1 id="第二章-异常的处理"><a href="#第二章-异常的处理" class="headerlink" title="第二章 异常的处理"></a>第二章 异常的处理</h1><p>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></p>
<h2 id="2-1-抛出异常throw"><a href="#2-1-抛出异常throw" class="headerlink" title="2.1     抛出异常throw"></a>2.1     抛出异常throw</h2><p>在编写程序时，我们必须要考虑程序出现问题的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式来告诉调用者。</p>
<p>在java中，提供了一个<strong>throw</strong>关键字，它用来抛出一个指定的异常对象。那么，抛出一个异常具体如何操作呢？</p>
<ol>
<li><p>创建一个异常对象。封装一些提示信息(信息可以自己编写)。</p>
</li>
<li><p>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字throw就可以完成。throw 异常对象。</p>
<p>throw<strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。</p>
</li>
</ol>
<p><strong>使用格式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">throw new 异常类名(参数);</span><br></pre></td></tr></table></figure>
<p> 例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;要访问的arr数组不存在&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;该索引在数组中不存在，已超出范围&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>学习完抛出异常的格式后，我们通过下面程序演示下throw的使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个数组 </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">52</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">//根据索引找对应的元素 </span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> element = getElement(arr, index);</span><br><span class="line"></span><br><span class="line">        System.out.println(element);</span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据 索引找到数组中对应的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index)</span></span>&#123; </span><br><span class="line">       	<span class="comment">//判断  索引是否越界</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">             判断条件如果满足，当执行完throw抛出异常对象后，方法已经无法继续运算。</span></span><br><span class="line"><span class="comment">             这时就会结束当前方法的执行，并将异常告知给调用者。这时就需要通过异常来解决。 </span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;哥们，角标越界了~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> element = arr[index];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果产生了问题，我们就会throw将问题描述类即异常进行抛出，也就是将问题返回给该方法的调用者。</p>
<p>那么对于调用者来说，该怎么处理呢？一种是进行捕获处理，另一种就是继续讲问题声明出去，使用throws声明处理。</p>
</blockquote>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Exception;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    throw关键字</span></span><br><span class="line"><span class="comment">    作用:</span></span><br><span class="line"><span class="comment">        可以使用throw关键字在指定的方法中抛出指定的异常</span></span><br><span class="line"><span class="comment">    使用格式:</span></span><br><span class="line"><span class="comment">        throw new xxxException(&quot;异常产生的原因&quot;);</span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">        1.throw关键字必须写在方法的内部</span></span><br><span class="line"><span class="comment">        2.throw关键字后边new的对象必须是Exception或者Exception的子类对象</span></span><br><span class="line"><span class="comment">        3.throw关键字抛出指定的异常对象,我们就必须处理这个异常对象</span></span><br><span class="line"><span class="comment">            throw关键字后边创建的是RuntimeException或者是 RuntimeException的子类对象,我们可以不处理,默认交给JVM处理(打印异常对象,中断程序)</span></span><br><span class="line"><span class="comment">            throw关键字后边创建的是编译异常(写代码的时候报错),我们就必须处理这个异常,要么throws,要么try...catch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Throw</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int[] arr = null;</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> e = getElement(arr,<span class="number">3</span>);</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,获取数组指定索引处的元素</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            int[] arr</span></span><br><span class="line"><span class="comment">            int index</span></span><br><span class="line"><span class="comment">        以后(工作中)我们首先必须对方法传递过来的参数进行合法性校验</span></span><br><span class="line"><span class="comment">        如果参数不合法,那么我们就必须使用抛出异常的方式,告知方法的调用者,传递的参数有问题</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            NullPointerException是一个运行期异常,我们不用处理,默认交给JVM处理</span></span><br><span class="line"><span class="comment">            ArrayIndexOutOfBoundsException是一个运行期异常,我们不用处理,默认交给JVM处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            我们可以对传递过来的参数数组,进行合法性校验</span></span><br><span class="line"><span class="comment">            如果数组arr的值是null</span></span><br><span class="line"><span class="comment">            那么我们就抛出空指针异常,告知方法的调用者&quot;传递的数组的值是null&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;传递的数组的值是null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            我们可以对传递过来的参数index进行合法性校验</span></span><br><span class="line"><span class="comment">            如果index的范围不在数组的索引范围内</span></span><br><span class="line"><span class="comment">            那么我们就抛出数组索引越界异常,告知方法的调用者&quot;传递的索引超出了数组的使用范围&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;传递的索引超出了数组的使用范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ele = arr[index];</span><br><span class="line">        <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-Objects非空判断"><a href="#2-2-Objects非空判断" class="headerlink" title="2.2 Objects非空判断"></a>2.2 Objects非空判断</h2><p>还记得我们学习过一个类Objects吗，曾经提到过它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），那么在它的源码中，对对象为null的值进行了抛出异常操作。</p>
<ul>
<li><code>public static &lt;T&gt; T requireNonNull(T obj)</code>:查看指定引用对象不是null。</li>
</ul>
<p>查看源码发现这里对为null的进行了抛出异常操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">      	<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Obects类中的静态方法</span></span><br><span class="line"><span class="comment">    public static &lt;T&gt; T requireNonNull(T obj):查看指定引用对象不是null。</span></span><br><span class="line"><span class="comment">    源码:</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; T requireNonNull(T obj) &#123;</span></span><br><span class="line"><span class="comment">            if (obj == null)</span></span><br><span class="line"><span class="comment">                throw new NullPointerException();</span></span><br><span class="line"><span class="comment">            return obj;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="comment">//对传递过来的参数进行合法性判断,判断是否为null</span></span><br><span class="line">        <span class="comment">/*if(obj == null)&#123;</span></span><br><span class="line"><span class="comment">            throw new NullPointerException(&quot;传递的对象的值是null&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Objects.requireNonNull(obj);</span></span><br><span class="line">        Objects.requireNonNull(obj,<span class="string">&quot;传递的对象的值是null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-声明异常throws"><a href="#2-3-声明异常throws" class="headerlink" title="2.3  声明异常throws"></a>2.3  声明异常throws</h2><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了编译时异常，而没有捕获处理（稍后讲解该方式），那么必须通过throws进行声明，让调用者去处理。</p>
<p>关键字<strong>throws</strong>运用于<code>方法声明之上</code>,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常).</p>
<p><strong>声明异常格式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2…&#123;   &#125;	</span><br></pre></td></tr></table></figure>
<p>声明异常的代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        read(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">&quot;a.txt&quot;</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件 </span></span><br><span class="line">            <span class="comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>throws用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在throws后面可以写多个异常类，用逗号隔开。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        read(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span><span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">&quot;a.txt&quot;</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件 </span></span><br><span class="line">            <span class="comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">&quot;b.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    throws关键字:异常处理的第一种方式,交给别人处理</span></span><br><span class="line"><span class="comment">    作用:</span></span><br><span class="line"><span class="comment">        当方法内部抛出异常对象的时候,那么我们就必须处理这个异常对象</span></span><br><span class="line"><span class="comment">        可以使用throws关键字处理异常对象,会把异常对象声明抛出给方法的调用者处理(自己不处理,给别人处理),最终交给JVM处理--&gt;中断处理</span></span><br><span class="line"><span class="comment">    使用格式:在方法声明时使用</span></span><br><span class="line"><span class="comment">        修饰符 返回值类型 方法名(参数列表) throws AAAExcepiton,BBBExcepiton...&#123;</span></span><br><span class="line"><span class="comment">            throw new AAAExcepiton(&quot;产生原因&quot;);</span></span><br><span class="line"><span class="comment">            throw new BBBExcepiton(&quot;产生原因&quot;);</span></span><br><span class="line"><span class="comment">            ...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     注意:</span></span><br><span class="line"><span class="comment">        1.throws关键字必须写在方法声明处</span></span><br><span class="line"><span class="comment">        2.throws关键字后边声明的异常必须是Exception或者是Exception的子类</span></span><br><span class="line"><span class="comment">        3.方法内部如果抛出了多个异常对象,那么throws后边必须也声明多个异常</span></span><br><span class="line"><span class="comment">            如果抛出的多个异常对象有子父类关系,那么直接声明父类异常即可</span></span><br><span class="line"><span class="comment">        4.调用了一个声明抛出异常的方法,我们就必须的处理声明的异常</span></span><br><span class="line"><span class="comment">            要么继续使用throws声明抛出,交给方法的调用者处理,最终交给JVM</span></span><br><span class="line"><span class="comment">            要么try...catch自己处理异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Throws</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        FileNotFoundException extends IOException extends Excepiton</span></span><br><span class="line"><span class="comment">        如果抛出的多个异常对象有子父类关系,那么直接声明父类异常即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//public static void main(String[] args) throws FileNotFoundException,IOException &#123;</span></span><br><span class="line">    <span class="comment">//public static void main(String[] args) throws IOException &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        readFile(<span class="string">&quot;c:\\a.tx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,对传递的文件路径进行合法性判断</span></span><br><span class="line"><span class="comment">        如果路径不是&quot;c:\\a.txt&quot;,那么我们就抛出文件找不到异常对象,告知方法的调用者</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            FileNotFoundException是编译异常,抛出了编译异常,就必须处理这个异常</span></span><br><span class="line"><span class="comment">            可以使用throws继续声明抛出FileNotFoundException这个异常对象,让方法的调用者处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!fileName.equals(<span class="string">&quot;c:\\a.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;传递的文件路径不是c:\\a.txt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果传递的路径,不是.txt结尾</span></span><br><span class="line"><span class="comment">            那么我们就抛出IO异常对象,告知方法的调用者,文件的后缀名不对</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;文件的后缀名不对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;路径没有问题,读取文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-4-捕获异常try…catch"><a href="#2-4-捕获异常try…catch" class="headerlink" title="2.4  捕获异常try…catch"></a>2.4  捕获异常try…catch</h2><p>如果异常出现的话,会立刻终止程序,所以我们得处理异常:</p>
<ol>
<li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。</li>
<li>在方法中使用try-catch的语句块来处理异常。</li>
</ol>
<p><strong>try-catch</strong>的方式就是捕获异常。</p>
<ul>
<li><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</li>
</ul>
<p>捕获异常语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型  e)&#123;</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p>
<p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p>
<blockquote>
<p>注意:try和catch都不能单独使用,必须连用。</p>
</blockquote>
<p>演示如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 当产生异常时，必须有处理方式。要么捕获，要么声明。</span></span><br><span class="line">            read(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;<span class="comment">// 括号中需要定义什么呢？</span></span><br><span class="line">          	<span class="comment">//try中抛出的是什么异常，在括号中就定义什么异常类型</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们 当前的这个方法中 有异常  有编译期异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">&quot;a.txt&quot;</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件 </span></span><br><span class="line">            <span class="comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何获取异常信息：</p>
<p>Throwable类中定义了一些查看方法:</p>
<ul>
<li><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</li>
</ul>
<ul>
<li><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</li>
<li><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</li>
</ul>
<p>​            <em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    try...catch:异常处理的第二种方式,自己处理异常</span></span><br><span class="line"><span class="comment">    格式:</span></span><br><span class="line"><span class="comment">        try&#123;</span></span><br><span class="line"><span class="comment">            可能产生异常的代码</span></span><br><span class="line"><span class="comment">        &#125;catch(定义一个异常的变量,用来接收try中抛出的异常对象)&#123;</span></span><br><span class="line"><span class="comment">            异常的处理逻辑,异常异常对象之后,怎么处理异常对象</span></span><br><span class="line"><span class="comment">            一般在工作中,会把异常的信息记录到一个日志中</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        ...</span></span><br><span class="line"><span class="comment">        catch(异常类名 变量名)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">        1.try中可能会抛出多个异常对象,那么就可以使用多个catch来处理这些异常对象</span></span><br><span class="line"><span class="comment">        2.如果try中产生了异常,那么就会执行catch中的异常处理逻辑,执行完毕catch中的处理逻辑,继续执行try...catch之后的代码</span></span><br><span class="line"><span class="comment">          如果try中没有产生异常,那么就不会执行catch中异常的处理逻辑,执行完try中的代码,继续执行try...catch之后的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TryCatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//可能产生异常的代码</span></span><br><span class="line">            readFile(<span class="string">&quot;d:\\a.tx&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;资源释放&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;<span class="comment">//try中抛出什么异常对象,catch就定义什么异常变量,用来接收这个异常对象</span></span><br><span class="line">            <span class="comment">//异常的处理逻辑,异常异常对象之后,怎么处理异常对象</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;catch - 传递的文件后缀不是.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                Throwable类中定义了3个异常处理的方法</span></span><br><span class="line"><span class="comment">                 String getMessage() 返回此 throwable 的简短描述。</span></span><br><span class="line"><span class="comment">                 String toString() 返回此 throwable 的详细消息字符串。</span></span><br><span class="line"><span class="comment">                 void printStackTrace()  JVM打印异常对象,默认此方法,打印的异常信息是最全面的</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//System.out.println(e.getMessage());//文件的后缀名不对</span></span><br><span class="line">            <span class="comment">//System.out.println(e.toString());//重写Object类的toString java.io.IOException: 文件的后缀名不对</span></span><br><span class="line">            <span class="comment">//System.out.println(e);//java.io.IOException: 文件的后缀名不对</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                java.io.IOException: 文件的后缀名不对</span></span><br><span class="line"><span class="comment">                    at com.itheima.demo02.Exception.Demo01TryCatch.readFile(Demo01TryCatch.java:55)</span></span><br><span class="line"><span class="comment">                    at com.itheima.demo02.Exception.Demo01TryCatch.main(Demo01TryCatch.java:27)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       如果传递的路径,不是.txt结尾</span></span><br><span class="line"><span class="comment">       那么我们就抛出IO异常对象,告知方法的调用者,文件的后缀名不对</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;文件的后缀名不对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;路径没有问题,读取文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-finally-代码块"><a href="#2-4-finally-代码块" class="headerlink" title="2.4 finally 代码块"></a>2.4 finally 代码块</h2><p><strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，在finally代码块中存放的代码都是一定会被执行的。</p>
<p>什么时候的代码必须最终执行？</p>
<p>当我们在try语句块中打开了一些物理资源(磁盘文件/网络连接/数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p>
<p>finally的语法:</p>
<p> try…catch….finally:自身需要处理异常,最终还得关闭资源。</p>
<blockquote>
<p>注意:finally不能单独使用。</p>
</blockquote>
<p>比如在我们之后学习的IO流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。</p>
<p>finally代码参考如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//抓取到的是编译期异常  抛出去的是运行期 </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不管程序怎样，这里都将会被执行。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们 当前的这个方法中 有异常  有编译期异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">&quot;a.txt&quot;</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件 </span></span><br><span class="line">            <span class="comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当只有在try或者catch中调用退出JVM的相关方法,此时finally才不会执行,否则finally永远会执行。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423090127.bmp" alt="死了都要try"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    finally代码块</span></span><br><span class="line"><span class="comment">     格式:</span></span><br><span class="line"><span class="comment">        try&#123;</span></span><br><span class="line"><span class="comment">            可能产生异常的代码</span></span><br><span class="line"><span class="comment">        &#125;catch(定义一个异常的变量,用来接收try中抛出的异常对象)&#123;</span></span><br><span class="line"><span class="comment">            异常的处理逻辑,异常异常对象之后,怎么处理异常对象</span></span><br><span class="line"><span class="comment">            一般在工作中,会把异常的信息记录到一个日志中</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        ...</span></span><br><span class="line"><span class="comment">        catch(异常类名 变量名)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;finally&#123;</span></span><br><span class="line"><span class="comment">            无论是否出现异常都会执行</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     注意:</span></span><br><span class="line"><span class="comment">        1.finally不能单独使用,必须和try一起使用</span></span><br><span class="line"><span class="comment">        2.finally一般用于资源释放(资源回收),无论程序是否出现异常,最后都要资源释放(IO)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02TryCatchFinally</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能会产生异常的代码</span></span><br><span class="line">            readFile(<span class="string">&quot;c:\\a.tx&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//无论是否出现异常,都会执行</span></span><br><span class="line">            System.out.println(<span class="string">&quot;资源释放&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       如果传递的路径,不是.txt结尾</span></span><br><span class="line"><span class="comment">       那么我们就抛出IO异常对象,告知方法的调用者,文件的后缀名不对</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;文件的后缀名不对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;路径没有问题,读取文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-5-异常注意事项"><a href="#2-5-异常注意事项" class="headerlink" title="2.5   异常注意事项"></a>2.5   异常注意事项</h2><ul>
<li><p>多个异常使用捕获又该如何处理呢？</p>
<ol>
<li>多个异常分别处理。</li>
<li>多个异常一次捕获，多次处理。</li>
<li>多个异常一次捕获一次处理。</li>
</ol>
<p>一般我们是使用一次捕获多次处理方式，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型A  e)&#123;  当<span class="keyword">try</span>中出现A类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型B  e)&#123;  当<span class="keyword">try</span>中出现B类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。（若父类在上，相当于多态，所以下面的子类异常根本没有被捕获）</p>
</blockquote>
</li>
</ul>
<ul>
<li>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</li>
<li>如果finally有return语句,永远返回finally中的结果,避免该情况. </li>
<li>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</li>
<li>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</li>
<li>子类继承父类只能抛出范围小于等于父类的异常（子类或者本身）</li>
</ul>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    异常的注意事项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            多个异常使用捕获又该如何处理呢？</span></span><br><span class="line"><span class="comment">            1. 多个异常分别处理。</span></span><br><span class="line"><span class="comment">            2. 多个异常一次捕获，多次处理。</span></span><br><span class="line"><span class="comment">            3. 多个异常一次捕获一次处理。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 多个异常分别处理。</span></span><br><span class="line">       <span class="comment">/* try &#123;</span></span><br><span class="line"><span class="comment">            int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">            System.out.println(arr[3]);//ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"><span class="comment">        &#125;catch (ArrayIndexOutOfBoundsException e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        try&#123;</span></span><br><span class="line"><span class="comment">            List&lt;Integer&gt; list = List.of(1, 2, 3);</span></span><br><span class="line"><span class="comment">            System.out.println(list.get(3));//IndexOutOfBoundsException: Index 3 out-of-bounds for length 3</span></span><br><span class="line"><span class="comment">        &#125;catch (IndexOutOfBoundsException e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 多个异常一次捕获，多次处理。</span></span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">            //System.out.println(arr[3]);//ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"><span class="comment">            List&lt;Integer&gt; list = List.of(1, 2, 3);</span></span><br><span class="line"><span class="comment">            System.out.println(list.get(3));//IndexOutOfBoundsException: Index 3 out-of-bounds for length 3</span></span><br><span class="line"><span class="comment">        &#125;catch (ArrayIndexOutOfBoundsException e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;catch (IndexOutOfBoundsException e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            一个try多个catch注意事项:</span></span><br><span class="line"><span class="comment">                catch里边定义的异常变量,如果有子父类关系,那么子类的异常变量必须写在上边,否则就会报错</span></span><br><span class="line"><span class="comment">                ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">            //System.out.println(arr[3]);//ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"><span class="comment">            List&lt;Integer&gt; list = List.of(1, 2, 3);</span></span><br><span class="line"><span class="comment">            System.out.println(list.get(3));//IndexOutOfBoundsException: Index 3 out-of-bounds for length 3</span></span><br><span class="line"><span class="comment">        &#125;catch (IndexOutOfBoundsException e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;catch (ArrayIndexOutOfBoundsException e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 多个异常一次捕获一次处理。</span></span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">            //System.out.println(arr[3]);//ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"><span class="comment">            List&lt;Integer&gt; list = List.of(1, 2, 3);</span></span><br><span class="line"><span class="comment">            System.out.println(list.get(3));//IndexOutOfBoundsException: Index 3 out-of-bounds for length 3</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(e);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行时异常被抛出可以不处理。即不捕获也不声明抛出。</span></span><br><span class="line">        <span class="comment">//默认给虚拟机处理,终止程序,什么时候不抛出运行时异常了,在来继续执行程序</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);<span class="comment">//ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>));<span class="comment">//IndexOutOfBoundsException: Index 3 out-of-bounds for length 3</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Exception;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果finally有return语句,永远返回finally中的结果,避免该情况.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = getA();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法,返回变量a的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//一定会执行的代码</span></span><br><span class="line">            a = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Exception;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    子父类的异常:</span></span><br><span class="line"><span class="comment">        - 如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</span></span><br><span class="line"><span class="comment">        - 父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">        父类异常时什么样,子类异常就什么样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException,ClassCastException</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> <span class="keyword">throws</span> IndexOutOfBoundsException</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> <span class="keyword">throws</span> IndexOutOfBoundsException</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="comment">//子类重写父类方法时,抛出和父类相同的异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException,ClassCastException</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//子类重写父类方法时,抛出父类异常的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> <span class="keyword">throws</span> ArrayIndexOutOfBoundsException</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//子类重写父类方法时,不抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//public void show04() throws Exception&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时子类产生该异常，只能捕获处理，不能声明抛出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show04</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">&quot;编译期异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第三章-自定义异常"><a href="#第三章-自定义异常" class="headerlink" title="第三章 自定义异常"></a>第三章 自定义异常</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p><strong>为什么需要自定义异常类:</strong></p>
<p>我们说了Java中不同的异常类,分别表示着某一种具体的异常情况,那么在开发中总是有些异常情况是SUN没有定义好的,此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题,考试成绩负数问题等等。</p>
<p>在上述代码中，发现这些异常都是JDK内部定义好的，但是实际开发中也会出现很多异常,这些异常很可能在JDK中没有定义过,例如年龄负数问题,考试成绩负数问题.那么能不能自己定义异常呢？</p>
<p><strong>什么是自定义异常类:</strong></p>
<p>在开发中根据自己业务的异常情况来定义异常类.</p>
<p>自定义一个业务逻辑异常: <strong>RegisterException</strong>。一个注册异常类。</p>
<p><strong>异常类如何定义:</strong></p>
<ol>
<li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li>
<li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li>
</ol>
<h2 id="3-2-自定义异常的练习"><a href="#3-2-自定义异常的练习" class="headerlink" title="3.2 自定义异常的练习"></a>3.2 自定义异常的练习</h2><p>要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p>
<p>首先定义一个登陆异常类RegisterException：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 表示异常提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟数据库中已存在账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] names = &#123;<span class="string">&quot;bill&quot;</span>,<span class="string">&quot;hill&quot;</span>,<span class="string">&quot;jill&quot;</span>&#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;     </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">            checkUsername(<span class="string">&quot;nill&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功&quot;</span>);<span class="comment">//如果没有异常就是注册成功</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(RegisterException e)&#123;</span><br><span class="line">            <span class="comment">//处理异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断当前注册账号是否存在</span></span><br><span class="line">    <span class="comment">//因为是编译期异常，又想调用者去处理 所以声明该异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(String uname)</span> <span class="keyword">throws</span> LoginException</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.equals(uname))&#123;<span class="comment">//如果名字在这里面 就抛出登陆异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">&quot;亲&quot;</span>+name+<span class="string">&quot;已经被注册了！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.MyException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    自定义异常类:</span></span><br><span class="line"><span class="comment">        java提供的异常类,不够我们使用,需要自己定义一些异常类</span></span><br><span class="line"><span class="comment">    格式:</span></span><br><span class="line"><span class="comment">        public class XXXExcepiton extends Exception | RuntimeException&#123;</span></span><br><span class="line"><span class="comment">            添加一个空参数的构造方法</span></span><br><span class="line"><span class="comment">            添加一个带异常信息的构造方法</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     注意:</span></span><br><span class="line"><span class="comment">        1.自定义异常类一般都是以Exception结尾,说明该类是一个异常类</span></span><br><span class="line"><span class="comment">        2.自定义异常类,必须的继承Exception或者RuntimeException</span></span><br><span class="line"><span class="comment">            继承Exception:那么自定义的异常类就是一个编译期异常,如果方法内部抛出了编译期异常,就必须处理这个异常,要么throws,要么try...catch</span></span><br><span class="line"><span class="comment">            继承RuntimeException:那么自定义的异常类就是一个运行期异常,无需处理,交给虚拟机处理(中断处理)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> /*<span class="title">Exception</span>*/ <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="comment">//添加一个空参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        添加一个带异常信息的构造方法</span></span><br><span class="line"><span class="comment">        查看源码发现,所有的异常类都会有一个带异常信息的构造方法,</span></span><br><span class="line"><span class="comment">        方法内部会调用父类带异常信息的构造方法,</span></span><br><span class="line"><span class="comment">        让父类来处理这个异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.MyException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    分析:</span></span><br><span class="line"><span class="comment">        1.使用数组保存已经注册过的用户名(数据库)</span></span><br><span class="line"><span class="comment">        2.使用Scanner获取用户输入的注册的用户名(前端,页面)</span></span><br><span class="line"><span class="comment">        3.定义一个方法,对用户输入的中注册的用户名进行判断</span></span><br><span class="line"><span class="comment">            遍历存储已经注册过用户名的数组,获取每一个用户名</span></span><br><span class="line"><span class="comment">            使用获取到的用户名和用户输入的用户名比较</span></span><br><span class="line"><span class="comment">                true:</span></span><br><span class="line"><span class="comment">                    用户名已经存在,抛出RegisterException异常,告知用户&quot;亲，该用户名已经被注册&quot;;</span></span><br><span class="line"><span class="comment">                false:</span></span><br><span class="line"><span class="comment">                    继续遍历比较</span></span><br><span class="line"><span class="comment">            如果循环结束了,还没有找到重复的用户名,提示用户&quot;恭喜您,注册成功!&quot;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02RegisterException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.使用数组保存已经注册过的用户名(数据库)</span></span><br><span class="line">    <span class="keyword">static</span> String[] usernames = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2.使用Scanner获取用户输入的注册的用户名(前端,页面)</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您要注册的用户名:&quot;</span>);</span><br><span class="line">        String username = sc.next();</span><br><span class="line">        checkUsername(username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义一个方法,对用户输入的中注册的用户名进行判断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkUsername</span><span class="params">(String username)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//遍历存储已经注册过用户名的数组,获取每一个用户名</span></span><br><span class="line">        <span class="keyword">for</span> (String name : usernames) &#123;</span><br><span class="line">            <span class="comment">//使用获取到的用户名和用户输入的用户名比较</span></span><br><span class="line">            <span class="keyword">if</span>(name.equals(username))&#123;</span><br><span class="line">                <span class="comment">//true:用户名已经存在,抛出RegisterException异常,告知用户&quot;亲，该用户名已经被注册&quot;;</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">&quot;亲，该用户名已经被注册&quot;</span>);<span class="comment">//注意：这儿的RegisterException 已经被重写成RuntimeException抛出运行期异常,无需处理,交给JVM处理,中断处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果循环结束了,还没有找到重复的用户名,提示用户&quot;恭喜您,注册成功!&quot;;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜您,注册成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo04.MyException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    分析:</span></span><br><span class="line"><span class="comment">        1.使用数组保存已经注册过的用户名(数据库)</span></span><br><span class="line"><span class="comment">        2.使用Scanner获取用户输入的注册的用户名(前端,页面)</span></span><br><span class="line"><span class="comment">        3.定义一个方法,对用户输入的中注册的用户名进行判断</span></span><br><span class="line"><span class="comment">            遍历存储已经注册过用户名的数组,获取每一个用户名</span></span><br><span class="line"><span class="comment">            使用获取到的用户名和用户输入的用户名比较</span></span><br><span class="line"><span class="comment">                true:</span></span><br><span class="line"><span class="comment">                    用户名已经存在,抛出RegisterException异常,告知用户&quot;亲，该用户名已经被注册&quot;;</span></span><br><span class="line"><span class="comment">                false:</span></span><br><span class="line"><span class="comment">                    继续遍历比较</span></span><br><span class="line"><span class="comment">            如果循环结束了,还没有找到重复的用户名,提示用户&quot;恭喜您,注册成功!&quot;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo01RegisterException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.使用数组保存已经注册过的用户名(数据库)</span></span><br><span class="line">    <span class="keyword">static</span> String[] usernames = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="comment">/*throws RegisterException*/</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2.使用Scanner获取用户输入的注册的用户名(前端,页面)</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您要注册的用户名:&quot;</span>);</span><br><span class="line">        String username = sc.next();</span><br><span class="line">        checkUsername(username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义一个方法,对用户输入的中注册的用户名进行判断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkUsername</span><span class="params">(String username)</span> <span class="comment">/*throws RegisterException*/</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历存储已经注册过用户名的数组,获取每一个用户名</span></span><br><span class="line">        <span class="keyword">for</span> (String name : usernames) &#123;</span><br><span class="line">            <span class="comment">//使用获取到的用户名和用户输入的用户名比较</span></span><br><span class="line">            <span class="keyword">if</span>(name.equals(username))&#123;</span><br><span class="line">                <span class="comment">//true:用户名已经存在,抛出RegisterException异常,告知用户&quot;亲，该用户名已经被注册&quot;;</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">&quot;亲，该用户名已经被注册&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RegisterException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">//结束方法</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果循环结束了,还没有找到重复的用户名,提示用户&quot;恭喜您,注册成功!&quot;;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜您,注册成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==========================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义异常，重写RegisterException</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo04.MyException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    自定义异常类:</span></span><br><span class="line"><span class="comment">        java提供的异常类,不够我们使用,需要自己定义一些异常类</span></span><br><span class="line"><span class="comment">    格式:</span></span><br><span class="line"><span class="comment">        public class XXXExcepiton extends Exception | RuntimeException&#123;</span></span><br><span class="line"><span class="comment">            添加一个空参数的构造方法</span></span><br><span class="line"><span class="comment">            添加一个带异常信息的构造方法</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     注意:</span></span><br><span class="line"><span class="comment">        1.自定义异常类一般都是以Exception结尾,说明该类是一个异常类</span></span><br><span class="line"><span class="comment">        2.自定义异常类,必须的继承Exception或者RuntimeException</span></span><br><span class="line"><span class="comment">            继承Exception:那么自定义的异常类就是一个编译期异常,如果方法内部抛出了编译期异常,就必须处理这个异常,要么throws,要么try...catch</span></span><br><span class="line"><span class="comment">            继承RuntimeException:那么自定义的异常类就是一个运行期异常,无需处理,交给虚拟机处理(中断处理)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> /*<span class="title">Exception</span>*/ <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="comment">//添加一个空参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        添加一个带异常信息的构造方法</span></span><br><span class="line"><span class="comment">        查看源码发现,所有的异常类都会有一个带异常信息的构造方法,</span></span><br><span class="line"><span class="comment">        方法内部会调用父类带异常信息的构造方法,</span></span><br><span class="line"><span class="comment">        让父类来处理这个异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="第四章-多线程"><a href="#第四章-多线程" class="headerlink" title="第四章 多线程"></a>第四章 多线程</h1><p>我们在之前，学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那现在想要设计一个程序，边打游戏边听歌，怎么设计？</p>
<p>要解决上述问题,咱们得使用多进程或者多线程来解决.</p>
<h2 id="4-1-并发与并行"><a href="#4-1-并发与并行" class="headerlink" title="4.1 并发与并行"></a>4.1 并发与并行</h2><ul>
<li><strong>并发</strong>：指两个或多个事件在**<code>同一个时间段内</code>**发生。</li>
<li><strong>并行</strong>：指两个或多个事件在**<code>同一时刻</code>**发生（同时发生）。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423095437.bmp" alt="并行与并发"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423095831.bmp" alt="02_并发与并行"></p>
<p>在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有多个程序同时运行，这在<code>单 CPU 系统中</code>，每一时刻只能有一道程序执行，即微观上这些程序是分时的<code>交替运行</code>，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p>
<p>而在<code>多个 CPU 系统中</code>，则这些可以并发执行的程序便可以分配到多个处理器上（CPU），实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核 越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p>
<blockquote>
<p>注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p>
</blockquote>
<h2 id="4-2-线程与进程"><a href="#4-2-线程与进程" class="headerlink" title="4.2 线程与进程"></a>4.2 线程与进程</h2><ul>
<li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p>
</li>
<li><p><strong>线程</strong>：线程是进程中的一个<code>执行单元</code>，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。 </p>
<p>简而言之：一个程序运行后至少有一个进程，<code>一个进程中可以包含多个线程 </code></p>
</li>
</ul>
<p>我们可以再电脑底部任务栏，右键—–&gt;打开任务管理器,可以查看当前任务的进程：</p>
<p><strong>进程</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423095657.png" alt="进程概念"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423100118.bmp" alt="03_进程概念"></p>
<p><strong>线程</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423100140.png" alt="线程概念"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423100738.bmp" alt="04_线程概念"></p>
<p><strong>线程调度:</strong></p>
<ul>
<li><p>分时调度</p>
<p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p>
</li>
<li><p>抢占式调度</p>
<p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p>
<ul>
<li>设置线程的优先级</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423103047.bmp" alt="设置线程优先级"></p>
<ul>
<li><p>抢占式调度详解</p>
<p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。此时，这些程序是在同时运行，”感觉这些软件好像在同一时刻运行着“。</p>
<p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。<br>其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423103456.bmp" alt="抢占式调度"></p>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423103956.bmp" alt="05_主线程"></p>
<p><code>demo in class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Thread;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    主线程:执行主(main)方法的线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    单线程程序:java程序中只有一个线程</span></span><br><span class="line"><span class="comment">    执行从main方法开始,从上到下依次执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    JVM执行main方法,main方法会进入到栈内存</span></span><br><span class="line"><span class="comment">    JVM会找操作系统开辟一条main方法通向cpu的执行路径</span></span><br><span class="line"><span class="comment">    cpu就可以通过这个路径来执行main方法</span></span><br><span class="line"><span class="comment">    而这个路径有一个名字,叫main(主)线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MainThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;小强&quot;</span>);</span><br><span class="line">        p1.run();</span><br><span class="line">        System.out.println(<span class="number">0</span>/<span class="number">0</span>);<span class="comment">//ArithmeticException: / by zero</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;旺财&quot;</span>);</span><br><span class="line">        p2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==========================================*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo05.Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义循环,执行20次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;--&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="4-3-创建线程类"><a href="#4-3-创建线程类" class="headerlink" title="4.3 创建线程类"></a>4.3 创建线程类</h2><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p>
<ol>
<li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</li>
<li>创建Thread子类的实例，即创建了线程对象</li>
<li>调用线程对象的start()方法来启动该线程</li>
</ol>
<p>代码如下：</p>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建自定义线程对象</span></span><br><span class="line">		MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">&quot;新的线程！&quot;</span>);</span><br><span class="line">		<span class="comment">//开启新线程</span></span><br><span class="line">		mt.start();</span><br><span class="line">		<span class="comment">//在主方法中执行for循环</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;main线程！&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义线程类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义指定线程名称的构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//调用父类的String参数的构造方法，指定线程的名称</span></span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 重写run方法，完成该线程执行的逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			System.out.println(getName()+<span class="string">&quot;：正在执行！&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>demo in class </code></p>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06.Thread;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建多线程程序的第一种方式:创建Thread类的子类</span></span><br><span class="line"><span class="comment">    java.lang.Thread类:是描述线程的类,我们想要实现多线程程序,就必须继承Thread类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.创建一个Thread类的子类</span></span><br><span class="line"><span class="comment">        2.在Thread类的子类中重写Thread类中的run方法,设置线程任务(开启线程要做什么?)</span></span><br><span class="line"><span class="comment">        3.创建Thread类的子类对象</span></span><br><span class="line"><span class="comment">        4.调用Thread类中的方法start方法,开启新的线程,执行run方法</span></span><br><span class="line"><span class="comment">             void start() 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</span></span><br><span class="line"><span class="comment">             结果是两个线程并发地运行；当前线程（main线程）和另一个线程（创建的新线程,执行其 run 方法）。</span></span><br><span class="line"><span class="comment">             多次启动一个线程是非法的。特别是当线程已经结束执行后，不能再重新启动。</span></span><br><span class="line"><span class="comment">    java程序属于抢占式调度,那个线程的优先级高,那个线程优先执行;同一个优先级,随机选择一个执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Thread类的子类对象</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//4.调用Thread类中的方法start方法,开启新的线程,执行run方法</span></span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义线程类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06.Thread;</span><br><span class="line"><span class="comment">//1.创建一个Thread类的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.在Thread类的子类中重写Thread类中的run方法,设置线程任务(开启线程要做什么?)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池、Lambda表达式</title>
    <url>/2021/04/23/2021-04-23-%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92%E6%A1%88%E4%BE%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="线程池、Lambda表达式"><a href="#线程池、Lambda表达式" class="headerlink" title="线程池、Lambda表达式"></a>线程池、Lambda表达式</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>  等待与唤醒案例</li>
<li>  线程池</li>
<li>  Lambda表达式</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够理解线程通信概念</li>
<li><input disabled="" type="checkbox"> 能够理解等待唤醒机制</li>
<li><input disabled="" type="checkbox"> 能够描述Java中线程池运行原理</li>
<li><input disabled="" type="checkbox"> 能够理解函数式编程相对于面向对象的优点</li>
<li><input disabled="" type="checkbox"> 能够掌握Lambda表达式的标准格式</li>
<li><input disabled="" type="checkbox"> 能够使用Lambda标准格式使用Runnable与Comparator接口</li>
<li><input disabled="" type="checkbox"> 能够掌握Lambda表达式的省略格式与规则</li>
<li><input disabled="" type="checkbox"> 能够使用Lambda省略格式使用Runnable与Comparator接口</li>
<li><input disabled="" type="checkbox"> 能够通过Lambda的标准格式使用自定义的接口（有且仅有一个抽象方法）</li>
<li><input disabled="" type="checkbox"> 能够通过Lambda的省略格式使用自定义的接口（有且仅有一个抽象方法）</li>
<li><input disabled="" type="checkbox"> 能够明确Lambda的两项使用前提</li>
</ul>
<h1 id="第一章-等待唤醒机制"><a href="#第一章-等待唤醒机制" class="headerlink" title="第一章 等待唤醒机制"></a>第一章 等待唤醒机制</h1><h2 id="1-1-线程间通信"><a href="#1-1-线程间通信" class="headerlink" title="1.1 线程间通信"></a>1.1 线程间通信</h2><p><strong>概念：</strong>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同。</p>
<p>比如：线程A用来生成包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423155929.bmp" alt="线程间通信"></p>
<p><strong>为什么要处理线程间通信：</strong></p>
<p>多个线程并发执行时, 在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务，并且我们希望他们有规律的执行, 那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p>
<p><strong>如何保证线程间通信有效利用资源：</strong></p>
<p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。 就是多个线程在操作同一份数据时， 避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即—— <strong>等待唤醒机制。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423161040.bmp" alt="01_等待与唤醒案例分析(1)"></p>
<h2 id="1-2-等待唤醒机制"><a href="#1-2-等待唤醒机制" class="headerlink" title="1.2 等待唤醒机制"></a>1.2 等待唤醒机制</h2><p><strong>什么是等待唤醒机制</strong></p>
<p>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。就好比在公司里你和你的同事们，你们可能存在在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p>
<p>就是在一个线程进行了规定操作后，就进入等待状态（<strong>wait()**）， 等待其他线程执行完他们的指定代码过后 再将其唤醒（</strong>notify()**）;在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。</p>
<p>wait/notify 就是线程间的一种协作机制。</p>
<p><strong>等待唤醒中的方法</strong></p>
<p>等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义如下：</p>
<ol>
<li>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是“<strong>通知（notify）</strong>”在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</li>
<li>notify：则选取所通知对象的 wait set 中的一个线程释放；例如，餐馆有空位置后，等候就餐最久的顾客最先入座。</li>
<li>notifyAll：则释放所通知对象的 wait set 上的全部线程。</li>
</ol>
<blockquote>
<p>注意：</p>
<p>哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用 wait 方法之后的地方恢复执行。</p>
<p>总结如下：</p>
<ul>
<li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态；</li>
<li>否则，从 wait set 出来，又进入 entry set，线程就从 WAITING 状态又变成 BLOCKED 状态</li>
</ul>
</blockquote>
<p><strong>调用wait和notify方法需要注意的细节</strong></p>
<ol>
<li>wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li>
<li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li>
<li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</li>
</ol>
<h2 id="1-3-生产者与消费者问题"><a href="#1-3-生产者与消费者问题" class="headerlink" title="1.3 生产者与消费者问题"></a>1.3 生产者与消费者问题</h2><p>等待唤醒机制其实就是经典的“生产者与消费者”的问题。</p>
<p><code>包子铺线程和包子线程处于通信（互斥）关系，必须同时同步技术保证两个线程只有一个在执行；锁对象必须保证唯一，可以使用包子对象作为锁对象</code></p>
<p>就拿生产包子消费包子来说等待唤醒机制如何有效利用资源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">包子铺线程生产包子，吃货线程消费包子。</span><br><span class="line">当包子没有时（包子状态为<span class="keyword">false</span>），吃货线程等待，包子铺线程生产包子（即包子状态为<span class="keyword">true</span>），并通知吃货线程（解除吃货的等待状态）,因为已经有包子了，那么包子铺线程进入等待状态。</span><br><span class="line">接下来，吃货线程能否进一步执行则取决于锁的获取情况。</span><br><span class="line">如果吃货获取到锁，那么就执行吃包子动作，包子吃完（包子状态为<span class="keyword">false</span>），并通知包子铺线程（解除包子铺的等待状态）,吃货线程进入等待。</span><br><span class="line">包子铺线程能否进一步执行则取决于锁的获取情况。</span><br></pre></td></tr></table></figure>
<p><strong>代码演示：</strong></p>
<p>包子资源类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>&#123;</span><br><span class="line">     String  pier ;</span><br><span class="line">     String  xianer ;</span><br><span class="line">     <span class="keyword">boolean</span>  flag = <span class="keyword">false</span> ;<span class="comment">//包子资源 是否存在  包子资源状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>吃货线程类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(String name,BaoZi bz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">false</span>)&#123;<span class="comment">//没包子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货正在吃&quot;</span>+bz.pier+bz.xianer+<span class="string">&quot;包子&quot;</span>);</span><br><span class="line">                bz.flag = <span class="keyword">false</span>;</span><br><span class="line">                bz.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>包子铺线程类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(String name,BaoZi bz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//造包子</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">true</span>)&#123;<span class="comment">//包子资源  存在</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                        bz.wait();</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 没有包子  造包子</span></span><br><span class="line">                System.out.println(<span class="string">&quot;包子铺开始做包子&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(count%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 冰皮  五仁</span></span><br><span class="line">                    bz.pier = <span class="string">&quot;冰皮&quot;</span>;</span><br><span class="line">                    bz.xianer = <span class="string">&quot;五仁&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 薄皮  牛肉大葱</span></span><br><span class="line">                    bz.pier = <span class="string">&quot;薄皮&quot;</span>;</span><br><span class="line">                    bz.xianer = <span class="string">&quot;牛肉大葱&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">                bz.flag=<span class="keyword">true</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;包子造好了：&quot;</span>+bz.pier+bz.xianer);</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货来吃吧&quot;</span>);</span><br><span class="line">                <span class="comment">//唤醒等待线程 （吃货）</span></span><br><span class="line">                bz.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//等待唤醒案例</span></span><br><span class="line">        BaoZi bz = <span class="keyword">new</span> BaoZi();</span><br><span class="line"></span><br><span class="line">        ChiHuo ch = <span class="keyword">new</span> ChiHuo(<span class="string">&quot;吃货&quot;</span>,bz);</span><br><span class="line">        BaoZiPu bzp = <span class="keyword">new</span> BaoZiPu(<span class="string">&quot;包子铺&quot;</span>,bz);</span><br><span class="line"></span><br><span class="line">        ch.start();</span><br><span class="line">        bzp.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">包子铺开始做包子</span><br><span class="line">包子造好了：冰皮五仁</span><br><span class="line">吃货来吃吧</span><br><span class="line">吃货正在吃冰皮五仁包子</span><br><span class="line">包子铺开始做包子</span><br><span class="line">包子造好了：薄皮牛肉大葱</span><br><span class="line">吃货来吃吧</span><br><span class="line">吃货正在吃薄皮牛肉大葱包子</span><br><span class="line">包子铺开始做包子</span><br><span class="line">包子造好了：冰皮五仁</span><br><span class="line">吃货来吃吧</span><br><span class="line">吃货正在吃冰皮五仁包子</span><br></pre></td></tr></table></figure>
<h1 id="第二章-线程池"><a href="#第二章-线程池" class="headerlink" title="第二章 线程池"></a>第二章 线程池</h1><h2 id="2-1-线程池思想概述"><a href="#2-1-线程池思想概述" class="headerlink" title="2.1 线程池思想概述"></a>2.1 线程池思想概述</h2><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：</p>
<p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>
<p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p>
<p>在Java中可以通过线程池来达到这样的效果。今天我们就来详细讲解一下Java的线程池。</p>
<h2 id="2-2-线程池概念"><a href="#2-2-线程池概念" class="headerlink" title="2.2 线程池概念"></a>2.2 线程池概念</h2><ul>
<li><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li>
</ul>
<p>由于线程池中有很多操作都是与优化资源相关的，我们在这里就不多赘述。我们通过一张图来了解线程池的工作原理：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423164342.bmp" alt="线程池原理"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423164427.bmp" alt="02_线程池"></p>
<p>合理利用线程池能够带来三个好处：</p>
<ol>
<li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>
<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>
<li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li>
</ol>
<h2 id="2-3-线程池的使用"><a href="#2-3-线程池的使用" class="headerlink" title="2.3 线程池的使用"></a>2.3 线程池的使用</h2><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p>
<p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p>
<p>Executors类中有个创建线程池的方法如下：</p>
<ul>
<li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li>
</ul>
<p>获取到了一个线程池ExecutorService 对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下：</p>
<ul>
<li><p><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</p>
<blockquote>
<p>Future接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用。</p>
</blockquote>
</li>
</ul>
<p>使用线程池中线程对象的步骤：</p>
<ol>
<li>创建线程池对象。</li>
<li>创建Runnable接口子类对象。(task)</li>
<li>提交Runnable接口子类对象。(take task)</li>
<li>关闭线程池(一般不做)。</li>
</ol>
<p>Runnable实现类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要一个教练&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;教练来了： &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;教我游泳,交完后，教练回到了游泳池&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>线程池测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);<span class="comment">//包含2个线程对象</span></span><br><span class="line">        <span class="comment">// 创建Runnable实例对象</span></span><br><span class="line">        MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己创建线程对象的方式</span></span><br><span class="line">        <span class="comment">// Thread t = new Thread(r);</span></span><br><span class="line">        <span class="comment">// t.start(); ---&gt; 调用MyRunnable中的run()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 再获取个线程对象，调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span></span><br><span class="line">        <span class="comment">// 将使用完的线程又归还到了线程池中</span></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        <span class="comment">//service.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>demo in class</code></p>
<p>线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    线程池:JDK1.5之后提供的</span></span><br><span class="line"><span class="comment">    java.util.concurrent.Executors:线程池的工厂类,用来生成线程池</span></span><br><span class="line"><span class="comment">    Executors类中的静态方法:</span></span><br><span class="line"><span class="comment">        static ExecutorService newFixedThreadPool(int nThreads) 创建一个可重用固定线程数的线程池</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            int nThreads:创建线程池中包含的线程数量</span></span><br><span class="line"><span class="comment">        返回值:</span></span><br><span class="line"><span class="comment">            ExecutorService接口,返回的是ExecutorService接口的实现类对象,我们可以使用ExecutorService接口接收(面向接口编程)</span></span><br><span class="line"><span class="comment">    java.util.concurrent.ExecutorService:线程池接口</span></span><br><span class="line"><span class="comment">        用来从线程池中获取线程,调用start方法,执行线程任务</span></span><br><span class="line"><span class="comment">            submit(Runnable task) 提交一个 Runnable 任务用于执行</span></span><br><span class="line"><span class="comment">        关闭/销毁线程池的方法</span></span><br><span class="line"><span class="comment">            void shutdown()</span></span><br><span class="line"><span class="comment">    线程池的使用步骤:</span></span><br><span class="line"><span class="comment">        1.使用线程池的工厂类Executors里边提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</span></span><br><span class="line"><span class="comment">        2.创建一个类,实现Runnable接口,重写run方法,设置线程任务</span></span><br><span class="line"><span class="comment">        3.调用ExecutorService中的方法submit,传递线程任务(实现类),开启线程,执行run方法</span></span><br><span class="line"><span class="comment">        4.调用ExecutorService中的方法shutdown销毁线程池(不建议执行)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.使用线程池的工厂类Executors里边提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</span></span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//3.调用ExecutorService中的方法submit,传递线程任务(实现类),开启线程,执行run方法</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-1创建了一个新的线程执行</span></span><br><span class="line">        <span class="comment">//线程池会一直开启,使用完了线程,会自动把线程归还给线程池,线程可以继续使用</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-1创建了一个新的线程执行</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-2创建了一个新的线程执行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用ExecutorService中的方法shutdown销毁线程池(不建议执行)</span></span><br><span class="line">        es.shutdown();</span><br><span class="line"></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//抛异常,线程池都没有了,就不能获取线程了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.ThreadPool;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    2.创建一个类,实现Runnable接口,重写run方法,设置线程任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;创建了一个新的线程执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第三章-Lambda表达式"><a href="#第三章-Lambda表达式" class="headerlink" title="第三章 Lambda表达式"></a>第三章 Lambda表达式</h1><h2 id="3-1-函数式编程思想概述"><a href="#3-1-函数式编程思想概述" class="headerlink" title="3.1 函数式编程思想概述"></a>3.1 函数式编程思想概述</h2><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting/typora/20210423170242.png" alt="03-Overview"></p>
<p>在数学中，<strong>函数</strong>就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong>。</p>
<p>面向对象的思想:</p>
<p>​    做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</p>
<p>函数式编程思想:</p>
<p>​    只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p>
<h2 id="3-2-冗余的Runnable代码"><a href="#3-2-冗余的Runnable代码" class="headerlink" title="3.2 冗余的Runnable代码"></a>3.2 冗余的Runnable代码</h2><h3 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h3><p>当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code>类来启动该线程。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Runnable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 匿名内部类</span></span><br><span class="line">		Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 覆盖重写抽象方法</span></span><br><span class="line">				System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">new</span> Thread(task).start(); <span class="comment">// 启动线程</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个<code>Runnable</code>接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容：</p>
<ul>
<li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</li>
<li>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</li>
<li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li>
<li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li>
<li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li>
</ul>
<h2 id="3-3-编程思想转换"><a href="#3-3-编程思想转换" class="headerlink" title="3.3 编程思想转换"></a>3.3 编程思想转换</h2><h3 id="做什么，而不是怎么做"><a href="#做什么，而不是怎么做" class="headerlink" title="做什么，而不是怎么做"></a>做什么，而不是怎么做</h3><p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而<strong>不得不</strong>创建一个对象。我们真正希望做的事情是：将<code>run</code>方法体内的代码传递给<code>Thread</code>类知晓。</p>
<p><strong>传递一段代码</strong>——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p>
<h3 id="生活举例"><a href="#生活举例" class="headerlink" title="生活举例"></a>生活举例</h3><p>当我们需要从北京到上海时，可以选择高铁、汽车、骑行或是徒步。我们的真正目的是到达上海，而如何才能到达上海的形式并不重要，所以我们一直在探索有没有比高铁更好的方式——搭乘飞机。</p>
<p>而现在这种飞机（甚至是飞船）已经诞生：2014年3月Oracle所发布的Java 8（JDK 1.8）中，加入了<strong>Lambda表达式</strong>的重量级新特性，为我们打开了新世界的大门。</p>
<h2 id="3-4-体验Lambda的更优写法"><a href="#3-4-体验Lambda的更优写法" class="headerlink" title="3.4 体验Lambda的更优写法"></a>3.4 体验Lambda的更优写法</h2><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LambdaRunnable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>)).start(); <span class="comment">// 启动线程</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p>
<p>不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p>
<h2 id="3-5-回顾匿名内部类"><a href="#3-5-回顾匿名内部类" class="headerlink" title="3.5 回顾匿名内部类"></a>3.5 回顾匿名内部类</h2><p>Lambda是怎样击败面向对象的？在上例中，核心代码其实只是如下所示的内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>为了理解Lambda的语义，我们需要从传统的代码起步。</p>
<h3 id="使用实现类"><a href="#使用实现类" class="headerlink" title="使用实现类"></a>使用实现类</h3><p>要启动一个线程，需要创建一个<code>Thread</code>类的对象并调用<code>start</code>方法。而为了指定线程执行的内容，需要调用<code>Thread</code>类的构造方法：</p>
<ul>
<li><code>public Thread(Runnable target)</code></li>
</ul>
<p>为了获取<code>Runnable</code>接口的实现对象，可以为该接口定义一个实现类<code>RunnableImpl</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后创建该实现类的对象作为<code>Thread</code>类的构造参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ThreadInitParam</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Runnable task = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">		<span class="keyword">new</span> Thread(task).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用匿名内部类"><a href="#使用匿名内部类" class="headerlink" title="使用匿名内部类"></a>使用匿名内部类</h3><p>这个<code>RunnableImpl</code>类只是为了实现<code>Runnable</code>接口而存在的，而且仅被使用了唯一一次，所以使用匿名内部类的语法即可省去该类的单独定义，即匿名内部类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ThreadNameless</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匿名内部类的好处与弊端"><a href="#匿名内部类的好处与弊端" class="headerlink" title="匿名内部类的好处与弊端"></a>匿名内部类的好处与弊端</h3><p>一方面，匿名内部类可以帮我们<strong>省去实现类的定义</strong>；另一方面，匿名内部类的语法——<strong>确实太复杂了！</strong></p>
<h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>仔细分析该代码中的语义，<code>Runnable</code>接口只有一个<code>run</code>方法的定义：</p>
<ul>
<li><code>public abstract void run();</code></li>
</ul>
<p>即制定了一种做事情的方案（其实就是一个函数）：</p>
<ul>
<li><strong>无参数</strong>：不需要任何条件即可执行该方案。</li>
<li><strong>无返回值</strong>：该方案不产生任何结果。</li>
<li><strong>代码块</strong>（方法体）：该方案的具体执行步骤。</li>
</ul>
<p>同样的语义体现在<code>Lambda</code>语法中，要更加简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>前面的一对小括号即<code>run</code>方法的参数（无），代表不需要任何条件；</li>
<li>中间的一个箭头代表将前面的参数传递给后面的代码；</li>
<li>后面的输出语句即业务逻辑代码。</li>
</ul>
<h2 id="3-6-Lambda标准格式"><a href="#3-6-Lambda标准格式" class="headerlink" title="3.6 Lambda标准格式"></a>3.6 Lambda标准格式</h2><p>Lambda省去面向对象的条条框框，格式由<strong>3个部分</strong>组成：</p>
<ul>
<li>一些参数</li>
<li>一个箭头</li>
<li>一段代码</li>
</ul>
<p>Lambda表达式的<strong>标准格式</strong>为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(参数类型 参数名称) -&gt; &#123; 代码语句 &#125;</span><br></pre></td></tr></table></figure>
<p>格式说明：</p>
<ul>
<li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li>
<li><code>-&gt;</code>是新引入的语法格式，代表指向动作。</li>
<li>大括号内的语法与传统方法体要求基本一致。</li>
</ul>
<h2 id="3-7-练习：使用Lambda标准格式（无参无返回）"><a href="#3-7-练习：使用Lambda标准格式（无参无返回）" class="headerlink" title="3.7 练习：使用Lambda标准格式（无参无返回）"></a>3.7 练习：使用Lambda标准格式（无参无返回）</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个厨子<code>Cook</code>接口，内含唯一的抽象方法<code>makeFood</code>，且无参数、无返回值。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在下面的代码中，请使用Lambda的<strong>标准格式</strong>调用<code>invokeCook</code>方法，打印输出“吃饭啦！”字样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05InvokeCook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 请在此使用Lambda【标准格式】调用invokeCook方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    invokeCook(() -&gt; &#123;</span><br><span class="line">      	System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：小括号代表<code>Cook</code>接口<code>makeFood</code>抽象方法的参数为空，大括号代表<code>makeFood</code>的方法体。</p>
</blockquote>
<h2 id="3-8-Lambda的参数和返回值"><a href="#3-8-Lambda的参数和返回值" class="headerlink" title="3.8 Lambda的参数和返回值"></a>3.8 Lambda的参数和返回值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需求:</span><br><span class="line">    使用数组存储多个Person对象</span><br><span class="line">    对数组中的Person对象使用Arrays的sort方法通过年龄进行升序排序</span><br></pre></td></tr></table></figure>
<p>下面举例演示<code>java.util.Comparator&lt;T&gt;</code>接口的使用场景代码，其中的抽象方法定义为：</p>
<ul>
<li><code>public abstract int compare(T o1, T o2);</code></li>
</ul>
<p>当需要对一个对象数组进行排序时，<code>Arrays.sort</code>方法需要一个<code>Comparator</code>接口实例来指定排序的规则。假设有一个<code>Person</code>类，含有<code>String name</code>和<code>int age</code>两个成员变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略构造器、toString方法与Getter Setter </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="传统写法-1"><a href="#传统写法-1" class="headerlink" title="传统写法"></a>传统写法</h3><p>如果使用传统的代码对<code>Person[]</code>数组进行排序，写法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Comparator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 本来年龄乱序的对象数组</span></span><br><span class="line">        Person[] array = &#123;</span><br><span class="line">        	<span class="keyword">new</span> Person(<span class="string">&quot;古力娜扎&quot;</span>, <span class="number">19</span>),</span><br><span class="line">        	<span class="keyword">new</span> Person(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">18</span>),</span><br><span class="line">       		<span class="keyword">new</span> Person(<span class="string">&quot;马尔扎哈&quot;</span>, <span class="number">20</span>) &#125;;</span><br><span class="line"></span><br><span class="line">      	<span class="comment">// 匿名内部类</span></span><br><span class="line">        Comparator&lt;Person&gt; comp = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(array, comp); <span class="comment">// 第二个参数为排序规则，即Comparator接口实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : array) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种做法在面向对象的思想中，似乎也是“理所当然”的。其中<code>Comparator</code>接口的实例（使用了匿名内部类）代表了“按照年龄从小到大”的排序规则。</p>
<h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>下面我们来搞清楚上述代码真正要做什么事情。</p>
<ul>
<li>为了排序，<code>Arrays.sort</code>方法需要排序规则，即<code>Comparator</code>接口的实例，抽象方法<code>compare</code>是关键；</li>
<li>为了指定<code>compare</code>的方法体，<strong>不得不</strong>需要<code>Comparator</code>接口的实现类；</li>
<li>为了省去定义一个<code>ComparatorImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li>
<li>必须覆盖重写抽象<code>compare</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li>
<li>实际上，<strong>只有参数和方法体才是关键</strong>。</li>
</ul>
<h3 id="Lambda写法"><a href="#Lambda写法" class="headerlink" title="Lambda写法"></a>Lambda写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07ComparatorLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] array = &#123;</span><br><span class="line">          	<span class="keyword">new</span> Person(<span class="string">&quot;古力娜扎&quot;</span>, <span class="number">19</span>),</span><br><span class="line">          	<span class="keyword">new</span> Person(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">18</span>),</span><br><span class="line">          	<span class="keyword">new</span> Person(<span class="string">&quot;马尔扎哈&quot;</span>, <span class="number">20</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(array, (Person a, Person b) -&gt; &#123;</span><br><span class="line">          	<span class="keyword">return</span> a.getAge() - b.getAge();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : array) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-9-练习：使用Lambda标准格式（有参有返回）"><a href="#3-9-练习：使用Lambda标准格式（有参有返回）" class="headerlink" title="3.9 练习：使用Lambda标准格式（有参有返回）"></a>3.9 练习：使用Lambda标准格式（有参有返回）</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个计算器<code>Calculator</code>接口，内含抽象方法<code>calc</code>可以将两个int数字相加得到和值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在下面的代码中，请使用Lambda的<strong>标准格式</strong>调用<code>invokeCalc</code>方法，完成120和130的相加计算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08InvokeCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 请在此使用Lambda【标准格式】调用invokeCalc方法来计算120+130的结果ß</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Calculator calculator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    invokeCalc(<span class="number">120</span>, <span class="number">130</span>, (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123;</span><br><span class="line">      	<span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：小括号代表<code>Calculator</code>接口<code>calc</code>抽象方法的参数，大括号代表<code>calc</code>的方法体。</p>
</blockquote>
<h2 id="3-10-Lambda省略格式"><a href="#3-10-Lambda省略格式" class="headerlink" title="3.10 Lambda省略格式"></a>3.10 Lambda省略格式</h2><h3 id="可推导即可省略"><a href="#可推导即可省略" class="headerlink" title="可推导即可省略"></a>可推导即可省略</h3><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如上例还可以使用Lambda的省略写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  	invokeCalc(<span class="number">120</span>, <span class="number">130</span>, (a, b) -&gt; a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p>
<ol>
<li>小括号内参数的类型可以省略；</li>
<li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li>
<li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li>
</ol>
<blockquote>
<p>备注：掌握这些省略规则后，请对应地回顾本章开头的多线程案例。</p>
</blockquote>
<h2 id="3-11-练习：使用Lambda省略格式"><a href="#3-11-练习：使用Lambda省略格式" class="headerlink" title="3.11 练习：使用Lambda省略格式"></a>3.11 练习：使用Lambda省略格式</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>仍然使用前文含有唯一<code>makeFood</code>抽象方法的厨子<code>Cook</code>接口，在下面的代码中，请使用Lambda的<strong>省略格式</strong>调用<code>invokeCook</code>方法，打印输出“吃饭啦！”字样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09InvokeCook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 请在此使用Lambda【省略格式】调用invokeCook方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  	invokeCook(() -&gt; System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-12-Lambda的使用前提"><a href="#3-12-Lambda的使用前提" class="headerlink" title="3.12 Lambda的使用前提"></a>3.12 Lambda的使用前提</h2><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p>
<ol>
<li>使用Lambda必须具有接口，且要求**接口中<code>有且仅有一个抽象方法</code>**。<br>无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li>
<li>使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li>
</ol>
<blockquote>
<p>备注：有且仅有一个抽象方法的接口，称为“<strong>函数式接口</strong>”。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
</search>
