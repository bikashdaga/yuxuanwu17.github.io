<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux htop 详解</title>
    <url>/2021/01/25/Linux_htop/</url>
    <content><![CDATA[<p>之前在学校实验室工作的时候，接触的第一个命令就是htop。之前就是觉得这个花花绿绿的界面很有趣（牛逼），如下图，常常在女朋友面前故作牛逼的打开（<em>实际就看看我的程序在不在跑，虚伪的不行🤪</em>）</p>
<p><img src="https://pic1.zhimg.com/v2-317c74bdfc0734f88813c5fe532d3220_b.png" alt="img"></p>
<p>为了以后装逼更有资本，我觉得得仔细弄清楚这些值到底是干什么的</p>
<p>本篇文章参考</p>
<p>Understanding Output of htop Command - Linux Togetherlinuxtogether.org</p>
<h3 id="htop是top的升级版-允许用户监视系统上运行的进程及其完整的命令行"><a href="#htop是top的升级版-允许用户监视系统上运行的进程及其完整的命令行" class="headerlink" title="htop是top的升级版,允许用户监视系统上运行的进程及其完整的命令行"></a>htop是top的升级版,允许用户监视系统上运行的进程及其完整的命令行</h3><ol>
<li>系统不会自带，若是Ubuntu，sudo apt, 若是Centos， yum 可以安装。根据不过系统来进行安装</li>
<li>支持用户交互，可以通过鼠标来kill进程而不用通过输入其PID，支持用鼠标上下拖动，且不同的颜色代表不同的意思。</li>
<li>允许用户根据CPU，内存和时间间隔对进程进行排序</li>
</ol>
<h3 id="htop-的安装"><a href="#htop-的安装" class="headerlink" title="htop 的安装"></a>htop 的安装</h3><p>Ubuntu 安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install htop</span><br></pre></td></tr></table></figure>
<p>CentOS 安装</p>
<p><a class="link"   href="http://www.vue5.com/centos/23046.htmlwww.vue5.com" >http://www.vue5.com/centos/23046.htmlwww.vue5.com<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>基本的概念</strong></p>
<p>tasks/process 进程， thread 线程相关的知识可以从下面的链接学习</p>
<p><a class="link"   href="https://www.zhihu.com/question/307100151/answer/894486042" >如何理解：程序、进程、线程、并发、并行、高并发？<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/125716637" >宇宙之一粟：为什么校招面试中“线程与进程的区别”老是被问到?我该如何回答？<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.geeksforgeeks.org/difference-between-process-and-thread/" >Difference between Process and Thread - GeeksforGeeks<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/82746153" >什么是虚拟内存(Virtual Memory)?<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://pic2.zhimg.com/v2-f876d2e42e8d5e1110f22f7198fcc591_b.png" alt="img"></p>
<h3 id="红色边框"><a href="#红色边框" class="headerlink" title="红色边框"></a>红色边框</h3><p><em>数字1，2，3，4分别代表CPU处理器/核，上图是一个四核的处理器</em></p>
<h3 id="灰色边框（progress-bar）"><a href="#灰色边框（progress-bar）" class="headerlink" title="灰色边框（progress bar）"></a>灰色边框（progress bar）</h3><p><em>每一个CPU的总用量情况，注意这条上面会有不同的颜色：</em></p>
<ol>
<li>蓝色：显示低优先级(low priority)进程使用的CPU百分比。 </li>
<li>绿色：显示用于普通用户(user)拥有的进程的CPU百分比。 </li>
<li>红色：显示系统进程(kernel threads)使用的CPU百分比。</li>
<li>橙色：显示IRQ时间使用的CPU百分比。</li>
<li>洋红色(Magenta)：显示Soft IRQ时间消耗的CPU百分比。</li>
<li>灰色：显示IO等待时间消耗的CPU百分比。</li>
<li>青色：显示窃取时间(Steal time)消耗的CPU百分比。</li>
</ol>
<h3 id="黄色边框"><a href="#黄色边框" class="headerlink" title="黄色边框"></a>黄色边框</h3><p><em>提供了内存（Memory）和交换（Swap）使用情况。 类似于CPU中的进度条，内存监视也包含具有多种颜色的进度条：</em></p>
<ol>
<li>绿色：显示内存页面占用的RAM百分比</li>
<li>蓝色：显示缓冲区页面占用的RAM百分比</li>
<li>橙色：显示缓存页面占用的RAM百分比</li>
</ol>
<p><img src="https://pic1.zhimg.com/v2-e9a5539a25c37421fc429424aab510b8_b.png" alt="img"></p>
<h3 id="蓝色边框"><a href="#蓝色边框" class="headerlink" title="蓝色边框"></a>蓝色边框</h3><ul>
<li><p><strong>第一行 (Tasks, thr, running)</strong></p>
</li>
<li><p>参考上面的屏幕截图，我们在计算机上运行的106个任务(tasks)被分解为113个线程(thread)，其中只有1个进程处于运行(running)状态。</p>
</li>
<li><p>任务(tasks)是打开的进程总数的代表，但并不是每个打开的进程都在不断消耗CPU。 每个进程都处于几种状态</p>
</li>
<li><p>R: Running：表示进程(process)正在使用CPU</p>
</li>
<li><p>S: Sleeping: 通常进程在大多数时间都处于睡眠状态，并以固定的时间间隔执行小检查，或者等待用户输入后再返回运行状态。</p>
</li>
<li><p>T/S: Traced/Stoped: 表示进程正在处于暂停的状态</p>
</li>
<li><p>Z:Zombie or defunct:已完成执行但在进程表中仍具有条目的进程。</p>
</li>
<li><p><strong>第二行  Load Average</strong></p>
</li>
<li><p>三个值是指系统在最后1分钟，最近5分钟和最后15分钟的平均负载 (0.21,0.19,0.15)</p>
</li>
<li><p><strong>第三行 Uptime</strong></p>
</li>
<li><p>表示这个系统一共运行了多长的时间，这里一共运行了78天</p>
</li>
</ul>
<h3 id="下半部分"><a href="#下半部分" class="headerlink" title="下半部分"></a>下半部分</h3><p><img src="https://pic2.zhimg.com/v2-dd7ca8f231cfa317243987fd4bf02189_b.png" alt="img"></p>
<ul>
<li>PID – 描述进程的ID号</li>
<li>USER – 描述进程的所有者（谁跑的）</li>
<li>PRI – 描述Linux内核查看的进程优先级</li>
<li>NI – 描述由用户或root重置的进程优先级</li>
<li>VIR – 它描述进程正在使用的虚拟内存 （virtual memory）</li>
<li>RES – 描述进程正在消耗的物理内存（physical memory）</li>
<li>SHR – 描述进程正在使用的共享内存（shared memory）</li>
<li>S – 描述流程的当前状态 (state)</li>
<li>CPU％ – 描述每个进程消耗的CPU百分比</li>
<li>MEM％ – 描述每个进程消耗的内存百分比</li>
<li>TIME+ – 显示自流程开始执行以来的时间</li>
<li>Command –它与每个进程并行显示完整的命令执行 (比如/usr/lib/R)</li>
</ul>
<hr>
<h3 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h3><p>u – 用于显示特定用户拥有的所有进程。</p>
<p>P –用于基于高CPU消耗对进程进行排序。</p>
<p>M –用于基于高内存消耗对进程进行排序。</p>
<p>T –用于根据时间段对过程进行排序。</p>
<p>h –用于打开帮助窗口并查看此处未提及的更多快捷方式。</p>
<p><strong>帮助： htop -h</strong></p>
<p><strong>更细致的解释：man htop</strong></p>
<p><img src="https://pic1.zhimg.com/v2-3aece676cc1a36e4ea439e75ce81b238_b.png" alt="img"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MATLAB的图片提取和分析</title>
    <url>/2021/01/25/MATLAB%E5%9B%BE%E7%89%87%E6%8F%90%E5%8F%96%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>完成学校Matlab作业后的一些总结，数据可以从我的GitHub账户下载。作为一名Matlab的初学者，请多多海涵</p>
<p><a class="link" href="https://github.com/yuxuanwu17/INT301/blob/main/ass2data.zip">数据在此<i class="fas fa-external-link-alt"></i></a></p>
<p>数据是来自车牌号图片（冷知识：I,O天生是在车牌里不出现的）。一共24个文件夹，每个文件夹里有100张图片，所以一共有2400张图片。这次的项目是构建预测模型来进行图像识别。</p>
<p><img src="https://pic1.zhimg.com/v2-442cbdaf16d424739603ef3c267914dc_b.png" alt="img"></p>
<p>我们打开这些文件，查看图片的详细信息</p>
<p><img src="https://pic1.zhimg.com/v2-37aefc51ea4c68ec2b8dddee4939a708_b.png" alt="img"></p>
<p>我们发现这里面的图片格式不一致，且命名没有统一规律。</p>
<p>下文开始处理图片数据，并将每一张照片提取出来，用Matlab分析</p>
<h3 id="方法一：暴力修改文档法"><a href="#方法一：暴力修改文档法" class="headerlink" title="方法一：暴力修改文档法"></a>方法一：暴力修改文档法</h3><p>核心思路：将图片全部提取出来，然后统一格式，统一名称，保存在一个新的文件夹里</p>
<p>参考 <a class="link" href="https://blog.csdn.net/FX677588/article/details/53126961">matlab遍历文件夹下所有图片和遍历所有子文件夹下图片_无鞋童鞋的博客-CSDN博客_matlab遍历文件夹下子文件夹所有文件<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">imgDataPath = <span class="string">'../INT301_Assessment2/ass2data/'</span>;</span><br><span class="line">imgDataDir  = dir(imgDataPath);             <span class="comment">% 遍历该路径下的所有文件</span></span><br><span class="line">savepath =  <span class="string">'../INT301_Assessment2/ass2_processed_data/'</span>; <span class="comment">% 要改写的文件路径</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(imgDataDir)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isequal</span>(imgDataDir(<span class="built_in">i</span>).name,<span class="string">'.'</span>)||... <span class="comment">% 去除系统自带的两个隐文件夹</span></span><br><span class="line">       <span class="built_in">isequal</span>(imgDataDir(<span class="built_in">i</span>).name,<span class="string">'..'</span>)||...</span><br><span class="line">       <span class="built_in">isequal</span>(imgDataDir(<span class="built_in">i</span>).name,<span class="string">'.DS_Store'</span>)||...</span><br><span class="line">       ~imgDataDir(<span class="built_in">i</span>).isdir)                <span class="comment">% 去除遍历中不是文件夹的</span></span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    imgDir_jpeg = dir([imgDataPath imgDataDir(<span class="built_in">i</span>).name <span class="string">'/*.jpeg'</span>]); <span class="comment">%读取jpeg格式的图片</span></span><br><span class="line">    imgDir_jpg = dir([imgDataPath imgDataDir(<span class="built_in">i</span>).name <span class="string">'/*.jpg'</span>]); <span class="comment">%读取jpg格式的图片</span></span><br><span class="line">    imgDir = [imgDir_jpeg',imgDir_jpg']'; <span class="comment">% 合并成子文件夹下的所有图片地址</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> =<span class="number">1</span>:<span class="built_in">length</span>(imgDir)                 <span class="comment">% 遍历所有文件的地址</span></span><br><span class="line">        img = imread([imgDataPath imgDataDir(<span class="built_in">i</span>).name <span class="string">'/'</span> imgDir(<span class="built_in">j</span>).name]); <span class="comment">%读取单个文件</span></span><br><span class="line">        imwrite(img, [savepath,imgDataDir(<span class="built_in">i</span>).name,num2str(<span class="built_in">j</span>),<span class="string">'.jpeg'</span>]) <span class="comment">%以字符+编号为命名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>新建立的文件夹，检查一下有没有漏，可以直接看每个字母的最后一个是不是”字母100.jpeg”</p>
<p><img src="https://pic4.zhimg.com/v2-98d05aac73ddf39e77aa168050c19a97_b.png" alt="img"></p>
<h3 id="处理单个图片，以矩阵形式保存倒入的图片"><a href="#处理单个图片，以矩阵形式保存倒入的图片" class="headerlink" title="处理单个图片，以矩阵形式保存倒入的图片"></a>处理单个图片，以矩阵形式保存倒入的图片</h3><p>下图getimdata2这个函数输入的是重写后的新文件夹地址，输出的是训练集X和标签y （这里用数字代指标签）</p>
<p>不好意思有点懒得动脑子了，就直接写了24个if，大家可以随意优化</p>
<p>如果继续处理例如转换为onehot之类的可以直接用ind2vec来转换</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ data,target ]</span> = <span class="title">getimdata2</span><span class="params">(path)</span></span></span><br><span class="line"><span class="comment">%GETIMDATA Summary of this function goes here</span></span><br><span class="line"><span class="comment">%   Detailed explanation goes here</span></span><br><span class="line">    files = dir([path <span class="string">'*.jpeg'</span>]);</span><br><span class="line">    data=[];</span><br><span class="line">    target=[];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> file = files'</span><br><span class="line">        im = imread([path file.name]);</span><br><span class="line">        <span class="comment">% Normalize the data </span></span><br><span class="line">        im = double(im);</span><br><span class="line">        im = im/<span class="number">255</span>;</span><br><span class="line">        </span><br><span class="line">        data = [data im(:)];</span><br><span class="line">        <span class="keyword">if</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'A'</span>) <span class="comment">% 如果文件第一个字符等于‘A‘，那就用1代替a</span></span><br><span class="line">            target=[target [<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'B'</span>)</span><br><span class="line">            target=[target [<span class="number">2</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'C'</span>)</span><br><span class="line">            target=[target [<span class="number">3</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'D'</span>)</span><br><span class="line">            target=[target [<span class="number">4</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'E'</span>)</span><br><span class="line">            target=[target [<span class="number">5</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'F'</span>)</span><br><span class="line">            target=[target [<span class="number">6</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'G'</span>)</span><br><span class="line">            target=[target [<span class="number">7</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'H'</span>)</span><br><span class="line">            target=[target [<span class="number">8</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'J'</span>)</span><br><span class="line">            target=[target [<span class="number">9</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'K'</span>)</span><br><span class="line">            target=[target [<span class="number">10</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'L'</span>)</span><br><span class="line">            target=[target [<span class="number">11</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'M'</span>)</span><br><span class="line">            target=[target [<span class="number">12</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'N'</span>)</span><br><span class="line">            target=[target [<span class="number">13</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'P'</span>)</span><br><span class="line">            target=[target [<span class="number">14</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Q'</span>)</span><br><span class="line">            target=[target [<span class="number">15</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'R'</span>)</span><br><span class="line">            target=[target [<span class="number">16</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'S'</span>)</span><br><span class="line">            target=[target [<span class="number">17</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'T'</span>)</span><br><span class="line">            target=[target [<span class="number">18</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'U'</span>)</span><br><span class="line">            target=[target [<span class="number">19</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'V'</span>)</span><br><span class="line">            target=[target [<span class="number">20</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'W'</span>)</span><br><span class="line">            target=[target [<span class="number">21</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'X'</span>)</span><br><span class="line">            target=[target [<span class="number">22</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Y'</span>)</span><br><span class="line">            target=[target [<span class="number">23</span>]];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Z'</span>)</span><br><span class="line">            target=[target [<span class="number">24</span>]];</span><br><span class="line">        <span class="keyword">end</span>    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>另外一个getimdata 函数和上面大体差不多，但是输出的是已经onehot encoding后的结果（e.g. A-&gt; (1,0,0,…0)）标签用一个1*24的向量来表示</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ data,target ]</span> = <span class="title">getimdata</span><span class="params">(path)</span></span></span><br><span class="line"><span class="comment">%GETIMDATA Summary of this function goes here</span></span><br><span class="line"><span class="comment">%   Detailed explanation goes here</span></span><br><span class="line">    files = dir([path <span class="string">'*.jpeg'</span>]);</span><br><span class="line">    data=[];</span><br><span class="line">    target=[];</span><br><span class="line">    </span><br><span class="line"><span class="comment">%   Generated the cell and zero matrix to store</span></span><br><span class="line">    store = cell(<span class="number">1</span>,<span class="number">24</span>);</span><br><span class="line">    tst_zero = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">24</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">%   Fill the zeros matrix </span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">24</span></span><br><span class="line">        copy = tst_zero;</span><br><span class="line">        copy(<span class="number">1</span>,<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">        store{<span class="built_in">i</span>} = copy;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> file = files'</span><br><span class="line">        im = imread([path file.name]);</span><br><span class="line">        <span class="comment">% Normalize the data </span></span><br><span class="line">        im = double(im);</span><br><span class="line">        im = im/<span class="number">255</span>;</span><br><span class="line">        data = [data im(:)];</span><br><span class="line">        test_zero = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">if</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'A'</span>)</span><br><span class="line">            target=[target [store{<span class="number">1</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'B'</span>)</span><br><span class="line">            target=[target [store{<span class="number">2</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'C'</span>)</span><br><span class="line">            target=[target [store{<span class="number">3</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'D'</span>)</span><br><span class="line">            target=[target [store{<span class="number">4</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'E'</span>)</span><br><span class="line">            target=[target [store{<span class="number">5</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'F'</span>)</span><br><span class="line">            target=[target [store{<span class="number">6</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'G'</span>)</span><br><span class="line">            target=[target [store{<span class="number">7</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'H'</span>)</span><br><span class="line">            target=[target [store{<span class="number">8</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'J'</span>)</span><br><span class="line">            target=[target [store{<span class="number">9</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'K'</span>)</span><br><span class="line">            target=[target [store{<span class="number">10</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'L'</span>)</span><br><span class="line">            target=[target [store{<span class="number">11</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'M'</span>)</span><br><span class="line">            target=[target [store{<span class="number">12</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'N'</span>)</span><br><span class="line">            target=[target [store{<span class="number">13</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'P'</span>)</span><br><span class="line">            target=[target [store{<span class="number">14</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Q'</span>)</span><br><span class="line">            target=[target [store{<span class="number">15</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'R'</span>)</span><br><span class="line">            target=[target [store{<span class="number">16</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'S'</span>)</span><br><span class="line">            target=[target [store{<span class="number">17</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'T'</span>)</span><br><span class="line">            target=[target [store{<span class="number">18</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'U'</span>)</span><br><span class="line">            target=[target [store{<span class="number">19</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'V'</span>)</span><br><span class="line">            target=[target [store{<span class="number">20</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'W'</span>)</span><br><span class="line">            target=[target [store{<span class="number">21</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'X'</span>)</span><br><span class="line">            target=[target [store{<span class="number">22</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Y'</span>)</span><br><span class="line">            target=[target [store{<span class="number">23</span>}]'];</span><br><span class="line">        <span class="keyword">elseif</span> strcmp(file.name(<span class="number">1</span>),<span class="string">'Z'</span>)</span><br><span class="line">            target=[target [store{<span class="number">24</span>}]'];</span><br><span class="line">        <span class="keyword">end</span>    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二：利用imageDatastore"><a href="#方法二：利用imageDatastore" class="headerlink" title="方法二：利用imageDatastore"></a>方法二：利用imageDatastore</h3><p>简便的方法永远是在你写完做完后发现的🙄</p>
<p>imageDatastore 可以直接读取你这个文件夹下的所有子文件及其图片</p>
<p>下面的代码是直接将数据集和标签都已经分好处理好了，可以直接喂到模型里面去的</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% </span></span><br><span class="line">F = <span class="string">'../INT301_Assessment2/ass2data'</span>;</span><br><span class="line">imds = imageDatastore(F,<span class="string">'IncludeSubfolders'</span>,<span class="built_in">true</span>,<span class="string">'LabelSource'</span>,<span class="string">'foldernames'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">labelCount = countEachLabel(imds);   <span class="comment">%统计imds中各标签值的图片数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 2，8分割，8为training，2为testing</span></span><br><span class="line">numTrainFiles = <span class="number">80</span>;</span><br><span class="line">[imdsTrain, imdsTest] = splitEachLabel(imds, numTrainFiles,<span class="string">'randomize'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">data = [];</span><br><span class="line">files = imdsTrain.Files;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> file = files'</span><br><span class="line">    im = imread(file{<span class="number">1</span>});</span><br><span class="line">    im = double(im);</span><br><span class="line">    im = im/<span class="number">255</span>;</span><br><span class="line">    data = [data im(:)];</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">X_train = data';</span><br><span class="line">y_train = imdsTrain.Labels;</span><br><span class="line">y_train = label_preprocess(y_train);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">data = []</span><br><span class="line">files = imdsTest.Files;</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> file = files'</span><br><span class="line">    im = imread(file{<span class="number">1</span>});</span><br><span class="line">    im = double(im);</span><br><span class="line">    im = im/<span class="number">255</span>;</span><br><span class="line">    data = [data im(:)];</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">X_test = data';</span><br><span class="line">y_test = imdsTest.Labels;</span><br><span class="line">y_test = label_preprocess(y_test);</span><br></pre></td></tr></table></figure>
<p>这里我将那24个 if 打包写成了一个新的函数叫label_preprocess，输入的是标签，输出的是onehot encoding后的结果</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[target]</span> = <span class="title">label_preprocess</span><span class="params">(y_train)</span></span></span><br><span class="line">target = [];</span><br><span class="line"><span class="keyword">for</span> y = y_train'</span><br><span class="line">    <span class="keyword">if</span> y == <span class="string">'A'</span></span><br><span class="line">        target=[target [<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'B'</span></span><br><span class="line">        target=[target [<span class="number">2</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'C'</span></span><br><span class="line">        target=[target [<span class="number">3</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'D'</span></span><br><span class="line">        target=[target [<span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'E'</span></span><br><span class="line">        target=[target [<span class="number">5</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'F'</span></span><br><span class="line">        target=[target [<span class="number">6</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'G'</span></span><br><span class="line">        target=[target [<span class="number">7</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'H'</span></span><br><span class="line">        target=[target [<span class="number">8</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'J'</span></span><br><span class="line">        target=[target [<span class="number">9</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'K'</span></span><br><span class="line">        target=[target [<span class="number">10</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'L'</span></span><br><span class="line">        target=[target [<span class="number">11</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'M'</span></span><br><span class="line">        target=[target [<span class="number">12</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'N'</span></span><br><span class="line">        target=[target [<span class="number">13</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'P'</span></span><br><span class="line">        target=[target [<span class="number">14</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'Q'</span></span><br><span class="line">        target=[target [<span class="number">15</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'R'</span></span><br><span class="line">        target=[target [<span class="number">16</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'S'</span></span><br><span class="line">        target=[target [<span class="number">17</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'T'</span></span><br><span class="line">        target=[target [<span class="number">18</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'U'</span></span><br><span class="line">        target=[target [<span class="number">19</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'V'</span></span><br><span class="line">        target=[target [<span class="number">20</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'W'</span></span><br><span class="line">        target=[target [<span class="number">21</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'X'</span></span><br><span class="line">        target=[target [<span class="number">22</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'Y'</span></span><br><span class="line">        target=[target [<span class="number">23</span>]];</span><br><span class="line">    <span class="keyword">elseif</span> y==<span class="string">'Z'</span></span><br><span class="line">        target=[target [<span class="number">24</span>]];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line">target =ind2vec(target);</span><br><span class="line">target = target';</span><br></pre></td></tr></table></figure>
<h3 id="方法三：直接读取-g格式（仅限本题使用）"><a href="#方法三：直接读取-g格式（仅限本题使用）" class="headerlink" title="方法三：直接读取.g格式（仅限本题使用）"></a>方法三：直接读取.g格式（仅限本题使用）</h3><p>因为jpeg和jpg都是以g结尾，所以可以本题可以直读取g。代码就略了</p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>sklearn里LinearSVC与SVC区别</title>
    <url>/2021/01/26/sklearn%E9%87%8CLinearSVC%E4%B8%8ESVC%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>这里综合了stackoverflow上的一位发言和另一位知乎用户的文章，链接在下方：</p>
<p><a class="link"   href="https://stackoverflow.com/questions/45384185/what-is-the-difference-between-linearsvc-and-svckernel-linear" >What is the difference between LinearSVC and SVC(kernel=”linear”)?<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/57162092" >baiziyu：sklearn.svm.LinearSVC与sklearn.svm.SVC区别<i class="fas fa-external-link-alt"></i></a></p>
<p>LinearSVC 和 SVC(kernel=’linear’) 会产生不同的结果，例如 不同的分数以及不同的decision boundary， 原因是他们采用了不同的计算方式。下面的代码可以自己运行一下，感受一下不同的地方</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.datasets import load_iris</span><br><span class="line">from sklearn.svm import LinearSVC, SVC</span><br><span class="line"></span><br><span class="line">X, y &#x3D; load_iris(return_X_y&#x3D;True)</span><br><span class="line"></span><br><span class="line">clf_1 &#x3D; LinearSVC(loss&#x3D;&#39;hinge&#39;).fit(X, y)  # possible to state loss&#x3D;&#39;hinge&#39;</span><br><span class="line">clf_2 &#x3D; LinearSVC().fit(X, y)  # possible to state loss&#x3D;&#39;hinge&#39;</span><br><span class="line">clf_3 &#x3D; SVC(kernel&#x3D;&#39;linear&#39;).fit(X, y)</span><br><span class="line"></span><br><span class="line">score_1 &#x3D; clf_1.score(X, y)</span><br><span class="line">score_2 &#x3D; clf_2.score(X, y)</span><br><span class="line">score_3 &#x3D; clf_2.score(X, y)</span><br><span class="line"></span><br><span class="line">print(&#39;LinearSVC score %s&#39; % score_1)</span><br><span class="line">print(&#39;LinearSVC score with hinge loss %s&#39; % score_2)</span><br><span class="line">print(&#39;SVC score %s&#39; % score_3)</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">LinearSVC score 0.94</span><br><span class="line">LinearSVC score with hinge loss 0.9666666666666667</span><br><span class="line">SVC score 0.9666666666666667</span><br></pre></td></tr></table></figure>
<h3 id="最主要的不同点："><a href="#最主要的不同点：" class="headerlink" title="最主要的不同点："></a>最主要的不同点：</h3><ul>
<li>默认情况下，LinearSVC最小化squared hinge loss，而SVC最小化hinge loss。（上图代码块）</li>
<li>LinearSVC是基于liblinear实现的，事实上会惩罚截距(penalize the intercept), 然而，SVC是基于libsvm实现的，并不会惩罚截距</li>
<li>liblinear库针对线性的模型进行了优化，因此在大量的数据上收敛速度会高于libsvm。所以LinearSVC在大数据上也能很好的归一化，但是SVC在大量数据上很难收敛</li>
<li>LinearSVC使用 （One-vs-All）方式来实现多分类问题，但SVC使用的是One-vs-One的方式来处理多分类的问题</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS:使用IntelliJ IDEA连接本地Hadoop</title>
    <url>/2021/01/26/macOS%E4%BD%BF%E7%94%A8IntelliJ-IDEA%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0Hadoop/</url>
    <content><![CDATA[<p>本文的所有操作是建立在本地已经配置好Hadoop和java环境的基础上，若未完成，请去这个链接先学习好</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/277611350" >loner：Hadoop 在mac本地的配置<i class="fas fa-external-link-alt"></i></a></p>
<p>本文参考博客</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_45774600/article/details/105289999" >macOS：使用IntelliJ IDEA远程连接Hadoop<i class="fas fa-external-link-alt"></i></a></p>
<p>首先使用intelliJ IDEA 配置指定的jdk</p>
<p>这里操作其实只需要在java class 里面运行就可以了，命名进入</p>
<p><img src="https://pic2.zhimg.com/v2-bbb99e7ef2a3a2ab4a2057d38c54e3cd_b.png" alt="img"></p>
<p>老样子进入project structure （File-Project Structure: 快捷键command+;）</p>
<p><img src="https://pic1.zhimg.com/v2-5087d33ec42e95648bb8e19367110d50_b.png" alt="img"></p>
<p>先检查SDK的情况，如果默认显示就是这样的，则就这样，如果不是添加（那个+号），路径基本上在mac上都差不多是这样的/Library/Java/JavaVirtualMachine/前应该都是一样的。</p>
<p><img src="https://pic3.zhimg.com/v2-0db76d6a8e59222eb80f24dc52269f0a_b.png" alt="img"></p>
<p>然后进入到Project的情况</p>
<p><img src="https://pic1.zhimg.com/v2-9142a0b3ff0d0ffd5ccf34512c6f0280_b.png" alt="img"></p>
<p>然后进入到module，导入依赖（dependencies）</p>
<p><img src="https://pic3.zhimg.com/v2-b90f33443a8e6bfd9fae39f1812e8e2a_b.png" alt="img"></p>
<p><img src="https://pic3.zhimg.com/v2-18890b2899813acc7496601932de2c0e_b.png" alt="img"></p>
<p>选择JARs or directories,按照下面操作多批次的导入解压后Hadoop的位置</p>
<p>注意这儿Hadoop的位置是解压后的安装包在share-&gt;hadoop</p>
<p><img src="https://pic2.zhimg.com/v2-b5434323d331ae6c36db581641366819_b.png" alt="img"></p>
<p>依次导入8个依赖，一个一个手动加，然后Apply，OK</p>
<p><img src="https://pic4.zhimg.com/v2-ad8a2f1ec4a6669a4b833145bda45c2f_b.png" alt="img"></p>
<p>编译和运行</p>
<p>运行如下WordCount.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">public class WordCount &#123;</span><br><span class="line"></span><br><span class="line">    public static class TokenizerMapper</span><br><span class="line">            extends Mapper&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">        private final static IntWritable one &#x3D; new IntWritable(1);</span><br><span class="line">        private Text word &#x3D; new Text();</span><br><span class="line"></span><br><span class="line">        public void map(Object key, Text value, Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            StringTokenizer itr &#x3D; new StringTokenizer(value.toString());</span><br><span class="line">            while (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class IntSumReducer</span><br><span class="line">            extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line">        private IntWritable result &#x3D; new IntWritable();</span><br><span class="line"></span><br><span class="line">        public void reduce(Text key, Iterable&lt;IntWritable&gt; values,</span><br><span class="line">                           Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            int sum &#x3D; 0;</span><br><span class="line">            for (IntWritable val : values) &#123;</span><br><span class="line">                sum +&#x3D; val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Configuration conf &#x3D; new Configuration();</span><br><span class="line">        Job job &#x3D; Job.getInstance(conf, &quot;word count&quot;);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, new Path(args[0]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class="line">        System.exit(job.waitForCompletion(true) ? 0 : 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-b972bff0438429263be2842c94e319b2_b.png" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-c83dbde658707eb3ef7955ba02e34a61_b.png" alt="img"></p>
<p>选择application后需要配置如下，name随意，最重要的是Main class: 保证名字和你new的java文件名字一致，input和output是等会要放入的文件，输入和输出</p>
<p><img src="https://pic3.zhimg.com/v2-87d680b6ed9ae34a669c898ba636be22_b.png" alt="img"></p>
<p>配置输入文件</p>
<p>这里我刚刚在configuration里面写了我的输入文件叫input，需要配置输入路径，这里在（src同级目录下）新建一个文件夹input，并且把你需要输入的文件放进去，这儿还是之前的pg100.txt</p>
<p><img src="https://pic4.zhimg.com/v2-c43f3e376a689e401c3585bd9625cf8f_b.png" alt="img"></p>
<p>运行</p>
<p><img src="https://pic4.zhimg.com/v2-f43cf63ac94ae2df051221c0b49a001f_b.png" alt="img"></p>
<p>出现如下情况</p>
<p><img src="https://pic1.zhimg.com/v2-1171ebce5dad8f3a92d14cd4d10a6274_b.png" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-9079be8c4a11d97d40154dc51cc080f1_b.png" alt="img"></p>
<p>和之前在terminal里运行成功的一模一样，成功后会出现一个 output的文件夹，由于output的先天特性，它无法覆盖，所以下次运行的时候请删除之前的那个，或者你改个名字（我后来好像看见这个可以用其他方法覆盖的，这里就不做涉及）</p>
<p><img src="https://pic3.zhimg.com/v2-df5dda07bd75d6324ba25680e367e6c6_b.png" alt="img"></p>
<p>到现在位置，Hadoop的教程都已经结束，无论是阿里云Hadoop的配置，运行WordCount.java还是mac本地的Hadoop运行调试，还是借助IDEA直接单机模式运行，都已经完成了。如果有不明白的，请关注我的专栏，里面有详细的步骤。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云轻量服务器配置jupyter notebook及远程网页打开</title>
    <url>/2021/01/26/%E9%98%BF%E9%87%8C%E4%BA%91%E8%BD%BB%E9%87%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEjupyter-notebook%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<p>具体阿里云服务器的参数和购买可以参考我上一篇专栏</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p>首先保证你的服务器上安装成功 Anaconda，具体教程可以参考如下链接</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/64930395" >寐语：Linux-Centos7下安装Anaconda（2019年新版）<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="安装jupyter-notebook"><a href="#安装jupyter-notebook" class="headerlink" title="安装jupyter notebook"></a>安装jupyter notebook</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install jupyter notebook </span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-fded09bc06bc572a1b1fa4b37908bba0_b.png" alt="img"></p>
<p>安装完成后导出jupyter的config文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-03a1115c5cc9e61e1c5f792c40411c8f_b.png" alt="img"></p>
<p>可以看见一般默认地址是在 /root/.jupyter/jupyter_notebook_config.py</p>
<p>命令行输入python3，进入python3环境</p>
<p><img src="https://pic2.zhimg.com/v2-5d85b851016dd6c381f8e703d7031b1d_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from IPython.lib import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure>
<p>这里的password是可以随便写的，只要保证两次输入的相同就行，重点是返回的哈希值（e.g. ‘sha1:d208466595c9:91e23f1a*<strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong>‘）</p>
<h3 id="开始编译jupyter-的config文件"><a href="#开始编译jupyter-的config文件" class="headerlink" title="开始编译jupyter 的config文件"></a>开始编译jupyter 的config文件</h3><p>vim 打开配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi ~&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<p>搜索password关键字(命令模式下输入/password)，找到其中代码块：</p>
<p><img src="https://pic2.zhimg.com/v2-02ea1c6c29a091ccae81ba8f67b6a129_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># c.NotebookApp.password&#x3D;&#39;&#39;</span><br><span class="line"></span><br><span class="line">#将其替换成：</span><br><span class="line"></span><br><span class="line">c.NotebookApp.password &#x3D; u&#39;sha1:d208466595c9:91e23f1a***********************************’</span><br></pre></td></tr></table></figure>
<p>其中引号中的内容即为之前复制下来的哈希密码，主义引号之前还有一个u</p>
<p>然后拖到最下面输入一下配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip &#x3D; &#39;*&#39; #所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可</span><br><span class="line">c.NotebookApp.port &#x3D; 8889 #端口设置，注意该端口可以设置的范围可以在服务器控制台的防火墙选项中找到</span><br><span class="line">c.NotebookApp.open_browser &#x3D; False #我们并不想在服务器上直接打开Jupyter Notebook，所以设置成False</span><br><span class="line">c.NotebookApp.notebook_dir &#x3D; &#39;&#x2F;root&#39; #这里是设置Jupyter的根目录，若不设置将默认root的根目录，不安全</span><br><span class="line">c.NotebookApp.allow_root &#x3D; True # 为了安全，Jupyter默认不允许以root权限启动jupyter</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-de707fe4b5de8205b72cdc1123628c3b_b.png" alt="img"></p>
<p>注意：这里的端口一定要在阿里云的防火墙上打开，否则会无法链接，具体可以看本文最顶上之前我配置Hadoop的文章</p>
<h3 id="启动jupyter-notebook"><a href="#启动jupyter-notebook" class="headerlink" title="启动jupyter notebook"></a>启动jupyter notebook</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook ## 第一次打开用，这种打开会随着网页的关闭而停止运行</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-011eeae6a7935e1d46ea3dbf4fb2c03b_b.png" alt="img"></p>
<p>注意红框里面的token，接下来会用到，这里的端口是8888，是我第一次配置的端口，忘记改了（你在config文件里怎么设置的端口，这里显示的就会是什么样）</p>
<h3 id="连接浏览器"><a href="#连接浏览器" class="headerlink" title="连接浏览器"></a>连接浏览器</h3><p>打开你的浏览器输入你的公网ip和在配置文件里确定的端口号。例如 12*.*<em>.2</em>:8889来链接 （ip+开放的端口）</p>
<p><img src="https://pic1.zhimg.com/v2-4452ed380dc7f4c2410b8729fd055028_b.png" alt="img"></p>
<p>在红框里输入你的token，直接复制，然后就可以进入你的jupyter notebook了</p>
<p><img src="https://pic3.zhimg.com/v2-9dd595bfb3f58dfbfee01649d4c44162_b.png" alt="img"></p>
<p>通常来说是用如下来打开jupyter，这样就可以保证在后台运行,程序不会随着你关闭网页而暂停</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup jupyter-notebook &amp;</span><br></pre></td></tr></table></figure>
<h3 id="方法二：映射ip到本地"><a href="#方法二：映射ip到本地" class="headerlink" title="方法二：映射ip到本地"></a>方法二：映射ip到本地</h3><p>在保证之前的config文件配置完成后，进入服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup jupyter-notebook --no-browser --port&#x3D;8889</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-2f8493bad3e754d3f882c06a14030581_b.png" alt="img"></p>
<p>然后新建一个窗口，<strong>不要进入服务器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -N -f -L localhost:8889:localhost:8889 root@123.56.56.215</span><br></pre></td></tr></table></figure>
<p>保证两个localhost相同，因为我也搞不清哪个代表本地，哪个代表云服务器</p>
<p><img src="https://pic1.zhimg.com/v2-2c7e46d6860948d2c83ac9eddee17668_b.png" alt="img"></p>
<p>然后打开浏览器 输入<a class="link"   href="http://localhost:8889/tree" >localhost:8889<i class="fas fa-external-link-alt"></i></a> 也可以轻松打开</p>
<p><img src="https://pic1.zhimg.com/v2-0c1cf7886039bd2eef0dac4ac2563e58_b.png" alt="img"></p>
<p>因为也用到了nohup，所以并不会随着你关闭网页而停止运行</p>
<p>如果在本地映射端口的时候提醒端口占用如下，需要清理端口，运行下面代码，端口改成对应的就行，然后再输入一下上面的映射，就可以重新进入</p>
<p><img src="https://pic4.zhimg.com/v2-baef76a58e509e5c8650a22ac5e539ef_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -ti:8889 | xargs kill -9</span><br></pre></td></tr></table></figure>
<h3 id="一些基本操作，如创建虚拟环境，和jupyter-没有太大关系"><a href="#一些基本操作，如创建虚拟环境，和jupyter-没有太大关系" class="headerlink" title="一些基本操作，如创建虚拟环境，和jupyter 没有太大关系"></a>一些基本操作，如创建虚拟环境，和jupyter 没有太大关系</h3><p>虚拟环境可以随便你折腾，不会影响到服务器其他的配置，搞坏了大不了删掉重新来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda info --env</span><br></pre></td></tr></table></figure>
<p>查看当前anaconda的环境</p>
<p><img src="https://pic2.zhimg.com/v2-02d41999d1770a66703f7e0e37fb9171_b.png" alt="img"></p>
<p>创建conda 虚拟环境，这里是指定python3.7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create --name python3.7 python&#x3D;3.7 </span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-b09202c2d15eb5c8c6dc7eff27624f09_b.png" alt="img"></p>
<p>安装成功后可以用如下命令打开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate python3.7</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-663c168e06a9f8558f7cb4185ddf91c7_b.png" alt="img"></p>
<p>当base变成你的虚拟环境的名称，则表示你的环境已经创建成功了</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Jupyter_notebook</tag>
        <tag>cloud server</tag>
      </tags>
  </entry>
  <entry>
    <title>2015-2020 美国市场牛油果价格分析和预测</title>
    <url>/2021/01/25/2015-2020-%E7%BE%8E%E5%9B%BD%E5%B8%82%E5%9C%BA%E7%89%9B%E6%B2%B9%E6%9E%9C%E4%BB%B7%E6%A0%BC%E5%88%86%E6%9E%90%E5%92%8C%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<p>作为一位牛油果资深爱好者，苦于牛油果价格实在太贵，Sam 店一个品相俱佳的大果要8块钱，鲜果一号之类等其他精品水果店居然有的要卖到10+一个，还是中果，硬邦邦，不怎么好吃的那种，简直黑心。</p>
<p>同时呢，作为一位申请美帝研究生的大四狗，我严肃认真地要把牛油果价格因素纳入到我选择的范围内。同时，我真的很好奇，美帝牛油果的价格是咋样的。当然最重要的是要完成当前303大数据作业🧐，因为report有点写不出来，就先发个专栏整理整理思路。</p>
<p><img src="https://pic2.zhimg.com/v2-b214bc800969669ea7e7fb985933cbf9_b.png" alt="img"></p>
<p>以下分析以及可视化，借鉴了之前大神们的分析：（他们做的图真的好好看啊！）</p>
<p><a class="link"   href="https://www.kaggle.com/janiobachmann/price-of-avocados-pattern-recognition-analysis" >https://www.kaggle.com/janiobachmann/price-of-avocados-pattern-recognition-analysis<i class="fas fa-external-link-alt"></i></a></p>
<p>但是他们的数据集是从2015-2018，已经有一些年份了，不能如实反应当今市场，尤其是新冠后的影响。碰巧有大神更新了数据集，在原有的基础上新增到2020.5月的牛油果数据。利用前人经验，做未来预测分析</p>
<p><a class="link"   href="https://www.kaggle.com/timmate/avocado-prices-2020" >https://www.kaggle.com/timmate/avocado-prices-2020<i class="fas fa-external-link-alt"></i></a></p>
<p>注：本篇所有分析预测都在r上完成，95%借助ggplot2，yysy，r做图真的好看。预测部分，偷了点懒，直接用的是Facebook开发的prophet包，因为之前没有接触过时间相关的预测，LSTM目前还没有学到家，但ddl在前，等有空再用python补上。</p>
<h3 id="下载并读取"><a href="#下载并读取" class="headerlink" title="下载并读取"></a>下载并读取</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df &lt;- read.csv(<span class="string">&quot;/Users/yuxuan/Desktop/INT301-Avocado-prediction/avocado-updated-2020.csv&quot;</span>)</span><br><span class="line">head(df)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-1a37e1a6cb5b98fb02d285c6124c39b8_b.png" alt="img"></p>
<p>其中以下是我们这次的实验对象 - date - 观察的时间 - average_price - 每一个牛油果的平均价格 - total_volume - 当日售出了多少牛油果 - year - 年份（Date格式） - type - 种类，是有机的还是普通的 - geography - 数据来源的地区</p>
<p>至于X4046,X4225,X4770代表的是牛油果的种类(PLU code)都是Hass 牛油果，只是大小有区别</p>
<p><img src="https://pic3.zhimg.com/v2-b0e4c1ed052387be6ecd17082cf70452_b.png" alt="img"></p>
<h3 id="检查是否存在缺失（missing-value）"><a href="#检查是否存在缺失（missing-value）" class="headerlink" title="检查是否存在缺失（missing value）"></a>检查是否存在缺失（missing value）</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="built_in">is.na</span>(df))</span><br></pre></td></tr></table></figure>
<p>发现数据集无缺失值</p>
<h3 id="根据种类做density-plot"><a href="#根据种类做density-plot" class="headerlink" title="根据种类做density plot"></a>根据种类做density plot</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">options(repr.plot.width = <span class="number">8</span>, repr.plot.height = <span class="number">4</span>)</span><br><span class="line">density_plot &lt;- ggplot(df, aes(x=average_price, fill=type))+</span><br><span class="line">  geom_density()+</span><br><span class="line">  facet_wrap(~type)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),legend.position = <span class="string">&quot;bottom&quot;</span>)+</span><br><span class="line">  labs(title = <span class="string">&quot;Avocado Price by type&quot;</span>)+</span><br><span class="line">  scale_fill_brewer(palette = <span class="string">&quot;Set2&quot;</span>)</span><br><span class="line">density_plot</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-ad250b1df684105fa0ec54b4e433d72a_b.png" alt="img"></p>
<p>图中可以发现</p>
<ul>
<li>普通的牛油果（绿色）大部分集中在1$ 附近，形状也比较高瘦，值域区间相比之下也比较小</li>
<li>但有机的牛油果（红色）则显得更加敦实，值域也宽，最贵的居然要卖到3$</li>
</ul>
<h3 id="量化具体的一些比率"><a href="#量化具体的一些比率" class="headerlink" title="量化具体的一些比率"></a>量化具体的一些比率</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(dplyr)</span><br><span class="line">vol_type &lt;- df %&gt;% group_by(type) %&gt;% summarise(average_volume = <span class="built_in">round</span>(mean(total_volume),<span class="number">3</span>),average_price = <span class="built_in">round</span>(mean(average_price),<span class="number">3</span>)) %&gt;% mutate(volume_percent= <span class="built_in">round</span>(prop.table(average_volume)*<span class="number">100</span>,<span class="number">3</span>))</span><br><span class="line">vol_type</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Type</th>
<th>Average Volume</th>
<th>Average Price</th>
<th>Volume percent</th>
</tr>
</thead>
<tbody><tr>
<td>Conventional</td>
<td>1,818,206 (1.8 M)</td>
<td>1.16 $</td>
<td>96.8%</td>
</tr>
<tr>
<td>Organic</td>
<td>60,127 (0.06 M)</td>
<td>1.62 $</td>
<td>3.2%</td>
</tr>
</tbody></table>
<p>从表格中我们可以发现</p>
<ul>
<li>销售的普通牛油果在市场以均价1.16$（7.58¥）占比居然高达97%</li>
<li>相比之下有机牛油果1.62$ (10.58¥) 市场占比大概只有3%</li>
</ul>
<h3 id="2015-2020间普通和有机牛油果的价格波动曲线"><a href="#2015-2020间普通和有机牛油果的价格波动曲线" class="headerlink" title="2015-2020间普通和有机牛油果的价格波动曲线"></a>2015-2020间普通和有机牛油果的价格波动曲线</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df$date &lt;- as.Date(df$date, <span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Sort the dates and order the datesets in date</span></span><br><span class="line">df &lt;- df[order(df$date),]</span><br><span class="line"></span><br><span class="line"><span class="comment">## Make the plot</span></span><br><span class="line">comparision_plot &lt;- df %&gt;% select(date, average_price, type) %&gt;%</span><br><span class="line">  ggplot(aes(x=date,y=average_price))+</span><br><span class="line">  geom_area(aes(color=type,fill=type),alpha=<span class="number">0.3</span>,position=position_dodge(<span class="number">0.8</span>))+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  scale_color_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#ED7921&quot;</span>,<span class="string">&quot;#62BE51&quot;</span>))+</span><br><span class="line">  scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#FD833E&quot;</span>,<span class="string">&quot;#B8FC5F&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">comparision_plot</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-5e99acd1ce9d879967cc4eb0060ab982_b.png" alt="img"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot(data=df, aes(x=date, y=average_price,col=type))+</span><br><span class="line">  geom_line()+</span><br><span class="line">  facet_wrap(~ type)+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;position&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-8566ef8639d6a840e2050238971d3958_b.png" alt="img"></p>
<ul>
<li>有机的价格永远要高于普通的</li>
<li>价格呈现某种季节性的波动，符合水果季节性波动的常识</li>
<li>是否和销售的量呈现关联，下文探索</li>
</ul>
<h3 id="2015-2020年间的牛油果总的价格分布"><a href="#2015-2020年间的牛油果总的价格分布" class="headerlink" title="2015-2020年间的牛油果总的价格分布"></a>2015-2020年间的牛油果总的价格分布</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot(seasonal_df,aes(x=average_price,fill=as.factor(year)))+</span><br><span class="line">geom_density(alpha=<span class="number">0.5</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">facet_wrap(~year)+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">guides(fill=<span class="literal">FALSE</span>)+</span><br><span class="line">labs(title = <span class="string">&quot;Distribution of Prices by year&quot;</span>,x=<span class="string">&#x27;Average Price&#x27;</span>,y=<span class="string">&#x27;Density&#x27;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#DA4511&quot;</span>, <span class="string">&quot;#FFBD00&quot;</span>, <span class="string">&quot;#6A953F&quot;</span>, <span class="string">&quot;#9A6233&quot;</span>, <span class="string">&quot;#D3AE7C&quot;</span>, <span class="string">&quot;#307CA1&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-8173974e3831c052bfb0ee0bbb1bd384_b.png" alt="img"></p>
<ul>
<li>6年间的价格分布，其中2017年最成正态分布的形状，高端和低端牛油果都在市场分一杯羹</li>
</ul>
<h3 id="价格波动曲线和牛油果售卖的量关系"><a href="#价格波动曲线和牛油果售卖的量关系" class="headerlink" title="价格波动曲线和牛油果售卖的量关系"></a>价格波动曲线和牛油果售卖的量关系</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">library(ggthemes)</span><br><span class="line">library(cowplot)</span><br><span class="line"></span><br><span class="line">options(repr.plot.width=<span class="number">8</span>, repr.plot.height=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## average-price with time series</span></span><br><span class="line">conventional_monthly &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=average_price))+</span><br><span class="line">    geom_line(color=<span class="string">&quot;#5C374C&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    labs(title = <span class="string">&quot;Conventional Avocados&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">max</span>(conventional$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;red&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">min</span>(conventional$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;blue&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_monthly &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=average_price))+</span><br><span class="line">    geom_line(color=<span class="string">&quot;#58D68D&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    labs(title = <span class="string">&quot;Organic Avocados&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">max</span>(organic$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;red&quot;</span>)+</span><br><span class="line">    geom_hline(yintercept = <span class="built_in">min</span>(organic$average_price),linetype=<span class="string">&quot;dashed&quot;</span>,color = <span class="string">&quot;blue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## create a volume chart</span></span><br><span class="line">conventional_volume &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=total_volume))+</span><br><span class="line">    geom_bar(stat = <span class="string">&#x27;identity&#x27;</span>,fill=<span class="string">&quot;#7FB3D5&quot;</span>,color=<span class="string">&quot;black&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    geom_smooth(method = <span class="string">&quot;loess&quot;</span>,color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_volume &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x=date,y=total_volume))+</span><br><span class="line">    geom_bar(stat = <span class="string">&#x27;identity&#x27;</span>,fill=<span class="string">&#x27;#58D68D&#x27;</span>,color=<span class="string">&quot;black&quot;</span>)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill = <span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">    geom_smooth(method = <span class="string">&quot;loess&quot;</span>,color =<span class="string">&quot;red&quot;</span>)</span><br><span class="line"></span><br><span class="line">plot_grid(conventional_monthly,organic_monthly,conventional_volume,organic_volume,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-98f4720367c6e80038c4819fa35cd94c_b.png" alt="img"></p>
<ul>
<li>为了找到季节性规律（seasonal patterns）我将平均售价和销售量以月为单位进行统计分析</li>
<li>A,B图代表的都是以月为单位的平均销售价格（monthly），蓝线代表最小值（min）红线代表最大值（max）</li>
<li>普通牛油果最贵的一个月也就1.8$，最便宜的一个月0.82$；有机的最贵要2.1$，最便宜的也要1.21$</li>
<li>C,D代表的是以月为单位的销量，红线代表的是趋势</li>
<li>美帝人民对牛油果的爱是一贯的，销量呈逐年上升的趋势，这里指的是普通牛油果</li>
<li>19-20年，可能由于经济形势下滑以及20年后的新冠疫情，对有机牛油果的需求减少，未能像普通牛油果一样持续增长</li>
<li>月销量也呈现某种季节性规律，需要接下来的仔细分析</li>
</ul>
<h3 id="2015-2020年间以月为单位比较销量和价格"><a href="#2015-2020年间以月为单位比较销量和价格" class="headerlink" title="2015-2020年间以月为单位比较销量和价格"></a>2015-2020年间以月为单位比较销量和价格</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Process the data into year and month format</span></span><br><span class="line">library(forecast)</span><br><span class="line">seasonal_df &lt;- read.csv(<span class="string">&quot;/Users/yuxuan/Desktop/INT303-Avocado-prediction/avocado-updated-2020.csv&quot;</span>)</span><br><span class="line">seasonal_df$month_year &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%Y-%m&quot;</span>)</span><br><span class="line">seasonal_df$month &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Change the month from a Date format into a numerical foramt, then convert to the three letter format</span></span><br><span class="line">seasonal_df$monthabb &lt;- sapply(seasonal_df$month, <span class="keyword">function</span> (x) <span class="built_in">month.abb</span>[<span class="built_in">as.numeric</span>(x)])</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb,levels=<span class="built_in">month.abb</span>)</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Set the figure size</span></span><br><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the price by month</span></span><br><span class="line"></span><br><span class="line">conv_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">org_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">conv_price &lt;- ts(conv_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_price &lt;- ts(org_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the volume by month</span></span><br><span class="line">conv_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">org_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">conv_volume &lt;- ts(conv_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_volume &lt;- ts(org_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">byyearplot_price_conv &lt;- ggseasonplot(conv_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_price_org &lt;- ggseasonplot(org_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_conv &lt;- ggseasonplot(conv_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados volume \n by year for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_org &lt;- ggseasonplot(org_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados volume by year \n for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">plot_grid(byyearplot_price_conv,byyearplot_price_org,byyearplot_volume_conv,byyearplot_volume_org,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-fed30f65509677d2328dbd5b0a81a78c_b.png" alt="img"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line">conv_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb, y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">whole_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;All Avocados&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns,organic_patterns,whole_patterns,nrow = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-f41fce3780e70ee85fb08df929b3b3c9_b.png" alt="img"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">conv_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb, y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados volume&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">organic_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(total_volume)) %&gt;%</span><br><span class="line">ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados volume&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">whole_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg=mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x=monthabb,y=avg))+</span><br><span class="line">  geom_point(color=<span class="string">&quot;#F35D5D&quot;</span>,aes(size=avg))+</span><br><span class="line">  geom_line(group=<span class="number">0</span>)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;All Avocados volume&quot;</span>,x=<span class="string">&quot;Month&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns_vol,organic_patterns_vol,whole_patterns_vol,nrow = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-d48e337b98047f36cd14b43be68879a3_b.png" alt="img"></p>
<ul>
<li>综合来说，每年的9，10 月份牛油果的平均价格会达到一年中的最高值，2月达到一年的最低值</li>
<li>对于销量来说，美国人喜欢在2月和5月购买牛油果，11月份买牛油果的意愿最低</li>
<li>查资料可得，牛油果一般在8，9月份成熟收获，加上采摘，包装和运输时间所以会有一定的延迟，可以看见图中的八月都是呈现上升趋势。</li>
<li>可以发现销售量和价格呈现一定的负相关，这符合我们的常识，人们喜欢在价格低的时候购买，而一样水果或者蔬菜则会在刚上市时价格逐步上升，达到最高，然后再下降</li>
<li>为什么随着采摘供应和价格会成一定的正相关？我的猜测是，就像苏州人说的“时鲜货”，刚刚摘下的牛油果肯定是又大又好有新鲜，而且前一年的量已经消耗的差不多了，所以价格会有一阵子的上涨，然后下探，符合图中的趋势走向</li>
<li>也可以清晰的看见，销量的确是逐年增加的，大概率是网红不遗余力的宣传，将牛油果作为健康活力，fashion的代名词。这路子的确是正确的，因为美国人民消耗的牛油果总的来说逐年递增</li>
</ul>
<h3 id="2015-2020-以季节为单位分析牛油果价格和销量"><a href="#2015-2020-以季节为单位分析牛油果价格和销量" class="headerlink" title="2015-2020 以季节为单位分析牛油果价格和销量"></a>2015-2020 以季节为单位分析牛油果价格和销量</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## seperate the month into four seasons</span></span><br><span class="line">seasonal_df$season &lt;- ifelse(seasonal_df$month %in% <span class="built_in">c</span>(<span class="string">&quot;03&quot;</span>,<span class="string">&quot;04&quot;</span>,<span class="string">&quot;05&quot;</span>),<span class="string">&quot;Spring&quot;</span>,</span><br><span class="line">ifelse(seasonal_df$month %in% <span class="built_in">c</span>(<span class="string">&quot;06&quot;</span>,<span class="string">&quot;07&quot;</span>,<span class="string">&quot;08&quot;</span>),<span class="string">&quot;Summer&quot;</span>,</span><br><span class="line">ifelse(seasonal_df$month %in% <span class="built_in">c</span>(<span class="string">&quot;09&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;11&quot;</span>),<span class="string">&quot;Autumn&quot;</span>,<span class="string">&quot;Winter&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">## Prepare to analyze the results</span></span><br><span class="line">seasonality_plot_conventional_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type ==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados average price by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average price&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(<span class="string">&quot;$ &quot;</span>,<span class="built_in">round</span>(avg,<span class="number">2</span>))),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">seasonality_plot_conventional_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=<span class="built_in">round</span>(mean(total_volume/<span class="number">1000000</span>),<span class="number">2</span>)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados total volume by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(avg,<span class="string">&quot; m&quot;</span>)),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot_grid(seasonality_plot_conventional_price,seasonality_plot_conventional_volume,nrow = 2)</span></span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type ==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados average price by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average price&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(<span class="string">&quot;$ &quot;</span>,<span class="built_in">round</span>(avg,<span class="number">2</span>))),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(season,year) %&gt;% summarise(avg=<span class="built_in">round</span>(mean(total_volume/<span class="number">1000000</span>),<span class="number">2</span>)) %&gt;%</span><br><span class="line">  ggplot(aes(x=season,y=avg,color=season))+</span><br><span class="line">  geom_segment(aes(x=season,xend=season,y=<span class="number">0</span>,yend=avg),show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados total volume by Season&quot;</span>,x=<span class="string">&quot;&quot;</span>,y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">  geom_text(aes(x=season,y=<span class="number">0.01</span>,label=paste0(avg,<span class="string">&quot; m&quot;</span>)),hjust=-<span class="number">0.5</span>,vjust=-<span class="number">0.5</span>,size=<span class="number">4</span>,color=<span class="string">&quot;black&quot;</span>,fontface=<span class="string">&#x27;italic&#x27;</span>,angle=<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">plot_grid(seasonality_plot_conventional_price,seasonality_plot_organic_price,seasonality_plot_conventional_volume,seasonality_plot_organic_volume,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-f6a063580538fb3100cdad2577de62b7_b.png" alt="img"></p>
<ul>
<li>春（3-5），夏（6-8），秋（9-11），冬（12-2）</li>
<li>A,B 代表的是牛油果的平均价格，以有机和非有机划分；C,D 代表的则是销量，同样以有机和非有机划分，m代表million百万</li>
<li>总的来说，春冬季买牛油果比较划算，均价最低，同样也反应在了销量上，春夏销量最高，因为牛油果自从8，9月份成熟以后已经大量充斥了市场，所以价格会比较低，吸引较多的买家，直到下一批牛油果的成熟</li>
</ul>
<h3 id="牛油果价格和城市的关系"><a href="#牛油果价格和城市的关系" class="headerlink" title="牛油果价格和城市的关系"></a>牛油果价格和城市的关系</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(forcats)</span><br><span class="line">geo_conv_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(geography)%&gt;%  summarise(avg=<span class="built_in">round</span>(mean(average_price),<span class="number">2</span>)) %&gt;% arrange(avg) %&gt;% slice(<span class="number">1</span>:<span class="number">6</span>)  %&gt;% mutate(geography=fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x=geography,y=avg))+</span><br><span class="line">  geom_bar(stat = <span class="string">&quot;identity&quot;</span>,position = <span class="string">&quot;dodge&quot;</span>,alpha=<span class="number">.6</span>,width =<span class="number">.4</span>,show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label=avg),vjust=<span class="number">1.5</span>,color=<span class="string">&#x27;black&#x27;</span>,size=<span class="number">5</span>)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title = element_text(hjust = <span class="number">0.6</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Conventional Avocados average price by geography&quot;</span>,x=<span class="string">&quot;Geography place&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">geo_org_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(geography)%&gt;%  summarise(avg=<span class="built_in">round</span>(mean(average_price),<span class="number">2</span>)) %&gt;% arrange(avg) %&gt;% slice(<span class="number">1</span>:<span class="number">6</span>) %&gt;% mutate(geography=fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x=geography,y=avg))+</span><br><span class="line">  geom_bar(stat = <span class="string">&quot;identity&quot;</span>,position = <span class="string">&quot;dodge&quot;</span>,alpha=<span class="number">.6</span>,width =<span class="number">.4</span>,show.legend = <span class="literal">FALSE</span>)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label=avg),vjust=<span class="number">1.5</span>,color=<span class="string">&#x27;black&#x27;</span>,size=<span class="number">5</span>)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title = element_text(hjust = <span class="number">0.6</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Organic Avocados average price by geography&quot;</span>,x=<span class="string">&quot;Geography place&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">plot_grid(geo_conv_price,geo_org_price,nrow = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-e321eb850172731dfd4954af3186fb90_b.png" alt="img"></p>
<ul>
<li>通过计算返回前六低的地区和城市</li>
<li>以非有机为例：菲尼克斯（凤凰城），休斯顿，达拉斯，中南部城市群，新墨西哥洲，Nashville（靠近印第安纳洲）</li>
<li>通过地图查询，前五个都在美国的中西部，靠近墨西哥</li>
<li>通过查询，牛油果原产地墨西哥，美国价格最低的前5个城市很有可能是种植牛油果的基地，所以牛油果价格便宜</li>
<li>维基百科上说之前加州和佛罗里达是牛油果的主产地，但随着水资源的价格上涨，牛油果产地发生了写偏移，我合理怀疑是向着上述地点前一，前五个城市，大致都分布在同一个纬度上</li>
<li>下面的链接说的是美国现阶段牛油果种植地方，提到了圣安东尼奥，也是中西部的城市，毗邻休斯顿，达拉斯，因为气候很像墨西哥，适合牛油果种植，并且淡水相对便宜</li>
</ul>
<p><a class="link"   href="https://www.hunker.com/12003820/in-what-areas-of-the-united-states-can-you-grow-an-avocado-treewww.hunker.com" >https://www.hunker.com/12003820/in-what-areas-of-the-united-states-can-you-grow-an-avocado-treewww.hunker.com<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>这里我用Google map将上述六个城市给标注出来了，的确是近似处于同一纬度，牛油果前五便宜的城市的确靠近墨西哥</li>
</ul>
<p><img src="https://pic3.zhimg.com/v2-47ade01c452baebea532f2cbe6ba6eb6_b.png" alt="img"></p>
<h3 id="牛油果价格预测和走势图"><a href="#牛油果价格预测和走势图" class="headerlink" title="牛油果价格预测和走势图"></a>牛油果价格预测和走势图</h3><p><a class="link"   href="https://facebook.github.io/prophet/docs/quick_start.html" >Quick Start<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(prophet)</span><br><span class="line">library(cowplot)</span><br><span class="line">library(gridExtra)</span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggpubr)</span><br><span class="line">library(devtools)</span><br><span class="line"><span class="comment">## Select and filter the data and fit the model</span></span><br><span class="line">price_predict &lt;- df %&gt;% select(date,average_price) %&gt;% group_by(date) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line">colnames(price_predict) &lt;- <span class="built_in">c</span>(<span class="string">&#x27;ds&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">model &lt;- prophet(price_predict,daily.seasonality = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## make prediction or forecast the results</span></span><br><span class="line">future &lt;- make_future_dataframe(model,periods = <span class="number">365</span>)</span><br><span class="line">forecast &lt;- predict(model,future)</span><br><span class="line">plot(model,forecast)+</span><br><span class="line">theme_minimal()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#F4F6F7&quot;</span>))+</span><br><span class="line">  labs(title = <span class="string">&quot;Avocados price prediction in next year&quot;</span>,x=<span class="string">&quot;year&quot;</span>,y=<span class="string">&quot;Average Price&quot;</span>)</span><br><span class="line"></span><br><span class="line">trend &lt;- prophet_plot_components(model,forecast)</span><br><span class="line"></span><br><span class="line">year_trend &lt;- trend[<span class="number">1</span>]</span><br><span class="line">month_trend &lt;- trend[<span class="number">3</span>]</span><br><span class="line">week_trend &lt;- trend[<span class="number">2</span>]</span><br><span class="line">time_trend &lt;- trend[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">overall_trend &lt;- <span class="built_in">c</span>(year_trend,month_trend,week_trend,time_trend)</span><br><span class="line">ggarrange(plotlist = overall_trend, labels = <span class="built_in">c</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-cf7950b7694282962ed49a75959649ca_b.png" alt="img"></p>
<ul>
<li>利用Facebook开发的prophet包进行时间序列上的价格预测</li>
<li>可以看见价格还是会呈现一个季节性波动，但是价格可能会走低</li>
<li>联系到当前新冠疫情在美国的疯狂爆发，牛油果销量下滑是必然的，走势向下也符合预期</li>
</ul>
<p><img src="https://pic4.zhimg.com/v2-507cf3a3836444e22b9f081ef35f7b3b_b.png" alt="img"></p>
<ul>
<li>prophet包自带的功能，可以根据时间，细化到每一天以小时为单位的时间预测</li>
<li>A图是以年为单位的分析预测：从15年开始，牛油果的价格一直保持正增长，17年是疯狂的一年，以高于1.30的幅度快速增长，这也应和了我的个人感受，因为我就是17年才知道这种水果，也就是说网红公司在这一年大幅度的疯狂宣传这款水果，然后在价格上炒的越来愈高。18年后价格增速趋于稳定，稳定在每年1.28左右增长；至于未来的一年，prophet也给出了自己的预测，区间大概在[1.20-1.34]。考虑到北美新冠疫情的影响，我觉得很有可能会以1.20左右，但仍然是正增长，据我在推特上观察，北美千禧年一代对牛油果仍然是非常非常喜欢，各种可爱有趣的漫画是层出不穷。我相信2020年牛油果的价格仍然上涨，只是增速放缓</li>
<li>B图是以月为单位的分析，可以看见在5月份，价格转为正增长，持续到10月份，价格达到峰值，随后价格开始下跌，到来年的2月份达到低点，符合之前的分析</li>
<li>C图是以每周为单位分析，牛油果在周末价格最高，符合美国家庭周末在周末进行大采购的习惯，所以那两天，价格也最高</li>
<li>D图是以每天来分析，没有参考意义，因为我的数据集就没有这个带小时为单位的时间</li>
</ul>
<p>完整版的代码请在GitHub下载</p>
<p><a class="link"   href="https://github.com/yuxuanwu17/INT303-Avocado-prediction" >https://github.com/yuxuanwu17/INT303-Avocado-prediction<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>EDA</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 调试配置Hadoop</title>
    <url>/2021/01/26/IntelliJ-IDEA-%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AEHadoop/</url>
    <content><![CDATA[<p>本文是目前为止最简单，也不需要配Hadoop环境之类的教程，但是如果是xjtlu的小伙伴，可能就不太合适，因为老师好像是要求写出hdfs的操作的代码的，这儿可以参考阿里云第二弹。</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p>我们今天这篇文章是等价于以下这篇文章，来运行wordcount.java这个文件的</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/271772216" >loner：阿里云Hadoop第二弹（运行WordCount）<i class="fas fa-external-link-alt"></i></a></p>
<p>在第二弹里面，核心的思路就是，在HDFS上创建文件，本地上传文件，连同你的script，然后在服务器里用javac compile出你的classes，然后打包成一个jar包，然后在Hadoop上运行jar包，然后同样也是用Hadoop命令查看你的结果。步骤显得非常繁琐</p>
<p>但是，在我注册完（白嫖完）IntelliJ IDEA的专业版后，他会提醒你需不需要装big data tools这个第三方插件，然后我巨盯着下面这行菜单栏陷入沉思，肯定可以有那种一键run，然后生成output的方式。</p>
<p><img src="https://pic2.zhimg.com/v2-ad79047cd3d9615c024eef12ef8131ad_b.png" alt="img"></p>
<p>至于为什么不用eclipse，因为它实在太丑了（谁还不是个颜狗呢🤪）</p>
<p>我首先总结下Hadoop的三种运行模式</p>
<p>1。 单机模式</p>
<p>2。 伪分布模式</p>
<p>3。 完全分布模式</p>
<p>之前的三篇文章其实搭建的都是伪分布模式Hadoop的安装。但实际上基于Hadoop的MapReduce程序在本地程序上就完全可以运行，并不一定需要伪分布模式，甚至连Hadoop都不一定需要安装。在单机模式下，可以将MapReduce的程序当成一个普普通通的java程序。在这里我们需要借助项目管理工具Maven。这里就不用导入各种依赖，只需要一键导入pom文件（其中制定了Hadoop依赖包的名字和版本号），就不需要在花额外的时间纠缠在各种依赖上，只需要专门focus在你的代码编写上了</p>
<p>这里插一句：有很多小伙伴问我阿里云教程一步步做了，为啥还是装不上，各种找不到啊，或者报错。</p>
<p>1。代码一行行运行，不要全部复制，因为terminal里面毕竟是一行行运行的，若复制几行，很有可能会出错，比如某一行忘记运行了</p>
<p>2。如果是阿里云，记住，重置系统花的时间远比debug要的花的时间少，如果你只是完成作业，请大胆重置，如果你有很多时间，且很有兴趣，可以大胆的去搜去研究，对Linux环境的理解会很有帮助</p>
<p>进入正题，我们首先需要创建一个project，并且选择maven。</p>
<p><img src="https://pic3.zhimg.com/v2-0dd014d30b19d6f721aaa250fb0db85e_b.png" alt="img"></p>
<p>什么是maven，可以在下面链接查看，以及我当时参考的教程。这里非常感谢给予帮助的郭同学，因为之前完全没接触过这些只是，啥都不懂，非常感谢他手把手教我，然后重新看下面的操作，就很好理解（PS:xml的格式一定要完全复制，我之前配置Hadoop环境的时候碰到一个问题就是它xml格式上下不是完全相同的，/做区分）</p>
<p><img src="https://pic3.zhimg.com/v2-845fd7e89d7577c7401ac9516214ab5e_b.png" alt="img"></p>
<p><a class="link"   href="https://www.polarxiong.com/archives/Hadoop-Intellij%E7%BB%93%E5%90%88Maven%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95MapReduce%E7%A8%8B%E5%BA%8F-%E6%97%A0%E9%9C%80%E6%90%AD%E8%BD%BDHadoop%E5%92%8CHDFS%E7%8E%AF%E5%A2%83.html" >Hadoop: Intellij结合Maven本地运行和调试MapReduce程序 (无需搭载Hadoop和HDFS环境)<i class="fas fa-external-link-alt"></i></a></p>
<p>输入名称后继续，什么都不要改，然后进入新创建的project，初始状态如下</p>
<p><img src="https://pic3.zhimg.com/v2-cad571284695667153a3ef735b0eea6a_b.png" alt="img"></p>
<p>然后下面导入我们的pom文件，路径依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;Hadoop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;6&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;6&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;6&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;6&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;7&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;7&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;7&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;7&lt;&#x2F;target&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;apache&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-common&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.2.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
<p>会在右上角红框内出现这个，点击loade pom change，然后Hadoop会自动帮你配置完成，第一次可能需要点时间，等它compile完，你就完成一大半了。</p>
<p><img src="https://pic3.zhimg.com/v2-db0ce18da28171db469974f9a0ab68d2_b.png" alt="img"></p>
<p>下来书写你的WordCount.java </p>
<p>首先创造一个java，路径是在src/main/java底下new 一个java，class name 叫WordCount,然后这里导入我之前写的WordCount.java</p>
<p><img src="https://pic4.zhimg.com/v2-78d15bbd7925f9bddae8c6ec8015c6c7_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">public class WordCount &#123;</span><br><span class="line"></span><br><span class="line">    public static class TokenizerMapper</span><br><span class="line">            extends Mapper&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">        private final static IntWritable one &#x3D; new IntWritable(1);</span><br><span class="line">        private Text word &#x3D; new Text();</span><br><span class="line"></span><br><span class="line">        public void map(Object key, Text value, Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            StringTokenizer itr &#x3D; new StringTokenizer(value.toString());</span><br><span class="line">            while (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class IntSumReducer</span><br><span class="line">            extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line">        private IntWritable result &#x3D; new IntWritable();</span><br><span class="line"></span><br><span class="line">        public void reduce(Text key, Iterable&lt;IntWritable&gt; values,</span><br><span class="line">                           Context context</span><br><span class="line">        ) throws IOException, InterruptedException &#123;</span><br><span class="line">            int sum &#x3D; 0;</span><br><span class="line">            for (IntWritable val : values) &#123;</span><br><span class="line">                sum +&#x3D; val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Configuration conf &#x3D; new Configuration();</span><br><span class="line">        Job job &#x3D; Job.getInstance(conf, &quot;word count&quot;);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, new Path(args[0]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class="line">        System.exit(job.waitForCompletion(true) ? 0 : 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下来需要配置运行，选择application</p>
<p><img src="https://pic1.zhimg.com/v2-94a80fe5f6a100e331e2cd30918f5808_b.png" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-c83dbde658707eb3ef7955ba02e34a61_b.png" alt="img"></p>
<p>选择application后需要配置如下，name随意，最重要的是Main class: 保证名字和你new的java文件名字一致，input和output是等会要放入的文件，输入和输出</p>
<p><img src="https://pic2.zhimg.com/v2-620013b2b632c38fee81735517ab9d69_b.png" alt="img"></p>
<p>配置输入文件</p>
<p>这里我刚刚在configuration里面写了我的输入文件叫input，需要配置输入路径，这里在（src同级目录下）新建一个文件夹input，并且把你需要输入的文件放进去，这儿还是之前的pg100.txt</p>
<p><img src="https://pic1.zhimg.com/v2-ad377d58ed8fd1a421ef3c9af0f9b280_b.png" alt="img"></p>
<p>额外，我们需要在File-&gt;Project Structure（或者mac快捷键command+;)将language level调整为7，然后点右下角ok</p>
<p><img src="https://pic2.zhimg.com/v2-bb93bed4ab015cdd6031b639195f1e79_b.png" alt="img"></p>
<p>运行和调试</p>
<p>直接点右上角的run</p>
<p><img src="https://pic1.zhimg.com/v2-b47e1c1b0a5ab1c032016956abd83188_b.png" alt="img"></p>
<p>会出现如下情况</p>
<p><img src="https://pic2.zhimg.com/v2-294c4ed3ae9673755c5f6b46cbe59c19_b.png" alt="img"></p>
<p>注意：这里的红字不是报错，不要慌！</p>
<p><img src="https://pic4.zhimg.com/v2-363633fe92ac4dda9f9f572ede3cc123_b.png" alt="img"></p>
<p>运行成功后，你的文件会出现一个output的文件，由于output的先天特性，它无法覆盖，所以下次运行的时候请删除之前的那个，或者你改个名字（我后来好像看见这个可以用其他方法覆盖的，这里就不做涉及）</p>
<p><img src="https://pic3.zhimg.com/v2-f7308af1cc604837f179edbf26a8b492_b.png" alt="img"></p>
<p>打开part-r-00000，会出现你Hadoop运行的结果</p>
<p><img src="https://pic4.zhimg.com/v2-87c20a09d5c68150c7374947e2f54bcf_b.png" alt="img"></p>
<p>到现在为，用IDEA配置Hadoop已经全部完成了。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>从阿里云轻量服务器安装Hadoop及环境配置</title>
    <url>/2021/01/26/%E4%BB%8E%E9%98%BF%E9%87%8C%E4%BA%91%E8%BD%BB%E9%87%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Hadoop%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>知乎首次写文章，恳请大家多多担待</p>
<p>本人是一名大四生物信息的学生，在大数据课上，老师需要我们配置Hadoop去处理一些东西。网上的一些教程互相冲突，记录一下这个从头可以完全运行成功的教程</p>
<ol>
<li>购买服务器</li>
</ol>
<p>因为本人使用的仍然是14年的MBP，怕随随便便装个新系统把电脑给折腾坏了，这里购买的是云服务器，这里首推阿里云。</p>
<p>若您是常年使用谷歌搜索，请注意关闭梯子，因为阿里云是有国内国外两个系统，各自独立，虽然墙外的服务器可以免费试用2个月，但各种实名认证是绕不开的。</p>
<p>若您是学生，阿里云有一个开发者成长计划，专门针对在校大学生，也就是教育优惠。非常便宜，只需要9.5一个月</p>
<p><a class="link"   href="https://developer.aliyun.com/plan/grow-up" >阿里云开发者成长计划<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://pic1.zhimg.com/v2-b9cf2d24d57aa3e715020e3f6e38cd1c_b.png" alt="img"></p>
<p>\2. 服务器选择和配置</p>
<p>这里选择的是轻量服务器，系统镜像和应用镜像不需要改变，保持默认值就行（WordPress, CentOS 7.3）</p>
<p><img src="https://pic2.zhimg.com/v2-12c765376ed1ffb827435c4047b8a671_b.png" alt="img"></p>
<p>这里需要设置root权限和密码</p>
<p>设置成功后通过本地terminal（MAC）或者cmd（Windows）来构建ssh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@****</span><br></pre></td></tr></table></figure>
<p>然后输入之前设置的root的权限的密码（注意：这里的密码是不会有任何显示的）</p>
<p><img src="https://pic1.zhimg.com/v2-af9e75a4cb07870aa8373b4671862198_b.png" alt="img"></p>
<p>若出现上图的情况，需要清理一下之前的key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -R XX.XX.XX.XX</span><br></pre></td></tr></table></figure>
<p>然后再次用ssh连接，然后yes</p>
<p><img src="https://pic2.zhimg.com/v2-e12d923ff1d5a1f5f75c86ee11fd447d_b.png" alt="img"></p>
<p>好，到此我们进入到了阿里云的服务器</p>
<p>\3. 我们开始配置java环境</p>
<p>首先下载java的jdk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download.java.net&#x2F;openjdk&#x2F;jdk8u41&#x2F;ri&#x2F;openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br></pre></td></tr></table></figure>
<p>然后解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br></pre></td></tr></table></figure>
<p>移动位置并且配置java路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv java-se-8u41-ri&#x2F; &#x2F;usr&#x2F;java8</span><br><span class="line">echo &#39;export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java8&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-85701c9548e5c31b2faaf569c31eed48_b.png" alt="img"></p>
<p>这是理想情况，若安装成功会出现如下结果</p>
<p>\4. 我们进行Hadoop的安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;hadoop&#x2F;common&#x2F;hadoop-2.9.2&#x2F;hadoop-2.9.2.tar.gz</span><br></pre></td></tr></table></figure>
<p>这儿是清华的镜像源，国内的小伙伴下载比较快</p>
<p>按照惯例解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.9.2.tar.gz -C &#x2F;opt&#x2F;</span><br><span class="line">mv &#x2F;opt&#x2F;hadoop-2.9.2 &#x2F;opt&#x2F;hadoop</span><br></pre></td></tr></table></figure>
<p>配置地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;export HADOOP_HOME&#x3D;&#x2F;opt&#x2F;hadoop&#x2F;&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;sbin&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>配置yarn和hadoop</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java8&quot; &gt;&gt; &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;yarn-env.sh</span><br><span class="line">echo &quot;export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java8&quot; &gt;&gt; &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh</span><br></pre></td></tr></table></figure>
<p>查看Hadoop 安装情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-c7b11851e5c3f5083809748875ef90aa_b.png" alt="img"></p>
<p>若出现上图情况，则说明安装成功</p>
<p>\5. 接下来需要利用vim来操作core-site 和 hdfs-site</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml</span><br></pre></td></tr></table></figure>
<p>进入vim环境</p>
<p><img src="https://pic2.zhimg.com/v2-c913566815ccb9dc077e6b1905c9f261_b.png" alt="img"></p>
<p>按下i（insert）修改</p>
<p>光标移动至configuration之间，复制如下的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;file:&#x2F;opt&#x2F;hadoop&#x2F;tmp&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;description&gt;location to store temporary files&lt;&#x2F;description&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<p>然后按下esc，停止修改，然后打”:wq”（实际无“”）退出vim修改</p>
<p>同理操作hdfs-site</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;opt&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;file:&#x2F;opt&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;file:&#x2F;opt&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<p>配置master和slave连接，运行如下指令，并且一直回车，直至出现如下图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa </span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-2a2c7f685bee80d7e51469a49c64c282_b.png" alt="img"></p>
<p>运行如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>
<p>启动Hadoop</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>查看是否配置成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p>成功图</p>
<p><img src="https://pic3.zhimg.com/v2-1d41b7f780ab263558dcdd06b11623be_b.png" alt="img"></p>
<p>\7. 注意注意：接下来需要开启你在阿里云的防火墙端口，才可以在浏览器上访问，否则你怎么弄都是访问不到 (这里我卡了快一个礼拜，最后非常感谢阿里云的小哥哥帮我解决了这个问题)</p>
<p><img src="https://pic1.zhimg.com/v2-ca4e2239f097d66886dae184064870fc_b.png" alt="img"></p>
<p>最后你就可以在浏览器输入XX.XX.XX.XX**:50070 或者**XX.XX.XX.XX:8088来在浏览器上访问你的Hadoop</p>
<p>效果图如下</p>
<p><img src="https://pic1.zhimg.com/v2-a562c44a3df91441ca1fd4945fdcbc10_b.png" alt="img"></p>
<p>以及</p>
<p><img src="https://pic3.zhimg.com/v2-335aaf433e9d3fdec8ef045419837fba_b.png" alt="img"></p>
<p><strong>结语</strong> </p>
<p>因为我是一名大四生物信息的学生，对于计算机的至少掌握不是全，一些tcp-ip协议之类的指令没有掌握，所以很多都是一知半解，只是照着教程一步步装，若有错误，请大家指导。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>tutorial</tag>
        <tag>cloud server</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云Hadoop第二弹（运行WordCount）</title>
    <url>/2021/01/26/%E9%98%BF%E9%87%8C%E4%BA%91Hadoop%E7%AC%AC%E4%BA%8C%E5%BC%B9%EF%BC%88%E8%BF%90%E8%A1%8CWordCount%EF%BC%89/</url>
    <content><![CDATA[<p>书接上文</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p>首先检查java 环境和Hadoop 环境是否配置妥当, 并且检查Hadoop是否已经启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-bc60a5be51a0785a8340726cdb26419b_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-ea0b84eac9c4d56857a7f185622ef725_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-106a2381128b4ff82a48be073263819d_b.png" alt="img"></p>
<p>本文章用到的WordCount使用自web，java文件如有需要请在下方连接下载（如有机会，大家给我GitHub账户点个关注，谢谢）（如果是xjtlu的小伙伴，暂时不要用老师给的wordcount.java，因为反正不知道什么原因我这个方法就是运行不出来，如果只是需要check一下他配置的好不好，可以直接拿我这个确定的可以成功的script来试一下）</p>
<p><a class="link"   href="https://github.com/yuxuanwu17/Hadoop/blob/main/WordCount_success.java" >https://github.com/yuxuanwu17/Hadoop/blob/main/WordCount_success.java<i class="fas fa-external-link-alt"></i></a></p>
<p>这里推荐一个传文件的图形化界面，可以直接拖拽，这样就不用繁琐的scp语句</p>
<p>Windows： wincsp </p>
<p><a class="link"   href="https://winscp.net/eng/download.php" >https://winscp.net/eng/download.php<i class="fas fa-external-link-alt"></i></a></p>
<p>MAC: FileZilla  </p>
<p><a class="link"   href="https://filezilla-project.org/download.php?type=client" >Download FileZilla Client for Mac OS X<i class="fas fa-external-link-alt"></i></a></p>
<p>对上述两app的具体操作可以看官方文档，这里不再赘述</p>
<p>以下以MAC：FileZilla 为例子</p>
<p><img src="https://pic3.zhimg.com/v2-96269965d3602b37766b8ec2bff6f26a_b.png" alt="img"></p>
<p>再这儿输入你的主机用户名和密码，这里通常以root权限来操作，然后端口22（ssh连接）</p>
<p>连接成功后，进入如下的界面</p>
<p><img src="https://pic3.zhimg.com/v2-84b3168e88338d3dc213a128f7c1a026_b.png" alt="img"></p>
<p>然后你可以在你的远端服务器上右键，“Create Directory”，我这里面叫cw里面包含两个子文件 “inputdata”和“tutorial_classes”，并且把之前提到的java文件“WordCount”拖入到cw这个子文件下，效果图如下。</p>
<p><img src="https://pic1.zhimg.com/v2-4d3cfa1b16960f8588e33f3b040c3548_b.png" alt="img"></p>
<p>这儿的input_data 需要存放你等会需要处理的文件，pg100是我们test的对象</p>
<p><img src="https://pic1.zhimg.com/v2-108e735d3349cbda806a7fb50be210c8_b.png" alt="img"></p>
<p>接下来配置Hadoop的路径之类的，同理，terminal打开，进入你的阿里云服务器</p>
<p>配置HADOOP_CLASSPATH （注意，如果是关闭后打开，记得重新运行一下这行代码，原因暂时不知道，若有知道的请评论区告诉呀）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HADOOP_CLASSPATH&#x3D;$(hadoop classpath)</span><br></pre></td></tr></table></figure>
<p>同时输出以下HADOOP_CLASSPATH 来看一下是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $HADOOP_CLASSPATH</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-63dbc77d229db739c7c1ecf61b6bed76_b.png" alt="img"></p>
<p>若出现如下结果则说明一切运行成功</p>
<p>接下来在HDFS上创建一个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir &#x2F;pg100</span><br></pre></td></tr></table></figure>
<p>打开你的50070 端口，在右上角的Utilities里面的Browse the file system可以查看</p>
<p><img src="https://pic4.zhimg.com/v2-55f6f53ec031fe6e3d44410195c04693_b.png" alt="img"></p>
<p>再在这个文件里创建一个子文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir &#x2F;pg100&#x2F;input</span><br></pre></td></tr></table></figure>
<p>然后你点入那个pg100，就会发现有个input，此时里面暂时还没有文件</p>
<p><img src="https://pic1.zhimg.com/v2-f1e7f777fa5efcbb6651e230df6c4780_b.png" alt="img"></p>
<p>下来你需要upload你的文件到input地址下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -put &#39;&#x2F;root&#x2F;cw&#x2F;input_data&#x2F;pg100.txt&#39; &#x2F;pg100&#x2F;input</span><br></pre></td></tr></table></figure>
<p>然后你就会发现如下情况，说明已经上传成功了</p>
<p><img src="https://pic1.zhimg.com/v2-0a68b432563ddc0ad7f766e7d2caaff4_b.png" alt="img"></p>
<p>下来需要在terminal进入你的cw文件, 来运行你的java code 以下操作都cw路径底下操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd cw</span><br></pre></td></tr></table></figure>
<p>进入成功后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -classpath $&#123;HADOOP_CLASSPATH&#125; -d &#39;&#x2F;root&#x2F;cw&#x2F;tutorial_classes&#39; &#39;&#x2F;root&#x2F;cw&#x2F;WordCount.java&#39;</span><br></pre></td></tr></table></figure>
<p>上述的意思是将java 文件里的class compile到tutorial_classes</p>
<p>结果是在路径底下会出现三个class文件</p>
<p><img src="https://pic1.zhimg.com/v2-e9b12f0aa357d9b29482e2e4474fd9e8_b.png" alt="img"></p>
<p>下来需要将output出来的三个文件放在一个jar文件里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar -cvf firstTrial.jar -C tutorial_classes&#x2F; .</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-d9827900535428bb7c739d2f97cb00f7_b.png" alt="img"></p>
<p><img src="https://pic3.zhimg.com/v2-7dfb7f7667dd3c26cdb4d30013d42082_b.png" alt="img"></p>
<p>下来是在Hadoop上运行jar文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar &#39;&#x2F;root&#x2F;cw&#x2F;firstTrial.jar&#39; WordCount &#x2F;pg100&#x2F;input &#x2F;pg100&#x2F;output</span><br></pre></td></tr></table></figure>
<p>注意：中间的WordCount指的是之前那个java文件的Class后面，注意下面只是上文的格式，不用运行！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar &lt;jar_file&gt; &lt;class_name&gt; &lt;HDFS_input_directory&gt; &lt;HDFS_output_directory&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src="https://pic3.zhimg.com/v2-5e6f74dafefc6178e7455b7a919456b6_b.png" alt="img"></p>
<p>可以查看output，“| head” 是为了查看前几个，这个sample的个数比较大，不适宜全部展开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop dfs -cat &#x2F;pg100&#x2F;output&#x2F;* | head</span><br></pre></td></tr></table></figure>
<p>效果图</p>
<p><img src="https://pic2.zhimg.com/v2-79965028669722decc012e514f918c35_b.png" alt="img"></p>
<p>如有问题，欢迎在评论区指出呀，写文件不容易，求点赞</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>cloud server</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 在mac本地的配置</title>
    <url>/2021/01/26/Hadoop-%E5%9C%A8mac%E6%9C%AC%E5%9C%B0%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a class="link"   href="https://zhuanlan.zhihu.com/p/269047002" >loner：从阿里云轻量服务器安装Hadoop及环境配置<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/271772216" >loner：阿里云Hadoop第二弹（运行WordCount）<i class="fas fa-external-link-alt"></i></a></p>
<p>之前在阿里云上的案例我成功运行了wordcount。但是考虑到实际的编程，在阿里云上的可视化界面显得有些艰难，更不要提eclipse界面有点丑。我觉得还是用jetbrain公司的IDEA来开发，这儿学生可以免费使用专业版，如果有需要可以自行下载。主要是有大数据工具的插件Hadoop，然后就开始我一个礼拜的捣鼓，然后发现好像阿里云的9000端口好像无法打开（网上说什么内网的原因，所以在Hadoop上链接不上）于是偶然发现mac在本地配置的教程，就此汇总一下。</p>
<p><strong>Java的安装</strong></p>
<p>不再赘述，网上有很多的教程，在保证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version </span><br></pre></td></tr></table></figure>
<p>可以输出如下界面，则我们开始Hadoop的配置</p>
<p><img src="https://pic3.zhimg.com/v2-d0a5d1671f8e707705db4068ed2c3b36_b.png" alt="img"></p>
<p><strong>下载Hadoop的原始代码</strong></p>
<p>本文章全程以hadoop-2.9.2为例子，在下面的链接中下载hadoop-2.9.2.tar.gz 既可以</p>
<p>Index of /dist/hadoop/core/hadoop-2.9.2archive.apache.org</p>
<p>解压到本地的目录下面</p>
<p><strong>添加Hadoop的环境变量</strong></p>
<p>这儿我们需要用vim修改 ~/.bash_profile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>
<p>在最下面添加这几行代码，编辑完成后:wq退出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME&#x3D;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2</span><br><span class="line">export CLASSPATH&#x3D;$($HADOOP_HOME&#x2F;bin&#x2F;hadoop classpath):$CLASSPATH</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR&#x3D;$HADOOP_HOME&#x2F;lib&#x2F;native</span><br><span class="line">export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-930eafe5cc710ad971b5117743db5a01_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>
<p>运行保存修改，然后用hadoop version 查看Hadoop是否配置成功，若如下界面则成功</p>
<p><img src="https://pic1.zhimg.com/v2-ee20ec242e386db002380dcb72867920_b.png" alt="img"></p>
<p><strong>修改Hadoop的配置文件(如下操作都需要cd到Hadoop解压的环境来操作)</strong></p>
<p><strong>这些配置文件都保存在hadoop-2.9.2/etc/hadoop/路径下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;etc&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure>
<ol>
<li><a class="link"   href="http://hadoop-env.sh/" >hadoop-env.sh<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p>用vim打开后在JAVA_HOME 和 HADOOP_CONF_DIR和HADOOP_HOME 来进行修改,这些分别对应着本地各自的目录</p>
<p><img src="https://pic4.zhimg.com/v2-94f2b2349ea9e6c2702503234f4693a7_b.png" alt="img"></p>
<p>\2. core_site.xml </p>
<p><img src="https://pic2.zhimg.com/v2-53c0b5f20163d17f1ec17df2aba54361_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--用来指定hadoop运行时产生文件的存放目录  自己创建--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;tmp&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>
<p>\3. 修改hdfs-site.xml</p>
<p><img src="https://pic2.zhimg.com/v2-e604bbc1c67dbf33d1362ce2e607ada5_b.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--不是root用户也可以写文件到hdfs--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.permissions&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;false&lt;&#x2F;value&gt;    &lt;!--关闭防火墙--&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--把路径换成本地的name坐在位置--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;tmp&#x2F;dfs&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--在本地新建一个存放hadoop数据的文件夹，然后将路径在这里配置一下--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;&#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;tmp&#x2F;dfs&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>
<p><strong>启动Hadoop</strong></p>
<ol>
<li><strong>NameNode</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>
<p><strong>2. HDFS</strong></p>
<p><strong>首先先进入到sbin目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;Users&#x2F;yuxuan&#x2F;hadoop-2.9.2&#x2F;sbin&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>启动HDFS</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start-dfs.sh</span><br></pre></td></tr></table></figure>
<p>若成功了，需要输入三次密码</p>
<p>若失败，则检查mac系统的远程登陆的许可是否打开</p>
<p><img src="https://pic2.zhimg.com/v2-81822aef74c93d30d0922e6418988df5_b.png" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-3dfdcfacb09068a89b21bdb0fb8bfc73_b.png" alt="img"></p>
<p>确保界面呈现这样</p>
<p><strong>3. 启动yarn</strong></p>
<p><strong>还是进入sbin目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start-yarn.sh</span><br></pre></td></tr></table></figure>
<p><strong>4. jps检查</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps </span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-e769560739e1e9e5b1d4d9ab625a1c38_b.png" alt="img"></p>
<p>若出现上述界面则配置成功了</p>
<p>然后可以在浏览器里验证(50070,8088)</p>
<p><a class="link"   href="http://localhost:50070/dfshealth.html#tab-overview" >http://localhost:50070/dfshealth.html#tab-overview<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="http://localhost:8088/cluster" >http://localhost:8088/cluster<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://pic2.zhimg.com/v2-cd6f142d46fe05e5de300617bfd95451_b.png" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-159a137c51c6c512abfdf60574fec7d0_b.png" alt="img"></p>
<p>后记：</p>
<p>如果隔了几天没有打开Hadoop，或者你的电脑重启了，反正就是jps上出现不了那几个玩意，或者你的浏览器页面打不开，请严格遵照Hadoop启动后的代码，比如进入Hadoop的sbin界面之类的，然后依次操作，于是就能重新打开Hadoop的界面了</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>tutorial</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Heart failure detection by SVM-based machine learning model</title>
    <url>/2021/01/24/YuxuanWu-1716309-INT305-Report/</url>
    <content><![CDATA[<p>Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide.<br>Heart failure is a common event caused by CVDs.</p>
<p>Most cardiovascular diseases can be prevented by addressing behavioural risk factors such as tobacco use, unhealthy diet and obesity, physical inactivity and harmful use of alcohol using population-wide strategies.</p>
<p>People with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.</p>
<h3 id="Project-description-overview"><a href="#Project-description-overview" class="headerlink" title="Project description (overview)"></a>Project description (overview)</h3><p>The input to our predictor is is a medical dataset which contains 12 features that can be used to predict mortality by heart failure.</p>
<ol>
<li>Data exploration<ul>
<li>Principle Components Analysis (PCA) to reduce the dimension of features to have a view of the input data distribution</li>
<li>Build a preliminary linear SVM model to incorporate all the features to see the model performance.</li>
</ul>
</li>
<li>Feature selection part.<ul>
<li>Chi-square test to check the correlation between each categorical feature and the target death event.</li>
<li>Heat map to return the features with high correlation coefficient with death events.</li>
<li>Visualized the each feature’s contribution significance in the SVM model</li>
<li>Compared the returned features and determined the final selected features</li>
</ul>
</li>
<li>Model comparison and hyperparameter tuning<ul>
<li>compare the performance in difference preprocessing methods MinMaxScalar, StandardScalar, RobustScalar</li>
<li>compare the performance in k-fold cross validation and leave-one-out methods</li>
<li>compare the kernel selected in Support Vector Machine (linear or rbf)</li>
<li>grid search to find the best performance model</li>
</ul>
</li>
<li>Selected model performance<ul>
<li>calculated the precision, recall, accuracy and f1-score</li>
<li>plot the ROC and PR-curve</li>
<li>plot the learning curve</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a>Related work</h2><h3 id="Explorative-data-analysis-EDA-approach"><a href="#Explorative-data-analysis-EDA-approach" class="headerlink" title="Explorative data analysis (EDA) approach"></a>Explorative data analysis (EDA) approach</h3><ol>
<li><a class="link"   href="https://www.kaggle.com/nayansakhiya/heart-fail-analysis-and-quick-prediction" >heart-fail-analysis-and-quick-prediction<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p><strong>Strength</strong>: Detailed explorative and associative data analysis with great data visualization: each factor is visualized by different types of figures <br><br><strong>Weakness</strong>: Prediction model are quite rudimentary, the author did not select the features and tune the models’ hyperparameters.<br><br><strong>Similarity</strong>: I learned and applied the plotly.express API to create fancy and concise figures for easy comparison; I furthered his rudimentary model by optimization</p>
<h3 id="Predictive-data-analysis-PDA-approach"><a href="#Predictive-data-analysis-PDA-approach" class="headerlink" title="Predictive data analysis (PDA) approach"></a>Predictive data analysis (PDA) approach</h3><ol>
<li><a class="link"   href="https://www.kaggle.com/rude009/heart-failure-model-prediction-comparisons-95" >heart-failure-model-prediction-comparisons-95<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p><strong>Strength</strong>: The author compares six prediction models with feature selection. The Extra Gradient Booster Classifier could achieve the accuracy up to 95.0% <br><br><strong>Weakness</strong>: The author consider the “time” column as the useful features. <br><br><strong>Similarity</strong>: I don’t think “time” colume should be included since “time” column stands for Follow-up period (days), which means itself could not contribute the diseases itself. Therefore, I consider this feature as uselessness in our prediction model</p>
<ol start="2">
<li><a class="link"   href="https://www.kaggle.com/ksvmuralidhar/heart-failure-prediction-auc-0-98" >heart-failure-prediction-auc-0-98<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p><strong>Strength</strong>: The author uses a new method: Chi-square test to find the correlation between single categorical feature with target death_event <br><br><strong>Weakness</strong>: The visualization part does not as fancy as previous work <br><br><strong>Similarity</strong>: I learned and used the Chi-square test to conduct the correlation test between single categorical data with the categorical death_event; but i didn’t agree the author’s method in using box plot comparison between numerical data with categorical data, I used heat map instead.</p>
<hr>
<h2 id="Data-download"><a href="#Data-download" class="headerlink" title="Data download"></a>Data download</h2><p>You could simply download the data from my own Github repository: <a class="link"   href="https://media.githubusercontent.com/media/yuxuanwu17/kaggle/main/heart_failure_clinical_records_dataset.csv" >https://media.githubusercontent.com/media/yuxuanwu17/kaggle/main/heart_failure_clinical_records_dataset.csv<i class="fas fa-external-link-alt"></i></a></p>
<p>You could also download the data from kaggle：<br><a class="link"   href="https://www.kaggle.com/andrewmvd/heart-failure-clinical-data" >https://www.kaggle.com/andrewmvd/heart-failure-clinical-data<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Libraries-used-in-this-project"><a href="#Libraries-used-in-this-project" class="headerlink" title="Libraries used in this project"></a>Libraries used in this project</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, cross_val_score, LeaveOneOut,GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler, StandardScaler, RobustScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve, classification_report</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> chi2_contingency</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sn</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Problem-formulation"><a href="#Problem-formulation" class="headerlink" title="Problem formulation"></a>Problem formulation</h2><h3 id="Return-the-head-of-dataset-a-overview-of-inside-components"><a href="#Return-the-head-of-dataset-a-overview-of-inside-components" class="headerlink" title="Return the head of dataset (a overview of inside components)"></a>Return the head of dataset (a overview of inside components)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df = pd.read_csv(&quot;/home/yuxuan/kaggle/heart_failure_clinical_records_dataset.csv&quot;)</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;/Users/yuxuan/Desktop/kaggle/heart_failure_clinical_records_dataset.csv&quot;</span>)</span><br><span class="line"><span class="comment"># df = pd.read_csv(&quot;../input/heart-failure-clinical-data/heart_failure_clinical_records_dataset.csv&quot;)</span></span><br><span class="line">heart_data = df.copy()</span><br><span class="line">heart_data.head()</span><br></pre></td></tr></table></figure>



<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>age</th>
      <th>anaemia</th>
      <th>creatinine_phosphokinase</th>
      <th>diabetes</th>
      <th>ejection_fraction</th>
      <th>high_blood_pressure</th>
      <th>platelets</th>
      <th>serum_creatinine</th>
      <th>serum_sodium</th>
      <th>sex</th>
      <th>smoking</th>
      <th>time</th>
      <th>DEATH_EVENT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>75.0</td>
      <td>0</td>
      <td>582</td>
      <td>0</td>
      <td>20</td>
      <td>1</td>
      <td>265000.00</td>
      <td>1.9</td>
      <td>130</td>
      <td>1</td>
      <td>0</td>
      <td>4</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>55.0</td>
      <td>0</td>
      <td>7861</td>
      <td>0</td>
      <td>38</td>
      <td>0</td>
      <td>263358.03</td>
      <td>1.1</td>
      <td>136</td>
      <td>1</td>
      <td>0</td>
      <td>6</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>65.0</td>
      <td>0</td>
      <td>146</td>
      <td>0</td>
      <td>20</td>
      <td>0</td>
      <td>162000.00</td>
      <td>1.3</td>
      <td>129</td>
      <td>1</td>
      <td>1</td>
      <td>7</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>50.0</td>
      <td>1</td>
      <td>111</td>
      <td>0</td>
      <td>20</td>
      <td>0</td>
      <td>210000.00</td>
      <td>1.9</td>
      <td>137</td>
      <td>1</td>
      <td>0</td>
      <td>7</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>65.0</td>
      <td>1</td>
      <td>160</td>
      <td>1</td>
      <td>20</td>
      <td>0</td>
      <td>327000.00</td>
      <td>2.7</td>
      <td>116</td>
      <td>0</td>
      <td>0</td>
      <td>8</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="Print-the-size-of-the-dataset"><a href="#Print-the-size-of-the-dataset" class="headerlink" title="Print the size of the dataset"></a>Print the size of the dataset</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(heart_data.shape)</span><br></pre></td></tr></table></figure>
<pre><code>(299, 13)</code></pre>
<h3 id="Check-the-ratio-of-the-NaNs-for-each-column"><a href="#Check-the-ratio-of-the-NaNs-for-each-column" class="headerlink" title="Check the ratio of the NaNs for each column"></a>Check the ratio of the NaNs for each column</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> heart_data.columns:</span><br><span class="line">    print(col, <span class="built_in">str</span>(<span class="built_in">round</span>(<span class="number">100</span>* heart_data[col].isnull().<span class="built_in">sum</span>() / <span class="built_in">len</span>(heart_data), <span class="number">2</span>)) + <span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>age 0.0%
anaemia 0.0%
creatinine_phosphokinase 0.0%
diabetes 0.0%
ejection_fraction 0.0%
high_blood_pressure 0.0%
platelets 0.0%
serum_creatinine 0.0%
serum_sodium 0.0%
sex 0.0%
smoking 0.0%
time 0.0%
DEATH_EVENT 0.0%</code></pre>
<hr>
<h3 id="Dataset-description"><a href="#Dataset-description" class="headerlink" title="Dataset description"></a>Dataset description</h3><p>There are 13 dimensions and 299 samples. All the columns are devoid of NaNs. We need make some rules before the data processing。</p>
<p>Target features (binary classification): DEATH_EVENT</p>
<p><strong>Categorical data</strong></p>
<ul>
<li>Sex - Gender of patient Male = 1, Female =0</li>
<li>Diabetes - 0 = No, 1 = Yes</li>
<li>Anaemia - 0 = No, 1 = Yes</li>
<li>High_blood_pressure - 0 = No, 1 = Yes</li>
<li>Smoking - 0 = No, 1 = Yes</li>
<li>DEATH_EVENT - 0 = No, 1 = Yes</li>
</ul>
<p><strong>Numerical data</strong></p>
<ul>
<li>Age - Age of patient</li>
<li>creatinine_phosphokinase - Level of the CPK enzyme in the blood (mcg/L)</li>
<li>ejection_fraction - Percentage of blood leaving the heart at each contraction (percentage)</li>
<li>platelets - Platelets in the blood (kiloplatelets/mL)</li>
<li>serum_creatinine - Level of serum creatinine in the blood (mg/dL)</li>
<li>serum_sodium - Level of serum sodium in the blood (mEq/L)</li>
<li>time - Follow-up period (days)</li>
</ul>
<h3 id="Citation-or-Reference"><a href="#Citation-or-Reference" class="headerlink" title="Citation or Reference"></a>Citation or Reference</h3><p>Dataset from Davide Chicco, Giuseppe Jurman: Machine learning can predict survival of patients with heart failure from serum creatinine and ejection fraction alone. BMC Medical Informatics and Decision Making 20, 16 (2020)</p>
<p>The dataset downloaded from Kaggle <a class="link"   href="https://www.kaggle.com/andrewmvd/heart-failure-clinical-data" >https://www.kaggle.com/andrewmvd/heart-failure-clinical-data<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<h3 id="Principle-components-analysis"><a href="#Principle-components-analysis" class="headerlink" title="Principle components analysis"></a>Principle components analysis</h3><p>Reduce the dimensions and return the sample distribution</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">X = heart_data.iloc[:,<span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">X = StandardScaler().fit_transform(X)</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line">pca.fit(X)</span><br><span class="line">X_pca = pca.transform(X)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">0</span>,<span class="number">0</span>],X_pca[y==<span class="number">0</span>,<span class="number">1</span>],label=<span class="string">&quot;Alive&quot;</span>,c=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">1</span>,<span class="number">0</span>],X_pca[y==<span class="number">1</span>,<span class="number">1</span>],label=<span class="string">&quot;Death&quot;</span>,c=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">plt.legend([<span class="string">&quot;Alive&quot;</span>,<span class="string">&quot;Death&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_16_1.5uoi1jp366o0.png" alt="output_16_1"></p>
<p>I would like to have a view of the sample distribution in the dataset. Therefore, I used the principle component analysis (PCA) to reduce the dimension of features into 2D for visualization. The figure suggested that the data are densed and not easy to seperate (either linear or non-linear model), indicating the existence of insignificant feature which could negatively influence the future prediction accuracy.</p>
<hr>
<h3 id="Correlation-analysis"><a href="#Correlation-analysis" class="headerlink" title="Correlation analysis"></a>Correlation analysis</h3><p>I would like to find the correlation between each feature, especially with the target variable: DEATH_EVENT.<br>In this case, I excluded the column “time” since the time tracked could not contribute to the heart failure itself.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sn</span><br><span class="line">heart_data = heart_data.drop([<span class="string">&#x27;time&#x27;</span>],axis=<span class="number">1</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line">sn.heatmap(heart_data.corr(),vmin=-<span class="number">1</span>,cmap=<span class="string">&#x27;coolwarm&#x27;</span>,annot=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_19_1.1ne10klgnr1.png" alt="output_19_1"></p>
<h3 id="Data-partition"><a href="#Data-partition" class="headerlink" title="Data partition"></a>Data partition</h3><ul>
<li>As I mentioned before, I will not take the feature “time” into consideration. Therefore, 11 features are included in the final model prediction.</li>
<li>I split the dataset into two categories. 80% for raining data and 20% for testing data.</li>
<li>I used the StandardScalar normalization method to preprocess the data</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:,<span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">X = StandardScaler().fit_transform(X)</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&quot;The number of training sample is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(X_train.shape[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">&quot;The number of testing sample is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(X_test.shape[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>The number of training sample is 239
The number of testing sample is 60</code></pre>
<h3 id="Feature-selection-feature-engineering"><a href="#Feature-selection-feature-engineering" class="headerlink" title="Feature selection (feature engineering)"></a>Feature selection (feature engineering)</h3><p><strong>Method 1: Chi-square test</strong></p>
<ul>
<li>Based on previous research, I could conclude that DEATH_EVENT is our target. Since I have six categorical data I would like to figure out whether these single categorical valuable has significant correlation with the DEATH_EVENT.<br></li>
<li>Crosstables/contingency tables are one of the best ways to see how categorical variables are distributed among each other.</li>
<li>The following test suggests that we failed to reject the $H_0$ problem, indicating that there is no direct relationship between the DEATH_EVENT</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> chi2_contingency</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">cat_features = [<span class="string">&quot;anaemia&quot;</span>,<span class="string">&quot;diabetes&quot;</span>,<span class="string">&quot;high_blood_pressure&quot;</span>,<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;smoking&quot;</span>,<span class="string">&quot;DEATH_EVENT&quot;</span>]</span><br><span class="line">num_features = pd.Series(heart_data.columns)</span><br><span class="line">num_features = num_features[~num_features.isin(cat_features)]</span><br><span class="line">num_features</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cat_features:</span><br><span class="line">    ct = pd.crosstab(columns=heart_data[i],index=heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>])</span><br><span class="line">    stat, p, dof, expected = chi2_contingency(ct)</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;-&#x27;</span>*<span class="built_in">len</span>(<span class="string">&#x27;CROSSTAB BETWEEN &#123;&#125; &amp; DEATH_EVENT&#x27;</span>.<span class="built_in">format</span>(i.upper())))</span><br><span class="line">    print(<span class="string">&quot;CROSSTAB BETWEEN &#123;&#125; &amp; DEATH_EVENT&quot;</span>.<span class="built_in">format</span>(i.upper()))</span><br><span class="line">    print(<span class="string">&#x27;-&#x27;</span>*<span class="built_in">len</span>(<span class="string">&#x27;CROSSTAB BETWEEN &#123;&#125; &amp; DEATH_EVENT&#x27;</span>.<span class="built_in">format</span>(i.upper())))</span><br><span class="line">    print(ct)</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; &#123;&#125; \nH1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i.upper(),i.upper()))</span><br><span class="line">    print(<span class="string">&quot;\nP-VALUE: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(np.<span class="built_in">round</span>(p,<span class="number">2</span>)))</span><br><span class="line">    print(<span class="string">&quot;REJECT H0&quot;</span> <span class="keyword">if</span> p&lt;<span class="number">0.05</span> <span class="keyword">else</span> <span class="string">&quot;FAILED TO REJECT H0&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>​<br>​    ————————————–<br>​    CROSSTAB BETWEEN ANAEMIA &amp; DEATH_EVENT<br>​    ————————————–<br>​    anaemia        0   1<br>​    DEATH_EVENT<br>​    0            120  83<br>​    1             50  46</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; ANAEMIA<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; ANAEMIA<br>​<br>    P-VALUE: 0.31<br>    FAILED TO REJECT H0</p>
<p>​<br>​    —————————————<br>​    CROSSTAB BETWEEN DIABETES &amp; DEATH_EVENT<br>​    —————————————<br>​    diabetes       0   1<br>​    DEATH_EVENT<br>​    0            118  85<br>​    1             56  40</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; DIABETES<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; DIABETES<br>​<br>    P-VALUE: 0.93<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ————————————————–<br>​    CROSSTAB BETWEEN HIGH_BLOOD_PRESSURE &amp; DEATH_EVENT<br>​    ————————————————–<br>​    high_blood_pressure    0   1<br>​    DEATH_EVENT<br>​    0                    137  66<br>​    1                     57  39</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; HIGH_BLOOD_PRESSURE<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; HIGH_BLOOD_PRESSURE<br>​<br>    P-VALUE: 0.21<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ———————————-<br>​    CROSSTAB BETWEEN SEX &amp; DEATH_EVENT<br>​    ———————————-<br>​    sex           0    1<br>​    DEATH_EVENT<br>​    0            71  132<br>​    1            34   62</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; SEX<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; SEX<br>​<br>    P-VALUE: 0.96<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ————————————–<br>​    CROSSTAB BETWEEN SMOKING &amp; DEATH_EVENT<br>​    ————————————–<br>​    smoking        0   1<br>​    DEATH_EVENT<br>​    0            137  66<br>​    1             66  30</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; SMOKING<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; SMOKING<br>​<br>    P-VALUE: 0.93<br>    FAILED TO REJECT H0</p>
<p>​<br>​    ——————————————<br>​    CROSSTAB BETWEEN DEATH_EVENT &amp; DEATH_EVENT<br>​    ——————————————<br>​    DEATH_EVENT    0   1<br>​    DEATH_EVENT<br>​    0            203   0<br>​    1              0  96</p>
<p>​<br>​    H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT &amp; DEATH_EVENT<br>​    H1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT &amp; DEATH_EVENT<br>​<br>    P-VALUE: 0.0<br>    REJECT H0</p>
<p><strong>Method 2: correlation analysis</strong></p>
<ul>
<li>Use correlation coefficient &gt; 0.1 with death event</li>
<li>This method is applicable for both categorical data and numerical data</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feature_corr = heart_data.corr()</span><br><span class="line">feature_corr[<span class="built_in">abs</span>(feature_corr[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]) &gt; <span class="number">0.1</span>][<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<pre><code>age                  0.253729
ejection_fraction   -0.268603
serum_creatinine     0.294278
serum_sodium        -0.195204
time                -0.526964
DEATH_EVENT          1.000000
Name: DEATH_EVENT, dtype: float64</code></pre>
<p><strong>Method 3: Visualized plots of feature importance in linear SVM</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feature_plot</span>(<span class="params">classifier, feature_names, top_features=<span class="number">5</span></span>):</span></span><br><span class="line">    coef = classifier.coef_.ravel()</span><br><span class="line">    top_positive_coefficients = np.argsort(coef)[-top_features:]</span><br><span class="line">    top_negative_coefficients = np.argsort(coef)[:top_features]</span><br><span class="line">    middle_coefficient = np.argsort(coef)[top_features]</span><br><span class="line">    top_coefficients = np.hstack([top_negative_coefficients, middle_coefficient, top_positive_coefficients])</span><br><span class="line">    plt.figure(figsize=(<span class="number">18</span>, <span class="number">7</span>))</span><br><span class="line">    colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> c &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> coef[top_coefficients]]</span><br><span class="line">    plt.bar(np.arange(<span class="number">2</span> * top_features+<span class="number">1</span>), coef[top_coefficients], color=colors)</span><br><span class="line">    feature_names = np.array(feature_names)</span><br><span class="line">    plt.xticks(np.arange(<span class="number">2</span> * top_features+<span class="number">1</span>), feature_names[top_coefficients], rotation=<span class="number">45</span>, ha=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">X = StandardScaler().fit_transform(X)</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.1</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(heart_data.drop([&#x27;DEATH_EVENT&#x27;, &#x27;time&#x27;], axis=1).columns.values)</span></span><br><span class="line"></span><br><span class="line">trainedsvm = LinearSVC().fit(X, y)</span><br><span class="line">feature_plot(trainedsvm, heart_data.drop([<span class="string">&#x27;DEATH_EVENT&#x27;</span>, <span class="string">&#x27;time&#x27;</span>], axis=<span class="number">1</span>).columns.values)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_28_0.w2pbf35so00.png" alt="output_28_0"></p>
<ul>
<li>The ahead plot illustrates the importance of feature in SVM model. y axis could be considered as weights and the absolute value of weights could suggest the contribution to the final results.</li>
<li>The correlation analysis between factors and death event returned the coefficient &gt; 0.1 features</li>
<li>Both analysis returned three same features: serum_creatinine, age, ejection_fraction</li>
<li>we need to evaluate and compare the performance in serum_sodium and creatinine_phosphokinase</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line">options = [<span class="string">&#x27;serum_sodium&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> options:</span><br><span class="line">    selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>]</span><br><span class="line">    selected_feature.append(i)</span><br><span class="line">    X_processed = X[selected_feature]</span><br><span class="line">    X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line">    sv_clf = SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">    sv_clf.fit(X_train, y_train)</span><br><span class="line">    sv_clf_pred = sv_clf.predict(X_test)</span><br><span class="line">    sv_clf_acc = accuracy_score(y_test,sv_clf_pred)</span><br><span class="line">    sc_clf_acc_format = <span class="built_in">round</span>(sv_clf_acc*<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#     accuracy_list.append(round(sv_clf_acc,2))</span></span><br><span class="line">    print(<span class="string">&quot;Accuracy of linear SVM model with feature &#123;&#125; is : &#123;&#125;%&quot;</span>.<span class="built_in">format</span>(i, sc_clf_acc_format))</span><br></pre></td></tr></table></figure>
<pre><code>Accuracy of linear SVM model with feature serum_sodium is : 81.67%
Accuracy of linear SVM model with feature creatinine_phosphokinase is : 83.33%</code></pre>
<p>Therefore, four features including serum_creatinine, age, ejection_fraction, creatinine_phosphokinase</p>
<hr>
<h3 id="Visualized-the-learning-curve-after-feature-selection"><a href="#Visualized-the-learning-curve-after-feature-selection" class="headerlink" title="Visualized the learning curve after feature selection"></a>Visualized the learning curve after feature selection</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> learning_curve</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span>(<span class="params">estimator, title, X, y, axes=<span class="literal">None</span>, ylim=<span class="literal">None</span>, cv=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                        n_jobs=<span class="literal">None</span>, train_sizes=np.linspace(<span class="params"><span class="number">.1</span>, <span class="number">1.0</span>, <span class="number">5</span></span>)</span>):</span></span><br><span class="line">    <span class="keyword">if</span> axes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _, axes = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, figsize=(<span class="number">20</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    axes[<span class="number">0</span>].set_title(title)</span><br><span class="line">    <span class="keyword">if</span> ylim <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        axes[<span class="number">0</span>].set_ylim(*ylim)</span><br><span class="line">    axes[<span class="number">0</span>].set_xlabel(<span class="string">&quot;Training examples&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].set_ylabel(<span class="string">&quot;Score&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_sizes, train_scores, test_scores, fit_times, _ = \</span><br><span class="line">        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,</span><br><span class="line">                       train_sizes=train_sizes,</span><br><span class="line">                       return_times=<span class="literal">True</span>)</span><br><span class="line">    train_scores_mean = np.mean(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">    train_scores_std = np.std(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">    test_scores_mean = np.mean(test_scores, axis=<span class="number">1</span>)</span><br><span class="line">    test_scores_std = np.std(test_scores, axis=<span class="number">1</span>)</span><br><span class="line">    fit_times_mean = np.mean(fit_times, axis=<span class="number">1</span>)</span><br><span class="line">    fit_times_std = np.std(fit_times, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot learning curve</span></span><br><span class="line">    axes[<span class="number">0</span>].grid()</span><br><span class="line">    axes[<span class="number">0</span>].fill_between(train_sizes, train_scores_mean - train_scores_std,</span><br><span class="line">                         train_scores_mean + train_scores_std, alpha=<span class="number">0.1</span>,</span><br><span class="line">                         color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].fill_between(train_sizes, test_scores_mean - test_scores_std,</span><br><span class="line">                         test_scores_mean + test_scores_std, alpha=<span class="number">0.1</span>,</span><br><span class="line">                         color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].plot(train_sizes, train_scores_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">                 label=<span class="string">&quot;Training score&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].plot(train_sizes, test_scores_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">                 label=<span class="string">&quot;Cross-validation score&quot;</span>)</span><br><span class="line">    axes[<span class="number">0</span>].legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot n_samples vs fit_times</span></span><br><span class="line">    axes[<span class="number">1</span>].grid()</span><br><span class="line">    axes[<span class="number">1</span>].plot(train_sizes, fit_times_mean, <span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">    axes[<span class="number">1</span>].fill_between(train_sizes, fit_times_mean - fit_times_std,</span><br><span class="line">                         fit_times_mean + fit_times_std, alpha=<span class="number">0.1</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_xlabel(<span class="string">&quot;Training examples&quot;</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_ylabel(<span class="string">&quot;fit_times&quot;</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_title(<span class="string">&quot;Scalability of the model&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot fit_time vs score</span></span><br><span class="line">    axes[<span class="number">2</span>].grid()</span><br><span class="line">    axes[<span class="number">2</span>].plot(fit_times_mean, test_scores_mean, <span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">    axes[<span class="number">2</span>].fill_between(fit_times_mean, test_scores_mean - test_scores_std,</span><br><span class="line">                         test_scores_mean + test_scores_std, alpha=<span class="number">0.1</span>)</span><br><span class="line">    axes[<span class="number">2</span>].set_xlabel(<span class="string">&quot;fit_times&quot;</span>)</span><br><span class="line">    axes[<span class="number">2</span>].set_ylabel(<span class="string">&quot;Score&quot;</span>)</span><br><span class="line">    axes[<span class="number">2</span>].set_title(<span class="string">&quot;Performance of the model&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">3</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">15</span>))</span><br><span class="line"></span><br><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title = <span class="string">&quot;Learning Curves (SVM, linear kernel)&quot;</span></span><br><span class="line"><span class="comment"># cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)</span></span><br><span class="line"></span><br><span class="line">estimator = SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">plot_learning_curve(estimator, title, X_processed, y, axes=axes[:, <span class="number">0</span>], ylim=(<span class="number">0.5</span>, <span class="number">1.01</span>),</span><br><span class="line">                     n_jobs=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title = <span class="string">r&quot;Learning Curves (SVM, RBF kernel)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)</span></span><br><span class="line">estimator = SVC(kernel=<span class="string">&quot;rbf&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">plot_learning_curve(estimator, title, X_processed, y, axes=axes[:, <span class="number">1</span>], ylim=(<span class="number">0.5</span>, <span class="number">1.01</span>),</span><br><span class="line">                     n_jobs=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_34_0.wr0uxf8apts.png" alt="output_34_0"></p>
<ul>
<li><p>First column is the combination of learning curves, model scability, model performance in a SVM model with linear kernel. First row is the learning curve of linear SVM model: the training score is very high at the beginning and decreases and the cross-validation score is very low at the beginning and increases. The training score and the cross-validation score intertwines at about 220 training samples, and their difference after that are not significant</p>
</li>
<li><p>Second column is the combination of learning curves, model scability, model performance in a SVM model with linear kernel. The learning curve plots indicate that accuracy for both training score and cross validation score tend to be stable after 130 samples, which is similar in linear SVM model. The fit time for RBF kernel SVM is higher than linear kernel because of the complexity in calculation</p>
</li>
<li><p>RBF kernel has a relative higher performance, but the difference is not significant</p>
</li>
<li><p>The figure above doesn’t indicate either overfitting or underfitting problems</p>
</li>
</ul>
<hr>
<h3 id="Explorative-data-analysis-of-the-four-selected-features"><a href="#Explorative-data-analysis-of-the-four-selected-features" class="headerlink" title="Explorative data analysis of the four selected features:"></a>Explorative data analysis of the four selected features:</h3><ul>
<li>‘serum_creatinine’</li>
<li>‘age’</li>
<li>‘ejection_fraction’</li>
<li>‘creatinine_phosphokinase’</li>
</ul>
<h4 id="Specify-the-figure-size"><a href="#Specify-the-figure-size" class="headerlink" title="Specify the figure size"></a>Specify the figure size</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HEIGHT = <span class="number">500</span></span><br><span class="line">WIDTH = <span class="number">700</span></span><br><span class="line">NBINS = <span class="number">50</span></span><br><span class="line">SCATTER_SIZE=<span class="number">700</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Define the histogram</span></span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_histogram</span>(<span class="params">dataframe, column, color, bins, marginal,title, width=WIDTH, height=HEIGHT</span>):</span></span><br><span class="line">    figure = px.histogram(</span><br><span class="line">        dataframe,</span><br><span class="line">        column,</span><br><span class="line">        color=color,</span><br><span class="line">        nbins=bins,</span><br><span class="line">        marginal= marginal,</span><br><span class="line">        title=title,</span><br><span class="line">        width=width,</span><br><span class="line">        height=height</span><br><span class="line">    )</span><br><span class="line">    figure.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_histogram(heart_data, <span class="string">&#x27;serum_creatinine&#x27;</span>, <span class="string">&#x27;DEATH_EVENT&#x27;</span>, NBINS, <span class="string">&quot;violin&quot;</span>,<span class="string">&#x27;Figure 1: Distribution of serum creatinine VS death event&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/1.63r0a5e9q8k0.png" alt="1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_histogram(heart_data, <span class="string">&#x27;ejection_fraction&#x27;</span>, <span class="string">&#x27;DEATH_EVENT&#x27;</span>, NBINS, <span class="string">&quot;violin&quot;</span>,<span class="string">&#x27;Figure 2: Distribution of ejection fraction VS death event&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/2.6x2n1zgxkuk0.png" alt="2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_histogram(heart_data, <span class="string">&#x27;creatinine_phosphokinase&#x27;</span>, <span class="string">&#x27;DEATH_EVENT&#x27;</span>, NBINS, <span class="string">&quot;violin&quot;</span>,<span class="string">&#x27;Figure 3: Distribution of creatinine_phosphokinase VS death event&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/3.3onf6f093tg0.png" alt="3"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">heart_data = df.copy()</span><br><span class="line">male = heart_data[heart_data[<span class="string">&quot;sex&quot;</span>]==<span class="number">1</span>]</span><br><span class="line">female = heart_data[heart_data[<span class="string">&quot;sex&quot;</span>]==<span class="number">0</span>]</span><br><span class="line">male_survival= male[male[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]</span><br><span class="line">female_survival= female[female[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]</span><br><span class="line"><span class="comment">## assign the labels</span></span><br><span class="line">labels = [<span class="string">&#x27;Male - Survived&#x27;</span>,<span class="string">&#x27;Male - Not Survived&#x27;</span>, <span class="string">&quot;Female -  Survived&quot;</span>, <span class="string">&quot;Female - Not Survived&quot;</span>]</span><br><span class="line"><span class="comment">## value is set according to the labels</span></span><br><span class="line">values = [<span class="built_in">len</span>(male[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]),<span class="built_in">len</span>(male[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">1</span>]),</span><br><span class="line">         <span class="built_in">len</span>(female[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">0</span>]),<span class="built_in">len</span>(female[heart_data[<span class="string">&quot;DEATH_EVENT&quot;</span>]==<span class="number">1</span>])]</span><br><span class="line">fig = go.Figure(data=[go.Pie(labels=labels,values=values,hole=<span class="number">.3</span>)])</span><br><span class="line">fig.update_layout(</span><br><span class="line">    title_text = <span class="string">&quot;Figure 4: Analysis on Survival - Gender factor&quot;</span></span><br><span class="line">)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/4.4c73jb0v6ok0.png" alt="4"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Define the violin plot function method</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">violin_boxplot</span>(<span class="params">dataframe, x, y,color,points,hover_data, box, width=WIDTH, height=HEIGHT</span>):</span></span><br><span class="line">    figure = px.violin(</span><br><span class="line">        dataframe,</span><br><span class="line">        x=x,</span><br><span class="line">        y=y,</span><br><span class="line">        color = color,</span><br><span class="line">        box = box,</span><br><span class="line">        hover_data=hover_data,</span><br><span class="line">        points=points,</span><br><span class="line">        width=width,</span><br><span class="line">        height=height</span><br><span class="line">    )</span><br><span class="line">    figure.update_layout(title_text=<span class="string">&quot;Figure 5: Analysis of both gender and age factors in survival rates&quot;</span>)</span><br><span class="line">    figure.show()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">violin_boxplot(heart_data,x = <span class="string">&quot;sex&quot;</span>,y=<span class="string">&quot;age&quot;</span>,color=<span class="string">&quot;DEATH_EVENT&quot;</span>,points=<span class="string">&quot;all&quot;</span>,box=<span class="literal">True</span>,hover_data=heart_data.columns)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/5.74bv5l7tba00.png" alt="5"></p>
<p>Figure 1 - Figure 5 is the visualization of each feature, there is no clear patterns or strong association between the death_event. Therefore, we need to further our research by conducting the model prediction process.</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Python-library"><a href="#Python-library" class="headerlink" title="Python library"></a>Python library</h3><h1 id="Description-how-you-learned-the-predictor"><a href="#Description-how-you-learned-the-predictor" class="headerlink" title="Description: how you learned the predictor"></a>Description: how you learned the predictor</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br></pre></td></tr></table></figure>
<h3 id="PCA-to-visualize-the-sample-distribution"><a href="#PCA-to-visualize-the-sample-distribution" class="headerlink" title="PCA to visualize the sample distribution"></a>PCA to visualize the sample distribution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line">pca.fit(X_processed)</span><br><span class="line">X_pca = pca.transform(X_processed)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">0</span>,<span class="number">0</span>],X_pca[y==<span class="number">0</span>,<span class="number">1</span>],label=<span class="string">&quot;Alive&quot;</span>,c=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">plt.scatter(X_pca[y==<span class="number">1</span>,<span class="number">0</span>],X_pca[y==<span class="number">1</span>,<span class="number">1</span>],label=<span class="string">&quot;Death&quot;</span>,c=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">plt.legend([<span class="string">&quot;Alive&quot;</span>,<span class="string">&quot;Death&quot;</span>])</span><br></pre></td></tr></table></figure>



<pre><code>&lt;matplotlib.legend.Legend at 0x7fdff0ee0d90&gt;</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_50_1.2x87z2ut9k60.png" alt="output_50_1"></p>
<p>In this case, the data distribution after feature selection are scattered, which could be beneficial for separation. Still, we could not determine whether linear kernel or RBF kernel is suitable for classification. I then would compare the performance between these two methods.</p>
<h3 id="Machine-learning-algorithms-with-description"><a href="#Machine-learning-algorithms-with-description" class="headerlink" title="Machine learning algorithms with description"></a>Machine learning algorithms with description</h3><h4 id="SVM-with-linear-kernel"><a href="#SVM-with-linear-kernel" class="headerlink" title="SVM with linear kernel"></a>SVM with linear kernel</h4><p>$$ K(x,y) = X^Ty=x\cdot y$$</p>
<p>Loss function: hinge loss / squared hinge loss</p>
<p>$$ Agreement: z = y_i(w \cdot x_i + \alpha) $$</p>
<p>Hinge loss</p>
<p>$$<br>L_h(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>1-z &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Squared hinge loss</p>
<p>$$<br>L_{hsqr}(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>(1-z)^2 &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Optimization objective formula for hinge loss:</p>
<p>$$<br>J(w,\alpha) = \frac{1}{n}\sum_{i=1}^nL_h(y_i(w\cdot x_i + \alpha))+\frac{\lambda}{2}(||w||)^2<br>$$</p>
<p>Description:</p>
<ul>
<li>Linear Kernel is used when the data is linearly separable dataset.</li>
<li>One of the goal is to minimize the previous objective formula for the hinge loss. $\lambda$ in this case stands for the regularization hyperparameter.</li>
<li>The strength of the regularization is inversely proportional to $\lambda$, it has to be strictly positive. The smaller regularization parameter means less tolerant to misclassification.</li>
<li>Require grid serach to return the suitable hyperparameter</li>
</ul>
<h4 id="SVM-with-RBF-kernel"><a href="#SVM-with-RBF-kernel" class="headerlink" title="SVM with RBF kernel"></a>SVM with RBF kernel</h4><p>$$ K(x,y) = e^{-\gamma||x-y||^2}, \gamma &gt;0 $$</p>
<p>Loss function: hinge loss / squared hinge loss</p>
<p>$$ Agreement: z = y_i(w \cdot \phi(x_i) + \alpha) $$</p>
<p>Hinge loss</p>
<p>$$<br>L_h(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>1-z &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Squared hinge loss</p>
<p>$$<br>L_{hsqr}(z)= \begin{cases}<br>0 &amp; \text{if z$\geq$1}\<br>(1-z)^2 &amp; \text{z&lt;1}<br>\end{cases}<br>$$</p>
<p>Optimization objective formula for hinge loss:</p>
<p>$$<br>J(w,\alpha) = \frac{1}{n}\sum_{i=1}^nL_h(y_i(w\cdot \phi(x_i) + \alpha))+\frac{\lambda}{2}(||w||)^2<br>$$</p>
<p>Description:</p>
<ul>
<li>SVM with RBF kernel was utilized to solve the linearly inseparable probelms</li>
<li>kernel trick was used in RBF kernel SVM to increase the computational efficiency</li>
<li>$\gamma$ parameter how far the influence of a single training example reaches</li>
<li>C parameter trades off correct classification of training examples against maximization of the decision function’s margin</li>
</ul>
<h4 id="Evaluation-method"><a href="#Evaluation-method" class="headerlink" title="Evaluation method"></a>Evaluation method</h4><p>Mean squared error (MSE)</p>
<p>$$<br>MSE = \frac{1}{n}\sum_{i=1}^n(Y_i- \hat{Y_i})^2<br>$$</p>
<p>where $Y_i$ is the label and $\hat{Y_i}$ is the predicted label by model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## linear svm</span></span><br><span class="line"><span class="comment"># sv_clf = LinearSVC(loss=&#x27;hinge&#x27;,random_state=1, C=1.0, penalty = &#x27;l2&#x27;)</span></span><br><span class="line">sv_clf = SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">sv_clf.fit(X_train, y_train)</span><br><span class="line">sv_clf_pred = sv_clf.predict(X_test)</span><br><span class="line">sv_clf_acc = accuracy_score(y_test,sv_clf_pred)</span><br><span class="line">sv_clf_mse = mean_squared_error(y_test,sv_clf_pred)</span><br><span class="line">print(<span class="string">&quot;Accuracy of linear SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>*sv_clf_acc))</span><br><span class="line">print(<span class="string">&quot;Mean squared error of linear SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(sv_clf_mse))</span><br><span class="line"></span><br><span class="line"><span class="comment">## RBF kernel SVM</span></span><br><span class="line">sv_clf = SVC(kernel=<span class="string">&quot;rbf&quot;</span>,random_state=<span class="number">1</span>, C=<span class="number">1.0</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">sv_clf.fit(X_train, y_train)</span><br><span class="line">sv_clf_pred = sv_clf.predict(X_test)</span><br><span class="line">sv_clf_acc = accuracy_score(y_test,sv_clf_pred)</span><br><span class="line">sv_clf_mse = mean_squared_error(y_test,sv_clf_pred)</span><br><span class="line">print(<span class="string">&quot;Accuracy of RBF SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>*sv_clf_acc))</span><br><span class="line">print(<span class="string">&quot;Mean squared error of linear SVM model is :&quot;</span>,<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(sv_clf_mse))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>Accuracy of linear SVM model is : 83.33%
Mean squared error of linear SVM model is : 0.17
Accuracy of RBF SVM model is : 86.67%
Mean squared error of linear SVM model is : 0.13</code></pre>
<h2 id="Experiments-and-results"><a href="#Experiments-and-results" class="headerlink" title="Experiments and results"></a>Experiments and results</h2><h3 id="Compare-the-efficacy-of-different-preprocessing-methods"><a href="#Compare-the-efficacy-of-different-preprocessing-methods" class="headerlink" title="Compare the efficacy of different preprocessing methods"></a>Compare the efficacy of different preprocessing methods</h3><ul>
<li>MinMaxScalar</li>
<li>StandardScalar</li>
<li>RobustScalar</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler, StandardScaler, RobustScaler</span><br><span class="line"></span><br><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MinMaxScalar</span></span><br><span class="line">pipe1 = Pipeline([(<span class="string">&quot;scalar&quot;</span>,MinMaxScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(random_state=<span class="number">1</span>))])</span><br><span class="line">pipe1.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for MinMaxScalar RBF kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe1.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line">pipe1_linear = Pipeline([(<span class="string">&quot;scalar&quot;</span>,MinMaxScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(kernel=<span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>))])</span><br><span class="line">pipe1_linear.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for MinMaxScalar linear kernel: &#123;:.3f&#125;\n&quot;</span>.<span class="built_in">format</span>(pipe1_linear.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># StandardScalar</span></span><br><span class="line"></span><br><span class="line">pipe2 = Pipeline([(<span class="string">&quot;scalar&quot;</span>,StandardScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(random_state=<span class="number">1</span>))])</span><br><span class="line">pipe2.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for StandardScalar in RBF kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe2.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line">pipe2_linear = Pipeline([(<span class="string">&quot;scalar&quot;</span>,StandardScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(kernel=<span class="string">&quot;linear&quot;</span> ,random_state=<span class="number">1</span>))])</span><br><span class="line">pipe2_linear.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for StandardScalar in linear kernel: &#123;:.3f&#125;\n&quot;</span>.<span class="built_in">format</span>(pipe2_linear.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># RobustScalar</span></span><br><span class="line"></span><br><span class="line">pipe3 = Pipeline([(<span class="string">&quot;scalar&quot;</span>,RobustScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(random_state=<span class="number">1</span>))])</span><br><span class="line">pipe3.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for RobustScalar in RBF kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe3.score(X_test,y_test)))</span><br><span class="line"></span><br><span class="line">pipe3_linear = Pipeline([(<span class="string">&quot;scalar&quot;</span>,RobustScaler()),(<span class="string">&quot;svm&quot;</span>,SVC(kernel = <span class="string">&quot;linear&quot;</span>,random_state=<span class="number">1</span>))])</span><br><span class="line">pipe3_linear.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Test score for RobustScalar in linear kernel: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(pipe3_linear.score(X_test,y_test)))</span><br></pre></td></tr></table></figure>
<pre><code>Test score for MinMaxScalar RBF kernel: 0.850
Test score for MinMaxScalar linear kernel: 0.767

Test score for StandardScalar in RBF kernel: 0.850
Test score for StandardScalar in linear kernel: 0.833

Test score for RobustScalar in RBF kernel: 0.800
Test score for RobustScalar in linear kernel: 0.817</code></pre>
<ul>
<li>There is no significant difference between different preprocessing method in RBF kernels, especially in MinMaxScalar and StandardScalar.</li>
<li>Overall RBF kernel outperforms than linear kernel.</li>
<li>In this case, I would insist on using StandardScalar in following procedure.<br>
<br>
<br>



</li>
</ul>
<h3 id="Compare-the-model-performance-by-ten-fold-cross-validation-and-leave-one-out-method-in-model-evaluation"><a href="#Compare-the-model-performance-by-ten-fold-cross-validation-and-leave-one-out-method-in-model-evaluation" class="headerlink" title="Compare the model performance by ten-fold cross validation and leave-one-out method in model evaluation"></a>Compare the model performance by ten-fold cross validation and leave-one-out method in model evaluation</h3><br>

<p>Owing to the fact that the dataset I used is a small one, only containing 299 samples in total. In order to minimize the bias or error leading by accident, I used ten-fold cross validation and leave-one-out method to return a more general evaluation (calculating the mean value)</p>
<h4 id="Ten-fold-cross-validation-of-SVM"><a href="#Ten-fold-cross-validation-of-SVM" class="headerlink" title="Ten-fold cross validation of SVM"></a>Ten-fold cross validation of SVM</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heart_data = df.copy()</span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line">sv_clf = SVC(kernel= <span class="string">&#x27;linear&#x27;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">sv_clf_rbf = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>)</span><br><span class="line">scores = cross_val_score(sv_clf, X_processed,y,cv=<span class="number">10</span>)</span><br><span class="line">scores_rbf = cross_val_score(sv_clf_rbf, X_processed,y,cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of linear SVM:&#123;:.3f&#125; &quot;</span>.<span class="built_in">format</span>(np.mean(scores)))</span><br><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of RBF kernel SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(scores_rbf)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>Ten-fold cross validation scores of linear SVM:0.756 
Ten-fold cross validation scores of RBF kernel SVM:0.763</code></pre>
<h4 id="Leave-on-out-method-of-SVM"><a href="#Leave-on-out-method-of-SVM" class="headerlink" title="Leave-on-out method of SVM"></a>Leave-on-out method of SVM</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> LeaveOneOut</span><br><span class="line">loo = LeaveOneOut()</span><br><span class="line">scores_loo = cross_val_score(sv_clf,X_processed,y,cv=loo)</span><br><span class="line">scores_loo_rbf = cross_val_score(sv_clf_rbf,X_processed,y,cv=loo)</span><br><span class="line">print(<span class="string">&quot;Number of CV iterations: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(scores_loo)))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for linear SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo.mean()))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for RBF SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo_rbf.mean()))</span><br></pre></td></tr></table></figure>
<pre><code>Number of CV iterations: 299
Leave one out method mean scores for linear SVM:0.763
Leave one out method mean scores for RBF SVM:0.756</code></pre>
<h4 id="Comparison-of-the-two-methods"><a href="#Comparison-of-the-two-methods" class="headerlink" title="Comparison of the two methods"></a>Comparison of the two methods</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of linear SVM:&#123;:.3f&#125; &quot;</span>.<span class="built_in">format</span>(np.mean(scores)))</span><br><span class="line">print(<span class="string">&quot;Ten-fold cross validation scores of RBF kernel SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(scores_rbf)))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for linear SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo.mean()))</span><br><span class="line">print(<span class="string">&quot;Leave one out method mean scores for RBF SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo_rbf.mean()))</span><br></pre></td></tr></table></figure>
<pre><code>Ten-fold cross validation scores of linear SVM:0.756 
Ten-fold cross validation scores of RBF kernel SVM:0.763
Leave one out method mean scores for linear SVM:0.763
Leave one out method mean scores for RBF SVM:0.756</code></pre>
<p>**Summary: **<br>The results of either ten-fold cross validation and leave-one-out method results are quite similar, based on the consideration of time elapse, I would use ten-fold cross-validation for the following analysis</p>
<h3 id="Hyperparameters-tuning"><a href="#Hyperparameters-tuning" class="headerlink" title="Hyperparameters tuning"></a>Hyperparameters tuning</h3><ul>
<li>Grid search for SVM algorithm with ten-fold cross validation method</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">param_grid = [&#123;<span class="string">&#x27;kernel&#x27;</span>: [<span class="string">&#x27;rbf&#x27;</span>],</span><br><span class="line">               <span class="string">&#x27;C&#x27;</span>: [<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>],</span><br><span class="line">               <span class="string">&#x27;gamma&#x27;</span>:[<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>]&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;kernel&#x27;</span>:[<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">               <span class="string">&#x27;C&#x27;</span>: [<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>]</span><br><span class="line">                &#125;]</span><br><span class="line"><span class="comment"># print(param_grid)</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">grid_search = GridSearchCV(SVC(random_state=<span class="number">1</span>),param_grid,cv =<span class="number">10</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">grid_search.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Best cross validation accuracy: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_score_))</span><br><span class="line">print(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.score(X_test,y_test)))</span><br><span class="line">print(<span class="string">&quot;Best parameters: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_params_))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>Best cross validation accuracy: 0.75
Test set score: 0.87
Best parameters: &#123;&#39;C&#39;: 1, &#39;gamma&#39;: 0.1, &#39;kernel&#39;: &#39;rbf&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = pd.DataFrame(grid_search.cv_results_)</span><br><span class="line">results_rbf = results.iloc[<span class="number">0</span>:<span class="number">25</span>,:]</span><br><span class="line">results_linear = results.iloc[<span class="number">25</span>:,:]</span><br><span class="line"><span class="comment"># display(results_linear.T.head())</span></span><br><span class="line"><span class="comment"># display(results_rbf.T.head())</span></span><br><span class="line"><span class="comment"># display(results.T.head())</span></span><br><span class="line"><span class="comment"># display(results.T)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line">scores = np.array(results_rbf.mean_test_score).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">heatmap = sn.heatmap(data=scores,xticklabels=param_grid[<span class="number">0</span>][<span class="string">&#x27;gamma&#x27;</span>],</span><br><span class="line">           yticklabels=param_grid[<span class="number">0</span>][<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">           annot=<span class="literal">True</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;gamma&quot;</span>)</span><br></pre></td></tr></table></figure>



<pre><code>Text(0.5, 87.0, &#39;gamma&#39;)</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_68_1.3u7i0m4xy720.png" alt="output_68_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sv_clf_rbf = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>,C=<span class="number">1</span>, gamma = <span class="number">0.1</span>)</span><br><span class="line">scores_loo_rbf = cross_val_score(sv_clf_rbf,X_processed,y,cv=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># print(&quot;Number of CV iterations: &#123;&#125;&quot;.format(len(scores_loo)))</span></span><br><span class="line">print(<span class="string">&quot;10-fold cross validation mean method scores for RBF SVM:&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(scores_loo_rbf.mean()))</span><br></pre></td></tr></table></figure>
<pre><code>10-fold cross validation mean method scores for RBF SVM:0.763</code></pre>
<p>As can be seen from the grid search, the SVM with RBF kernel and hyperparameter C: 1, gamma 0.1 could achieve the highest performance</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">linear_score = np.array(results_linear.mean_test_score)</span><br><span class="line">display(results_linear.T.head())</span><br><span class="line">print(<span class="built_in">max</span>(linear_score))</span><br></pre></td></tr></table></figure>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>25</th>
      <th>26</th>
      <th>27</th>
      <th>28</th>
      <th>29</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>mean_fit_time</th>
      <td>0.0021414</td>
      <td>0.00199142</td>
      <td>0.00196731</td>
      <td>0.00795052</td>
      <td>0.0434071</td>
    </tr>
    <tr>
      <th>std_fit_time</th>
      <td>0.000204684</td>
      <td>0.0003023</td>
      <td>0.000284892</td>
      <td>0.00302314</td>
      <td>0.010914</td>
    </tr>
    <tr>
      <th>mean_score_time</th>
      <td>0.000635695</td>
      <td>0.000739121</td>
      <td>0.000567961</td>
      <td>0.000703764</td>
      <td>0.000822139</td>
    </tr>
    <tr>
      <th>std_score_time</th>
      <td>0.000104189</td>
      <td>0.000289296</td>
      <td>9.88127e-05</td>
      <td>8.55103e-05</td>
      <td>0.000257763</td>
    </tr>
    <tr>
      <th>param_C</th>
      <td>0.01</td>
      <td>0.1</td>
      <td>1</td>
      <td>10</td>
      <td>100</td>
    </tr>
  </tbody>
</table>
</div>


<pre><code>0.7358695652173913</code></pre>
<p>In the meantime, the best performance in linear model is 0.73587, and the mean_test_score in c =1,10,100 is relative similar. The influence of hyperparameter C are not significant. Apart from that the SVC function only provide</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Hyperparameter tuning for linear SVM (penalty, loss, C)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parameters = &#123;<span class="string">&#x27;penalty&#x27;</span>:[<span class="string">&#x27;l1&#x27;</span>, <span class="string">&#x27;l2&#x27;</span>], <span class="string">&#x27;loss&#x27;</span>:[<span class="string">&#x27;hinge&#x27;</span>, <span class="string">&#x27;squared_hinge&#x27;</span>],<span class="string">&#x27;C&#x27;</span>:[<span class="number">1</span>, <span class="number">10</span>,<span class="number">100</span>]&#125;</span><br><span class="line">grid_search = GridSearchCV(LinearSVC(random_state=<span class="number">1</span>),parameters,cv =<span class="number">10</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">grid_search.fit(X_train,y_train)</span><br><span class="line">print(<span class="string">&quot;Best cross validation accuracy: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_score_))</span><br><span class="line">print(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.score(X_test,y_test)))</span><br><span class="line">print(<span class="string">&quot;Best parameters: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(grid_search.best_params_))</span><br></pre></td></tr></table></figure>
<pre><code>Best cross validation accuracy: 0.75
Test set score: 0.80
Best parameters: &#123;&#39;C&#39;: 10, &#39;loss&#39;: &#39;squared_hinge&#39;, &#39;penalty&#39;: &#39;l2&#39;&#125;</code></pre>
<p>The test score of linear svm (test set score:0.80) still could not compete with the rbf kernel (test set score: 0.87), therefore, I would still insist on the SVM with RBF kernel and hyperparameter C: 1, gamma 0.1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> plot_confusion_matrix, confusion_matrix</span><br><span class="line">heart_data = df.copy()</span><br><span class="line"></span><br><span class="line">X = heart_data.iloc[:, <span class="number">0</span>:<span class="number">11</span>]</span><br><span class="line">y = heart_data[<span class="string">&#x27;DEATH_EVENT&#x27;</span>]</span><br><span class="line"></span><br><span class="line">selected_feature = [<span class="string">&#x27;serum_creatinine&#x27;</span>,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ejection_fraction&#x27;</span>,<span class="string">&#x27;creatinine_phosphokinase&#x27;</span>]</span><br><span class="line">X_processed = X[selected_feature]</span><br><span class="line">X_processed = StandardScaler().fit_transform(X_processed)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_processed,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">2</span>)</span><br><span class="line">model = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>,C=<span class="number">1</span>, gamma = <span class="number">0.1</span>)</span><br><span class="line">model.fit(X_train,y_train)</span><br><span class="line">y_pred = model.predict(X_test)</span><br><span class="line">y_pred_train = model.predict(X_train)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Training-and-validation-loss"><a href="#Training-and-validation-loss" class="headerlink" title="Training and validation loss"></a>Training and validation loss</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Training loss is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(model.score(X_train,y_train),<span class="number">2</span>)))</span><br><span class="line">print(<span class="string">&quot;Testing loss is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(model.score(X_test,y_test),<span class="number">2</span>)))</span><br></pre></td></tr></table></figure>
<pre><code>Training loss is: 0.78
Testing loss is: 0.83</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_mse = mean_squared_error(y_train,y_pred_train)</span><br><span class="line">test_mse = mean_squared_error(y_test,y_pred)</span><br><span class="line">print(<span class="string">&quot;The MSE value of training sample is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(train_mse,<span class="number">2</span>)))</span><br><span class="line">print(<span class="string">&quot;The MSE value of testing sample is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(test_mse,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure>
<pre><code>The MSE value of training sample is: 0.22
The MSE value of testing sample is: 0.17</code></pre>
<p>The training loss in SVM with RBF kernel in hyperparameter C: 1, gamma 0.1 is 0.78, with testing loss equals 0.83<br>The MSE value for training and testing in SVM with RBF kernel is 0.22 and 0.17 accordingly</p>
<h3 id="Plot-the-confusion-matrix-plot"><a href="#Plot-the-confusion-matrix-plot" class="headerlink" title="Plot the confusion matrix plot"></a>Plot the confusion matrix plot</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># confusion = confusion_matrix(y_test,y_pred)</span></span><br><span class="line">plot_confusion_matrix(model,X_test,y_test)</span><br><span class="line">plt.title(<span class="string">&quot;SVC Model - Confusion Matrix&quot;</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">2</span>), [<span class="string">&quot;Alive&quot;</span>, <span class="string">&quot;Dead&quot;</span>], fontsize=<span class="number">8</span>)</span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">2</span>), [<span class="string">&quot;Alive&quot;</span>, <span class="string">&quot;Dead&quot;</span>], fontsize=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_83_0.nfr53d9ahao.png" alt="output_83_0"></p>
<h3 id="Evaluate-the-performance-of-the-final-selected-model-performance-with-respect-to-the-chosen-performance-matrix"><a href="#Evaluate-the-performance-of-the-final-selected-model-performance-with-respect-to-the-chosen-performance-matrix" class="headerlink" title="Evaluate the performance of the final selected model performance with respect to the chosen performance matrix"></a>Evaluate the performance of the final selected model performance with respect to the chosen performance matrix</h3><br>

<h3 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy:"></a>Accuracy:</h3><p>$$\frac{TP+TN}{TP+TN+FP+FN}$$<br><br></p>
<h3 id="Total"><a href="#Total" class="headerlink" title="Total:"></a>Total:</h3><p>$$Total = TP+TN+FP+FN$$</p>
<h3 id="Precision"><a href="#Precision" class="headerlink" title="Precision:"></a>Precision:</h3><p>$$\frac{TP}{TP+FP}$$</p>
<h3 id="Recall"><a href="#Recall" class="headerlink" title="Recall:"></a>Recall:</h3><p>$$\frac{TP}{TP+FN}$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line">print(classification_report(y_test,y_pred,target_names=[<span class="string">&quot;Heart Not Failed&quot;</span>, <span class="string">&quot;Heart Fail&quot;</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>                  precision    recall  f1-score   support

Heart Not Failed       0.85      0.93      0.89        43
      Heart Fail       0.77      0.59      0.67        17

        accuracy                           0.83        60
       macro avg       0.81      0.76      0.78        60
    weighted avg       0.83      0.83      0.83        60</code></pre>
<h3 id="ROC-curve"><a href="#ROC-curve" class="headerlink" title="ROC curve"></a>ROC curve</h3><p>AUC = Area under the curve</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve</span><br><span class="line">plot_roc_curve(model,X_test,y_test)</span><br></pre></td></tr></table></figure>



<pre><code>&lt;sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fdff1de91f0&gt;</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_87_1.50raz9ifl680.png" alt="output_87_1">    </p>
<h3 id="PR-curve"><a href="#PR-curve" class="headerlink" title="PR-curve"></a>PR-curve</h3><p>AP = Average Precision, summarizes such a plot as the weighted mean of precisions achieved at each threshold, with the increase in recall from the previous threshold used as the weight:</p>
<p>$$ AP =\sum_{N}(R_n-R_{n-1})P_n$$</p>
<p>where  and  are the precision and recall at the nth threshold. A pair  is referred to as an operating point.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_precision_recall_curve(model,X_test,y_test)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/output_89_1.zs7xp3919lc.png" alt="output_89_1"></p>
<h3 id="Summary-of-the-results"><a href="#Summary-of-the-results" class="headerlink" title="Summary of the results"></a>Summary of the results</h3><ul>
<li>Grid search to find the best hyperparameters in optimization of the model</li>
<li>ten-fold cross validation used to evaluate machine learning models on a limited data sample</li>
<li>SVM with RBF kernel and hyperparameter C: 1, gamma 0.1 would be the best performed model</li>
<li>precision, recall, f1-score, accuracy value were applied and summarized in the previous table</li>
<li>train loss and validation loss were 0.78 and 0.83 accordingly</li>
<li>MSE value of training sample and testing sample is 0.22 and 0.17 accordingly</li>
<li>No overfitting or underfitting problem observed because regularization method, cross-validation method were used to mitigate the potential problems</li>
<li>The overall model is robust and in good generalization ability</li>
<li>ROC curve and PR curve were visualized to demonstrate the final results; AUC is 0.83 and AP is 0.7</li>
</ul>
<h2 id="Conclusion-and-future-work"><a href="#Conclusion-and-future-work" class="headerlink" title="Conclusion and future work"></a>Conclusion and future work</h2><p>In this project, I compared and devised a RBF SVM machine learning model for the prediction of heart failure. I firstly conducted a preliminary analysis of the whole dataset and utilized the PCA method to visualize the distribution condition of the samples. The initial analysis was not robust and precise, which required me to optimize the model. Then, I conducted feature selection to return the top 4 most correlated feature with the death event. Apart from that, I also compared the difference between normalization method as well as the validation methods. The final determined methods were to use four selected features (‘serum_creatinine’,’age’,’ejection_fraction’, ‘creatinine_phosphokinase’), StandardScalar methods and ten-fold cross validation to conduct the prediction. In addition, I also conduct the explorative data analysis to have a view of the selected feature. Furthermore, the PCA condition after feature selection still could not determine whether the dataset is linearly seperable or not, I, therefore, used the grid serach to return the most suitable hyperparameters. The final results suggested that the SVM with RBF kernel in gamma equals 0.1 and penalty C equals 1 could achieve the best performance. After that, the model performance was evaluated from confusion matrix, accuracy, precision, recall, f1-score. Moreover, the ROC plot and PR-curve plot with AUC and AP accordingly were indicated. The final accuracy could achieve 0.83, which is satisfactory.</p>
<p>In the future, since this project only used SVM related algorithms, I would like to incorporate more complicate algorithms, for instance, XGboost. Furthermore, the model’s interpretability are not great enough, and that would be my focus in the future.</p>
<h2 id="Bibliography"><a href="#Bibliography" class="headerlink" title="Bibliography"></a>Bibliography</h2><p>Heart Fail:Analysis and Quick-prediction | Kaggle. (n.d.). Retrieved January 8, 2021, from <a class="link"   href="https://www.kaggle.com/nayansakhiya/heart-fail-analysis-and-quick-prediction" >https://www.kaggle.com/nayansakhiya/heart-fail-analysis-and-quick-prediction<i class="fas fa-external-link-alt"></i></a></p>
<p>Heart Failure - Model Prediction Comparisons (95%) | Kaggle. (n.d.). Retrieved January 8, 2021, from <a class="link"   href="https://www.kaggle.com/rude009/heart-failure-model-prediction-comparisons-95" >https://www.kaggle.com/rude009/heart-failure-model-prediction-comparisons-95<i class="fas fa-external-link-alt"></i></a></p>
<p>Heart Failure Prediction (AUC: 0.98) | Kaggle. (n.d.). Retrieved January 8, 2021, from <a class="link"   href="https://www.kaggle.com/ksvmuralidhar/heart-failure-prediction-auc-0-98" >https://www.kaggle.com/ksvmuralidhar/heart-failure-prediction-auc-0-98<i class="fas fa-external-link-alt"></i></a></p>
<p>Pedregosa et al., Scikit-learn: Machine Learning in Python, JMLR 12, pp. 2825-2830, 2011.</p>
<h2 id="Other-resources-to-download-the-code"><a href="#Other-resources-to-download-the-code" class="headerlink" title="Other resources to download the code"></a>Other resources to download the code</h2><p>Kaggle:<br><a class="link"   href="https://www.kaggle.com/yuxuanwu17/eda-of-heart-failure-and-optimization-of-svm" >https://www.kaggle.com/yuxuanwu17/eda-of-heart-failure-and-optimization-of-svm<i class="fas fa-external-link-alt"></i></a></p>
<p>Github:<br><a class="link"   href="https://github.com/yuxuanwu17/kaggle/blob/main/Final_report.ipynb" >https://github.com/yuxuanwu17/kaggle/blob/main/Final_report.ipynb<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>ML</tag>
        <tag>EDA</tag>
      </tags>
  </entry>
  <entry>
    <title>Explorative data anlysis of avocado price from 2015-2020</title>
    <url>/2021/01/25/avocado_pred/</url>
    <content><![CDATA[<p>Avocado, bright green fruit with a large pit and dark leathery skin, has become a fashion among millennials in America. Avocados are featured in their unique flavor, rich texture, and the high percentage of healthy fat, which is an ideal food for the healthy diet. However, the average price for avocados is not cheap, which made those millennials unable to achieve their “Avocado Freedom” dream. In addition, as an applicant in American master degree and a fan of avocados, it is of significant interest for me to conduct the explorative data analysis of avocados, hoping to figure out some hidden patterns, like seasonal patterns or cyclical patterns. Furthermore, related factors were also evaluated to suggest the influence on the avocados’ price, which could help these millennials to find the cheaper avocados in a scientific way. </p>
<h3 id="Import-the-libraries"><a href="#Import-the-libraries" class="headerlink" title="Import the libraries"></a>Import the libraries</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(tidyr)</span><br><span class="line">library(skimr)</span><br><span class="line">library(GGally)</span><br><span class="line">library(viridis)</span><br><span class="line">library(caret)</span><br><span class="line">library(e1071)</span><br><span class="line">library(rpart)</span><br><span class="line">library(xgboost)</span><br><span class="line">library(forecast)</span><br><span class="line">library(corrplot)</span><br><span class="line">library(corrgram)</span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggthemes)</span><br><span class="line">library(psych)</span><br><span class="line">library(scales)</span><br><span class="line">library(treemap)</span><br><span class="line">library(repr)</span><br><span class="line">library(cowplot)</span><br><span class="line">library(magrittr)</span><br><span class="line">library(ggpubr)</span><br><span class="line">library(RColorBrewer)</span><br><span class="line">library(plotrix)</span><br><span class="line">library(ggrepel)</span><br><span class="line">library(tidyverse)</span><br><span class="line">library(gridExtra)</span><br><span class="line">library(lubridate)</span><br><span class="line">library(tibbletime)</span><br><span class="line">library(reshape2)</span><br><span class="line">library(prophet)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Load-the-data-and-return-the-head-of-data"><a href="#Load-the-data-and-return-the-head-of-data" class="headerlink" title="Load the data and return the head of data"></a>Load the data and return the head of data</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df &lt;- read.csv(&quot;&#x2F;Users&#x2F;yuxuan&#x2F;Desktop&#x2F;INT303-Avocado-prediction&#x2F;avocado-updated-2020.csv&quot;)</span><br><span class="line">head(df)</span><br><span class="line">colnames(df)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">date</th>
<th align="left">average_price</th>
<th align="left">total_volume</th>
<th align="left">X4046</th>
<th align="left">X4225</th>
<th align="left">X4770</th>
<th align="left">total_bags</th>
<th align="left">small_bags</th>
<th align="left">large_bags</th>
<th align="left">xlarge_bags</th>
<th align="left">type</th>
<th align="left">year</th>
<th align="left">geography</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"><fct></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><dbl></td>
<td align="left"><fct></td>
<td align="left"><int></td>
<td align="left"><fct></td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">2015-01-04</td>
<td align="left">1.22</td>
<td align="left">40873.28</td>
<td align="left">2819.50</td>
<td align="left">28287.42</td>
<td align="left">49.90</td>
<td align="left">9716.46</td>
<td align="left">9186.93</td>
<td align="left">529.53</td>
<td align="left">0</td>
<td align="left">conventional</td>
<td align="left">2015</td>
<td align="left">Albany</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">2015-01-04</td>
<td align="left">1.79</td>
<td align="left">1373.95</td>
<td align="left">57.42</td>
<td align="left">153.88</td>
<td align="left">0.00</td>
<td align="left">1162.65</td>
<td align="left">1162.65</td>
<td align="left">0.00</td>
<td align="left">0</td>
<td align="left">organic</td>
<td align="left">2015</td>
<td align="left">Albany</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">2015-01-04</td>
<td align="left">1.00</td>
<td align="left">435021.49</td>
<td align="left">364302.39</td>
<td align="left">23821.16</td>
<td align="left">82.15</td>
<td align="left">46815.79</td>
<td align="left">16707.15</td>
<td align="left">30108.64</td>
<td align="left">0</td>
<td align="left">conventional</td>
<td align="left">2015</td>
<td align="left">Atlanta</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">2015-01-04</td>
<td align="left">1.76</td>
<td align="left">3846.69</td>
<td align="left">1500.15</td>
<td align="left">938.35</td>
<td align="left">0.00</td>
<td align="left">1408.19</td>
<td align="left">1071.35</td>
<td align="left">336.84</td>
<td align="left">0</td>
<td align="left">organic</td>
<td align="left">2015</td>
<td align="left">Atlanta</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">2015-01-04</td>
<td align="left">1.08</td>
<td align="left">788025.06</td>
<td align="left">53987.31</td>
<td align="left">552906.04</td>
<td align="left">39995.03</td>
<td align="left">141136.68</td>
<td align="left">137146.07</td>
<td align="left">3990.61</td>
<td align="left">0</td>
<td align="left">conventional</td>
<td align="left">2015</td>
<td align="left">Baltimore/Washington</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">2015-01-04</td>
<td align="left">1.29</td>
<td align="left">19137.28</td>
<td align="left">8040.64</td>
<td align="left">6557.47</td>
<td align="left">657.48</td>
<td align="left">3881.69</td>
<td align="left">3881.69</td>
<td align="left">0.00</td>
<td align="left">0</td>
<td align="left">organic</td>
<td align="left">2015</td>
<td align="left">Baltimore/Washington</td>
</tr>
</tbody></table>
<h3 id="Check-whether-the-dataset-contains-the-missing-value"><a href="#Check-whether-the-dataset-contains-the-missing-value" class="headerlink" title="Check whether the dataset contains the missing value"></a>Check whether the dataset contains the missing value</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum(is.na(df))</span><br></pre></td></tr></table></figure>
<p>The overall dataset do not contain any missing value</p>
<h3 id="Explore-the-data-and-some-clarification"><a href="#Explore-the-data-and-some-clarification" class="headerlink" title="Explore the data and some clarification"></a>Explore the data and some clarification</h3><h4 id="Explain-the-features"><a href="#Explain-the-features" class="headerlink" title="Explain the features"></a>Explain the features</h4><ul>
<li>date - The date of the observation</li>
<li>average_price - The average price of a single</li>
<li>total_volume - Total number of avocados sold</li>
<li>year - The year</li>
<li>type - conventional or organic</li>
<li>geography - The city or region of the observation</li>
</ul>
<h4 id="X4046-X4225-X4770-stands-for-the-PLU-code"><a href="#X4046-X4225-X4770-stands-for-the-PLU-code" class="headerlink" title="X4046, X4225, X4770 stands for the PLU code"></a>X4046, X4225, X4770 stands for the PLU code</h4><ul>
<li>Small/Medium Hass Avocado (~3-5oz avocado) | #4046 </li>
<li>Large Hass Avocado (~8-10oz avocado) | #4225 </li>
<li>Extra Large Hass Avocado (~10-15oz avocado) | #4770 </li>
</ul>
<h3 id="Exploratory-Data-Analysis"><a href="#Exploratory-Data-Analysis" class="headerlink" title="Exploratory Data Analysis"></a>Exploratory Data Analysis</h3><h4 id="Density-plot-of-the-difference-between-two-avocados"><a href="#Density-plot-of-the-difference-between-two-avocados" class="headerlink" title="Density plot of the difference between two avocados."></a>Density plot of the difference between two avocados.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">levels(df$type)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">options(repr.plot.width &#x3D; 8, repr.plot.height &#x3D; 4)</span><br><span class="line">density_plot &lt;- ggplot(df, aes(x&#x3D;average_price, fill&#x3D;type))+</span><br><span class="line">  geom_density()+</span><br><span class="line">  facet_wrap(~type)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),legend.position &#x3D; &quot;bottom&quot;)+</span><br><span class="line">  labs(title &#x3D; &quot;Avocado Price by type&quot;)+</span><br><span class="line">  scale_fill_brewer(palette &#x3D; &quot;Set2&quot;)</span><br><span class="line">density_plot</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___14_1.png" alt="img"></p>
<ol>
<li><h3 id="Create-a-matrix-to-demonstrate-the-volume-of-conventional-and-organic-avocados"><a href="#Create-a-matrix-to-demonstrate-the-volume-of-conventional-and-organic-avocados" class="headerlink" title="Create a matrix to demonstrate the volume of conventional and organic avocados"></a>Create a matrix to demonstrate the volume of conventional and organic avocados</h3></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(dplyr)</span><br><span class="line">vol_type &lt;- df %&gt;% group_by(type) %&gt;% summarise(average_volume &#x3D; round(mean(total_volume),3),average_price &#x3D; round(mean(average_price),3)) %&gt;% mutate(volume_percent&#x3D; round(prop.table(average_volume)*100,3))</span><br><span class="line">vol_type</span><br><span class="line"></span><br><span class="line">#plu_conv &lt;- df %&gt;% select(type,total_volume,X4046,X4225,X4770) %&gt;% group_by(type) %&gt;% summarise(average_volume &#x3D; round(mean(total_volume),3),x4046 &#x3D; sum(X4046),x4225 &#x3D; sum(X4225),x4770 &#x3D; sum(X4770)) %&gt;% mutate(volume_percent&#x3D; round(prop.table(average_volume)*100,3))</span><br><span class="line">#plu_conv</span><br><span class="line"></span><br><span class="line">#cor(df$average_price,df$total_volume)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">type</th>
<th align="left">average_volume</th>
<th align="left">average_price</th>
<th align="left">volume_percent</th>
</tr>
</thead>
<tbody><tr>
<td align="center">organic</td>
<td align="left">60127.48</td>
<td align="left">1.624</td>
<td align="left">3.201%</td>
</tr>
<tr>
<td align="center">conventional</td>
<td align="left">1818206.02</td>
<td align="left">1.158</td>
<td align="left">96.799%</td>
</tr>
</tbody></table>
<p><strong>As can be seen from the density plot and the table in avocados.</strong> </p>
<ul>
<li>there are two types of avocado: organic and conventional  </li>
<li>organic avocado share a small percent (3.2%) of volume but has a high price (1.62)  </li>
<li>conventional avocado share a large percent (96.8) of volume but has a relative low price (1.16) </li>
</ul>
<h3 id="Compare-the-volume-of-each-avocado"><a href="#Compare-the-volume-of-each-avocado" class="headerlink" title="Compare the volume of each avocado"></a>Compare the volume of each avocado</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x4770 &lt;- df$X4770 %&gt;% sum()</span><br><span class="line">x4046 &lt;- df$X4046 %&gt;% sum()</span><br><span class="line">x4225 &lt;- df$X4225 %&gt;% sum()</span><br><span class="line">total_types &lt;- x4770+x4046+x4225</span><br><span class="line">total_types</span><br><span class="line">df$total_volume %&gt;% sum()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1] &quot;The sum of volume in x4770, x4046, x4225 is:  18181860558.8&quot;</span><br><span class="line">[1] &quot;The sum of volume in the sum of total_volume:  28197362107.92&quot;</span><br></pre></td></tr></table></figure>
<p>The reason causing this difference is that there are different kinds of avocados, this dataset only consider the plu code of Hass avocados, it is obvious that it will cause the difference</p>
<h3 id="Avocado-price-from-2015-2020"><a href="#Avocado-price-from-2015-2020" class="headerlink" title="Avocado price from 2015-2020"></a>Avocado price from 2015-2020</h3><figure class="highlight plain"><figcaption><span>ggplot&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">## Change the Date column from factor to the date format</span><br><span class="line">df$date &lt;- as.Date(df$date, &quot;%Y-%m-%d&quot;)</span><br><span class="line"></span><br><span class="line">## Sort the dates and order the datesets in date</span><br><span class="line">df &lt;- df[order(df$date),]</span><br><span class="line"></span><br><span class="line">## Make the plot</span><br><span class="line">comparision_plot &lt;- df %&gt;% select(date, average_price, type) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;date,y&#x3D;average_price))+</span><br><span class="line">  geom_area(aes(color&#x3D;type,fill&#x3D;type),alpha&#x3D;0.3,position&#x3D;position_dodge(0.8))+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  scale_color_manual(values &#x3D; c(&quot;#ED7921&quot;,&quot;#62BE51&quot;))+</span><br><span class="line">  scale_fill_manual(values &#x3D; c(&quot;#FD833E&quot;,&quot;#B8FC5F&quot;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">comparision_plot</span><br><span class="line">#plot_grid(density_plot,comparision,ncol &#x3D; 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___22_0.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ggplot(data&#x3D;df, aes(x&#x3D;date, y&#x3D;average_price,col&#x3D;type))+</span><br><span class="line">  geom_line()+</span><br><span class="line">  facet_wrap(~ type)+</span><br><span class="line">  theme_bw()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;position&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___23_0.png" alt="img"></p>
<ul>
<li>The price of organic avocados are always higher than normal</li>
<li>The price of both avocados follow some seasonal patterns, which obeyed the commob view</li>
<li>Whether the relationship between the volume and price existed need to be explored in the following part</li>
</ul>
<h3 id="Relationship-between-Prices-and-Total-on-either-conventional-or-organic-avocados"><a href="#Relationship-between-Prices-and-Total-on-either-conventional-or-organic-avocados" class="headerlink" title="Relationship between Prices and Total on either conventional or organic avocados"></a>Relationship between Prices and Total on either conventional or organic avocados</h3><h4 id="Filter-the-data-into-two-categories-conventional-or-organic"><a href="#Filter-the-data-into-two-categories-conventional-or-organic" class="headerlink" title="Filter the data into two categories, conventional or organic"></a>Filter the data into two categories, conventional or organic</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">organic &lt;- df %&gt;% select(type,average_price,total_volume,date) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;)</span><br><span class="line">#head(organic)</span><br><span class="line">conventional &lt;- df %&gt;% select(type,average_price,total_volume,date) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;)</span><br><span class="line">#head(conventional)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>tribble_tabel&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line">library(tibbletime)</span><br><span class="line">organic &lt;- as_tbl_time(organic,index &#x3D; date) %&gt;% as_period(&#39;1 month&#39;)</span><br><span class="line">conventional &lt;- as_tbl_time(conventional,index &#x3D; date) %&gt;% as_period(&#39;monthly&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Monthly-avocados-price-in-either-conventional-or-organic-avocados"><a href="#Monthly-avocados-price-in-either-conventional-or-organic-avocados" class="headerlink" title="Monthly avocados price in either conventional or organic avocados"></a>Monthly avocados price in either conventional or organic avocados</h4><figure class="highlight plain"><figcaption><span>cowplot, fig.width </span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggthemes)</span><br><span class="line">library(cowplot)</span><br><span class="line"></span><br><span class="line">options(repr.plot.width&#x3D;8, repr.plot.height&#x3D;6)</span><br><span class="line"></span><br><span class="line">## average-price with time series</span><br><span class="line">conventional_monthly &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;average_price))+</span><br><span class="line">    geom_line(color&#x3D;&quot;#5C374C&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    labs(title &#x3D; &quot;Conventional Avocados&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; max(conventional$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;red&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; min(conventional$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;blue&quot;)</span><br><span class="line"></span><br><span class="line">organic_monthly &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;average_price))+</span><br><span class="line">    geom_line(color&#x3D;&quot;#58D68D&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    labs(title &#x3D; &quot;Organic Avocados&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; max(organic$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;red&quot;)+</span><br><span class="line">    geom_hline(yintercept &#x3D; min(organic$average_price),linetype&#x3D;&quot;dashed&quot;,color &#x3D; &quot;blue&quot;)</span><br><span class="line"></span><br><span class="line">## create a volume chart</span><br><span class="line">conventional_volume &lt;- conventional %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;total_volume))+</span><br><span class="line">    geom_bar(stat &#x3D; &#39;identity&#39;,fill&#x3D;&quot;#7FB3D5&quot;,color&#x3D;&quot;black&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    geom_smooth(method &#x3D; &quot;loess&quot;,color&#x3D;&quot;red&quot;)</span><br><span class="line"></span><br><span class="line">organic_volume &lt;- organic %&gt;%</span><br><span class="line">    ggplot(aes(x&#x3D;date,y&#x3D;total_volume))+</span><br><span class="line">    geom_bar(stat &#x3D; &#39;identity&#39;,fill&#x3D;&#39;#58D68D&#39;,color&#x3D;&quot;black&quot;)+</span><br><span class="line">    theme_economist()+</span><br><span class="line">    theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill &#x3D; &quot;#D5D8DC&quot;))+</span><br><span class="line">    geom_smooth(method &#x3D; &quot;loess&quot;,color &#x3D;&quot;red&quot;)</span><br><span class="line"></span><br><span class="line">plot_grid(conventional_monthly,organic_monthly,conventional_volume,organic_volume,nrow &#x3D; 2,ncol &#x3D; 2,labels &#x3D; c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;))</span><br><span class="line"></span><br><span class="line">#plot_grid(conventional_monthly,conventional_volume,nrow &#x3D; 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..tZfBZbcjjkqxj4RmQEJoyw.A2C4X-_8qnKSkIVucnomHICENKUmjTPXUgT1XqFjrKp8Vwfpyt-nJXhYhke8yzjlDiL_FT1jvmw9GnBDuF_MeWzQUxn59txsXKEQ5TNxy2sZy6GYoHD4yeJb96CHu7tEvhTmc3Pf1nseFJUmMjAKCktdygT-uHDSuVQKAPNnGUpFNmn5fx_6OsujxRZO9TdXdWiqH1GGat_EqgxwZW-_o856VcxtNXe5WenELwGdFrP_fHsmRkvvcjtEmEXzl2_blPw6GMAdMmDD7WsNhKVd4zJoOVKvPx1awtn9623tYAqFfDJ3qzKqLfFAhNRAMsqQ-zfIos2ndjfK3YTRnRTKn_TX9TkPBnbni_OR6teuY24PW_hMZpFYW332SdtN2sCHyHke6Oaqgs6uq8l6jX14yyIMEhgiWkl5Usn36w1aLLtP4YQZIjO1m7B9FsVSOFeULVuVmThf6LyKuvsoG3N568gEqTKblQvj-_R0hUqGhc6W-3DZyE0hBoqgO__LBxbYYZ51DdMf-2bv2Hj99gNwuS-EVb1GFv__UrplkB63GGn-ftucHSQBkxSDoKlB0F99ZiGNWL4cmii009OqgG_mJQI9W-iqgB6sW3k3T3RdVL3QpdG-D3XEhYgfQTcMV6P23-9iQKNgOcTD1CWwWPVjsJfgu_NZHVIoUScEs9mdivE.1eUtwBW-D1O5QgrEgVmjhw/__results___files/__results___29_1.png"></p>
<ul>
<li>In order to find the seasonal patterns, I used the average price and volume in each month to conduct data analysis</li>
<li>Figure A,B stands for the average price in each month (monthly)</li>
<li>Blue dashed line stands for the minimum value while the red dashed value stands for the max value</li>
<li>The most expensive conventional avocados in one month could 1.8 $, the cheapest month of conventional avocados can be 0.82 $</li>
<li>The most expensive organic avocados in one month could 2.1 $, the cheapest month of conventional avocados can be 1.21 $</li>
<li>Figure C,D stands for the volume in each month, the red line stands for the trend</li>
<li>The love of American people are consistent, the sold volume continues to grow (conventional avocado)</li>
<li>Regarding with the organic avocados, in 2019-2020, possibly owing to the decline of economic situation and the covid 19 pandemic after 2020</li>
<li>The volume patterns could follow some seasonal patterns and need further analysis</li>
</ul>
<h3 id="Patterns-among-the-years-in-each-month-Autoplot-library"><a href="#Patterns-among-the-years-in-each-month-Autoplot-library" class="headerlink" title="Patterns among the years in each month (Autoplot library)"></a>Patterns among the years in each month (Autoplot library)</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Process the data into year and month format</span></span><br><span class="line">library(forecast)</span><br><span class="line">seasonal_df &lt;- read.csv(<span class="string">&quot;/Users/yuxuan/Desktop/INT303-Avocado-prediction/avocado-updated-2020.csv&quot;</span>)</span><br><span class="line">seasonal_df$month_year &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%Y-%m&quot;</span>)</span><br><span class="line">seasonal_df$month &lt;- format(as.Date(seasonal_df$date),<span class="string">&quot;%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Change the month from a Date format into a numerical foramt, then convert to the three letter format</span></span><br><span class="line"></span><br><span class="line">seasonal_df$monthabb &lt;- sapply(seasonal_df$month, <span class="keyword">function</span> (x) <span class="built_in">month.abb</span>[<span class="built_in">as.numeric</span>(x)])</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb,levels=<span class="built_in">month.abb</span>)</span><br><span class="line">seasonal_df$monthabb &lt;- factor(seasonal_df$monthabb)</span><br></pre></td></tr></table></figure>

<p>​                              </p>
<h3 id="Seasonal-patterns-analysis"><a href="#Seasonal-patterns-analysis" class="headerlink" title="Seasonal patterns analysis"></a>Seasonal patterns analysis</h3><p>Avocado price (both organic and conventional) distribution plot from 2015 to 2020</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ggplot(seasonal_df,aes(x&#x3D;average_price,fill&#x3D;as.factor(year)))+</span><br><span class="line">geom_density(alpha&#x3D;0.5)+</span><br><span class="line">theme_economist()+</span><br><span class="line">facet_wrap(~year)+</span><br><span class="line">theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">guides(fill&#x3D;FALSE)+</span><br><span class="line">labs(title &#x3D; &quot;Distribution of Prices by year&quot;,x&#x3D;&#39;Average Price&#39;,y&#x3D;&#39;Density&#39;)+</span><br><span class="line">scale_fill_manual(values &#x3D; c(&quot;#DA4511&quot;, &quot;#FFBD00&quot;, &quot;#6A953F&quot;, &quot;#9A6233&quot;, &quot;#D3AE7C&quot;, &quot;#307CA1&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___35_0.png" alt="img"></p>
<ul>
<li>The distribution plot of each year from 2015 to 2020</li>
<li>2017 is the year when avocado price functions like the normal distribution plot</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## Set the figure size</span></span><br><span class="line"></span><br><span class="line">options(repr.plot.width=<span class="number">10</span>,repr.plot.height=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the price by month</span></span><br><span class="line"></span><br><span class="line">conv_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">org_price &lt;- seasonal_df %&gt;% select(type,year,monthabb,average_price) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(average_price))</span><br><span class="line"></span><br><span class="line">conv_price &lt;- ts(conv_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_price &lt;- ts(org_price$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analyze the volume by month</span></span><br><span class="line"></span><br><span class="line">conv_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;conventional&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">org_volume &lt;- seasonal_df %&gt;% select(type,year,monthabb,total_volume) %&gt;% filter(type==<span class="string">&quot;organic&quot;</span>) %&gt;% group_by(year,monthabb) %&gt;% summarise(avg=mean(total_volume))</span><br><span class="line"></span><br><span class="line">conv_volume &lt;- ts(conv_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line">org_volume &lt;- ts(org_volume$avg,start = <span class="number">2015</span>,frequency = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">byyearplot_price_conv &lt;- ggseasonplot(conv_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_price_org &lt;- ggseasonplot(org_price,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados price \n by year for each month&quot;</span>, y=<span class="string">&quot;Average Price&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_conv &lt;- ggseasonplot(conv_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average conventional Avocados volume \n by year for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">byyearplot_volume_org &lt;- ggseasonplot(org_volume,year.labels = <span class="literal">TRUE</span>,year.labels.left = <span class="literal">TRUE</span>)+</span><br><span class="line">theme_economist()+</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>),plot.background = element_rect(fill=<span class="string">&quot;#D5D8DC&quot;</span>))+</span><br><span class="line">labs(title = <span class="string">&quot;Average organic Avocados volume by year \n for each month&quot;</span>, y=<span class="string">&quot;Average volume&quot;</span>)+</span><br><span class="line">scale_fill_manual(values = <span class="built_in">c</span>(<span class="string">&quot;#922B21&quot;</span>, <span class="string">&quot;#EE865D&quot;</span>, <span class="string">&quot;#DDCD5E&quot;</span>, <span class="string">&quot;#59BEC4&quot;</span>, <span class="string">&quot;#048B9F&quot;</span>, <span class="string">&quot;#114676&quot;</span>))</span><br><span class="line"></span><br><span class="line">plot_grid(byyearplot_price_conv,byyearplot_price_org,byyearplot_volume_conv,byyearplot_volume_org,nrow = <span class="number">2</span>,ncol = <span class="number">2</span>,labels = <span class="built_in">c</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___37_1.png" alt="img"></p>
<h3 id="Seasonality-patterns"><a href="#Seasonality-patterns" class="headerlink" title="Seasonality patterns"></a>Seasonality patterns</h3><h4 id="Monthly-analysis"><a href="#Monthly-analysis" class="headerlink" title="Monthly analysis"></a>Monthly analysis</h4><figure class="highlight plain"><figcaption><span>seaonal patterns, fig.align </span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">options(repr.plot.width&#x3D;10,repr.plot.height&#x3D;8)</span><br><span class="line">conv_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb, y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">organic_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">whole_patterns &lt;- seasonal_df %&gt;% select(monthabb,average_price,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;All Avocados&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns,organic_patterns,whole_patterns,nrow &#x3D; 3)</span><br><span class="line">#conv_patterns</span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___39_1.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conv_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb, y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados volume&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">organic_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(total_volume)) %&gt;%</span><br><span class="line">ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados volume&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">whole_patterns_vol &lt;- seasonal_df %&gt;% select(monthabb,total_volume,type) %&gt;% group_by(monthabb) %&gt;% summarise(avg&#x3D;mean(total_volume)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;monthabb,y&#x3D;avg))+</span><br><span class="line">  geom_point(color&#x3D;&quot;#F35D5D&quot;,aes(size&#x3D;avg))+</span><br><span class="line">  geom_line(group&#x3D;0)+</span><br><span class="line">  theme_economist()+</span><br><span class="line">  theme(legend.position &#x3D; &quot;none&quot;,plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#D5D8DC&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;All Avocados volume&quot;,x&#x3D;&quot;Month&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_grid(conv_patterns_vol,organic_patterns_vol,whole_patterns_vol,nrow &#x3D; 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___40_1.png" alt="img"></p>
<ul>
<li>Overall, the avocado price could reach the peak of the year during Sep and Oct, and Feb could be the lowest price</li>
<li>Regarding with the volume avocado sold, American people like to buy avocado at Feb and May, but not at Nov</li>
<li>Based on the research, avocado tend to ripe at Aug and Sep, plus the time in transportation and packaging, it is unavoidable that it could have some delay</li>
<li>From the plot we could see that the trend in Aug are positive</li>
<li>We could see that the sold volume and price demonstrated some negative correlation at some time, which obeys our common sense, people like buying staffs when their price are low</li>
<li>Meanwhile, some positive correlation could be discovered between price and volumes, the hypothesis is that the newly harvest avocados are definitely in high quality and the previous stored avocados could be consumed significantly, which means there is a gap between demand and output</li>
<li>The volumes are increasing with the time which possibly because of the widely broadcasting.</li>
</ul>
<h4 id="Seasonal-patterns"><a href="#Seasonal-patterns" class="headerlink" title="Seasonal patterns"></a>Seasonal patterns</h4><figure class="highlight plain"><figcaption><span>fig.height </span></figcaption><table><tr><td class="code"><pre><span class="line">options(repr.plot.width&#x3D;10,repr.plot.height&#x3D;8)</span><br><span class="line"></span><br><span class="line">## seperate the month into four seasons</span><br><span class="line">seasonal_df$season &lt;- ifelse(seasonal_df$month %in% c(&quot;03&quot;,&quot;04&quot;,&quot;05&quot;),&quot;Spring&quot;,</span><br><span class="line">ifelse(seasonal_df$month %in% c(&quot;06&quot;,&quot;07&quot;,&quot;08&quot;),&quot;Summer&quot;,</span><br><span class="line">ifelse(seasonal_df$month %in% c(&quot;09&quot;,&quot;10&quot;,&quot;11&quot;),&quot;Autumn&quot;,&quot;Winter&quot;)))</span><br><span class="line"></span><br><span class="line">## Prepare to analyze the results</span><br><span class="line">seasonality_plot_conventional_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type &#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados average price by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average price&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(&quot;$ &quot;,round(avg,2))),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">seasonality_plot_conventional_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;round(mean(total_volume&#x2F;1000000),2)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados total volume by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average volume&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(avg,&quot; m&quot;)),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">#plot_grid(seasonality_plot_conventional_price,seasonality_plot_conventional_volume,nrow &#x3D; 2)</span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_price &lt;- seasonal_df %&gt;% select(season,year,average_price,type) %&gt;% filter(type &#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;mean(average_price)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados average price by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average price&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(&quot;$ &quot;,round(avg,2))),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">seasonality_plot_organic_volume &lt;- seasonal_df %&gt;% select(season,year,total_volume,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(season,year) %&gt;% summarise(avg&#x3D;round(mean(total_volume&#x2F;1000000),2)) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;season,y&#x3D;avg,color&#x3D;season))+</span><br><span class="line">  geom_segment(aes(x&#x3D;season,xend&#x3D;season,y&#x3D;0,yend&#x3D;avg),show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  facet_wrap(~as.factor(year))+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados total volume by Season&quot;,x&#x3D;&quot;&quot;,y&#x3D;&quot;Average volume&quot;)+</span><br><span class="line">  geom_text(aes(x&#x3D;season,y&#x3D;0.01,label&#x3D;paste0(avg,&quot; m&quot;)),hjust&#x3D;-0.5,vjust&#x3D;-0.5,size&#x3D;4,color&#x3D;&quot;black&quot;,fontface&#x3D;&#39;italic&#39;,angle&#x3D;360)</span><br><span class="line"></span><br><span class="line">plot_grid(seasonality_plot_conventional_price,seasonality_plot_organic_price,seasonality_plot_conventional_volume,seasonality_plot_organic_volume,nrow &#x3D; 2,ncol &#x3D; 2,labels &#x3D; c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___43_1.png" alt="img"></p>
<ul>
<li>Spring (3-5), Summer (6-8), Autumn (9-11), Winter (12-2)</li>
<li>Figure A, B stands for the average price of avocados for either conventional or organic</li>
<li>Figure C, D stands for the volume sold for either conventional or organic, the unit is million (m)</li>
<li>In summary:<ul>
<li>it is relative cheaper to avocado in Spring or Winter</li>
<li>avocado most sold in Spring and Summer since it is close to the next round of ripen in avocado and the market are in great supply of avocados</li>
</ul>
</li>
</ul>
<h3 id="Find-the-city-where-avocado’s-price-is-lowest"><a href="#Find-the-city-where-avocado’s-price-is-lowest" class="headerlink" title="Find the city where avocado’s price is lowest"></a>Find the city where avocado’s price is lowest</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(forcats)</span><br><span class="line">geo_conv_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;conventional&quot;) %&gt;% group_by(geography)%&gt;%  summarise(avg&#x3D;round(mean(average_price),2)) %&gt;% arrange(avg) %&gt;% slice(1:6)  %&gt;% mutate(geography&#x3D;fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;geography,y&#x3D;avg))+</span><br><span class="line">  geom_bar(stat &#x3D; &quot;identity&quot;,position &#x3D; &quot;dodge&quot;,alpha&#x3D;.6,width &#x3D;.4,show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label&#x3D;avg),vjust&#x3D;1.5,color&#x3D;&#39;black&#39;,size&#x3D;5)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title &#x3D; element_text(hjust &#x3D; 0.6),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Conventional Avocados average price by geography&quot;,x&#x3D;&quot;Geography place&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">geo_org_price &lt;- seasonal_df %&gt;% select(geography,average_price,type) %&gt;% filter(type&#x3D;&#x3D;&quot;organic&quot;) %&gt;% group_by(geography)%&gt;%  summarise(avg&#x3D;round(mean(average_price),2)) %&gt;% arrange(avg) %&gt;% slice(1:6) %&gt;% mutate(geography&#x3D;fct_reorder(geography,desc(avg))) %&gt;%</span><br><span class="line">  ggplot(aes(x&#x3D;geography,y&#x3D;avg))+</span><br><span class="line">  geom_bar(stat &#x3D; &quot;identity&quot;,position &#x3D; &quot;dodge&quot;,alpha&#x3D;.6,width &#x3D;.4,show.legend &#x3D; FALSE)+</span><br><span class="line">  coord_flip()+</span><br><span class="line">  geom_text(aes(label&#x3D;avg),vjust&#x3D;1.5,color&#x3D;&#39;black&#39;,size&#x3D;5)+</span><br><span class="line">  theme_minimal()+</span><br><span class="line">  theme(title &#x3D; element_text(hjust &#x3D; 0.6),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Organic Avocados average price by geography&quot;,x&#x3D;&quot;Geography place&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">plot_grid(geo_conv_price,geo_org_price,nrow &#x3D; 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___47_1.png" alt="img"></p>
<ul>
<li>Use the calculation to return the six cities or regions whether the average price for avocados is lowest</li>
<li>Based on the research from map, Top 5 is close to the Mexico, where the avocado originated</li>
<li>These places are possibly the region to supply avocado</li>
</ul>
<h3 id="The-future-price-prediction"><a href="#The-future-price-prediction" class="headerlink" title="The future price prediction"></a>The future price prediction</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(prophet)</span><br><span class="line">library(cowplot)</span><br><span class="line">library(gridExtra)</span><br><span class="line">library(ggplot2)</span><br><span class="line">library(ggpubr)</span><br><span class="line">library(devtools)</span><br><span class="line">## Select and filter the data and fit the model</span><br><span class="line">price_predict &lt;- df %&gt;% select(date,average_price) %&gt;% group_by(date) %&gt;% summarise(avg&#x3D;mean(average_price))</span><br><span class="line">colnames(price_predict) &lt;- c(&#39;ds&#39;,&#39;y&#39;)</span><br><span class="line">model &lt;- prophet(price_predict,daily.seasonality &#x3D; TRUE)</span><br><span class="line"></span><br><span class="line">## make prediction or forecast the results</span><br><span class="line">future &lt;- make_future_dataframe(model,periods &#x3D; 365)</span><br><span class="line">forecast &lt;- predict(model,future)</span><br><span class="line">plot(model,forecast)+</span><br><span class="line">theme_minimal()+</span><br><span class="line">  theme(plot.title &#x3D; element_text(hjust &#x3D; 0.5),plot.background &#x3D; element_rect(fill&#x3D;&quot;#F4F6F7&quot;))+</span><br><span class="line">  labs(title &#x3D; &quot;Avocados price prediction in next year&quot;,x&#x3D;&quot;year&quot;,y&#x3D;&quot;Average Price&quot;)</span><br><span class="line"></span><br><span class="line">trend &lt;- prophet_plot_components(model,forecast)</span><br><span class="line"></span><br><span class="line">year_trend &lt;- trend[1]</span><br><span class="line">month_trend &lt;- trend[3]</span><br><span class="line">week_trend &lt;- trend[2]</span><br><span class="line">time_trend &lt;- trend[4]</span><br><span class="line"></span><br><span class="line">overall_trend &lt;- c(year_trend,month_trend,week_trend,time_trend)</span><br><span class="line">ggarrange(plotlist &#x3D; overall_trend, labels &#x3D; c(&#39;A&#39;, &#39;B&#39;,&#39;C&#39;,&#39;D&#39;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://www.kaggleusercontent.com/kf/49257785/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Z0nhYvsbYiSXOwi0a3e_Vg.wiLxMBjmfH5zWgzbsyZmfX2LJ0G-TVaPvleMT_PnWnotXv9dMjLJOtv8HFfJB7VIKvaAiOuXOOnNoTfWMLNEsEmQ1mmHeVxFySzLDhVmEuNmhxbLPABCkDVdAAYu7lR3qLD4xuVLxb3CB1zqFhx00gKpCQ0KuMvuDogyMx8hZRnqRMpmN1BUdn9El9QgP0b39UCV6mFT_PHsMspROzMRXXWyLHa2OZk4LsOrllmxRmB2Z9QPNQumEVqNYhwLRXXaANlyENe5DUxBwdfHmK5317bJ12u_rA7mhEhbeV-0eqtoXoB-qJq2HVUfK1W8iEs6QQbGRR7HmPZ2HQO9EKmlZgJKoqLfa7YVA2yznP33QAvi-BHRStxgPRM36xNkRbGb8tTSf0KpaEqFZ2efZ15GqoD1LWYpCRxpZuuvV7B7Z24dQDZ-QfqKubUyzTDhrvSM3G0TBgWBt5fTNyP63r-FAuGXScA7BGlTIIyRQ23XG0w6Mg8X-ce0e2YbLK92ZgH9XIpuWrwdHEoNTCGhjWqrlJPSqkwLeceQhVxUlmEpVGQjC84iUebEnoPU7sNGzis1_haznEpo_OluFxMsvGGa6rpfmRKYHFo4U59pFOhZdUyAHICe_GdGbI73ue-mbyOKSs34XNlRW8m6ooJwM1Z2UaGKQqW1ZOyByXQKf3_Wobs.rI46PCTrAXYR5Yqoaj5Dlg/__results___files/__results___52_0.png" alt="img"></p>
<ul>
<li>Figure A is analyze based on year: Since 2015, the average price of avocados continues to grow and 2017 was a crazy year, they grow in a speed higher than 1.3; After 2018, the average price tend to be stable, but still has a rate about 1.28; Regarding to the future prediction, the range is about [1.20-1.34]. But considering the pandemic in North America, the possible rate could be 1.20</li>
<li>Figure B is the analysis based on month: we could see that during May, the price tend to grow in a positive way and this trend continues to grow to Oct; After Oct, the price starts to decrease, which follows the previous analysis</li>
<li>Figure C is the analysis based on week. The average price follow the rule that ordinary family shopping habits, they prefer to buy things during weekends, so the price during weekends could be higher in other days</li>
</ul>
<hr>
<h3 id="Other-platforms"><a href="#Other-platforms" class="headerlink" title="Other platforms:"></a>Other platforms:</h3><p><strong>kaggle:</strong> <a class="link"   href="https://www.kaggle.com/yuxuanwu17/eda-of-avocado-price-from-2015-to-2020" >https://www.kaggle.com/yuxuanwu17/eda-of-avocado-price-from-2015-to-2020<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>zhihu (Chinese version):</strong> <a class="link"   href="https://zhuanlan.zhihu.com/p/332699778" >https://zhuanlan.zhihu.com/p/332699778<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Github:</strong> <a class="link"   href="https://github.com/yuxuanwu17/INT303-Avocado-prediction" >https://github.com/yuxuanwu17/INT303-Avocado-prediction<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>EDA</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop based big data analysis</title>
    <url>/2021/01/25/Hadoop_cw2/</url>
    <content><![CDATA[<p>Hadoop comprises three part:</p>
<ol>
<li>Main function, including some basic configuration of job</li>
<li>Mapper class, inherited from and override the Map function</li>
<li>Reduce class, inherited from Reduce function and override it</li>
</ol>
<h3 id="1-Calculate-the-bigram-frequency-and-return-the-Top-10"><a href="#1-Calculate-the-bigram-frequency-and-return-the-Top-10" class="headerlink" title="1. Calculate the bigram frequency and return the Top 10"></a>1. Calculate the bigram frequency and return the Top 10</h3><hr>
<h4 id="data-cleaning-part-single-world"><a href="#data-cleaning-part-single-world" class="headerlink" title="data cleaning part (single world)"></a>data cleaning part (single world)</h4><ul>
<li>Use regular expression to extract the useful information</li>
<li>For the neat of code, I separate the word cleaning part into one method: deleteNotion</li>
<li>The idea is to loop all the words and feed into the deleteNotion function to clean the data</li>
<li>Since the word fed into the program is a txt file, we need first calculate each word by .split(“\s+”), and called String [] single_word</li>
<li>The regular expression is designed to match all the punctuation and numbers except for English words </li>
<li>Note that \W didn’t include the number, so we have to make a union of numbers and other punctuation in \W, that is [\\w[0-9]]</li>
<li>Create an ArrayList to store the processed data.</li>
</ul>
<h4 id="bigram-extraction"><a href="#bigram-extraction" class="headerlink" title="bigram extraction"></a>bigram extraction</h4><ul>
<li>loop through the single_word [] list</li>
<li>Note that: since we are calculating the bigram, the length should be length(single_word)-1</li>
<li>We also need to ensure that the first and last were not empty</li>
<li>Then add the data to the newly created Arraylist</li>
</ul>
<hr>
<h3 id="2-Return-the-line-containing-the-word-‘torture’"><a href="#2-Return-the-line-containing-the-word-‘torture’" class="headerlink" title="2. Return the line containing the word ‘torture’"></a>2. Return the line containing the word ‘torture’</h3><ul>
<li>Use regular expression to separate line and store it in to the list</li>
<li>The regular expression was written as {\\n{1,}}, detecting the “\n” and store it as one line </li>
<li>Create an arraylist results to each line </li>
<li>Loop through the arraylist and use .contain function to find the line contain “torture”</li>
<li>Note that, the mapper variable and reduce variable should be switched to Text, the attribute problem should take it seriously</li>
</ul>
<hr>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><h4 id="bigram-frequency"><a href="#bigram-frequency" class="headerlink" title="bigram frequency"></a>bigram frequency</h4><p><img src="/fig/wordcount.png" alt="wordcount"></p>
<h4 id="lines-containing-“torture”"><a href="#lines-containing-“torture”" class="headerlink" title="lines containing “torture”"></a>lines containing “torture”</h4><p><img src="/fig/Shuffled_Maps.png" alt="img"></p>
<hr>
<h2 id="Code-resources"><a href="#Code-resources" class="headerlink" title="Code resources"></a>Code resources</h2><p>Github: <a class="link"   href="https://github.com/yuxuanwu17/Hadoop_cw2" >https://github.com/yuxuanwu17/Hadoop_cw2<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>FYP check lists</title>
    <url>/2021/01/27/FYP_requirements/</url>
    <content><![CDATA[<h2 id="General-requirements"><a href="#General-requirements" class="headerlink" title="General requirements:"></a>General requirements:</h2><p>Maximum word length (excluding abstract, figure legends, reference list and appendices) <strong>5000 words.</strong></p>
<p><strong>Double spaced</strong></p>
<p><strong>Font 12 point, black</strong></p>
<p><strong>Binding/e-versions</strong> (must be as described below)</p>
<p>Scientific English in appropriate tense</p>
<p>Free of grammar, punctuation and spelling errors</p>
<hr>
<h2 id="Contain-the-following-in-this-order"><a href="#Contain-the-following-in-this-order" class="headerlink" title="Contain the following, in this order;"></a>Contain the following, in this order;</h2><ol>
<li><p>Completed cover template</p>
</li>
<li><p>Abstract in Chinese and in English</p>
</li>
<li><p>Introduction</p>
</li>
<li><p>Methods</p>
</li>
<li><p>Results and Discussion or Results/Discussion as a single section</p>
</li>
<li><p>Acknowledgements (if appropriate)</p>
</li>
<li><p>Reference list</p>
</li>
<li><p>Appendices (only if appropriate) see below</p>
</li>
</ol>
<hr>
<p>Report must conform at least to the SBS style guides with respect to the following:</p>
<p>Article citations within the text</p>
<p>Reference list</p>
<p>Symbols, units, abbreviations</p>
<p>Accurate syntax for organism names</p>
<p>Organism specific rules for genetic loci</p>
<p>International rules for molecular nomenclature</p>
<p>Tables</p>
<p>Figures</p>
<p>Figure legends</p>
<hr>
<h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><ol>
<li>Maximum <strong>5000 words</strong> (total word length should be included on the title page) for the main text i.e. introduction; methods; results; discussion and any text in footnotes. Note that this is a maximum, not an expectation with a margin of variation; concise reports shorter than this may be entirely appropriate.</li>
<li>Word processed; <strong>12 point Times Roman (black); double spaced</strong>. Colour in figures is acceptable, but consider whether colour is really needed to illustrate what you require. Only use colour where it will increase legibility.</li>
<li>The hard copy should be <strong>on A4 paper with a cover sheet consisting of a completed project cover template and should be produced as booklets, preferably with a plastic cover and submitted in person to the department secretary by 11 am on Monday 4 of May (Week 12)</strong>, with a copy of your Ethical Approval, if appropriate. You will be required to sign a sheet to confirm that your report contains no instances of plagiarism, collusion or fabrication</li>
<li>The electronic version (including any appendix) should be submitted on the module’s ICE page before the <strong>11 am on Monday 4 May (Week 12)</strong>, in the form of a Microsoft Word file (<em>.doc or *.docx) using the following file format *</em>SURNAME_FIRST NAME_ID_NUMBER_FR**</li>
<li>t is usual to write about the work performed in the <strong>past tense</strong> and results are usually presented <strong>in the passive form</strong></li>
<li><strong>sub-headings</strong> may help readability.</li>
<li>Define abbreviations at the point in the text where they are first used</li>
</ol>
<hr>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="Title"><a href="#Title" class="headerlink" title="Title:"></a>Title:</h3><ul>
<li><input disabled="" type="checkbox"> Choose a title that is concise but informative</li>
<li><input disabled="" type="checkbox"> Ideally it should describe the work performed and findings but not be dramatic</li>
</ul>
<h3 id="Abstracts"><a href="#Abstracts" class="headerlink" title="Abstracts:"></a>Abstracts:</h3><ul>
<li><input disabled="" type="checkbox"> The abstract should be provided in Chinese and in English</li>
<li><input disabled="" type="checkbox"> Maximum words 250</li>
<li><input disabled="" type="checkbox"> Should not include references</li>
<li><input disabled="" type="checkbox"> Should condense the aims, observations, findings and main conclusions</li>
</ul>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction:"></a>Introduction:</h3><ul>
<li><input disabled="" type="checkbox"> Provide background (e.g. literature, preliminary data) to the field of study</li>
<li><input disabled="" type="checkbox"> State the purpose of the work e.g., the scientific hypothesis</li>
<li><input disabled="" type="checkbox"> Provide the rationale for the approach taken</li>
</ul>
<h3 id="Materials-and-Methods"><a href="#Materials-and-Methods" class="headerlink" title="Materials and Methods:"></a>Materials and Methods:</h3><ul>
<li><input disabled="" type="checkbox"> Should NOT be a protocol book.</li>
<li><input disabled="" type="checkbox"> Should be sufficiently detailed for the work to be repeatable.</li>
<li><input disabled="" type="checkbox"> Should be written in a format appropriate for publication in a journal relevant to the type of work performed.</li>
<li><input disabled="" type="checkbox"> Should refer back to previous Key Skills work.</li>
</ul>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><ul>
<li><input disabled="" type="checkbox"> Present analyses, not raw data, including appropriate and fully explained statistical analyses.</li>
<li><input disabled="" type="checkbox"> Each result should be accompanied by text explaining the rationale for the experiment/observation; a succinct description of the method used to obtain the data; the methods used to analyse/interpret the data and sufficient introductory comments and discussion to link the results into a coherent narrative.</li>
<li><input disabled="" type="checkbox"> Sub-headings may be appropriate.</li>
</ul>
<h3 id="Tables-must"><a href="#Tables-must" class="headerlink" title="Tables must:"></a>Tables must:</h3><ul>
<li><input disabled="" type="checkbox"> Be numbered consecutively according to their appearance in the text (Table 1 etc.).</li>
<li><input disabled="" type="checkbox"> Have short informative titles and legends placed above the Table.</li>
<li><input disabled="" type="checkbox"> All tables must be referred to in the text.</li>
<li><input disabled="" type="checkbox"> Explanatory material may be included as footnotes immediately below the table e.g. definitions of all acronyms and abbreviations.</li>
</ul>
<h3 id="Figures-must"><a href="#Figures-must" class="headerlink" title="Figures must:"></a>Figures must:</h3><ul>
<li> Be numbered consecutively according to their appearance in the text (Figure 1 etc.).</li>
<li>Have an accompanying title and legend below the Figure.</li>
<li>Have a uniform lettering style.</li>
<li>Consider putting extensive sequences and alignments or other data in an appendix</li>
</ul>
<h3 id="Figure-legends-must"><a href="#Figure-legends-must" class="headerlink" title="Figure legends must:"></a>Figure legends must:</h3><ul>
<li><p>Be intelligible to the reader without reference to the text.</p>
</li>
<li><p>Define abbreviations or symbols used in the Figure.</p>
</li>
</ul>
<h3 id="Discussion-should"><a href="#Discussion-should" class="headerlink" title="Discussion should:"></a>Discussion should:</h3><ul>
<li>Critically review the findings.</li>
<li>Indicate whether the findings support the hypothesis.</li>
<li>Provide some speculative debate.</li>
<li>Discuss possible future experiments.</li>
</ul>
<h3 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments:"></a>Acknowledgments:</h3><ul>
<li><p>Should be at the end of the text.</p>
</li>
<li><p>Should acknowledge contributions from others e.g. other lab/School members that have aided the work in any way.</p>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p>Harvard</p>
<h3 id="Symbols-units-abbreviations"><a href="#Symbols-units-abbreviations" class="headerlink" title="Symbols, units, abbreviations:"></a>Symbols, units, abbreviations:</h3><ul>
<li><p>Nonstandard abbreviations must be defined at first occurrence</p>
</li>
<li><p>Species and generic names must be italicized scientific binomens but generic names that are also common names should not be italicized when used alone e.g. Drosophila melanogaster and Drosophila [Drosophila melanogaster is incorrect]. D. melanogaster is acceptable for subsequent uses, provided no ambiguity would result.</p>
</li>
<li><p>Genetic loci must be italicized and must follow the established rules of genetic nomenclature for the organism in question</p>
</li>
<li><p>The International Union of Biochemistry and Molecular Biology rules of nomenclature must be followed for amino acids, peptides, proteins, enzymes, nucleic acids, polynucleotides, carbohydrates, and lipids; these can currently be found at <a class="link"   href="http://www.chem.qmul.ac.uk/iubmb/nomenclature/" >http://www.chem.qmul.ac.uk/iubmb/nomenclature/<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>FYP</category>
      </categories>
      <tags>
        <tag>to-do-list</tag>
      </tags>
  </entry>
  <entry>
    <title>deep learning based prediction of m6a reaeder in RNA modification</title>
    <url>/2021/01/26/Prediction%20of%20m6A%20Reader%20substrate%20sites%20using%20deep%20convolutional%20and%20recurrent%20neural%20network/</url>
    <content><![CDATA[<h1 id="Prediction-of-m6A-Reader-substrate-sites-using-deep-convolutional-and-recurrent-neural-network"><a href="#Prediction-of-m6A-Reader-substrate-sites-using-deep-convolutional-and-recurrent-neural-network" class="headerlink" title="Prediction of m6A Reader substrate sites using deep convolutional and recurrent neural network"></a>Prediction of m6A Reader substrate sites using deep convolutional and recurrent neural network</h1><p>The full transcript could be accessed in <a class="link"   href="https://github.com/yuxuanwu17/m6A_reader/blob/master/Artical/dp_final.docx" >https://github.com/yuxuanwu17/m6A_reader/blob/master/Artical/dp_final.docx<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>N6-methyladenosine (m6A) is the most prevalent post-transcriptional modification in mRNA since it could regulate some significant biological functions with the binding of some m6A reader proteins. Multiple readers exist in the human genome, however, the binding specificity was not clarified due to the limited wet experiments on this topic. Therefore, we devised a deep learning approach which incorporated CNN and RNN frameworks together to predict the epitranscriptome-wide targets of six m6A reader proteins (YTHDF1-3, YTHDC1-2, EIF3A). We also utilized layer-wise relevance calculation to obtain contribution of each input feature. Our model achieved state-of-the-art performance with the average AUROC of 0.942 in EIF3A full transcript, compared with 0.929 in CNN-only framework and 0.817 in Support Vector Machine (SVM) method under same condition. Besides, we identified the optimal sequence length (1001bp) in the m6A reader substrate prediction. The results provide new insight into epitranscriptome target prediction and functional characterization of m6A readers.</p>
<h2 id="Material-and-Methods"><a href="#Material-and-Methods" class="headerlink" title="Material and Methods"></a>Material and Methods</h2><h3 id="Identification-of-m6A-reader-binding-sites"><a href="#Identification-of-m6A-reader-binding-sites" class="headerlink" title="Identification of m6A reader binding sites"></a>Identification of m6A reader binding sites</h3><p>For the benefits of modeling, we need to define the positive and negative samples of m6A reader binding site. As can be seen from Figure 1, there are three significant factors to consider when determining the m6A reader binding sites, which is DRACH motif, known m6A Sites and CLIP labeled Sites. Generally, m6A readers have a tendency to bind known m6A sites and DRACH motif, but these two are not robust enough, without CLIP labeled sites, they could still be considered as negative samples. Therefore, in this experiment, three factors have to be satisfied simultaneously. In addition, the position of gene model would not influence the samples. To minimize the bias in selecting the polyA RNAs, we prepared the full transcript data and mature RNA data. In detail, mature RNA data exclude the sites on the intron region while the full transcript data covered either the exon or intron region.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/m6a_criteria.6x19fgcvhww0.png" alt="m6a_criteria"></p>
<p><strong>Figure 1</strong> Criteria of determining the m6A reader binding sites.</p>
<h3 id="Deep-learning-model-construction"><a href="#Deep-learning-model-construction" class="headerlink" title="Deep learning model construction"></a>Deep learning model construction</h3><p>Previously, we conducted a traditional machine learning about m6A reader by different encoding methods, however, the performance of one-hot method was not ideal, there was still a gap to improve. In addition, one-hot encoding method learned from the convolutional neural network (CNN) is suitable for learning potential motifs in the bioinformatics field, therefore, we opted for deep learning techniques in this research. Furthermore, recurrent neural network (RNN) was incorporated since it could capture the information in sequence, for instance, the potential relationship between each nucleotide. </p>
<p>To build the deep learning model, we used Keras v2.3.0 and R v4.0.2 to conduct the learning part and process the raw data for prediction. For the data preparation part, we used R to extract n nucleotides (bp) of flanking sequences centered on the target adenosine, ranging from 251 to 2001bp to explore a suitable length. The processed sequence data were then inputted to Python3 for encoding, in this case, we chose One-hot encoding method for better model interpretability, for instance, A (1,0,0,0), C (0,1,0,0), G (0,0,1,0), T (0,0,0,1). The overall framework can be seen in Figure 2. Each sequence was then transformed to an n×4 matrix and fed into two combinations of 1D convolution (Conv1D) layer and max-pooling layer. For the first combination, we set 90 kernels with size equaled 5 and applied L2 regulation to prevent overfitting. The rectified linear unit (ReLU) was used as the activation function to provide our necessary non-linearity. The following max-pooling layer was set in size equaled 4 with strides 2 to reduce the dimension of output from the previous layer. The dropout rate was incorporated to 0.25 to further reduce the possibility of overfitting. A second 1D convolution (Conv1D) layer with 100 filters and size equaled 3 to extract the feature of the previous data. Similarly, the ReLU function and L2 regulation were applied. However, the max-pooling size was 10 with 1 stride, under which circumstance could the model achieve higher performance. </p>
<p>The recurrent neural networks long short-term memory (LSTM) layer was used to aggregate the outputs of CNNs for predicting the RBP binding, in this case, the m6A readers’ substrates sites. LSTM processed sequentially of the sequence element, hoping to capture the inter-dependencies between motifs. Moreover, the fully connected layer with 1000 neurons would receive the output from the LSTM layer, and the non-linear activation function n, sigmoid, would calculate the prediction probability in each training class. The overall tuning process was used the loss function, binary cross-entropy to conduct the weight-tuning, optimizing the learning process, additionally, we found that Adam is the most suitable for this task. Finally, the output would be the probability of being m6A reader substrate sites. </p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/Architecture(3).3uagcw8fqhm0.png" alt="Architecture(3)"></p>
<p><strong>Figure 2</strong> The sequence data are encoded by One-hot method and fed into the convolution layer and followed by the pooling layer twice to extract the significant features. The LSTM layer learns the long-term dependencies between sequence data generated by convolution layers. The flatten layer combines the previous kernels into a vector and inputs to the fully connected layer to calculate the probability of being m6A reader substrate site </p>
<h3 id="Training-strategy-and-performance-evaluation"><a href="#Training-strategy-and-performance-evaluation" class="headerlink" title="Training strategy and performance evaluation"></a>Training strategy and performance evaluation</h3><p>We separated each gene data set into three categories, training, testing, validation dataset, the ratio was 8:1:1 respectively. Moreover, to reduce the bias caused by imbalanced data samples, we ensured the same number of positive and negative samples in each category. The early stopping method was included to reduce the unnecessary computation during the learning process and the patience was designed as 10. The loss plot was drawn to document the training procedure and monitor the potential overfitting.  </p>
<p>To validate the model performance, four commonly used performance metrics, including area under the ROC curve (AUC), area under the Precision-Recall curve (PR-AUC), accuracy (ACC) and Mathew’s correlation coefficient (MCC). The formula of ACC and MCC are demonstrated as follows:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/equation.75xnw9zlnaw0.png" alt="equation"></p>
<p>where TP and TN are denoted as True Positive and True Negative, FN and FT are denoted as False Negative and False Positive. To sum up, the higher the performance metrics value, the more accurate the prediction. Additionally, we compared the performance with the previous research using machine learning method, the combination of CNN + RNN frameworks and the CNN framework only to determine the optimal choice.</p>
<p>We also exploited DeepExplain’s epsilon-LRP method (gradient-based) to calculate the contribution in each feature input. With the assistance of this approach, we could rank the nucleotides’ significance in identifying the m6A readers’ substrates. Moreover, we extend the sequence upstream/downstream length from 50bp to 250bp, hoping to cover more information in determining each nucleotide contribution. </p>
<h2 id="Results-and-Discussion"><a href="#Results-and-Discussion" class="headerlink" title="Results and Discussion"></a>Results and Discussion</h2><h3 id="Performance-comparison"><a href="#Performance-comparison" class="headerlink" title="Performance comparison"></a>Performance comparison</h3><p>Classifiers might achieve varied performance on different datasets. To assess the fitness between the 6 reader binding site datasets and the two deep learning classifiers, models were built on full transcripts and their performance were analyzed. Similarly, different size of full transcripts was encoded with One-hot method. As shown in Figure 3(A), models using CNN classifier achieved theoretically good performance with overall AUROC larger than 0.8. It seems that the CNN classifier fit the YTHDF1 binding datasets better than other reader binding sites, with overall AUROC exceeding 0.9 and highest AUROC of 0.93. In addition, CNN model achieves good performance with YTHDF2 binding datasets as well, with highest AUROC of 0.929. It is noticeable that the performance of CNN models with EIF3a varied dramatically along with the size of transcript, from 0.96 to 0.81, which suggests that the performance of CNN classifier is depend on the size of transcripts. Similar trends can be seen in the YTHDC2 datasets, the trained model with different input size achieves different AUROC score, with optimal input transcript size of 251bp (AUROC = 0.89)</p>
<p>Regarding the fitness of CNN+RNN classifier with the six reader datasets, models shows similar performance for YTHDF3, YTHDF2, YTHDF1, YTHDC2 datasets (with AUROC around 0.9). Moreover, the model trained with these four datasets as well as the YTHDC1 datasets (with AUROC around 0.875) seems transcript-size independent since lines are relatively stable. Interestingly, the performance of models trained with EIF3a datasets varied greatly from length to length (AUROC varied from 0.88 to 0.94). The structure variation between YTH family protein and EIF3a might contribute to the difference on model performance.</p>
<p>To assess the feasibility of the two classifiers, namely CNN and RNN, performance of models was interpreted and compared. Figure 3(B) compares the performance of models with different size of EIF3a transcripts. As indicated, the combination of CNN and RNN classifier achieves overall better performance than the CNN classifier for both full transcript and mature transcript. Since the trend of line graph for CNN+RNN model is more stable than the line for CNN model, we can infer that the combination of CNN and RNN makes the model less dependent on the length of transcript used.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/cmbd2.2p61qbr5qg00.png" alt="cmbd2"></p>
<p><strong>Figure 3</strong> (A) Compared the performance of CNN model and CNN+RNN model in the prediction of six m6A reader substrates under different length in full transcripts. (B) Compared the AUROC value in either full transcript or mature transcript when predicting the EIF3A reader substrates. </p>
<h3 id="ROC-and-PR-curve-comparison-between-multiple-sequence-length"><a href="#ROC-and-PR-curve-comparison-between-multiple-sequence-length" class="headerlink" title="ROC and PR-curve comparison between multiple sequence length"></a>ROC and PR-curve comparison between multiple sequence length</h3><p>the Receiver Operating Characteristic (ROC) curve and Precision-Recall curve for EIF3A datasets under the combination of CNN and RNN were visualized in Figure 4. As can be seen from the figure that, although the performance was different under different sequence size, the overall trend was stable and devoid of fluctuation. In addition, the overall performance in full transcripts could outperform the mature transcripts, probably the reason that full transcript data could cover either the exon or intron region. </p>
<p>Here, we mainly opted EIF3A dataset for easy demonstration in this paper. More details of the other five datasets could be achieved in the supplementary file.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/rocs_update.56hoogl00z40.png" alt="rocs_update"></p>
<p><strong>Figure 4</strong> (A) Compared the ROC curve and the regarding AUROC of mature and full transcript of EIF3A under CNN+RNN model in various sequence lengths. (B) Compared the PR curve and the regarding PRAUC of mature and full transcript of EIF3A under CNN+RNN model in various sequence lengths. </p>
<h3 id="Quantify-each-input-nucleotide-contribution-by-the-layer-wise-relevance-calculation"><a href="#Quantify-each-input-nucleotide-contribution-by-the-layer-wise-relevance-calculation" class="headerlink" title="Quantify each input nucleotide contribution by the layer-wise relevance calculation"></a>Quantify each input nucleotide contribution by the layer-wise relevance calculation</h3><p>Each input feature was calculated to obtain its contribution to the results by DeepExplain’s epsilon-LRP method. The feature importance plots were based on the EIF3a binding site datasets (Figure 4). The higher score that the position gets, the larger probability that the center nucleotide is an EIF3a reader binding site if this nucleotide present at that position. As shown in the graph, positions located around the predicted m6A sites got significantly higher scores than other positions, which means those positions are more important in determining whether the center nucleotide is m6A reader substrate site or not. Additionally, the prediction of modification site would benefit from taking sequence more than 50bp upstream or downstream the predicted site since they include positions with high importance score</p>
<p>Specifically, a site would be less likely to be m6A modification site if the adenosine represents in 100bp downstream since the majority of position within this sequence got importance scores smaller than 0. In comparison, the presence of cytosine in 50 upstream/downstream the predicted site tends to boost the chance of the center nucleotide being modified. No specific patterns were found for guanine and thymine as the importance plot present a shape like the sine function. </p>
<p>The results showed that if those positions 34bp, 59bp, 11bp, 58bp, 27bp, 49bp, 72bp upstream, 21bp, 27bp, 24bp, 25bp, 116bp downstream the modification site is cytosine, the site would more likely to be the EIF3a reader binding site. In addition, the probability of the modification site being EIF3a substrate site would decrease if guanosine was found on positions 21bp, 71bp, 33bp, 32bp, 31bp, 22bp upstream the center site or uridine was found on positions 54bp upstream or 53bp downstream the center site. The screened top 20 nucleotides that will decrease the change of the site being EIF3a modification site include: adenosines on positions 39bp, 27bp, 47bp, 61bp, 10bp, 12bp, 23bp, 170bp, 157bp, 51bp, 14bp, 226bp, 52bp upstream the center nucleotide, cytosine on positions 93bp upstream and 185bp downstream the center nucleotide, guanosine on positions 92, 97bp downstream the center site as well as uridines on positions 56bp, 63bp upstream the modification site.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/contribution_plot.57p7fsjv0y80.png" alt="contribution_plot"></p>
<p><strong>Figure 5</strong> Feature importance scores in EIF3A full transcript prediction. We both extracted upstream/downstream 50bp and upstream/downstream 250 bp of the sequence to rank the contribution of each nucleotide in determining the binding site. In each position, the higher score it gains, the higher contribution towards the binding sites.</p>
<h1 id="How-to-use-this-file"><a href="#How-to-use-this-file" class="headerlink" title="How to use this file?"></a>How to use this file?</h1><h2 id="Prerequisite-packages"><a href="#Prerequisite-packages" class="headerlink" title="Prerequisite packages"></a>Prerequisite packages</h2><p>keras version 2.3.0, numpy, pandas, argparse</p>
<h2 id="Run-‘python3-main-py-h’-in-command-line-for-help"><a href="#Run-‘python3-main-py-h’-in-command-line-for-help" class="headerlink" title="Run ‘python3 main.py -h’ in command line for help"></a>Run ‘python3 main.py -h’ in command line for help</h2><h3 id="Select-the-input-genes"><a href="#Select-the-input-genes" class="headerlink" title="Select the input genes"></a>Select the input genes</h3><p>You could select 6 genes, including YTHDC1-2, YTHDF1-3, EIF3A</p>
<h3 id="Select-the-input-length-of-the-sequence"><a href="#Select-the-input-length-of-the-sequence" class="headerlink" title="Select the input length of the sequence"></a>Select the input length of the sequence</h3><p>You could choose 251, 501, 1001, 2001bp input length to compare the prediction performance.<br>Due to the size limitation, i only upload some some small sized sequence as examples.<br>Email me, if you want to apply all the data</p>
<h3 id="Select-the-condition-of-the-sequence-either-full-transcript-full-or-mature-RNA-exon"><a href="#Select-the-condition-of-the-sequence-either-full-transcript-full-or-mature-RNA-exon" class="headerlink" title="Select the condition of the sequence, either full transcript (full) or mature RNA (exon)"></a>Select the condition of the sequence, either full transcript (full) or mature RNA (exon)</h3><p>To minimize the bias in selecting the polyA RNAs, we prepared the full transcript data and mature RNA data. In detail, mature RNA data exclude the sites on the intron region while the full transcript data covered either the exon or intron region.</p>
<h3 id="Choose-the-CNN-or-CNN-RNN-model"><a href="#Choose-the-CNN-or-CNN-RNN-model" class="headerlink" title="Choose the CNN or CNN+RNN model"></a>Choose the CNN or CNN+RNN model</h3><p>To compare the performance under different framework</p>
]]></content>
      <categories>
        <category>publications</category>
      </categories>
      <tags>
        <tag>conference</tag>
        <tag>deep learning</tag>
        <tag>RNA modification</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Meta analysis for knockdown of METTL3 or METTL14 affecting N6-methyladenosine methylation level</title>
    <url>/2021/01/27/meta-analysis/</url>
    <content><![CDATA[<h1 id="Meta-analysis-for-knockdown-of-METTL3-or-METTL14-affecting-N6-methyladenosine-methylation-level"><a href="#Meta-analysis-for-knockdown-of-METTL3-or-METTL14-affecting-N6-methyladenosine-methylation-level" class="headerlink" title="Meta-analysis for knockdown of METTL3 or METTL14 affecting N6-methyladenosine methylation level"></a>Meta-analysis for knockdown of METTL3 or METTL14 affecting N6-methyladenosine methylation level</h1><p>The full transcript could be accessed from <a class="link"   href="https://github.com/yuxuanwu17/meta_analysis/blob/master/Full_transcript/Meta_Analysis.docx" >https://github.com/yuxuanwu17/meta_analysis/blob/master/Full_transcript/Meta_Analysis.docx<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>N6-methyladenosine (m6A) is the most prevalent internal chemical modification present in multiple eukaryotic mRNAs, which is dynamically installed by methyltransferases (“writers”) and removed by demethylases (“erasers”). METTL3 and METTL14 are two typical m6A writers and several studies have found that knockdown or depletion of METTL3 and METTL14 genes influence the methylation level. A meta-analysis study was performed to assess the strength and quality of current evidence regarding to it and assess the how the knockdown of METTL3 or METTL14 affect the mRNA methylation level. Data was collected and classified into groups. Metafor, a R package was used to generate the Random-effects meta-analysis model and calculate the risk ratios (RRs) and 95% CIs. Since the heterogeneity of the overall data is extremely high (I2 &gt; 99%), specific samples were excluded to minimize the downgrade the heterogeneity to acceptable level. Three and two published trails for METTL3 and METTLE14 samples, respectively, were eligible for review and analysis due to the acceptable low heterogeneity of their combination (METTL3 (Q = 12.85, I2 = 37.8%) and METTL14 (Q = 45.48, I2 = 82.9%) ). The positive relationship between knockdown of METTL3/METTL14 and methylation level was successfully verified and the difference among cell lines and gene types was identified.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h2><p>The full script was in final file. But due to the size limitation, I could not upload the data set, please email me if you need the data set</p>
<h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><h3 id="PRISMA-flowchart"><a href="#PRISMA-flowchart" class="headerlink" title="PRISMA flowchart"></a>PRISMA flowchart</h3><p>For this systematic review and meta-analysis, our discovery data cohort came from various databases including Cochrane library, EMBASE, and PubMed/MEDLINE from inception to Feb 20, 2020. Seventeen datasets of epitranscriptome-wide homo sapiens m6A sites under different cell lines screened by six different high-resolution profiling approaches were collected. Missing and ambiguous data were further ensured and validated by the original researchers (Figure 1). </p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/prisma.6fmfuc39y5s0.png" alt="prisma"></p>
<p>Figure 1: PRISMA flowchart for inclusion or exclusion criteria in this meta-analysis We firstly retrieved our data (n=1555) from both GEO and GSA database. In this analysis, the primary focus was on Homo sapiens, we then exclude other unrelated species, like Mus musculus and Rattus norvegicus, our sample then restricted to 242. When explored in the full-text articles, we did not consider genes other than METTL3 or METTL14, therefore, genes like FTO, ALKBH5 and WTAP were excluded, and sample number was retained to 28. Owing to the fact that some experiments shared the same control group, we then eliminated the duplication and 17 samples remained. The remained samples were used to conduct the whole meta-analysis. </p>
<hr>
<h3 id="Forest-plot-of-the-basic-model"><a href="#Forest-plot-of-the-basic-model" class="headerlink" title="Forest plot of the basic model"></a>Forest plot of the basic model</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG26.40fi7vuvz540.jpeg" alt="WechatIMG26"></p>
<p>Figure 2. Forest plot of the basic model. This is a Random Effect model which accommodates differences in study sample. Q statistic is based on the chi-square distribution, most commonly testing heterogeneity. I2 index is the total variability in a set of effect sizes due to true heterogeneity. Log Risk Ratio is a measurement of effect size. </p>
<hr>
<h3 id="Baujat-plot-in-the-identification-of-heterogenity"><a href="#Baujat-plot-in-the-identification-of-heterogenity" class="headerlink" title="Baujat plot in the identification of heterogenity"></a>Baujat plot in the identification of heterogenity</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG30.4e7gw6et4o00.png" alt="WechatIMG30"></p>
<p>Figure 3. The Baujat plot to identify studies contributing to heterogeneity. The study ID numbers represent eight studies, respectively.</p>
<p>As shown in Figure 3, Baujat plot generated from the METTL3 study datasets identifies the influence on the overall result and the squared Pearson Residual of each study. As the 8th study is located in the top right quadrant, it has both a greater impact on the whole result and contributes most to heterogeneity; while other studies are near to the origin. Therefore, we keep all studies but the one far away on the top right. Similarly, we excluded the 4th study as it lies far top right in the Baujat plot of METTL14</p>
<hr>
<h3 id="Forest-plot-of-moderator-analysis"><a href="#Forest-plot-of-moderator-analysis" class="headerlink" title="Forest plot of moderator analysis"></a>Forest plot of moderator analysis</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG31.5re8upv5y1w0.jpeg" alt="WechatIMG31"></p>
<p>Figure 4. Forest plot of moderator analysis.</p>
<p>As shown in Figure 4, we can still conclude that there is a highly positive relationship (Log RR 5.66, 95% CI 5.31-6.02; p-value = 0.12) between the m6A methylation level and the knockdown of the METTL3 gene, although the p-value increases from &lt;0.01 to 0.12 meaning less confidence. The Log RR is adjusted from 6.93 to 5.66. The CI narrows down greatly and CI of each subgroup overlaps more than the basic model, reflecting less between-study variability. As for the METTL14 model, the positive relationship (Log RR 5.39, 95% CI 4.97-5.84; p-value &lt; 0.01) between the m6A methylation level and the absence of METTL14 gene shows similar Log RR with that of METTL3 meta-regression model. Importantly, we found no large heterogeneity or inconsistency of METTL 3 (Q(df = 8) = 12.85, I2 = 37.8%, tau2 = 0.0035) and METTL14 (Q(df = 9) = 45.48, I2= 82.9%, tau2 = 0.0140) among the studies. </p>
<hr>
<h3 id="Funnel-plot-to-investigate-the-possible-publication-bias"><a href="#Funnel-plot-to-investigate-the-possible-publication-bias" class="headerlink" title="Funnel plot to investigate the possible publication bias"></a>Funnel plot to investigate the possible publication bias</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/WechatIMG32.7kzbbb47n5o0.png" alt="WechatIMG32"></p>
<p>Figure 5. The Funnel plot.</p>
<p>Publication bias, occurring in the selective publication of studies based on magnitude and direction of findings, poses a particular threat to the validity of meta-analysis. Here, we investigate possible publication bias by visual inspection of Funnel plots. If the effect size versus standard is broadly symmetrical, the publication bias is absent. As shown in Figure 5., the Funnel plot on the left shows the points of nine studies of METTL3 knockdown evenly fall on both sides of the summary effect size and the standard error is approximately 0.075 on average. However, the vertical line representing the summary of all the studies of METTL3 knockdown lies on the right of zero, around 1.73, suggests that there is a positive effect of publication bias on the summary effect size. As for the Funnel plot on the right, points of ten studies of METTL14 knockdown evenly fall on both sides of the summary effect size. The standard error is approximately 0.050 on average and the vertical line lies on the origin meaning no publication bias on the summary effect size.   </p>
]]></content>
      <categories>
        <category>publications</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>RNA modification</tag>
        <tag>meta-analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB based neural network for image classification</title>
    <url>/2021/01/25/matlab_cw2_readme/</url>
    <content><![CDATA[<h2 id="Project-overview"><a href="#Project-overview" class="headerlink" title="Project overview :"></a>Project overview :</h2><p>This task includes five algorithms to classify the characters segmented from the license plates of automobiles using MATLAB</p>
<ul>
<li>MLP (multi-layer perceptron)</li>
<li>CNN (convolutional neural network)</li>
<li>LVQ (learning vector quantization)</li>
<li>RBF1 with k-means clustering</li>
<li>RBF2 with SOM (self-organizing map)</li>
</ul>
<hr>
<h2 id="Files-running-order"><a href="#Files-running-order" class="headerlink" title="Files running order"></a>Files running order</h2><ol>
<li>run the figure_preprocessing.m and create a new file folder ass2_processede_data</li>
<li>run data_partition.m split the dataset in 8:2 version and returned the X_train, X_test, y_train, y_test and save as train_test_data.mat</li>
<li>run ass2_CNN.m (this script did not use the processed data, but read the figure directly from the original file)</li>
<li>run ass2_mlp.m </li>
<li>run ass2_lvq.m</li>
<li>run ass2_rbf_kmean.m</li>
<li>run ass2_rbf_som.m</li>
<li>run ass2_confusion_matrix_summary.m</li>
</ol>
<hr>
<h2 id="Components-Scripts-inside-the-project"><a href="#Components-Scripts-inside-the-project" class="headerlink" title="Components/Scripts inside the project"></a>Components/Scripts inside the project</h2><h2 id="The-script-part"><a href="#The-script-part" class="headerlink" title="The script part"></a>The script part</h2><h3 id="figure-preprocessing-m"><a href="#figure-preprocessing-m" class="headerlink" title="figure_preprocessing.m"></a>figure_preprocessing.m</h3><p>This is the script to extract the ass2data and rewrite to a new file folder ass2_processed_data. </p>
<pre><code>- read both jpeg and jpg files in all folders ass2_data
- rewrite into another folders ass2_processed_data with uniform style (jpeg) and uniform naming styles (label+number) e.g. (A1,B10,C99)</code></pre>
<h3 id="data-partition-m"><a href="#data-partition-m" class="headerlink" title="data_partition.m"></a>data_partition.m</h3><p>This is the script splitted the processed data into training and testing dataset in 8:2 ratio. It adjusted the size and columns or rows for fitting the designed model’s network.</p>
<pre><code>- read images from the processed folder ass2_processed_data. 
- split the dataset into 8:2
- save the splitted samples and parameters as train_test_data.mat</code></pre>
<h3 id="ass2-CNN-m"><a href="#ass2-CNN-m" class="headerlink" title="ass2_CNN.m"></a>ass2_CNN.m</h3><p>This is the script to conduct the CNN.</p>
<pre><code>- use imageDataset to store and train the model
- use splitEachLabel to split the training and testing datasets
- do not use the train_test_data as the input since CNN has standard samples in Matlab documents
- imageInputLayer(48,24,1)
- Layer 1:
    - kernel size: 3; filters number: 8; padding: same
    - batchNormalizationLayer
    - Relu layer
    - Maxpooling with a pooling size equals [2 2] and Stride equals [2 2]
- Layer 2:
    - kernel size: 3; filters number: 16; padding: same    
    - batchNormalizationLayer
    - Relu layer
    - Maxpooling with a pooling size equals [2 2] and Stride equals [2 2]
- Layer 3:
    - kernel size: 3; filters number: 32; padding: same    
    - batchNormalizationLayer
    - Relu layer
    - Maxpooling with a pooling size equals [2 2] and Stride equals [2 2]
- Layer 4:
    - fully connected layer with neurons equals 24
    - softmaxLayer
- calculate the training and testing accuracy
- return and save the confusion matrix as C_CNN.mat</code></pre>
<h3 id="ass2-mlp-m"><a href="#ass2-mlp-m" class="headerlink" title="ass2_mlp.m"></a>ass2_mlp.m</h3><p>This is the script to conduct the MLP</p>
<pre><code>- load the dataset obtained previously train_test_data.mat
- lr_rate = 0.2;
- momentum = 0.4;
- epochs = 1000;
- 3 layers with 50, 100, 100 
- Hyperbolic tangent sigmoid transfer function (tansig)
- gradient descent to update the weights
- calculate the training and testing accuracy
- return and save the confusion matrix as C_mlp.mat</code></pre>
<h3 id="ass2-lvq-m"><a href="#ass2-lvq-m" class="headerlink" title="ass2_lvq.m"></a>ass2_lvq.m</h3><pre><code>- load the dataset obtained previously train_test_data.mat
- set the cluster into 360 due to its performance, you could also set cluster into 24 for computational convenience
- lvqnet(24) could achieve ideal performance, but the performance could not be comparable with the cluster set into 360
- save the lvqnet(360) as lvq_360.mat, uncomment the line if you wish to see the performance
- calculate the training and testing accuracy
- return and save the confusion matrix C_lvq.mat</code></pre>
<h3 id="ass2-rbf-kmean-m"><a href="#ass2-rbf-kmean-m" class="headerlink" title="ass2_rbf_kmean.m"></a>ass2_rbf_kmean.m</h3><pre><code>- load the dataset obtained previously train_test_data.mat
- use kmeans to return the center of each cluster, the number of cluster is determined as 360
- use assembled function RBF_training_kmeans to calculate the W (weights), sigma (the variance of the RBF kernel) and the coordinate of each cluster's center 
- use the previous returned parameter to return the training prediction by assembled function: RBF_predict
- calculate the training and testing accuracy
- return and save the confusion matrix C_rbf_kmeans.mat</code></pre>
<h3 id="ass2-rbf-som-m"><a href="#ass2-rbf-som-m" class="headerlink" title="ass2_rbf_som.m"></a>ass2_rbf_som.m</h3><pre><code>- load the dataset obtained previously train_test_data.mat
- define the SOM network, the dimension is set to 18*20 for convenience, keep it uniform to the previous number of clusters: 360
- coverSteps = 10 %% Number of training steps for initial covering of the input space (default = 100)
- initNeighbor = 80 %% Initial neighborhood size (default = 3)
- topologyFcn = 'hextop' %% Layer topology function (default = 'hextop')
- distanceFcn = 'dist' %%  Neuron distance function (default = 'linkdist')
- once finished the training of SOM network, use assembled function RBF_training_som.m to calculate the weights W, sigma (the variance of the RBF kernel) and center of SOM clusters, which is the IW{1,1}.
- use the previous returned parameter to return the training prediction by assembled function: RBF_predict
- return and save the confusion matrix C_rbf_som.mat</code></pre>
<h3 id="ass2-confusion-matrix-summary-m"><a href="#ass2-confusion-matrix-summary-m" class="headerlink" title="ass2_confusion_matrix_summary.m"></a>ass2_confusion_matrix_summary.m</h3><pre><code>- load the previous saved mat file
- reshow the confusion matrix
- compare the performance returned by different neural networks
- compare the accuracy returned by different neural networks  </code></pre>
<hr>
<h2 id="The-function-part-assembled-function-for-reproduction"><a href="#The-function-part-assembled-function-for-reproduction" class="headerlink" title="The function part (assembled function for reproduction)"></a>The function part (assembled function for reproduction)</h2><h3 id="getimdata-m"><a href="#getimdata-m" class="headerlink" title="getimdata.m"></a>getimdata.m</h3><pre><code>- Input: the file path, in this case the processed file with renamed figure and same format jpeg (ass2_processed_data) 
- Output: Transormed the numerical data into the one-hot encoding vector format (one-hot format)</code></pre>
<h3 id="getimdata2-m"><a href="#getimdata2-m" class="headerlink" title="getimdata2.m"></a>getimdata2.m</h3><pre><code>- Input: the file path, in this case the processed file with renamed figure and same format jpeg (ass2_processed_data) 
    - normalize the data into range 0-1
    - assign the numerical labels to each character
    - combine all the processed plot into a dataset 2400 * 1152
    - 2400 stands for the number of samples; 1152 stands for the features in one figure
- Output: The normalized figure data (0-1), with data and corresponding labels. Labels are in numerical format (1,2,3...24) (without one-hot)
- This function method is selected in the whole project</code></pre>
<h3 id="RBF-training-kmeans-m"><a href="#RBF-training-kmeans-m" class="headerlink" title="RBF_training_kmeans.m"></a>RBF_training_kmeans.m</h3><pre><code>- Input: data, labels, number of clusters to be determined by kmeans
- sigma is determined by the mean Euclidean distance between two clusters
- k weight matrix is calculated by the radbas(distance of samples between clusters' centers/2*sigma^2)
- W weights is calculated by the pesudo inverse of (k'*k)*k'*labels</code></pre>
<h3 id="RBF-training-som-m"><a href="#RBF-training-som-m" class="headerlink" title="RBF_training_som.m"></a>RBF_training_som.m</h3><pre><code>- Input: data, labels and net
- net is pre-trained by som networks
- the cluster center is returned by the first layer of som network, which is denoted by net.IW{1,1}
- sigma is determined by the mean Euclidean distance between two clusters
- k weight matrix is calculated by the radbas(distance of samples between clusters' centers/2*sigma^2)
- W weights is calculated by the pesudo inverse of (k'*k)*k'*labels</code></pre>
<h3 id="RBF-predict-m"><a href="#RBF-predict-m" class="headerlink" title="RBF_predict.m"></a>RBF_predict.m</h3><pre><code>- Input: data, W, sigma, C trained previously from either RBF_training_kmeans or RBF_training_som
- Output: vectors of the final prediction
- data could be either training data or testing data</code></pre>
<h3 id="getcls-m"><a href="#getcls-m" class="headerlink" title="getcls.m"></a>getcls.m</h3><pre><code>- Input: vecs - matrix of column vectors (returned from the RBF_predict.m)
- Output: cls - matrix where the largest element in each column in vectors is set to 1 and the rest to 0   Ex: vecs = [2 4; 1 5], gives c = [1 0; 0 1]
- This function is used to return the most likely label in multi-variable classification, especially after the one-hot encoding method</code></pre>
<h3 id="rate-m"><a href="#rate-m" class="headerlink" title="rate.m"></a>rate.m</h3><pre><code>- Input: matrix of class vectors
- Computes the percentage of equal columns in t1 and t2, can be used to compute the rate of correct classified patterns in a pattern recognition application
- Output: number of matching vectors</code></pre>
<hr>
<h2 id="Saved-parameters"><a href="#Saved-parameters" class="headerlink" title="Saved parameters"></a>Saved parameters</h2><h3 id="train-test-data-mat"><a href="#train-test-data-mat" class="headerlink" title="train_test_data.mat"></a>train_test_data.mat</h3><pre><code>- the value obtained from the data_partition.m
- X_train, X_test, y_train, y_value</code></pre>
<h3 id="som-net-data-mat"><a href="#som-net-data-mat" class="headerlink" title="som_net_data.mat"></a>som_net_data.mat</h3><pre><code>- the network trained by som (it takes long time, for computation convenience)</code></pre>
<h3 id="lvq-360-mat"><a href="#lvq-360-mat" class="headerlink" title="lvq_360.mat"></a>lvq_360.mat</h3><pre><code>- lvq with cluster set to 360</code></pre>
<h3 id="lvq-24-mat"><a href="#lvq-24-mat" class="headerlink" title="lvq_24.mat"></a>lvq_24.mat</h3><pre><code>- lvq with cluster set to 24 </code></pre>
<h3 id="kmeans-plot-mat"><a href="#kmeans-plot-mat" class="headerlink" title="kmeans_plot.mat"></a>kmeans_plot.mat</h3><pre><code>- calculate silhouette value to find the suitable cluster k, but the results are not satisfied
- return the plot of each epoch</code></pre>
<h3 id="Confusion-matrix-summary"><a href="#Confusion-matrix-summary" class="headerlink" title="Confusion_matrix summary:"></a>Confusion_matrix summary:</h3><pre><code>- CNN_confusion.mat
- C_rbf_som.mat
- C_rbf_kmeans.mat
- C_mlp.mat
- C_lvq.mat
- C_CNN.mat</code></pre>
<hr>
<p>Assessment2</p>
<p>You could download the whole file with script and report in 1716309_Yuxuan_Wu.zip from my own repository</p>
<p><a class="link" href="https://github.com/yuxuanwu17/INT301_Assessment2">https://github.com/yuxuanwu17/INT301_Assessment2<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Neural networks</tag>
        <tag>image classification</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab相关的知识</title>
    <url>/2021/01/28/matlab_links/</url>
    <content><![CDATA[<p><strong>matlab神经网络newff函数的用法</strong></p>
<p><a class="link"   href="https://blog.csdn.net/xiaotao_1/article/details/79078729" >https://blog.csdn.net/xiaotao_1/article/details/79078729<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>分割数据集</strong></p>
<p><a class="link"   href="https://blog.csdn.net/shengchaohua163/article/details/79876007" >https://blog.csdn.net/shengchaohua163/article/details/79876007<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.itdaan.com/blog/2018/04/10/7c17309d448c3f414edafe886a257d7b.html" >https://www.itdaan.com/blog/2018/04/10/7c17309d448c3f414edafe886a257d7b.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>理解train的函数的意义</strong></p>
<p><a class="link"   href="https://www.mathworks.com/matlabcentral/answers/337308-net-tr-y-e-train-net-p-t-how-y-and-e-get-their-dimensions-with-this-syntax" >https://www.mathworks.com/matlabcentral/answers/337308-net-tr-y-e-train-net-p-t-how-y-and-e-get-their-dimensions-with-this-syntax<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>newff</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43857827/article/details/102924575" >https://blog.csdn.net/weixin_43857827/article/details/102924575<i class="fas fa-external-link-alt"></i></a></p>
<p>net = newff(minmax(p),[隐层的神经元的个数，输出层的神经元的个数],{隐层神经元的传输函数，输出层的传输函数｝,’反向传播的训练函数’)</p>
<p><strong>混淆矩阵</strong></p>
<p><a class="link"   href="https://ww2.mathworks.cn/help/stats/confusionmat.html" >https://ww2.mathworks.cn/help/stats/confusionmat.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>如何优化MLP</strong></p>
<p><a class="link"   href="https://ww2.mathworks.cn/matlabcentral/answers/137-how-do-i-improve-my-neural-network-performance" >https://ww2.mathworks.cn/matlabcentral/answers/137-how-do-i-improve-my-neural-network-performance<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>XOR problem</strong> </p>
<p>[<a class="link"   href="https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The%20XOr%2C%20or%20%E2%80%9Cexclusive%20or,value%20if%20they%20are%20equal]" >https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The%20XOr%2C%20or%20%E2%80%9Cexclusive%20or,value%20if%20they%20are%20equal]<i class="fas fa-external-link-alt"></i></a>(<a class="link"   href="https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The" >https://medium.com/@jayeshbahire/the-xor-problem-in-neural-networks-50006411840b#:~:text=The<i class="fas fa-external-link-alt"></i></a> XOr%2C or “exclusive or,value if they are equal)</p>
<p><strong>Rbf 问题算法</strong></p>
<p><a class="link"   href="https://blog.csdn.net/zouxy09/article/details/13297881" >https://blog.csdn.net/zouxy09/article/details/13297881<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Rbf 神经网络和bp神经网络的区别和优缺点</strong></p>
<p><a class="link"   href="https://blog.csdn.net/kykankankan/article/details/79749307?utm_medium=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase" >https://blog.csdn.net/kykankankan/article/details/79749307?utm_medium=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase<i class="fas fa-external-link-alt"></i></a></p>
<p>遍历读取文件</p>
<p><a class="link"   href="https://blog.csdn.net/FX677588/article/details/53126961" >https://blog.csdn.net/FX677588/article/details/53126961<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Matlab CNN</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_41923961/article/details/80382502" >https://blog.csdn.net/weixin_41923961/article/details/80382502<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>for语句循环系列处理一部分文件，并且改写</strong></p>
<p><a class="link"   href="https://blog.csdn.net/zhangziyou719/article/details/54647331?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" >https://blog.csdn.net/zhangziyou719/article/details/54647331?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>kmeans</strong></p>
<p><a class="link"   href="https://www.mathworks.com/help/stats/k-means-clustering.html" >https://www.mathworks.com/help/stats/k-means-clustering.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>matlab函数</strong></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/19802747" >https://zhuanlan.zhihu.com/p/19802747<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>径向基函数的sigma选择（当然也可以用mean）</strong></p>
<p><a class="link"   href="https://www.cnblogs.com/yymn/p/4537992.html" >https://www.cnblogs.com/yymn/p/4537992.html<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>SOM</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_30300225/article/details/95509788?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control" >https://blog.csdn.net/weixin_30300225/article/details/95509788?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>python 相关的知识和笔记链接</title>
    <url>/2021/01/28/python-%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86%E5%92%8C%E7%AC%94%E8%AE%B0%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>Python learning: 入门大全</p>
<p><a class="link"   href="https://apachecn.gitee.io/ailearning/#/" >https://apachecn.gitee.io/ailearning/#/<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="接受不定参数"><a href="#接受不定参数" class="headerlink" title="接受不定参数"></a>接受不定参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, *args</span>):</span></span><br><span class="line">    total = x</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        total += arg</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>这里，<code>*args</code> 表示参数数目不定，可以看成一个元组，把第一个参数后面的参数当作元组中的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">----</span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, **kwargs</span>):</span></span><br><span class="line">    total = x</span><br><span class="line">    <span class="keyword">for</span> arg, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;adding &quot;</span>, arg</span><br><span class="line">        total += value</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>这里， <code>**kwargs</code> 表示参数数目不定，相当于一个字典，关键词和值对应于键值对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(<span class="number">10</span>, y=<span class="number">11</span>, z=<span class="number">12</span>, w=<span class="number">13</span>)</span><br><span class="line">----</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adding  y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adding  z</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adding  w</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">46</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span> args, kwargs</span><br><span class="line"></span><br><span class="line">foo(<span class="number">2</span>, <span class="number">3</span>, x=<span class="string">&#x27;bar&#x27;</span>, z=<span class="number">10</span>)</span><br><span class="line">-----</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>tf 里面的training=True</p>
<p>Some neural network layers behave differently during training and inference, for example Dropout and BatchNormalization layers. For example</p>
<ul>
<li>During training, dropout will randomly drop out units and correspondingly scale up activations of the remaining units.</li>
<li>During inference, it does nothing (since you usually don’t want the randomness of dropping out units here).</li>
</ul>
<p>The training argument lets the layer know which of the two “paths” it should take. If you set this incorrectly, your network might not behave as expected.</p>
<p>pycharm的奇技淫巧</p>
<p><a class="link"   href="https://www.zhihu.com/question/37787004" >https://www.zhihu.com/question/37787004<i class="fas fa-external-link-alt"></i></a></p>
<p>为什么要做归一化处理</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/TF6d9NRz0lDFQeC_K3CVaw" >https://mp.weixin.qq.com/s/TF6d9NRz0lDFQeC_K3CVaw<i class="fas fa-external-link-alt"></i></a></p>
<p>npy 格式的好处</p>
<p><a class="link"   href="https://towardsdatascience.com/what-is-npy-files-and-why-you-should-use-them-603373c78883" >https://towardsdatascience.com/what-is-npy-files-and-why-you-should-use-them-603373c78883<i class="fas fa-external-link-alt"></i></a></p>
<ol>
<li>不用reshape了，什么格式保存，什么格式读取</li>
<li>storage比较小</li>
<li>Read的速度比较快</li>
</ol>
<p>pickle data</p>
<p><a class="link"   href="https://www.geeksforgeeks.org/understanding-python-pickling-example/" >https://www.geeksforgeeks.org/understanding-python-pickling-example/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.zhihu.com/search?type=content&amp;q=Pickling" >https://www.zhihu.com/search?type=content&amp;q=Pickling<i class="fas fa-external-link-alt"></i></a></p>
<p>答：Pickle模块读入任何Python对象，将它们转换成字符串，然后使用dump函数将其转储到一个文件中——这个过程叫做pickling。反之从存储的字符串文件中提取原始Python对象的过程，叫做unpickling。    allow_pickle = True文件传输的过程中可能会有压缩，true则表示压缩后文件不变</p>
<p>Python的面试</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/41962762" >https://zhuanlan.zhihu.com/p/41962762<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>1.这两个参数是什么意思:*args,\</strong>kwargs？我们为什么要使用它们?**</p>
<p>答:如果我们不确定往一个函数中传入多少参数，或者我们希望以元组(tuple)或者列表(list)的形式传参数的时候，我们可以使用*args(单星号).如果我们不知道往函数中传递多少个关键词参数或者想传入字典的值作为关键词参数的时候我们可以使用**kwargs(双星号),args,kwargs两个标识符是约定俗成的用法。</p>
<p>lists are mutable while tuple are not </p>
<p><strong>这个就非常的好，解释kargs and args</strong></p>
<p><a class="link"   href="https://realpython.com/python-kwargs-and-args/" >https://realpython.com/python-kwargs-and-args/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.jianshu.com/p/592cf526b1e6" >https://www.jianshu.com/p/592cf526b1e6<i class="fas fa-external-link-alt"></i></a></p>
<p>Python 的iteration 这个模块的用法</p>
<p><a class="link"   href="https://www.zhihu.com/search?type=content&amp;q=itertools" >https://www.zhihu.com/search?type=content&amp;q=itertools<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Itertools.zip_longest()</strong></p>
<p>This iterator falls under the category of <a class="link"   href="https://www.geeksforgeeks.org/python-itertools/#terminate" >Terminating Iterators<i class="fas fa-external-link-alt"></i></a>. It prints the values of iterables alternatively in sequence. If one of the iterables is printed fully, the remaining values are filled by the values assigned to fillvalue parameter.</p>
<p>Python新手常见的坑</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/81012511" >https://zhuanlan.zhihu.com/p/81012511<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Tf.function 装饰器的玩意</strong> </p>
<table>
<thead>
<tr>
<th>func</th>
<th>the function to be compiled. If func is None, <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/function" >tf.function<i class="fas fa-external-link-alt"></i></a> returns a decorator that can be invoked with a single argument - func. In other words, tf.function(input_signature=…)(func) is equivalent to <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/function" >tf.function(func, input_signature=…)<i class="fas fa-external-link-alt"></i></a>. The former can be used as decorator.</th>
</tr>
</thead>
<tbody><tr>
<td>input_signature</td>
<td>A possibly nested sequence of <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/TensorSpec" >tf.TensorSpec<i class="fas fa-external-link-alt"></i></a> objects specifying the shapes and dtypes of the Tensors that will be supplied to this function. If None, a separate function is instantiated for each inferred input signature. If input_signature is specified, every input to func must be a Tensor, and func cannot accept **kwargs.</td>
</tr>
</tbody></table>
<p><strong>tf graph：</strong></p>
<p>Graphs are data structures that contain a set of <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/Operation" >tf.Operation<i class="fas fa-external-link-alt"></i></a> objects, which represent units of computation; and <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/Tensor" >tf.Tensor<i class="fas fa-external-link-alt"></i></a> objects, which represent the units of data that flow between operations. They are defined in a <a class="link"   href="https://www.tensorflow.org/api_docs/python/tf/Graph" >tf.Graph<i class="fas fa-external-link-alt"></i></a> context. Since these graphs are data structures, they can be saved, run, and restored all without the original Python code.</p>
<p><strong>permutation invariant</strong></p>
<p>In this context this refers to the fact that the model does not assume any spatial relationships between the features. E.g. for multilayer perceptron, you can permute the pixels and the performance would be the same. This is not the case for convolutional networks, which assume neighbourhood relations.</p>
<p>numpy -1 的作用</p>
<p><a class="link"   href="https://stackoverflow.com/questions/tagged/numpy-ndarray" >https://stackoverflow.com/questions/tagged/numpy-ndarray<i class="fas fa-external-link-alt"></i></a></p>
<p>Tensorflow.Dataset中map，shuffle，repeat，batch的总结 </p>
<p><a class="link"   href="https://blog.csdn.net/anshuai_aw1/article/details/105094548" >https://blog.csdn.net/anshuai_aw1/article/details/105094548<i class="fas fa-external-link-alt"></i></a></p>
<p>shuffle的顺序很重要，应该先shuffle再batch，如果先batch后shuffle的话，那么此时就只是对batch进行shuffle，而batch里面的数据顺序依旧是有序的，那么随机程度会减弱</p>
<p>buffer_size 越大，打乱的程度越高</p>
<p><a class="link"   href="https://www.cnblogs.com/HolyShine/p/8673322.html" >https://www.cnblogs.com/HolyShine/p/8673322.html<i class="fas fa-external-link-alt"></i></a></p>
<p>数据集的处理和预处理，非常重要</p>
<p><a class="link"   href="https://tf.wiki/zh_hans/basic/tools.html#zh-hans-tfdata" >https://tf.wiki/zh_hans/basic/tools.html#zh-hans-tfdata<i class="fas fa-external-link-alt"></i></a></p>
<p>Tensorflow Dataset API 用法</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/30751039" >https://zhuanlan.zhihu.com/p/30751039<i class="fas fa-external-link-alt"></i></a></p>
<p>Tensorflow 数据读取机制</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/27238630" >https://zhuanlan.zhihu.com/p/27238630<i class="fas fa-external-link-alt"></i></a></p>
<p>训练gpu的tricks</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/53345706" >https://zhuanlan.zhihu.com/p/53345706<i class="fas fa-external-link-alt"></i></a></p>
<p><strong><em>\</em>tensorflow的训练和教程(非常重要)</strong></p>
<p><a class="link"   href="https://tf.wiki/" >https://tf.wiki/<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="blob:file:///c0a2b963-ad70-4970-82dd-9ca515c90f18" alt="model.png"></p>
<p>python的包之类的问题</p>
<p><a class="link"   href="https://www.zhihu.com/question/430339227/answer/1577177268" >https://www.zhihu.com/question/430339227/answer/1577177268<i class="fas fa-external-link-alt"></i></a></p>
<p>Python __init__之类的问题</p>
<p><a class="link"   href="https://www.zhihu.com/question/46973549/answer/767530541" >https://www.zhihu.com/question/46973549/answer/767530541<i class="fas fa-external-link-alt"></i></a></p>
<p>nohup</p>
<p><a class="link"   href="https://www.zhihu.com/question/429726293/answer/1568963793" >https://www.zhihu.com/question/429726293/answer/1568963793<i class="fas fa-external-link-alt"></i></a></p>
<p>Pycharm 的debug</p>
<p><a class="link"   href="https://www.zhihu.com/search?type=content&q=pycharm%E6%96%AD%E7%82%B9debug" >https://www.zhihu.com/search?type=content&amp;q=pycharm%E6%96%AD%E7%82%B9debug<i class="fas fa-external-link-alt"></i></a></p>
<p>五分钟学算法</p>
<p><a class="link"   href="http://www.cxyxiaowu.com/" >http://www.cxyxiaowu.com/<i class="fas fa-external-link-alt"></i></a></p>
<p>python浅拷贝</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/KrdXyYMtyElUGuPH5eNYvg" >https://mp.weixin.qq.com/s/KrdXyYMtyElUGuPH5eNYvg<i class="fas fa-external-link-alt"></i></a></p>
<p>爬取b站的弹幕</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/OYo1VwKkUWIX9p73mvSLOQ" >https://mp.weixin.qq.com/s/OYo1VwKkUWIX9p73mvSLOQ<i class="fas fa-external-link-alt"></i></a></p>
<p>表情包</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/0Yguofg54GZSjvfUfjezmw" >https://mp.weixin.qq.com/s/0Yguofg54GZSjvfUfjezmw<i class="fas fa-external-link-alt"></i></a></p>
<p>爬去百度的表格</p>
<p><a class="link"   href="https://blog.csdn.net/wyquin/article/details/79601918" >https://blog.csdn.net/wyquin/article/details/79601918<i class="fas fa-external-link-alt"></i></a></p>
<p>python 的项目组织结构</p>
<p><a class="link"   href="https://marlous.github.io/2019/04/03/Python-%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87/" >https://marlous.github.io/2019/04/03/Python-%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87/<i class="fas fa-external-link-alt"></i></a></p>
<p>爬虫403问题</p>
<p><a class="link"   href="http://zhaoxuhui.top/blog/2017/06/19/Python%E7%88%AC%E8%99%AB403%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AE%9E%E4%BE%8B.html" >http://zhaoxuhui.top/blog/2017/06/19/Python%E7%88%AC%E8%99%AB403%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AE%9E%E4%BE%8B.html<i class="fas fa-external-link-alt"></i></a></p>
<p>Matplot 问题总结</p>
<p><a class="link"   href="https://www.jianshu.com/p/778d78463028" >https://www.jianshu.com/p/778d78463028<i class="fas fa-external-link-alt"></i></a></p>
<p>爬虫csdn 大全</p>
<p><a class="link"   href="https://blog.csdn.net/llllllkkkkkooooo/category_10129586.html" >https://blog.csdn.net/llllllkkkkkooooo/category_10129586.html<i class="fas fa-external-link-alt"></i></a></p>
<p>阿里云部署 flask</p>
<p><a class="link"   href="https://blog.csdn.net/qq_16293649/article/details/78601569?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-2&amp;spm=1001.2101.3001.4242" >https://blog.csdn.net/qq_16293649/article/details/78601569?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-2&amp;spm=1001.2101.3001.4242<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>NBA kaggle analysis</title>
    <url>/2021/01/31/nba%E4%BC%A4%E7%97%85%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>本文参考，并将其延伸至2018-2020 赛季。全文用rmd 完成，ggplot2为主要做图工具。主要想研究下各个球队和伤病之间的关系</p>
<p><a class="link"   href="https://www.kaggle.com/jaseziv83/extensive-nba-injuries-deep-dive-eda/comments" >https://www.kaggle.com/jaseziv83/extensive-nba-injuries-deep-dive-eda/comments<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h3><p><a class="link"   href="https://www.kaggle.com/ghopkins/nba-injuries-2010-2018" >https://www.kaggle.com/ghopkins/nba-injuries-2010-2018<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><ul>
<li>返回头部数据看下格式</li>
</ul>
<p>注： 这里的Acquired 和 Relinquished是呈现互补关系。若Acquired非空，则Relinquished 空</p>
<p><img src="https://pic2.zhimg.com/v2-a50518a5b79efdd79a5474d690787931_b.png" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-1fe0510282ecbea48dd9ddc9b4443f18_b.png" alt="img"></p>
<p>最后的记录是到2020-10-2.</p>
<p>发现存在很多空的列表，看下个数 （这里有一个坑就是这里的缺失值不是NA，而是“”。）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">print(colSums(df == <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-cbfbdd1564ab4f7b7c1dc9bdbf0c16a2_b.png" alt="img"></p>
<p>再看一下总体数据的size</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">glimpse(df)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-7988747e7210a3e91b0bbc730cba096f_b.png" alt="img"></p>
<h3 id="Team-列查看"><a href="#Team-列查看" class="headerlink" title="Team 列查看"></a>Team 列查看</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;% dplyr::filter(Team == <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-c3e8eb624aeebc696ec3f767dc4c92b7_b.png" alt="img"></p>
<p>这两例情况其实都是受伤了，被球队裁掉了</p>
<p>这里以大宝贝为例</p>
<p><img src="https://pic4.zhimg.com/v2-c4483ddbe7fe983ef01017ee72f34d7b_b.png" alt="img"></p>
<p>所以我们可以大胆的排除掉这两种情况</p>
<h3 id="Acquired列查看"><a href="#Acquired列查看" class="headerlink" title="Acquired列查看"></a>Acquired列查看</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  filter(Acquired != <span class="string">&quot;&quot;</span>) %&gt;%</span><br><span class="line">  count(Notes) %&gt;%</span><br><span class="line">  arrange(desc(n))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-0f2b3bff9bd82964f586314b9fdf1288_b.png" alt="img"></p>
<p>发现这是一些恢复的数据，而我们的目的是找到一些球队和伤病的问题，所以我们可以单纯的不考虑这些。正如我前面提到的那样，Acquired 和 Relinquished 是互补的，所以我们可以如下处理数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df_exc &lt;- df %&gt;%</span><br><span class="line">  filter(Acquired == <span class="string">&quot;&quot;</span>) %&gt;% <span class="comment"># 排除Acquired==““</span></span><br><span class="line">  filter(Team != <span class="string">&quot;&quot;</span>) %&gt;% <span class="comment"># 排除Team==““</span></span><br><span class="line">  select(-Acquired) <span class="string">&quot;直接删掉Acquired这一个变量&quot;</span></span><br><span class="line">print(colSums(df_exc == <span class="string">&quot;&quot;</span>)) <span class="comment"># 检查一下还有没有多的缺失值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-a0ad0f8d56cf29878a1595f21170957a_b.png" alt="img"></p>
<p>还有四个漏网之鱼，也处理掉</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Exclude some missing values in Relinquished variable</span></span><br><span class="line">df &lt;- df_exc %&gt;% filter(Relinquished != <span class="string">&quot;&quot;</span>)</span><br><span class="line">print(colSums(df == <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-a75e544978e1af2722cd77c931ec256a_b.png" alt="img"></p>
<p>到目前为止，缺失值已经处理完毕了</p>
<h3 id="以时间为单位来进行处理（转换成Date格式）"><a href="#以时间为单位来进行处理（转换成Date格式）" class="headerlink" title="以时间为单位来进行处理（转换成Date格式）"></a>以时间为单位来进行处理（转换成Date格式）</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df$year &lt;- format(as.Date(df$Date), <span class="string">&quot;%Y&quot;</span>)</span><br><span class="line">df$yr_mo &lt;- format(as.Date(df$Date), <span class="string">&quot;%Y-%m&quot;</span>)</span><br><span class="line">df$month &lt;- month(as.Date(df$Date), <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p>看一下这十年究竟谁伤病情况（包含轮休）的最多</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  count(Team) %&gt;%</span><br><span class="line">  ggplot(aes(x = reorder(Team, n), y = n)) +</span><br><span class="line">  geom_col(fill = <span class="string">&quot;midnightblue&quot;</span>, color = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">  coord_flip() +</span><br><span class="line">  theme_bw() +</span><br><span class="line">  labs(x = <span class="string">&quot;Team&quot;</span>, y = <span class="string">&quot;Number of injury events&quot;</span>, title = <span class="string">&quot;Which team has the most injury events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-4084964e3ded6dc032bebd0501494d6c_b.png" alt="img"></p>
<p>前三名分别是雄鹿，马刺和火箭。</p>
<p>由于联盟在2018 年发布了新的政策，对非伤轮休的球队会处以罚款，之前的记录可能有一些水分。所以我又做了2018年之后的数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  filter(yr_mo &gt; <span class="string">&quot;2018-09&quot;</span>) %&gt;%</span><br><span class="line">  count(Team) %&gt;%</span><br><span class="line">  ggplot(aes(x = reorder(Team, n), y = n)) +</span><br><span class="line">  geom_col(fill = <span class="string">&quot;midnightblue&quot;</span>, color = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">  coord_flip() +</span><br><span class="line">  theme_bw() +</span><br><span class="line">  labs(x = <span class="string">&quot;Team&quot;</span>, y = <span class="string">&quot;Number of injury events&quot;</span>, title = <span class="string">&quot;Which team has the most injury events since 2018-2019 season&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-afd7ae98b4b21a7187fb1099b1c019f2_b.png" alt="img"></p>
<p>马刺在本次赛季失去效力了十七年的后卫托尼·帕克，他在休赛期间选择与夏洛特黄蜂签约，而杰弗瑞·罗德曼吉、凯尔·安德森以及布兰登·保罗等重要角色球员也先后离队。这也是自2002–03赛季以来第一次没有马努·吉诺比利的赛季，他在2018年8月27日选择对外宣布退役，因此这也标志着马刺的“三巨头时代”至此已经彻底结束。2018年7月18日，马刺管理层将科怀·伦纳德和丹尼·格林交易到多伦多猛龙，以换取德玛尔·德罗赞、雅各·伯尔特和一枚受保护的2019年首轮选秀签。</p>
<p>新鲜血液的加入以及整体阵容的年轻化，马刺在2018-2019赛季几乎全员健康，受伤病影响最小。</p>
<p>此时受伤病影响最严重的前三只球队分别是凯尔特人，雄鹿和勇士。</p>
<h3 id="十年内哪位球员受伤病影响（含轮休）最多"><a href="#十年内哪位球员受伤病影响（含轮休）最多" class="headerlink" title="十年内哪位球员受伤病影响（含轮休）最多"></a>十年内哪位球员受伤病影响（含轮休）最多</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  <span class="comment">#filter(yr_mo &gt; &quot;2018-09&quot; &amp; yr_mo&lt; &quot;2019-09&quot;) %&gt;%</span></span><br><span class="line">  count(Relinquished) %&gt;%</span><br><span class="line">  arrange(desc(n)) %&gt;%</span><br><span class="line">  top_n(n = <span class="number">20</span>) %&gt;%</span><br><span class="line">  ggplot(aes(x = reorder(Relinquished, n), y = n)) +</span><br><span class="line">  geom_col(fill = <span class="string">&quot;midnightblue&quot;</span>, color = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">  coord_flip() +</span><br><span class="line">  theme_bw() +</span><br><span class="line">  labs(x = <span class="string">&quot;Player&quot;</span>, y = <span class="string">&quot;Number of injury events on players&quot;</span>, title = <span class="string">&quot;Which player has the most injury events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-04962af2c15848bb7b8e04bf9fbbd4f7_b.png" alt="img"></p>
<p>乐福，戈登和罗斯是近十年来受伤病影响最大的 （轮休也是预防伤病）</p>
<h3 id="每年nba球员受伤病伤病影响的数量"><a href="#每年nba球员受伤病伤病影响的数量" class="headerlink" title="每年nba球员受伤病伤病影响的数量"></a>每年nba球员受伤病伤病影响的数量</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">count(year, Relinquished) %&gt;%</span><br><span class="line">ggplot(aes(x = n)) +</span><br><span class="line">geom_density(color = <span class="string">&quot;midnightblue&quot;</span>, fill = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">facet_wrap(~year, scales = <span class="string">&quot;free_y&quot;</span>) +</span><br><span class="line">theme_bw() +</span><br><span class="line">labs(y = <span class="string">&quot;&quot;</span>, x = <span class="string">&quot;Number of events&quot;</span>, title = <span class="string">&quot;Number of events per player&quot;</span>, subtitle = <span class="string">&quot;Note: 2010 &amp; 2020 not a full year&quot;</span>) +</span><br><span class="line">theme(plot.title = element_text(hjust = <span class="number">0.5</span>), plot.subtitle = element_text(hjust = <span class="number">0.5</span>), panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-58c0de51e96334cf89cbf0ca34b75635_b.png" alt="img"></p>
<p>每年的分布趋势都大致相同</p>
<h3 id="NBA-球员每年受伤数量汇总（折线图）"><a href="#NBA-球员每年受伤数量汇总（折线图）" class="headerlink" title="NBA 球员每年受伤数量汇总（折线图）"></a>NBA 球员每年受伤数量汇总（折线图）</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  count(year) %&gt;%</span><br><span class="line">  ggplot(aes(x = year, y = n, group = <span class="number">1</span>)) +</span><br><span class="line">  ylim(<span class="number">0</span>, <span class="number">2700</span>) +</span><br><span class="line">  geom_line(size = <span class="number">1</span>, color = <span class="string">&quot;darkred&quot;</span>) +</span><br><span class="line">  geom_point(size = <span class="number">2</span>, color = <span class="string">&quot;midnightblue&quot;</span>) +</span><br><span class="line">  geom_text(color = <span class="string">&quot;midnightblue&quot;</span>, aes(label = n, y = n + <span class="number">100</span>)) +</span><br><span class="line">  theme_classic() +</span><br><span class="line">  labs(title = <span class="string">&quot;Tracking injury events over time&quot;</span>, subtitle = <span class="string">&quot;Note: 2010 &amp; 2018 not a full year&quot;</span>, x = <span class="string">&quot;Calendar Year&quot;</span>, y = <span class="string">&quot;Number events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>), plot.subtitle = element_text(hjust = <span class="number">0.5</span>),)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-05929610308694c35e634220a8597dd5_b.png" alt="img"></p>
<h3 id="以月为单位进行分析"><a href="#以月为单位进行分析" class="headerlink" title="以月为单位进行分析"></a>以月为单位进行分析</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df %&gt;%</span><br><span class="line">  count(month) %&gt;%</span><br><span class="line">  ggplot(aes(x = month, y = n, group = <span class="number">1</span>)) +</span><br><span class="line">  ylim(<span class="number">0</span>, <span class="number">4000</span>) +</span><br><span class="line">  geom_line(size = <span class="number">1</span>, color = <span class="string">&quot;darkred&quot;</span>) +</span><br><span class="line">  geom_point(size = <span class="number">2</span>, color = <span class="string">&quot;midnightblue&quot;</span>) +</span><br><span class="line">  geom_text(color = <span class="string">&quot;midnightblue&quot;</span>, aes(label = n, y = n + <span class="number">100</span>)) +</span><br><span class="line">  theme_classic() +</span><br><span class="line">  labs(title = <span class="string">&quot;Tracking injury events over time&quot;</span>, subtitle = <span class="string">&quot;Note: 2010 &amp; 2020 not a full year&quot;</span>, x = <span class="string">&quot;Calendar Year&quot;</span>, y = <span class="string">&quot;Number events&quot;</span>) +</span><br><span class="line">  theme(panel.grid.major.y = element_blank(), panel.background = element_rect(fill = <span class="string">&quot;whitesmoke&quot;</span>), plot.title = element_text(hjust = <span class="number">0.5</span>), plot.subtitle = element_text(hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-530dfc5a43268735c3c96e6ed366f5b2_b.png" alt="img"></p>
<p>注意：季后赛通常是四月中旬，所以一些轮休的球员，一些小伤病的球员通常会选择在季后赛前复出，所以伤病情况会有一个显著的下降，然后是休赛期，到了九月联赛开打，不可避免的伤病会逐渐增多</p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>kaggle</tag>
        <tag>EDA</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令</title>
    <url>/2021/02/03/2021-02-03-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Docker-的常用命令"><a href="#Docker-的常用命令" class="headerlink" title="Docker 的常用命令"></a>Docker 的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version # 显示docker的版本信息</span><br><span class="line">docker info    # 显示docker的系统信息，包括镜像和容器</span><br><span class="line">docker 命令 --help #帮助命令</span><br></pre></td></tr></table></figure>
<p>帮助文档的地址：<a class="link"   href="https://docs.docker.com/engine/reference/commandline/docker/" >https://docs.docker.com/engine/reference/commandline/docker/<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong> 查看所有本地主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker images </span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql         latest    c8562eaf9d81   2 weeks ago     546MB</span><br><span class="line">centos        latest    300e315adb2f   2 months ago    209MB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像的id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             (列出所有镜像)Show all images (default hides intermediate images)</span><br><span class="line">  -q, --quiet           （只显示镜像的id）Only show image IDs</span><br></pre></td></tr></table></figure>
<p>**docker serach **搜索镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10471     [OK]       </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3894      [OK]       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">--filter=STARS=3000 # 搜索出来的镜像是STAR&gt;3000的</span><br><span class="line"></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker search mysql --filter=STARS=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   10471     [OK]       </span><br><span class="line">mariadb   MariaDB is a community-developed fork of MyS…   3894      [OK]   </span><br></pre></td></tr></table></figure>
<p><strong>docker pull 下载</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[：tag]</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker pull mysql</span><br><span class="line">Using default tag: latest #如果不写tag，默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">a076a628af6f: Pull complete  #分层下载，docker image 的核心，联合文件系统</span><br><span class="line">f6c208f3f991: Pull complete </span><br><span class="line">88a9455a9165: Pull complete </span><br><span class="line">406c9b8427c6: Pull complete </span><br><span class="line">7c88599c0b25: Pull complete </span><br><span class="line">25b5c6debdaf: Pull complete </span><br><span class="line">43a5816f1617: Pull complete </span><br><span class="line">1a8c919e89bf: Pull complete </span><br><span class="line">9f3cf4bd1a07: Pull complete </span><br><span class="line">80539cea118d: Pull complete </span><br><span class="line">201b3cad54ce: Pull complete </span><br><span class="line">944ba37e1c06: Pull complete </span><br><span class="line">Digest: sha256:feada149cb8ff54eade1336da7c1d080c4a1c7ed82b5e320efb5beebed85ae8c#签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两者等价</span></span><br><span class="line">docker pull mysql </span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line"></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker images </span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql         5.7       a70d36bc331a   2 weeks ago     449MB</span><br><span class="line">mysql         latest    c8562eaf9d81   2 weeks ago     546MB</span><br></pre></td></tr></table></figure>


<p><strong>删除镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi -f 镜像id # 删除指定的容器 镜像id</span><br><span class="line">docker rmi -f 镜像id，镜像id，镜像id # 删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 删除全部的镜像</span><br></pre></td></tr></table></figure>


<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：我们有了镜像才可以创建容，Linux，下载一个centos来进行学习</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<p><strong>新建容器并且启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot; #容器名字 tomcat01, tomcat02, 用来区分容器</span><br><span class="line">-d 						#后台方式进行运行</span><br><span class="line">-it 					#使用交互方式运行，进入容器查看内容</span><br><span class="line">-p 						#指定容器的端口 -p 8080：8080</span><br><span class="line">	-p ip: 主机端口：容器端口</span><br><span class="line">	-p 主机端：容器端口（常用）</span><br><span class="line">	-p 容器端口</span><br><span class="line">-P						#随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动，并且进入命令</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@87d185b2076b /]# ls #查看内部的centos</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@203dae537771 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz /]# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz /]# </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>列出所有正在运行中的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令</span></span><br><span class="line">-a #列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器</span><br><span class="line">-q # 只显示容器的编号</span><br></pre></td></tr></table></figure>
<p><strong>退出容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit #直接停止容器并且退出</span><br><span class="line">Ctrl + P + Q # 容器不停止退出</span><br></pre></td></tr></table></figure>
<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id # 删除指定的容器, 不能删除正在运行的，要删除的rm-f</span><br><span class="line">docker rm -f $(docker ps -aq) # 删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有的容器</span><br></pre></td></tr></table></figure>
<p><strong>启动和停止容器的操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker restart 容器id # 重启容器 </span><br><span class="line">docker kill 容器id # 强制停止</span><br></pre></td></tr></table></figure>


<h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><p><strong>后台启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 docker run -d 镜像名</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker run -d centos </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">问题docker ps 发现centos停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑，docker 容器用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx，容器启动后，发现自己没有提供服务，就会立即停止，没有程序了</span></span><br></pre></td></tr></table></figure>


<p><strong>查看日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 容器，没有日志</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">自己编写一段脚本</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker run -d centos /bin/sh -c &quot;while true;do echo print;sleep 1;done&quot;</span><br><span class="line"></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">7c922733df50   centos    &quot;/bin/sh -c &#x27;while t…&quot;   42 seconds ago   Up 41 seconds             goofy_knuth</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示日志</span></span><br><span class="line">-tf  f是follow指持续输出日志内容；t代表一个时间戳</span><br><span class="line"></span><br><span class="line">--tail number # 要显示日志的条数</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker logs -tf --tail 10 0fd350596b56</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>查看容器中的进程信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令docker top 容器id</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker top 0fd350596b56 </span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                13201               13169               0                   08:42               ?                   00:00:00            /bin/sh -c while true;do echo print;sleep 1;done</span><br><span class="line">root                14630               13201               0                   09:04               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>查看镜像的元数据</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker inspect 0fd350596b56 </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-02-08T00:42:27.388342152Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo print;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 13201,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-02-08T00:42:27.823500663Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f/0fd350596b565a75cf4a859d777692ef24a4de80305ab6e71152ba1154a6788f-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/friendly_khayyam&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c-init/diff:/var/lib/docker/overlay2/da23e695d17a9e7ed2ad81c9f2486a4cbdec8e601031b2b660fddf001f3fe9a2/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/ee52de2dd296ae5bb006ba95edba9fd29b171fb48b030ad8d0d98f8c4d3be36c/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;0fd350596b56&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo print;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;ccabded2409ffbc145c5130acb301ea392e0063c9c012f4d3562f6fcb1efb71c&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/ccabded2409f&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;fd9e4c4d71b0dba8b4dda169059ead023d887a2498f857da737236c786ef2641&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;efde225ef685bc98209337a5cdd4d66bb8a8f85d8762be2fca7313ad00d353bc&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;fd9e4c4d71b0dba8b4dda169059ead023d887a2498f857da737236c786ef2641&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>进入当前正在运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exec -it 容器id bashshell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">0fd350596b56   centos    &quot;/bin/sh -c &#x27;while t…&quot;   27 minutes ago   Up 27 minutes             friendly_khayyam</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker exec -it 0fd350596b56 /bin/bash</span><br><span class="line">[root@0fd350596b56 /]# ls </span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@0fd350596b56 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 00:42 ?        00:00:00 /bin/sh -c while true;do echo print;sleep 1;done</span><br><span class="line">root      1660     0  0 01:09 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1681     1  0 01:09 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root      1682  1660  0 01:09 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz ~]# docker attach 0fd350596b56</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> <span class="comment"># 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker attach <span class="comment"># 进入容器正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></table></figure>
<p><strong>从容器内拷贝文件到主机上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器id：容器内路径 目的主机路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前主机目录下</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# ls </span><br><span class="line">admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入当前容器内部 （也可以用attach 命令）</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker run -it centos /bin/bash</span><br><span class="line">[root@6442d7af4f41 /]# cd /home  </span><br><span class="line">[root@6442d7af4f41 home]# ls </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内创建一个新的文件</span></span><br><span class="line">[root@6442d7af4f41 home]# touch test.java</span><br><span class="line">[root@6442d7af4f41 home]# exit </span><br><span class="line">exit</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker ps -a </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">6442d7af4f41   centos    &quot;/bin/bash&quot;   41 seconds ago   Exited (0) 17 seconds ago              ecstatic_aryabhata</span><br><span class="line">97b8ac803f12   centos    &quot;/bin/bash&quot;   3 minutes ago    Exited (127) 2 minutes ago             elastic_thompson</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件拷贝到主机上</span></span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# docker cp 6442d7af4f41:/home/test.java /home</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# ls </span><br><span class="line">admin  test.java</span><br><span class="line">[root@iz2zeihuhu3ktzymn2ydktz home]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用-v 卷的技术，可以实现，自动同步</span> </span><br></pre></td></tr></table></figure>


<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.4e00.com%2Fblog%2Fimg%2Flinux%2Fdocker%2Fdocker-commands.png&refer=http%3A%2F%2Fwww.4e00.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1615339851&t=03dc8021bab2635051350bab0bfc51eb" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach     Attach to a running container             #当前she1l下attach连接指定运行镜像</span><br><span class="line">build      Build an image from a Dockerfile          #通过Dockerfile 定制镜像</span><br><span class="line">commit     Create a new image from a container changes #提交当前容器为新的镜像</span><br><span class="line">cp         Copy files/folders from the containers filesystem to the host path #从容器中拷贝指定文件或者目 #录到宿主机中</span><br><span class="line">create     Create a new container #创建一个新的容器，同run， 但不启动容器</span><br><span class="line">diff       Inspect changes on a containers filesys tem #查看docker 容器变化</span><br><span class="line">events     Get real time events from the server #从docker 服务获取容器实时事件</span><br><span class="line">exec       Run a command in an existing container #在已存在的容器上运行命令</span><br><span class="line">export     Stream the contents of a container as a tar archive#导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line">history    Show the history of an image #展示一个镜像形成历史</span><br><span class="line">images     List images #列出系统当前镜像</span><br><span class="line">import     Create a new filesystem image from the contents of a tarball #从tar包 中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info 			 Display sys tem-wide informati on #显示系统相关信息</span><br><span class="line">inspect		 Return 1ow-1eve1 information on a container #查看容器详细信息</span><br><span class="line">ki1l 			 Ki1l a running container # ki11 指定docker 容器</span><br><span class="line">load 			 Load an image from a tar archive #从一个tar包中加载一个镜像[对应save]</span><br><span class="line">login			 Register or Login to the docker registry server #注册或者登陆一个docker 源服务器</span><br><span class="line">1ogout		 Log out from a Docker registry server #从当前Docker registry 退出</span><br><span class="line">1ogs			 Fetch the logs of a container #输出当前容器日志信息</span><br><span class="line">port			 Lookup the pub1ic-facing port which is NAT-ed to PRIVATE_ PORT #查看映射端口对应的容器内部源端口</span><br><span class="line">pause 		 Pause a11 processes within a container #暂停容器</span><br><span class="line">ps 				 List containers #列出容器列表</span><br><span class="line">pu11 			 Pu11 an image or a repository from the docker registry server #从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push 			 Push an image or a repository to the docker registry server #推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart 	 Restart a running container #重启运行的容器</span><br><span class="line">rm 				 Remove one or more containers #移除一个或者多个容器</span><br><span class="line">rmi 			 Remove one or more i mages #移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]</span><br><span class="line">run 			 Run a command in a new container #创建一个新的容器并运行一个命令</span><br><span class="line">save 			 Save an image to a tar archive #保存一个镜像为一个tar 包[对应load]</span><br><span class="line">search 	   search for an image on the Dockerhub #在dockerhub中搜索镜像</span><br><span class="line">start      Start a stopped containers #启动容器</span><br><span class="line">stop       Stop a running containers #停止容器</span><br><span class="line">tag 			 tag an image into a repository #给源中镜像打标签</span><br><span class="line">top		 		 Lookup the runring processes of a container #查看容器中运行的进程信息</span><br><span class="line">unpause 	 Unpause a paused container #取消暂停容器</span><br><span class="line">version 	 Show the docker version information #查看docker版本号</span><br><span class="line">wait 			 Block until a container stops，then print its exit code #截取容器停止时的退出状态值</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 回顾</title>
    <url>/2021/02/10/2021-02-10-Java-%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<h1 id="JAVA-基础知识复习"><a href="#JAVA-基础知识复习" class="headerlink" title="JAVA 基础知识复习"></a>JAVA 基础知识复习</h1><p>视频地址：</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV12J41137hu?t=2607&amp;p=80" >https://www.bilibili.com/video/BV12J41137hu?t=2607&amp;p=80<i class="fas fa-external-link-alt"></i></a></p>
<p>相关笔记：</p>
<h3 id="数据类型以及面试拓展"><a href="#数据类型以及面试拓展" class="headerlink" title="数据类型以及面试拓展"></a>数据类型以及面试拓展</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">010</span>; <span class="comment">// 八进制 0</span></span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">0x10</span>; <span class="comment">//十六进制0x</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      ================================</span></span><br><span class="line"><span class="comment">//        浮点数</span></span><br><span class="line"><span class="comment">//        银行类用BigDecimal</span></span><br><span class="line"><span class="comment">//        float 有限 离散 舍入误差</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        最好完全避免使用浮点数进行比较</span></span><br><span class="line"><span class="comment">//        最好完全避免使用浮点数进行比较</span></span><br><span class="line"><span class="comment">//        最好完全避免使用浮点数进行比较</span></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.1f</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1.0</span> / <span class="number">10</span>;</span><br><span class="line">        System.out.println(f==d);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        =================================</span></span><br><span class="line"><span class="comment">//        强制转换</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)c1); <span class="comment">// 强制转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        所有的字符串本质还是数字</span></span><br><span class="line"><span class="comment">//        编码 Unicode 2 字节 （97 = a ）</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;\u0061&#x27;</span>;</span><br><span class="line">        System.out.println(c3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        转义字符</span></span><br><span class="line"><span class="comment">//        \t 制表符</span></span><br><span class="line"><span class="comment">//        \n 换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        =============================</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        String sa = <span class="keyword">new</span> String(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        String sb = <span class="keyword">new</span> String(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        System.out.println(sa==sb);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String sc = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        String sd = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        System.out.println(sc==sd);</span><br><span class="line">        <span class="comment">// 对象 内存的关系</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i; <span class="comment">//内存溢出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小数优先级永远高于整数</span></span><br><span class="line">        <span class="comment">// 强制转换，（类型）变量 高-低</span></span><br><span class="line">        <span class="comment">// 自动转换 低-高</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        注意点：</span></span><br><span class="line"><span class="comment">        1。 不能对布尔值进行转换</span></span><br><span class="line"><span class="comment">        2。 不能把对象类型转换为不相关的类型</span></span><br><span class="line"><span class="comment">        3。 在把高容量转换到低容量的时候，强制转换</span></span><br><span class="line"><span class="comment">        4。 转换的时候可能存在内存溢出，或者精度的问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)<span class="number">23.7</span>);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)-<span class="number">45.89f</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> d = c + <span class="number">1</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="溢出的问题"><a href="#溢出的问题" class="headerlink" title="溢出的问题"></a>溢出的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 操作比较大的数的时候，注意溢出的问题</span></span><br><span class="line">        <span class="comment">// JDK7 的新特性，数字之间可以使用下划线来进行分割</span></span><br><span class="line">        <span class="keyword">int</span> money = <span class="number">10_0000_0000</span>;</span><br><span class="line">        <span class="keyword">int</span> years = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> total = money * years;</span><br><span class="line">        <span class="keyword">long</span> total2 = money * years;</span><br><span class="line">        <span class="keyword">long</span> total3 = money * (<span class="keyword">long</span>) years;</span><br><span class="line"></span><br><span class="line">        System.out.println(total);</span><br><span class="line">        System.out.println(total2);</span><br><span class="line">        System.out.println(total3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo08</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性：变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例变量：从属于对象；如果不自省初始化，这个类型的默认值0，0.0</span></span><br><span class="line">    <span class="comment">// 布尔值：默认是false</span></span><br><span class="line">    <span class="comment">// 除了基本类型，其余的默认走都是null</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//局部变量，必须声明和初始化值得量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 变量类型 变量名字 = new demo08</span></span><br><span class="line">        demo08 Demo08 = <span class="keyword">new</span> demo08();</span><br><span class="line">        System.out.println(Demo08.age);</span><br><span class="line">        System.out.println(Demo08.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类变量 static</span></span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="位运算-效率考虑"><a href="#位运算-效率考虑" class="headerlink" title="位运算(效率考虑)"></a>位运算(效率考虑)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A = 0011 1100</span></span><br><span class="line"><span class="comment">        B = 0000 1101</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        A&amp;B = 0000 1100</span></span><br><span class="line"><span class="comment">        A|B = 0011 1101</span></span><br><span class="line"><span class="comment">        A^B = 0011 0001</span></span><br><span class="line"><span class="comment">        ~B = 1111 0010</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2*8  = 16 怎么最快2*2*2*2 (计算机是不会乘除法的)</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        位运算，效率极高</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;&lt;  相当于 *2</span></span><br><span class="line"><span class="comment">        &gt;&gt;  相当于 /2</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        0000 0000 0</span></span><br><span class="line"><span class="comment">        0000 0001 1</span></span><br><span class="line"><span class="comment">        0000 0010 2</span></span><br><span class="line"><span class="comment">        0000 0011 3</span></span><br><span class="line"><span class="comment">        0000 0100 4</span></span><br><span class="line"><span class="comment">        0000 1000 8</span></span><br><span class="line"><span class="comment">        0001 0000 16</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        a += b; <span class="comment">//a = a+b</span></span><br><span class="line">        a -= b;<span class="comment">// a = a-b</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串连接符 + ， String</span></span><br><span class="line">        <span class="comment">// 注意第一个是什么就会运行什么样子的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + a + b);</span><br><span class="line">        System.out.println(a + b + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="三元运算符（if的更简单的写法形式）"><a href="#三元运算符（if的更简单的写法形式）" class="headerlink" title="三元运算符（if的更简单的写法形式）"></a>三元运算符（if的更简单的写法形式）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//x?y:z</span></span><br><span class="line">        <span class="comment">//如果x==true，则结果为y，否则结果为z</span></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line">        String type = score &lt; <span class="number">60</span> ? <span class="string">&quot;不及格&quot;</span>:<span class="string">&quot;及格&quot;</span>; <span class="comment">//必须掌握，让代码更加精简，且容易掌握</span></span><br><span class="line">        System.out.println(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.base;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yuxuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doc</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@authore</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过命令行生成JavaDoc文档！ </span></span><br><span class="line"><span class="comment">// 命令行进入到包所在的地址，然后输入：javadoc -encoding UTF-8 -charset UTF-8 Doc.java </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Scanner-对象"><a href="#Scanner-对象" class="headerlink" title="Scanner 对象"></a>Scanner 对象</h3><p>Next():</p>
<pre><code>1. 一定要读取到有效字符后菜可以结束输入
2. 对输入有效字符之前遇到的空白，next（）会将其自动去掉
3. 只有输入有效字符后才讲其后面输入的空白作为分隔符或者结束符号
4. next（）不能得到带有空格的字符串</code></pre>
<p>nextLine（）：</p>
<ol>
<li>以enter作为结束符号，也就是说nexline（）方法返回的是回车之前的字母</li>
<li>可以获得空白</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个扫描器对象，用于接受键盘数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式来接受： &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出内容是： &quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯用完就关闭</span></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用nextLine方式来接受： &quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="Switch-case-语句"><a href="#Switch-case-语句" class="headerlink" title="Switch case 语句"></a>Switch case 语句</h3><p>注意case的穿透特性，建议加上break</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//case 穿透 //switch 匹配一个具体的值</span></span><br><span class="line">        <span class="keyword">char</span> grade = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;再接再厉&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 可选 ，但是建议加上，否则容易穿透</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知等级&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="方法（methods）"><a href="#方法（methods）" class="headerlink" title="方法（methods）"></a>方法（methods）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(max(1, 2));</span></span><br><span class="line">        <span class="keyword">int</span> max = max(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(max );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1==num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//终止方法</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">            result = num1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>Java 都是值传递</strong></p>
<h3 id="方法的重载（override）"><a href="#方法的重载（override）" class="headerlink" title="方法的重载（override）"></a>方法的重载（override）</h3><ul>
<li>重载就是在一个类中，有相同的函数名称，但是形式参数不同的函数</li>
<li>方法的重载规则：<ul>
<li>方法名称必须相同</li>
<li>参数列表必须不同（个数不同，或者类型不同，参数排列顺序不同等）</li>
<li>方法的返回类型可以相同也可以不相同</li>
<li>仅仅返回类型不同不足以成为方法的重载</li>
</ul>
</li>
</ul>
<h3 id="命令行传参数"><a href="#命令行传参数" class="headerlink" title="命令行传参数"></a>命令行传参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//args.length 数组长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]: &quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先用javac 打包成一个class文件</p>
<p>然后注意要退回到src文件才可以调用，因为里面有一个包的成分</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在方法声明中，在指定参数类型后加一个省略好（…）</p>
<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数，任何普通的参数都必须在它之前声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printMax(<span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">56.5</span>);</span><br><span class="line">        printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;no argument passed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &gt; result) &#123;</span><br><span class="line">                result = numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The max value is &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><ul>
<li>递归头：什么时候<strong>不调用自身方法</strong>。如果没有头，就会陷入死循环</li>
<li>递归体：什么时候需要调用自身的方法</li>
</ul>
<p>基数比较小的数字建议用递归，如果数字太多，会出现压栈，然后内存溢出</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li>数组是相同类型数据的有序集合</li>
<li>数组描述的是相同类型的若干数据，按照一定的先后次序排列组合而成</li>
<li>其中一个数据称作一个数组元素，每个数组元素可以通过一个下标来进行访问（从0开始）</li>
</ul>
<p>数组的声明以及创建</p>
<ul>
<li>首先必须声明数组变量，才能在程序中使用数组</li>
<li>java使用new来创建数组</li>
<li>数组的元素是通过索引来进行访问的，数组索引从</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 变量的类型 变量的名字 = 变量的值；</span></span><br><span class="line">    <span class="comment">// 数组的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums; <span class="comment">//1. 定义</span></span><br><span class="line"><span class="comment">//        int nums2[]; //2.效果相同，但不是首选的方法</span></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">// 这里面可以存在10个变量</span></span><br><span class="line">        <span class="comment">//3. 给数组元素来进行赋值</span></span><br><span class="line">        nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">        nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">        nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">        nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        System.out.println(nums[1]);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum = sum + nums[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210213225954841.11k4g6aaa2cg.png" alt="image-20210213225954841"></p>
<p>Java 内存</p>
<ul>
<li>堆：<ul>
<li>存放new的对象和数组</li>
<li>可以被所有的线程共享，不会存在别的对象引用</li>
</ul>
</li>
<li>栈：<ul>
<li>存放基本变量类型（包含这个基本类型的具体数值）</li>
<li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
</ul>
</li>
<li>方法区：<ul>
<li>可以被所有的线程共享</li>
<li>包含了所有的class和static的变量</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210213231032055.57d6zgn6z2g0.png" alt="image-20210213231032055"></p>
<p><strong>数组的默认初始化</strong></p>
<p>​    -     数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也会被按照实例变量同样的方式被隐式初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态初始化： 创建+赋值</span></span><br><span class="line">        <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">//        System.out.println(a[0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态初始化 包含默认初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul>
<li>其长度是确定的。数组一旦被创建，它的大小就是不可以被改变的</li>
<li>其元素必须是相同类型的，不允许出现混合类型</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，java 的对象都是在堆中的，因此数组无论保存<strong>原始类型</strong>还是其他<strong>对象类型</strong>，==数组对象本身是在堆中的==</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 这种方式适合遍历数组 JDK1.5，没有下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int array : arrays) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(array);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        printArray(arrays);</span></span><br><span class="line">        <span class="keyword">int</span>[] reverse = reverse(arrays);</span><br><span class="line">        printArray(reverse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数组元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> []arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.print(arrays[i] + <span class="string">&quot; &quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span> arrays[]) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其中每一个元素都是一个一维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>]</span><br><span class="line"> <span class="comment">// 一个二行五列的数组</span></span><br></pre></td></tr></table></figure>


<h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9090</span>, <span class="number">32132</span>, <span class="number">543</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">23</span>&#125;;</span><br><span class="line"><span class="comment">//        System.out.println(a);</span></span><br><span class="line">        <span class="comment">// 不建议重复造轮子</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印数组元素Arrays.toString(a)</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组进行排序</span></span><br><span class="line"></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fill 填充</span></span><br><span class="line">        Arrays.fill(a,<span class="number">0</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">34</span>, <span class="number">56</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="comment">// 1. 比较数组中两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span></span><br><span class="line">    <span class="comment">// 2. 每一次比较，都会产生出一个最大或者最小的数字</span></span><br><span class="line">    <span class="comment">// 3. 下一次可以少一次排序</span></span><br><span class="line">    <span class="comment">// 4. 以此循环，直到结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array ) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//通过flag标识符来减少没有意义比较</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">                    tmp = array[j];</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="keyword">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们看到嵌套循环，应该立马就可以得出这个算法的时间复杂度为O(n2)</p>
<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><ul>
<li>当一个数组大部分的元素为0，或者为同一值的数组时候，可以用稀疏数组来保存该数组</li>
<li>稀疏数组的处理方式一般是：<ul>
<li>记录数组一共有几航几列，有多少个不同的值</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuxuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个二维数组11*11， 0 没有棋子， 1：黑棋，2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//        输出原始数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为稀疏数组</span></span><br><span class="line">        <span class="comment">// 获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值的个数是：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历二维数组，将非零的值，存放在稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输出稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                    array2[i][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                    array2[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> [][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 给其中的元素还原它的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><ul>
<li>面向过程思想 （线性思维）<ul>
<li>步骤清晰简单，第一步做什么第二部做什么</li>
<li>面对过程适合处理一些较为简单的问题</li>
</ul>
</li>
<li>面向对象思想<ul>
<li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些类进行单独思考，最后才对某个分类下的细节进行面向过程的思索</li>
<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题</li>
<li>属性+方法就是一个类</li>
</ul>
</li>
<li>对于描述复杂的事物，为了从宏观上进行把握，从整体上进行合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到围观操作，荏苒需要使用面向过程的思路来进行处理</li>
</ul>
<p>OOP本质：==以类的方式组织代码，以对象的组织（封装）数据==</p>
<p>三大特性：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<p>从认识角度考虑是先有对象，后有类</p>
<p>对象，是具体的事物</p>
<p>类，是抽象的，是对对象的抽象</p>
<p><strong>类是一种抽象的数据类型，它是对某一类食物的整体描述/定义，但是并不能代表某一个具体的事物</strong></p>
<ul>
<li>动物，植物，手机，电脑</li>
<li>Person 类，Pet类，Car类，这些类是用来描述/定义某一类具体的事物应该具备的特点和行为</li>
</ul>
<p><strong>对象是抽象概念的具体实例</strong></p>
<ul>
<li>张三是人的一个具体实例，张三家里的旺财就是狗的一个具体实例</li>
<li>能狗体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态方法 static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student.say();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态方法</span></span><br><span class="line">    <span class="comment">// 实例化这个类 new</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static 是和类一起加载的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        b(); //会报错 （但如果两个method都是static不会，都不是，也不会；只有一个是另一个不是才出错）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类实例化之后才存在的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实际参数和形式参数的值需要保持一致</span></span><br><span class="line">        <span class="keyword">int</span> add = Demo03.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        Demo04.change(a);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回值是空</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用传递：对象， 本质还是值传递</span></span><br><span class="line"><span class="comment">// 引用传递是传递的类的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象，内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line">        Demo05.change(person);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// person 是一个对象：指向的是---&gt; Person person = new Person() 这是一个具体的人，属性可以改变</span></span><br><span class="line">        person.name = <span class="string">&quot;yuxuan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了一个Person 类，有一个属性：name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h3><ul>
<li><strong>使用new关键字创建对象</strong></li>
<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及类中构造器的调用</li>
<li>类中构造器也被称为构造方法，实在进行穿件对象的时候必须要调用的。并且构造器有一下几个特点<ul>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写void</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"><span class="comment">// 一个项目最好只有一个main方法，测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类抽象的，需要实例化</span></span><br><span class="line">        <span class="comment">// 类实例化后会返回一个自己的对象！</span></span><br><span class="line">        <span class="comment">// student 对象就是一个Student类的具体实例！</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaoming = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line"></span><br><span class="line">        xiaoming.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        xiaoming.age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p><strong>构造器</strong><br>    1. 和类名相同<br>    2. 没有返回值<br><strong>作用</strong><br>    1. new 本质在调用构造方法<br>    2. 初始化对象的值<br><strong>注意点：</strong><br>    1. 定义有参构造后，如果想使用无参构造，显示的定义一个无参的构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个类即使什么都不写，也会存在一个方法</span></span><br><span class="line">    <span class="comment">// 显示的定义一个构造器</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化初始值</span></span><br><span class="line">    <span class="comment">// 1. 使用new关键字，必须是在调用构造器</span></span><br><span class="line">    <span class="comment">// 2. 用来初始化值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.name = &quot;yuxuan&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造:一旦定义了有参构造，无参就必须显示定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//control + N 自动生成构造器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//        Person person = new Person();</span></span><br><span class="line"><span class="comment">        Person person = new Person(&quot;yuxuan&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(person.name);</span></span><br><span class="line"><span class="comment"> 构造器：</span></span><br><span class="line"><span class="comment"> 1。 和类名相同</span></span><br><span class="line"><span class="comment"> 2。 没有返回值</span></span><br><span class="line"><span class="comment"> 作用</span></span><br><span class="line"><span class="comment"> 1。 new 本质在调用构造方法</span></span><br><span class="line"><span class="comment"> 2。 初始化对象的值</span></span><br><span class="line"><span class="comment"> 注意点：</span></span><br><span class="line"><span class="comment"> 1。 定义有参构造后，如果想使用无参构造，显示的定义一个无参的构造</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> alt+ N</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> this. = 参数传进来的值</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<h3 id="创建对象内存与分析"><a href="#创建对象内存与分析" class="headerlink" title="创建对象内存与分析"></a>创建对象内存与分析</h3><p>堆：存储对象和数组元素，栈：存储系统调用变量（例如引用）</p>
<p>堆：存放new的数组和对象，栈：存放基本变量类型和引用变量</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210214170938226.us87tdkrnv4.png" alt="image-20210214170938226"></p>
<h3 id="类与对象的小结"><a href="#类与对象的小结" class="headerlink" title="类与对象的小结"></a>类与对象的小结</h3><ol>
<li>类与对象<ol>
<li>类是一个模版，对象是一个具体的实例</li>
</ol>
</li>
<li>方法<ol>
<li>定义，调用</li>
</ol>
</li>
<li>对象的引用<ol>
<li>引用类型：八大基本类型（8）</li>
<li>对象是通过引用来操作的：栈–》堆</li>
</ol>
</li>
<li>属性：字段field 成员变量<ol>
<li>默认初始化<ol>
<li>数字： 0， 0.0</li>
<li>char： u0000</li>
<li>boolean：false</li>
<li>引用： null</li>
<li>修饰符 属性类型 属性名 = 属性值</li>
</ol>
</li>
</ol>
</li>
<li>对象的创建和使用<ol>
<li><ul>
<li>必须使用new 关键字创建对象 构造器 Person Yuxuan = new Person</li>
<li>对象的属性：yuxuan.name</li>
<li>对象的方法：yuxuan.sleep()</li>
</ul>
</li>
</ol>
</li>
<li>类<ol>
<li>静态的属性 属性</li>
<li>动态的行为 方法</li>
</ol>
</li>
<li>封装，继承，多态</li>
</ol>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><code>高内聚，低耦合</code>:</p>
<p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</p>
<p>低耦合：尽量暴露少量的方法给外部使用</p>
<p><code>封装</code>（数据的隐藏）</p>
<ul>
<li>通常，应该禁止访问一个对象中数据的实际表示，而应该通过操作接口来进行访问，这称为信息的隐藏</li>
</ul>
<p>==属性私有，get/set==</p>
<p><strong>好处</strong>：</p>
<ol>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>提高系统的可维护性</li>
</ol>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>extends</p>
<ul>
<li>继承是类和类之间的关系</li>
<li>继承关系的两个类，一个是父类，一个是子类</li>
<li>在Java中，所有的类，都默认直接或者间接继承Object类</li>
</ul>
<p>control+h 可以看结构</p>
<p><strong>java类中只有单继承，没有多继承</strong></p>
<p>私有的可以被继承，但拒绝被访问（无法继承）</p>
<p>调用弗雷德构造器，必须要在子类的第一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;dacy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>super</strong> <strong>注意点</strong></p>
<ol>
<li>super调用父类的构造方法，必须在狗仔方法的第一个</li>
<li>super 必须只能出现在子类的方法或者构造方法中！</li>
<li>super 和this不能同时调用构造方式</li>
</ol>
<p><strong>VS this:</strong></p>
<ul>
<li><p>代表的对象不同：</p>
<p>this: 本身调用者的这个对象</p>
<p>super：代表父类对象的应用</p>
</li>
<li><p>前提</p>
<p>this：没有继承也可以使用</p>
<p>super：只能在继承条件下才可以使用</p>
</li>
<li><p>构造方法</p>
<p>this() 本类的构造</p>
<p>super() :父类的构造</p>
</li>
</ul>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>需要有继承关系，子类重写父类的方法！</p>
<ol>
<li>方法名称必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大：public&gt;Protected&gt;default&gt;private</li>
<li>抛出的异常:范围，可以被缩小，但不能扩大：ClassNotFoundException –&gt; Exception</li>
</ol>
<p>重写，子类的方法和父类的必须要一致：方法体不同</p>
<p>为什么需要重写：</p>
<ol>
<li>父类的功能，子类不一定需要，或者不一定满足！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        <span class="comment">// 静态方法： 方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 非静态：重写</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A(); <span class="comment">// 子类重写了父类的方法</span></span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul>
<li>动态编译：类型：可扩展性更强</li>
<li>统一方法可以根据发送对象的不同而采取不同的行为方式</li>
<li>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类，有关系的类）</li>
</ul>
<p><strong>多态存在的条件</strong></p>
<ol>
<li>有继承的关系</li>
<li>子类重写父类方法</li>
<li>父类引用指向子类的对象</li>
</ol>
<p><strong>注意事项</strong>：</p>
<ol>
<li>多态是方法的多态，属性没有多态</li>
<li>父类和子类，有联系 类型转换异常！ClassCastException</li>
<li>存在的条件：继承关系，方法需要重写，父类的引用指向子类对象<ol>
<li>static 方法，属于累，它不属于实例</li>
<li>final 常量</li>
<li>private 方法</li>
</ol>
</li>
</ol>
<p>instanceof （类型转换） 引用类型，判断一个对象是什么类型</p>
<ol>
<li>父类引用指向子类的对象</li>
<li>把子类转换为父类，向上转型；可以直接转过去</li>
<li>把父类转换为子类，向下转型，强制转换</li>
<li>方便方法的调用，减少重复的代码！简洁</li>
<li>：抽象：封装，继承，多态</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">// new Person();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以指向的引用类型就不确定了：父类的引用指向了子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Student 能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Person 父类型，但是不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line"></span><br><span class="line">        s2.run(); <span class="comment">// 子类重写了父亲的方法。执行子类的方法</span></span><br><span class="line">        ((Student)s2).eat(); <span class="comment">//子类重写类父类的方法，执行了子类的方法</span></span><br><span class="line">        s1.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object&gt;String</span></span><br><span class="line">        <span class="comment">//Obj&gt;Person&gt;Student</span></span><br><span class="line">        <span class="comment">//Obj&gt;Person&gt;Teacher</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(X instanceof Y); // 能不能编译通过！判断X和Y是否有父子关系</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);</span><br><span class="line"><span class="comment">//        System.out.println(person instanceof String); 编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);</span><br><span class="line"><span class="comment">//        System.out.println(student instanceof Teacher);编译报错</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof String); 编译报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person obj = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//obj 将这个对象转换为Student类，我们就可以使用Student类型的方法了</span></span><br><span class="line">        <span class="comment">// 高 &gt; 低 转需要强制转换</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//子类转换成父类，可能丢失自己本来的一些方法</span></span><br><span class="line">        Student student = (Student) obj;</span><br><span class="line">        student.go();</span><br><span class="line"></span><br><span class="line">        ((Student)obj).go(); <span class="comment">// 想要用子类的方法就直接强制转换就行啦</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>类加载过程中将静态变量，静态方法，常量存入到方法区</p>
<p>静态方法只执行一次</p>
<p>Final 后面断子绝孙</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2 赋初始值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码块（匿名）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代码快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 </span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 不能new这个抽象类，只能靠子类去实现它：约束</span></span><br><span class="line"><span class="comment">//2. 抽象类中可以写普通的方法～</span></span><br><span class="line"><span class="comment">//3. 抽象方法必须在抽象类中～</span></span><br><span class="line"><span class="comment">// 抽象的抽象：约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在的意义，提高开发效率</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.oop.demo08;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; abstract 抽象类：类 extends： 单继承 ～ 接口可以多继承 插座</span><br><span class="line">public abstract class Action &#123;</span><br><span class="line">    &#x2F;&#x2F; 约束～有人帮我吗实现～</span><br><span class="line">    &#x2F;&#x2F; abstract，抽象方法，只有方法名字，没有方法的实现！</span><br><span class="line">public abstract void doSomething();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1. 不能new这个抽象类，只能靠子类去实现它：约束</span><br><span class="line">&#x2F;&#x2F;2. 抽象类中可以写普通的方法～</span><br><span class="line">&#x2F;&#x2F;3. 抽象方法必须在抽象类中～</span><br><span class="line">&#x2F;&#x2F; 抽象的抽象：约束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>本质：契约</p>
<p>接口：interface</p>
<p>作用：</p>
<ol>
<li>约束</li>
<li>定义一些方法，让不同的人实现</li>
<li>public abstract final</li>
<li>接口不能被实例化，接口中没有构造方法～</li>
<li>implements可以实现多个接口</li>
<li>必须要重写接口中的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类： extends</span></span><br><span class="line"><span class="comment">// 类可以实现接口 implement 接口</span></span><br><span class="line"><span class="comment">// 实现了接口的类，就需要重写接口中的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多继承～利用接口实现多继承～</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的思维 Java</span></span><br><span class="line"><span class="comment">// interface 是定义的关键字，接口都需要有实现的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 接口中的所有定义其实都是抽象的public</span></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line"><span class="comment">//    public static int final AGE = 99;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获得外部类的私有属性～</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">// 通过这个外部类来实例化内部类</span></span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.in();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个java类中可以有多个class类，但是只能有一个public class</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210215111612243.5dlgkhhid0g.png" alt="image-20210215111612243"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuxuanwu17/image-hosting@master/image-20210215111941652.79xf5xr1emg0.png" alt="image-20210215111941652"></p>
<h3 id="异常的处理机制"><a href="#异常的处理机制" class="headerlink" title="异常的处理机制"></a>异常的处理机制</h3><p>抛出/捕获异常</p>
<p>Idea 快捷键 option+command+T</p>
<p>主动跑出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo07.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Test2().test(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>java protected关键字： 同包不同级</p>
<ul>
<li>基类的 protected 成员是包内可见的，并且对子类可见；</li>
<li>若子类与基类不在同一包中，那么在子类中，子类实例可以访问其从基类继承而来的protected方法，而不能访问基类实例的protected方法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
      </tags>
  </entry>
</search>
